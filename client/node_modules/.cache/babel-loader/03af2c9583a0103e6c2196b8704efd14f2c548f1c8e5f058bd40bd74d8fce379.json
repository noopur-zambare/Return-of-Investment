{"ast":null,"code":"var _jsxFileName = \"/Users/noopurnishikantzambare/Downloads/ROI Website/client/src/components/ColumnFilter.js\";\nimport React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { default as ReactSelect, components } from \"react-select\";\nimport { parse } from \"papaparse\"; // CSV parsing library\nimport \"./ColumnFilter.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Option = props => {\n  return /*#__PURE__*/_jsxDEV(components.Option, {\n    ...props,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: \"flex\",\n        alignItems: \"center\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"checkbox\",\n        checked: props.isSelected,\n        onChange: () => null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n        style: {\n          color: \"black\",\n          marginLeft: \"8px\",\n          textAlign: \"left\",\n          flex: \"1\",\n          fontSize: \"14px\"\n        },\n        children: props.label\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 16,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 5\n  }, this);\n};\n_c = Option;\nconst customStyles = {\n  control: provided => ({\n    ...provided,\n    backgroundColor: \"white\",\n    color: \"black\",\n    fontSize: \"16px\"\n  }),\n  option: (provided, state) => ({\n    ...provided,\n    backgroundColor: state.isFocused ? \"#e6f7ff\" : \"transparent\",\n    // Change the hover color\n    color: \"black\",\n    fontSize: \"14px\"\n  })\n};\nexport default class Example extends Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = selected => {\n      const {\n        columnNames\n      } = this.state;\n      if (selected && selected.length === columnNames.length) {\n        if (selected.some(option => option.value === \"select-all\")) {\n          // \"Select All\" option is selected\n          this.handleSelectAll();\n          return;\n        }\n      }\n      this.setState({\n        optionSelected: selected\n      });\n    };\n    this.handleSelectAll = () => {\n      const {\n        columnNames\n      } = this.state;\n      const selectedOptions = [{\n        value: \"select-all\",\n        label: \"Select All\"\n      }, ...columnNames.map(name => ({\n        value: name,\n        label: name\n      }))];\n      this.setState({\n        optionSelected: selectedOptions\n      });\n    };\n    this.state = {\n      optionSelected: null,\n      columnNames: [],\n      csvData: []\n    };\n  }\n  componentDidMount() {\n    // Load the CSV file from a relative path\n    const csvFilePath = require(\"./data.csv\");\n    fetch(csvFilePath).then(response => response.text()).then(csvText => {\n      const {\n        data\n      } = parse(csvText, {\n        header: true\n      });\n      const columnNames = Object.keys(data[0]);\n      const csvData = data.map(row => Object.values(row));\n      this.setState({\n        columnNames,\n        csvData\n      });\n    }).catch(error => {\n      console.error(\"Error loading CSV file:\", error);\n    });\n  }\n  render() {\n    const {\n      columnNames,\n      optionSelected,\n      csvData\n    } = this.state;\n    const topRows = csvData.slice(0, 3); // Display only the top 3 rows\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [columnNames.length > 0 && /*#__PURE__*/_jsxDEV(ReactSelect, {\n        styles: customStyles,\n        options: [{\n          value: \"select-all\",\n          label: \"Select All\"\n        }, ...columnNames.map(name => ({\n          value: name,\n          label: name\n        }))],\n        isMulti: true,\n        closeMenuOnSelect: false,\n        hideSelectedOptions: false,\n        components: {\n          Option\n        },\n        onChange: this.handleChange,\n        allowSelectAll: true,\n        value: optionSelected,\n        placeholder: \"Columns of provided dataset\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this), topRows.length > 0 && /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"csv-table\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: columnNames.map(name => /*#__PURE__*/_jsxDEV(\"th\", {\n              children: name\n            }, name, false, {\n              fileName: _jsxFileName,\n              lineNumber: 132,\n              columnNumber: 19\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 130,\n            columnNumber: 15\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 129,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: topRows.map((row, index) => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: row.map((value, colIndex) => /*#__PURE__*/_jsxDEV(\"td\", {\n              children: value\n            }, colIndex, false, {\n              fileName: _jsxFileName,\n              lineNumber: 140,\n              columnNumber: 21\n            }, this))\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 138,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this);\n  }\n}\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render( /*#__PURE__*/_jsxDEV(Example, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 153,\n  columnNumber: 17\n}, this), rootElement);\nvar _c;\n$RefreshReg$(_c, \"Option\");","map":{"version":3,"names":["React","Component","ReactDOM","default","ReactSelect","components","parse","jsxDEV","_jsxDEV","Option","props","children","style","display","alignItems","type","checked","isSelected","onChange","fileName","_jsxFileName","lineNumber","columnNumber","color","marginLeft","textAlign","flex","fontSize","label","_c","customStyles","control","provided","backgroundColor","option","state","isFocused","Example","constructor","handleChange","selected","columnNames","length","some","value","handleSelectAll","setState","optionSelected","selectedOptions","map","name","csvData","componentDidMount","csvFilePath","require","fetch","then","response","text","csvText","data","header","Object","keys","row","values","catch","error","console","render","topRows","slice","styles","options","isMulti","closeMenuOnSelect","hideSelectedOptions","allowSelectAll","placeholder","className","index","colIndex","rootElement","document","getElementById","$RefreshReg$"],"sources":["/Users/noopurnishikantzambare/Downloads/ROI Website/client/src/components/ColumnFilter.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { default as ReactSelect, components } from \"react-select\";\nimport { parse } from \"papaparse\"; // CSV parsing library\nimport \"./ColumnFilter.css\";\n\nconst Option = (props) => {\n  return (\n    <components.Option {...props}>\n      <div style={{ display: \"flex\", alignItems: \"center\" }}>\n        <input\n          type=\"checkbox\"\n          checked={props.isSelected}\n          onChange={() => null}\n        />\n        <label\n          style={{\n            color: \"black\",\n            marginLeft: \"8px\",\n            textAlign: \"left\",\n            flex: \"1\",\n            fontSize: \"14px\",\n          }}\n        >\n          {props.label}\n        </label>\n      </div>\n    </components.Option>\n  );\n};\n\nconst customStyles = {\n  control: (provided) => ({\n    ...provided,\n    backgroundColor: \"white\",\n    color: \"black\",\n    fontSize: \"16px\",\n  }),\n  option: (provided, state) => ({\n    ...provided,\n    backgroundColor: state.isFocused ? \"#e6f7ff\" : \"transparent\", // Change the hover color\n    color: \"black\",\n    fontSize: \"14px\",\n  }),\n};\n\nexport default class Example extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      optionSelected: null,\n      columnNames: [],\n      csvData: [],\n    };\n  }\n\n  componentDidMount() {\n    // Load the CSV file from a relative path\n    const csvFilePath = require(\"./data.csv\");\n\n    fetch(csvFilePath)\n      .then((response) => response.text())\n      .then((csvText) => {\n        const { data } = parse(csvText, { header: true });\n        const columnNames = Object.keys(data[0]);\n        const csvData = data.map((row) => Object.values(row));\n        this.setState({ columnNames, csvData });\n      })\n      .catch((error) => {\n        console.error(\"Error loading CSV file:\", error);\n      });\n  }\n\n  handleChange = (selected) => {\n    const { columnNames } = this.state;\n    if (selected && selected.length === columnNames.length) {\n      if (selected.some((option) => option.value === \"select-all\")) {\n        // \"Select All\" option is selected\n        this.handleSelectAll();\n        return;\n      }\n    }\n\n    this.setState({\n      optionSelected: selected,\n    });\n  };\n\n  handleSelectAll = () => {\n    const { columnNames } = this.state;\n    const selectedOptions = [\n      { value: \"select-all\", label: \"Select All\" },\n      ...columnNames.map((name) => ({ value: name, label: name })),\n    ];\n    this.setState({\n      optionSelected: selectedOptions,\n    });\n  };\n  \n\n  render() {\n    const { columnNames, optionSelected, csvData } = this.state;\n    const topRows = csvData.slice(0, 3); // Display only the top 3 rows\n\n    return (\n      <div>\n        {columnNames.length > 0 && (\n          <ReactSelect\n            styles={customStyles}\n            options={[\n              { value: \"select-all\", label: \"Select All\" },\n              ...columnNames.map((name) => ({ value: name, label: name })),\n            ]}\n            isMulti\n            closeMenuOnSelect={false}\n            hideSelectedOptions={false}\n            components={{\n              Option,\n            }}\n            onChange={this.handleChange}\n            allowSelectAll={true}\n            value={optionSelected}\n            placeholder=\"Columns of provided dataset\"\n          />\n        )}\n\n        {topRows.length > 0 && (\n          <table className=\"csv-table\">\n            <thead>\n              <tr>\n                {columnNames.map((name) => (\n                  <th key={name}>{name}</th>\n                ))}\n              </tr>\n            </thead>\n            <tbody>\n              {topRows.map((row, index) => (\n                <tr key={index}>\n                  {row.map((value, colIndex) => (\n                    <td key={colIndex}>{value}</td>\n                  ))}\n                </tr>\n              ))}\n            </tbody>\n          </table>\n        )}\n      </div>\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Example />, rootElement);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}