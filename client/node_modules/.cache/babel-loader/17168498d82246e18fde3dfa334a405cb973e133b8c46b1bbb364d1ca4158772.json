{"ast":null,"code":"var _jsxFileName = \"/Users/noopurnishikantzambare/Downloads/ROI Website/client/src/components/Results.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport { Line, Chart } from 'react-chartjs-2';\nimport { format } from 'date-fns';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Results = () => {\n  _s();\n  const [data, setData] = useState([]);\n  const chartRef = useRef(null);\n\n  // Function to handle button click event\n  const handleClick = async () => {\n    try {\n      // Make a request to the API endpoint in app.py\n      const response = await axios.get('/api/get_data');\n      const responseData = response.data;\n\n      // Check if the response data is an array\n      if (Array.isArray(responseData)) {\n        // Update the data state\n        setData(responseData);\n\n        // Redraw the chart\n        chartRef.current.chartInstance.update();\n      } else {\n        console.log('Invalid data format');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Chart.js configuration\n  const chartOptions = {\n    // Chart options here\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-dropdown\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Load Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 7\n    }, this), data && data.length > 0 ? /*#__PURE__*/_jsxDEV(Line, {\n      ref: chartRef,\n      data: {\n        datasets: [{\n          label: 'Data',\n          data: data\n        }]\n      },\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 5\n  }, this);\n};\n_s(Results, \"mp7vRvFC1pDTJ9Kd4kUcMJJWo9g=\");\n_c = Results;\nexport default Results;\nvar _c;\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"names":["React","useState","useRef","axios","Line","Chart","format","jsxDEV","_jsxDEV","Results","_s","data","setData","chartRef","handleClick","response","get","responseData","Array","isArray","current","chartInstance","update","console","log","error","chartOptions","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","length","ref","datasets","label","options","_c","$RefreshReg$"],"sources":["/Users/noopurnishikantzambare/Downloads/ROI Website/client/src/components/Results.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport { Line, Chart } from 'react-chartjs-2';\nimport { format } from 'date-fns';\n\nconst Results = () => {\n  const [data, setData] = useState([]);\n  const chartRef = useRef(null);\n\n  // Function to handle button click event\n  const handleClick = async () => {\n    try {\n      // Make a request to the API endpoint in app.py\n      const response = await axios.get('/api/get_data');\n      const responseData = response.data;\n\n      // Check if the response data is an array\n      if (Array.isArray(responseData)) {\n        // Update the data state\n        setData(responseData);\n\n        // Redraw the chart\n        chartRef.current.chartInstance.update();\n      } else {\n        console.log('Invalid data format');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // Chart.js configuration\n  const chartOptions = {\n    // Chart options here\n  };\n\n  return (\n    <div className=\"grid-dropdown\">\n      <button onClick={handleClick}>Load Data</button>\n      {data && data.length > 0 ? (\n        <Line\n          ref={chartRef}\n          data={{\n            datasets: [\n              {\n                label: 'Data',\n                data: data,\n              },\n            ],\n          }}\n          options={chartOptions}\n        />\n      ) : (\n        <p>No data available</p>\n      )}\n    </div>\n  );\n};\n\nexport default Results;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,EAAEC,KAAK,QAAQ,iBAAiB;AAC7C,SAASC,MAAM,QAAQ,UAAU;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAMY,QAAQ,GAAGX,MAAM,CAAC,IAAI,CAAC;;EAE7B;EACA,MAAMY,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF;MACA,MAAMC,QAAQ,GAAG,MAAMZ,KAAK,CAACa,GAAG,CAAC,eAAe,CAAC;MACjD,MAAMC,YAAY,GAAGF,QAAQ,CAACJ,IAAI;;MAElC;MACA,IAAIO,KAAK,CAACC,OAAO,CAACF,YAAY,CAAC,EAAE;QAC/B;QACAL,OAAO,CAACK,YAAY,CAAC;;QAErB;QACAJ,QAAQ,CAACO,OAAO,CAACC,aAAa,CAACC,MAAM,CAAC,CAAC;MACzC,CAAC,MAAM;QACLC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MACpC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACpB;EACF,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG;IACnB;EAAA,CACD;EAED,oBACElB,OAAA;IAAKmB,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BpB,OAAA;MAAQqB,OAAO,EAAEf,WAAY;MAAAc,QAAA,EAAC;IAAS;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC/CtB,IAAI,IAAIA,IAAI,CAACuB,MAAM,GAAG,CAAC,gBACtB1B,OAAA,CAACJ,IAAI;MACH+B,GAAG,EAAEtB,QAAS;MACdF,IAAI,EAAE;QACJyB,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,MAAM;UACb1B,IAAI,EAAEA;QACR,CAAC;MAEL,CAAE;MACF2B,OAAO,EAAEZ;IAAa;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,gBAEFzB,OAAA;MAAAoB,QAAA,EAAG;IAAiB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACxB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACvB,EAAA,CApDID,OAAO;AAAA8B,EAAA,GAAP9B,OAAO;AAsDb,eAAeA,OAAO;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}