{"ast":null,"code":"var _jsxFileName = \"/Users/noopurnishikantzambare/Downloads/ROI Website/client/src/components/ChartComponent.js\",\n  _s = $RefreshSig$();\nimport OscarData from './data.csv';\nimport Papa from 'papaparse';\nimport { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nfunction Home() {\n  _s();\n  const [chartData, setChartData] = useState({\n    datasets: []\n  });\n  const [chartOptions, setChartOptions] = useState({});\n  const [labelCountData, setLabelCountData] = useState(null);\n  useEffect(() => {\n    Papa.parse(OscarData, {\n      download: true,\n      header: true,\n      dynamicTyping: true,\n      delimiter: \"\",\n      complete: result => {\n        console.log(result);\n        const labelCounts = {}; // Object to store label counts\n\n        result.data.forEach(item => {\n          const label = item['req1Product'];\n          if (label) {\n            if (labelCounts[label]) {\n              labelCounts[label] += 1;\n            } else {\n              labelCounts[label] = 1;\n            }\n          }\n        });\n        setChartData({\n          labels: Object.keys(labelCounts),\n          datasets: [{\n            label: \"Count\",\n            data: Object.values(labelCounts),\n            borderColor: \"black\",\n            backgroundColor: \"red\"\n          }]\n        });\n        setChartOptions({\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            title: {\n              display: true,\n              text: \"Count of req1Product Values\"\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: \"Count\"\n              }\n            }\n          },\n          onClick: (event, activeElements) => {\n            if (activeElements.length > 0) {\n              const labelIndex = activeElements[0].index;\n              const clickedLabel = chartData.labels[labelIndex];\n              const clickedLabelCount = chartData.datasets[0].data[labelIndex];\n\n              // Create a new chart for the label count\n              const labelCountChartData = {\n                labels: [\"0\", \"1\"],\n                datasets: [{\n                  label: \"Count\",\n                  data: [clickedLabelCount, 0],\n                  borderColor: [\"black\", \"black\"],\n                  backgroundColor: [\"red\", \"blue\"]\n                }]\n              };\n              const labelCountChartOptions = {\n                responsive: true,\n                plugins: {\n                  legend: {\n                    position: 'top'\n                  },\n                  title: {\n                    display: true,\n                    text: `Count of 0 and 1 Values for ${clickedLabel}`\n                  }\n                },\n                scales: {\n                  y: {\n                    beginAtZero: true,\n                    title: {\n                      display: true,\n                      text: \"Count\"\n                    }\n                  }\n                }\n              };\n              setLabelCountData({\n                chartData: labelCountChartData,\n                chartOptions: labelCountChartOptions\n              });\n            }\n          }\n        });\n      }\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"HOME PAGE\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), chartData.datasets.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Bar, {\n        options: chartOptions,\n        data: chartData\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 11\n      }, this), labelCountData && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          children: [\"Label: \", chartData.labels[labelIndex]]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 130,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(Bar, {\n          options: labelCountData.chartOptions,\n          data: labelCountData.chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 126,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 136,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"f/AKe5Vf8mXaWZ7ggD4ljJUOET8=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["OscarData","Papa","useEffect","useState","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","Home","_s","chartData","setChartData","datasets","chartOptions","setChartOptions","labelCountData","setLabelCountData","parse","download","header","dynamicTyping","delimiter","complete","result","console","log","labelCounts","data","forEach","item","label","labels","Object","keys","values","borderColor","backgroundColor","responsive","plugins","legend","position","title","display","text","scales","y","beginAtZero","onClick","event","activeElements","length","labelIndex","index","clickedLabel","clickedLabelCount","labelCountChartData","labelCountChartOptions","children","fileName","_jsxFileName","lineNumber","columnNumber","options","_c","$RefreshReg$"],"sources":["/Users/noopurnishikantzambare/Downloads/ROI Website/client/src/components/ChartComponent.js"],"sourcesContent":["import OscarData from './data.csv';\nimport Papa from 'papaparse';\nimport { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\n\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nfunction Home() {\n  const [chartData, setChartData] = useState({\n    datasets: []\n  });\n  const [chartOptions, setChartOptions] = useState({});\n  const [labelCountData, setLabelCountData] = useState(null);\n\n  useEffect(() => {\n    Papa.parse(OscarData, {\n      download: true,\n      header: true,\n      dynamicTyping: true,\n      delimiter: \"\",\n      complete: ((result) => {\n        console.log(result);\n        const labelCounts = {}; // Object to store label counts\n\n        result.data.forEach((item) => {\n          const label = item['req1Product'];\n\n          if (label) {\n            if (labelCounts[label]) {\n              labelCounts[label] += 1;\n            } else {\n              labelCounts[label] = 1;\n            }\n          }\n        });\n\n        setChartData({\n          labels: Object.keys(labelCounts),\n          datasets: [\n            {\n              label: \"Count\",\n              data: Object.values(labelCounts),\n              borderColor: \"black\",\n              backgroundColor: \"red\"\n            }\n          ]\n        });\n\n        setChartOptions({\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            title: {\n              display: true,\n              text: \"Count of req1Product Values\"\n            }\n          },\n          scales: {\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: \"Count\"\n              }\n            }\n          },\n          onClick: (event, activeElements) => {\n            if (activeElements.length > 0) {\n              const labelIndex = activeElements[0].index;\n              const clickedLabel = chartData.labels[labelIndex];\n              const clickedLabelCount = chartData.datasets[0].data[labelIndex];\n\n              // Create a new chart for the label count\n              const labelCountChartData = {\n                labels: [\"0\", \"1\"],\n                datasets: [\n                  {\n                    label: \"Count\",\n                    data: [clickedLabelCount, 0],\n                    borderColor: [\"black\", \"black\"],\n                    backgroundColor: [\"red\", \"blue\"]\n                  }\n                ]\n              };\n\n              const labelCountChartOptions = {\n                responsive: true,\n                plugins: {\n                  legend: {\n                    position: 'top'\n                  },\n                  title: {\n                    display: true,\n                    text: `Count of 0 and 1 Values for ${clickedLabel}`\n                  }\n                },\n                scales: {\n                  y: {\n                    beginAtZero: true,\n                    title: {\n                      display: true,\n                      text: \"Count\"\n                    }\n                  }\n                }\n              };\n\n              setLabelCountData({\n                chartData: labelCountChartData,\n                chartOptions: labelCountChartOptions\n              });\n            }\n          }\n        });\n      })\n    });\n  }, []);\n\n  return (\n    <div>\n      <h1>HOME PAGE</h1>\n      {chartData.datasets.length > 0 ? (\n        <div>\n          <Bar options={chartOptions} data={chartData} />\n          {labelCountData && (\n            <div>\n              <h2>Label: {chartData.labels[labelIndex]}</h2>\n              <Bar options={labelCountData.chartOptions} data={labelCountData.chartData} />\n            </div>\n          )}\n        </div>\n      ) : (\n        <div>Loading...</div>\n      )}\n    </div>\n  );\n}\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}