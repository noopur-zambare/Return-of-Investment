{"ast":null,"code":"import React from 'react';\nimport { withProps } from '../utils';\nconst {\n  arrayOf,\n  bool,\n  func,\n  oneOfType,\n  shape,\n  string\n} = React.PropTypes;\nconst groupShape = shape({\n  all: func\n});\nconst stackShape = shape({\n  group: groupShape.isRequired,\n  name: string,\n  accessor: func\n});\nconst stackType = oneOfType([groupShape, stackShape]);\nexport default withProps({\n  hidableStacks: bool,\n  stack: {\n    propTypes: oneOfType([stackType, arrayOf(stackType)]),\n    setter(method, val) {\n      const stacks = [].concat(val);\n      stacks.forEach(stack => {\n        if (stack.group && stack.name && stack.accessor) {\n          method(stack.group, stack.name, stack.accessor);\n        } else {\n          method(stack);\n        }\n      });\n    }\n  },\n  stackLayout: func,\n  title: {\n    propTypes: shape({\n      stackName: string,\n      titleAccessor: func\n    }),\n    setter(method, val) {\n      method(val.stackName, val.titleAccessor);\n    }\n  }\n});","map":{"version":3,"names":["React","withProps","arrayOf","bool","func","oneOfType","shape","string","PropTypes","groupShape","all","stackShape","group","isRequired","name","accessor","stackType","hidableStacks","stack","propTypes","setter","method","val","stacks","concat","forEach","stackLayout","title","stackName","titleAccessor"],"sources":["/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/react-dc/dist/module/mixins/stack-mixin.js"],"sourcesContent":["import React from 'react';\nimport { withProps } from '../utils';\n\nconst { arrayOf, bool, func, oneOfType, shape, string } = React.PropTypes;\n\nconst groupShape = shape({\n  all: func\n});\n\nconst stackShape = shape({\n  group: groupShape.isRequired,\n  name: string,\n  accessor: func\n});\n\nconst stackType = oneOfType([groupShape, stackShape]);\n\nexport default withProps({\n  hidableStacks: bool,\n  stack: {\n    propTypes: oneOfType([stackType, arrayOf(stackType)]),\n    setter(method, val) {\n      const stacks = [].concat(val);\n      stacks.forEach(stack => {\n        if (stack.group && stack.name && stack.accessor) {\n          method(stack.group, stack.name, stack.accessor);\n        } else {\n          method(stack);\n        }\n      });\n    }\n  },\n  stackLayout: func,\n  title: {\n    propTypes: shape({\n      stackName: string,\n      titleAccessor: func\n    }),\n    setter(method, val) {\n      method(val.stackName, val.titleAccessor);\n    }\n  }\n});"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,SAAS,QAAQ,UAAU;AAEpC,MAAM;EAAEC,OAAO;EAAEC,IAAI;EAAEC,IAAI;EAAEC,SAAS;EAAEC,KAAK;EAAEC;AAAO,CAAC,GAAGP,KAAK,CAACQ,SAAS;AAEzE,MAAMC,UAAU,GAAGH,KAAK,CAAC;EACvBI,GAAG,EAAEN;AACP,CAAC,CAAC;AAEF,MAAMO,UAAU,GAAGL,KAAK,CAAC;EACvBM,KAAK,EAAEH,UAAU,CAACI,UAAU;EAC5BC,IAAI,EAAEP,MAAM;EACZQ,QAAQ,EAAEX;AACZ,CAAC,CAAC;AAEF,MAAMY,SAAS,GAAGX,SAAS,CAAC,CAACI,UAAU,EAAEE,UAAU,CAAC,CAAC;AAErD,eAAeV,SAAS,CAAC;EACvBgB,aAAa,EAAEd,IAAI;EACnBe,KAAK,EAAE;IACLC,SAAS,EAAEd,SAAS,CAAC,CAACW,SAAS,EAAEd,OAAO,CAACc,SAAS,CAAC,CAAC,CAAC;IACrDI,MAAMA,CAACC,MAAM,EAAEC,GAAG,EAAE;MAClB,MAAMC,MAAM,GAAG,EAAE,CAACC,MAAM,CAACF,GAAG,CAAC;MAC7BC,MAAM,CAACE,OAAO,CAACP,KAAK,IAAI;QACtB,IAAIA,KAAK,CAACN,KAAK,IAAIM,KAAK,CAACJ,IAAI,IAAII,KAAK,CAACH,QAAQ,EAAE;UAC/CM,MAAM,CAACH,KAAK,CAACN,KAAK,EAAEM,KAAK,CAACJ,IAAI,EAAEI,KAAK,CAACH,QAAQ,CAAC;QACjD,CAAC,MAAM;UACLM,MAAM,CAACH,KAAK,CAAC;QACf;MACF,CAAC,CAAC;IACJ;EACF,CAAC;EACDQ,WAAW,EAAEtB,IAAI;EACjBuB,KAAK,EAAE;IACLR,SAAS,EAAEb,KAAK,CAAC;MACfsB,SAAS,EAAErB,MAAM;MACjBsB,aAAa,EAAEzB;IACjB,CAAC,CAAC;IACFgB,MAAMA,CAACC,MAAM,EAAEC,GAAG,EAAE;MAClBD,MAAM,CAACC,GAAG,CAACM,SAAS,EAAEN,GAAG,CAACO,aAAa,CAAC;IAC1C;EACF;AACF,CAAC,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}