{"ast":null,"code":"/*!\n *  dc 4.2.7\n *  http://dc-js.github.io/dc.js/\n *  Copyright 2012-2021 Nick Zhu & the dc.js Developers\n *  https://github.com/dc-js/dc.js/blob/master/AUTHORS\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n\n(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3'), require('d3'), require('d3'), require('d3'), require('d3'), require('d3'), require('d3'), require('d3'), require('d3'), require('d3'), require('d3'), require('d3'), require('d3'), require('d3'), require('d3'), require('d3'), require('d3'), require('d3'), require('d3')) : typeof define === 'function' && define.amd ? define(['exports', 'd3', 'd3', 'd3', 'd3', 'd3', 'd3', 'd3', 'd3', 'd3', 'd3', 'd3', 'd3', 'd3', 'd3', 'd3', 'd3', 'd3', 'd3', 'd3'], factory) : (global = global || self, factory(global.dc = {}, global.d3, global.d3, global.d3, global.d3, global.d3, global.d3, global.d3, global.d3, global.d3, global.d3, global.d3, global.d3, global.d3, global.d3, global.d3, global.d3, global.d3, global.d3, global.d3));\n})(this, function (exports, d3TimeFormat, d3Time, d3Format, d3Selection, d3Dispatch, d3Array, d3Scale, d3Interpolate, d3ScaleChromatic, d3Axis, d3Zoom, d3Brush, d3Timer, d3Shape, d3Geo, d3Ease, d3Hierarchy, d3, d3Collection) {\n  'use strict';\n\n  const version = \"4.2.7\";\n  class BadArgumentException extends Error {}\n  const constants = {\n    CHART_CLASS: 'dc-chart',\n    DEBUG_GROUP_CLASS: 'debug',\n    STACK_CLASS: 'stack',\n    DESELECTED_CLASS: 'deselected',\n    SELECTED_CLASS: 'selected',\n    NODE_INDEX_NAME: '__index__',\n    GROUP_INDEX_NAME: '__group_index__',\n    DEFAULT_CHART_GROUP: '__default_chart_group__',\n    EVENT_DELAY: 40,\n    NEGLIGIBLE_NUMBER: 1e-10\n  };\n\n  /**\n   * Provides basis logging and deprecation utilities\n   */\n  class Logger {\n    constructor() {\n      /**\n       * Enable debug level logging. Set to `false` by default.\n       * @name enableDebugLog\n       * @memberof Logger\n       * @instance\n       */\n      this.enableDebugLog = false;\n      this._alreadyWarned = {};\n    }\n\n    /**\n     * Put a warning message to console\n     * @example\n     * logger.warn('Invalid use of .tension on CurveLinear');\n     * @param {String} [msg]\n     * @returns {Logger}\n     */\n    warn(msg) {\n      if (console) {\n        if (console.warn) {\n          console.warn(msg);\n        } else if (console.log) {\n          console.log(msg);\n        }\n      }\n      return this;\n    }\n\n    /**\n     * Put a warning message to console. It will warn only on unique messages.\n     * @example\n     * logger.warnOnce('Invalid use of .tension on CurveLinear');\n     * @param {String} [msg]\n     * @returns {Logger}\n     */\n    warnOnce(msg) {\n      if (!this._alreadyWarned[msg]) {\n        this._alreadyWarned[msg] = true;\n        logger.warn(msg);\n      }\n      return this;\n    }\n\n    /**\n     * Put a debug message to console. It is controlled by `logger.enableDebugLog`\n     * @example\n     * logger.debug('Total number of slices: ' + numSlices);\n     * @param {String} [msg]\n     * @returns {Logger}\n     */\n    debug(msg) {\n      if (this.enableDebugLog && console) {\n        if (console.debug) {\n          console.debug(msg);\n        } else if (console.log) {\n          console.log(msg);\n        }\n      }\n      return this;\n    }\n  }\n  const logger = new Logger();\n\n  /**\n   * General configuration\n   */\n  class Config {\n    constructor() {\n      this._defaultColors = Config._schemeCategory20c;\n\n      /**\n       * The default date format for dc.js\n       * @type {Function}\n       * @default d3.timeFormat('%m/%d/%Y')\n       */\n      this.dateFormat = d3TimeFormat.timeFormat('%m/%d/%Y');\n      this._renderlet = null;\n\n      /**\n       * If this boolean is set truthy, all transitions will be disabled, and changes to the charts will happen\n       * immediately.\n       * @type {Boolean}\n       * @default false\n       */\n      this.disableTransitions = false;\n    }\n\n    /**\n     * Set the default color scheme for ordinal charts. Changing it will impact all ordinal charts.\n     *\n     * By default it is set to a copy of\n     * `d3.schemeCategory20c` for backward compatibility. This color scheme has been\n     * [removed from D3v5](https://github.com/d3/d3/blob/master/CHANGES.md#changes-in-d3-50).\n     * In DC 3.1 release it will change to a more appropriate default.\n     *\n     * @example\n     * config.defaultColors(d3.schemeSet1)\n     * @param {Array} [colors]\n     * @returns {Array|config}\n     */\n    defaultColors(colors) {\n      if (!arguments.length) {\n        // Issue warning if it uses _schemeCategory20c\n        if (this._defaultColors === Config._schemeCategory20c) {\n          logger.warnOnce('You are using d3.schemeCategory20c, which has been removed in D3v5. ' + 'See the explanation at https://github.com/d3/d3/blob/master/CHANGES.md#changes-in-d3-50. ' + 'DC is using it for backward compatibility, however it will be changed in DCv3.1. ' + 'You can change it by calling dc.config.defaultColors(newScheme). ' + 'See https://github.com/d3/d3-scale-chromatic for some alternatives.');\n        }\n        return this._defaultColors;\n      }\n      this._defaultColors = colors;\n      return this;\n    }\n  }\n\n  // D3v5 has removed schemeCategory20c, copied here for backward compatibility\n  Config._schemeCategory20c = ['#3182bd', '#6baed6', '#9ecae1', '#c6dbef', '#e6550d', '#fd8d3c', '#fdae6b', '#fdd0a2', '#31a354', '#74c476', '#a1d99b', '#c7e9c0', '#756bb1', '#9e9ac8', '#bcbddc', '#dadaeb', '#636363', '#969696', '#bdbdbd', '#d9d9d9'];\n\n  /**\n   * General configuration object; see {@link Config} for members.\n   */\n  const config = new Config();\n\n  /**\n   * d3.js compatiblity layer\n   */\n  const d3compat = {\n    eventHandler: handler => function eventHandler(a, b) {\n      console.warn('No d3.js compatbility event handler registered, defaulting to v6 behavior.');\n      handler.call(this, b, a);\n    },\n    nester: _ref => {\n      let {\n        key,\n        sortKeys,\n        sortValues,\n        entries\n      } = _ref;\n      throw new Error('No d3.js compatbility nester registered, load v5 or v6 compability layer.');\n    },\n    pointer: () => {\n      throw new Error('No d3.js compatbility pointer registered, load v5 or v6 compability layer.');\n    }\n  };\n\n  /**\n   * The ChartRegistry maintains sets of all instantiated dc.js charts under named groups\n   * and the default group. There is a single global ChartRegistry object named `chartRegistry`\n   *\n   * A chart group often corresponds to a crossfilter instance. It specifies\n   * the set of charts which should be updated when a filter changes on one of the charts or when the\n   * global functions {@link filterAll filterAll}, {@link refocusAll refocusAll},\n   * {@link renderAll renderAll}, {@link redrawAll redrawAll}, or chart functions\n   * {@link baseMixin#renderGroup baseMixin.renderGroup},\n   * {@link baseMixin#redrawGroup baseMixin.redrawGroup} are called.\n   */\n  class ChartRegistry {\n    constructor() {\n      // chartGroup:string => charts:array\n      this._chartMap = {};\n    }\n    _initializeChartGroup(group) {\n      if (!group) {\n        group = constants.DEFAULT_CHART_GROUP;\n      }\n      if (!this._chartMap[group]) {\n        this._chartMap[group] = [];\n      }\n      return group;\n    }\n\n    /**\n     * Determine if a given chart instance resides in any group in the registry.\n     * @param {Object} chart dc.js chart instance\n     * @returns {Boolean}\n     */\n    has(chart) {\n      for (const e in this._chartMap) {\n        if (this._chartMap[e].indexOf(chart) >= 0) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    /**\n     * Add given chart instance to the given group, creating the group if necessary.\n     * If no group is provided, the default group `constants.DEFAULT_CHART_GROUP` will be used.\n     * @param {Object} chart dc.js chart instance\n     * @param {String} [group] Group name\n     * @return {undefined}\n     */\n    register(chart, group) {\n      const _chartMap = this._chartMap;\n      group = this._initializeChartGroup(group);\n      _chartMap[group].push(chart);\n    }\n\n    /**\n     * Remove given chart instance from the given group, creating the group if necessary.\n     * If no group is provided, the default group `constants.DEFAULT_CHART_GROUP` will be used.\n     * @param {Object} chart dc.js chart instance\n     * @param {String} [group] Group name\n     * @return {undefined}\n     */\n    deregister(chart, group) {\n      group = this._initializeChartGroup(group);\n      for (let i = 0; i < this._chartMap[group].length; i++) {\n        if (this._chartMap[group][i].anchorName() === chart.anchorName()) {\n          this._chartMap[group].splice(i, 1);\n          break;\n        }\n      }\n    }\n\n    /**\n     * Clear given group if one is provided, otherwise clears all groups.\n     * @param {String} group Group name\n     * @return {undefined}\n     */\n    clear(group) {\n      if (group) {\n        delete this._chartMap[group];\n      } else {\n        this._chartMap = {};\n      }\n    }\n\n    /**\n     * Get an array of each chart instance in the given group.\n     * If no group is provided, the charts in the default group are returned.\n     * @param {String} [group] Group name\n     * @returns {Array<Object>}\n     */\n    list(group) {\n      group = this._initializeChartGroup(group);\n      return this._chartMap[group];\n    }\n  }\n\n  /**\n   * The chartRegistry object maintains sets of all instantiated dc.js charts under named groups\n   * and the default group. See {@link ChartRegistry ChartRegistry} for its methods.\n   */\n  const chartRegistry = new ChartRegistry();\n\n  /**\n   * Add given chart instance to the given group, creating the group if necessary.\n   * If no group is provided, the default group `constants.DEFAULT_CHART_GROUP` will be used.\n   * @function registerChart\n   * @param {Object} chart dc.js chart instance\n   * @param {String} [group] Group name\n   * @return {undefined}\n   */\n  const registerChart = function (chart, group) {\n    chartRegistry.register(chart, group);\n  };\n\n  /**\n   * Remove given chart instance from the given group, creating the group if necessary.\n   * If no group is provided, the default group `constants.DEFAULT_CHART_GROUP` will be used.\n   * @function deregisterChart\n   * @param {Object} chart dc.js chart instance\n   * @param {String} [group] Group name\n   * @return {undefined}\n   */\n  const deregisterChart = function (chart, group) {\n    chartRegistry.deregister(chart, group);\n  };\n\n  /**\n   * Determine if a given chart instance resides in any group in the registry.\n   * @function hasChart\n   * @param {Object} chart dc.js chart instance\n   * @returns {Boolean}\n   */\n  const hasChart = function (chart) {\n    return chartRegistry.has(chart);\n  };\n\n  /**\n   * Clear given group if one is provided, otherwise clears all groups.\n   * @function deregisterAllCharts\n   * @param {String} group Group name\n   * @return {undefined}\n   */\n  const deregisterAllCharts = function (group) {\n    chartRegistry.clear(group);\n  };\n\n  /**\n   * Clear all filters on all charts within the given chart group. If the chart group is not given then\n   * only charts that belong to the default chart group will be reset.\n   * @function filterAll\n   * @param {String} [group]\n   * @return {undefined}\n   */\n  const filterAll = function (group) {\n    const charts = chartRegistry.list(group);\n    for (let i = 0; i < charts.length; ++i) {\n      charts[i].filterAll();\n    }\n  };\n\n  /**\n   * Reset zoom level / focus on all charts that belong to the given chart group. If the chart group is\n   * not given then only charts that belong to the default chart group will be reset.\n   * @function refocusAll\n   * @param {String} [group]\n   * @return {undefined}\n   */\n  const refocusAll = function (group) {\n    const charts = chartRegistry.list(group);\n    for (let i = 0; i < charts.length; ++i) {\n      if (charts[i].focus) {\n        charts[i].focus();\n      }\n    }\n  };\n\n  /**\n   * Re-render all charts belong to the given chart group. If the chart group is not given then only\n   * charts that belong to the default chart group will be re-rendered.\n   * @function renderAll\n   * @param {String} [group]\n   * @return {undefined}\n   */\n  const renderAll = function (group) {\n    const charts = chartRegistry.list(group);\n    for (let i = 0; i < charts.length; ++i) {\n      charts[i].render();\n    }\n    if (config._renderlet !== null) {\n      config._renderlet(group);\n    }\n  };\n\n  /**\n   * Redraw all charts belong to the given chart group. If the chart group is not given then only charts\n   * that belong to the default chart group will be re-drawn. Redraw is different from re-render since\n   * when redrawing dc tries to update the graphic incrementally, using transitions, instead of starting\n   * from scratch.\n   * @function redrawAll\n   * @param {String} [group]\n   * @return {undefined}\n   */\n  const redrawAll = function (group) {\n    const charts = chartRegistry.list(group);\n    for (let i = 0; i < charts.length; ++i) {\n      charts[i].redraw();\n    }\n    if (config._renderlet !== null) {\n      config._renderlet(group);\n    }\n  };\n\n  /**\n   * Start a transition on a selection if transitions are globally enabled\n   * ({@link disableTransitions} is false) and the duration is greater than zero; otherwise return\n   * the selection. Since most operations are the same on a d3 selection and a d3 transition, this\n   * allows a common code path for both cases.\n   * @function transition\n   * @param {d3.selection} selection - the selection to be transitioned\n   * @param {Number|Function} [duration=250] - the duration of the transition in milliseconds, a\n   * function returning the duration, or 0 for no transition\n   * @param {Number|Function} [delay] - the delay of the transition in milliseconds, or a function\n   * returning the delay, or 0 for no delay\n   * @param {String} [name] - the name of the transition (if concurrent transitions on the same\n   * elements are needed)\n   * @returns {d3.transition|d3.selection}\n   */\n  const transition = function (selection, duration, delay, name) {\n    if (config.disableTransitions || duration <= 0) {\n      return selection;\n    }\n    let s = selection.transition(name);\n    if (duration >= 0 || duration !== undefined) {\n      s = s.duration(duration);\n    }\n    if (delay >= 0 || delay !== undefined) {\n      s = s.delay(delay);\n    }\n    return s;\n  };\n\n  /* somewhat silly, but to avoid duplicating logic */\n  const optionalTransition = function (enable, duration, delay, name) {\n    if (enable) {\n      return function (selection) {\n        return transition(selection, duration, delay, name);\n      };\n    } else {\n      return function (selection) {\n        return selection;\n      };\n    }\n  };\n\n  // See http://stackoverflow.com/a/20773846\n  const afterTransition = function (_transition, callback) {\n    if (_transition.empty() || !_transition.duration) {\n      callback.call(_transition);\n    } else {\n      let n = 0;\n      _transition.each(() => {\n        ++n;\n      }).on('end', () => {\n        if (! --n) {\n          callback.call(_transition);\n        }\n      });\n    }\n  };\n  const renderlet = function (_) {\n    if (!arguments.length) {\n      return config._renderlet;\n    }\n    config._renderlet = _;\n    return null;\n  };\n  const instanceOfChart = function (o) {\n    return o instanceof Object && o.__dcFlag__ && true;\n  };\n  const events = {\n    current: null\n  };\n\n  /**\n   * This function triggers a throttled event function with a specified delay (in milli-seconds).  Events\n   * that are triggered repetitively due to user interaction such brush dragging might flood the library\n   * and invoke more renders than can be executed in time. Using this function to wrap your event\n   * function allows the library to smooth out the rendering by throttling events and only responding to\n   * the most recent event.\n   * @name events.trigger\n   * @example\n   * chart.on('renderlet', function(chart) {\n   *     // smooth the rendering through event throttling\n   *     events.trigger(function(){\n   *         // focus some other chart to the range selected by user on this chart\n   *         someOtherChart.focus(chart.filter());\n   *     });\n   * })\n   * @param {Function} closure\n   * @param {Number} [delay]\n   * @return {undefined}\n   */\n  events.trigger = function (closure, delay) {\n    if (!delay) {\n      closure();\n      return;\n    }\n    events.current = closure;\n    setTimeout(() => {\n      if (closure === events.current) {\n        closure();\n      }\n    }, delay);\n  };\n\n  /**\n   * The dc.js filters are functions which are passed into crossfilter to chose which records will be\n   * accumulated to produce values for the charts.  In the crossfilter model, any filters applied on one\n   * dimension will affect all the other dimensions but not that one.  dc always applies a filter\n   * function to the dimension; the function combines multiple filters and if any of them accept a\n   * record, it is filtered in.\n   *\n   * These filter constructors are used as appropriate by the various charts to implement brushing.  We\n   * mention below which chart uses which filter.  In some cases, many instances of a filter will be added.\n   *\n   * Each of the dc.js filters is an object with the following properties:\n   * * `isFiltered` - a function that returns true if a value is within the filter\n   * * `filterType` - a string identifying the filter, here the name of the constructor\n   *\n   * Currently these filter objects are also arrays, but this is not a requirement. Custom filters\n   * can be used as long as they have the properties above.\n   * @namespace filters\n   * @type {{}}\n   */\n  const filters = {};\n\n  /**\n   * RangedFilter is a filter which accepts keys between `low` and `high`.  It is used to implement X\n   * axis brushing for the {@link CoordinateGridMixin coordinate grid charts}.\n   *\n   * Its `filterType` is 'RangedFilter'\n   * @name RangedFilter\n   * @memberof filters\n   * @param {Number} low\n   * @param {Number} high\n   * @returns {Array<Number>}\n   * @constructor\n   */\n  filters.RangedFilter = function (low, high) {\n    const range = new Array(low, high);\n    range.isFiltered = function (value) {\n      return value >= this[0] && value < this[1];\n    };\n    range.filterType = 'RangedFilter';\n    return range;\n  };\n\n  /**\n   * TwoDimensionalFilter is a filter which accepts a single two-dimensional value.  It is used by the\n   * {@link HeatMap heat map chart} to include particular cells as they are clicked.  (Rows and columns are\n   * filtered by filtering all the cells in the row or column.)\n   *\n   * Its `filterType` is 'TwoDimensionalFilter'\n   * @name TwoDimensionalFilter\n   * @memberof filters\n   * @param {Array<Number>} filter\n   * @returns {Array<Number>}\n   * @constructor\n   */\n  filters.TwoDimensionalFilter = function (filter) {\n    if (filter === null) {\n      return null;\n    }\n    const f = filter;\n    f.isFiltered = function (value) {\n      return value.length && value.length === f.length && value[0] === f[0] && value[1] === f[1];\n    };\n    f.filterType = 'TwoDimensionalFilter';\n    return f;\n  };\n\n  /**\n   * The RangedTwoDimensionalFilter allows filtering all values which fit within a rectangular\n   * region. It is used by the {@link ScatterPlot scatter plot} to implement rectangular brushing.\n   *\n   * It takes two two-dimensional points in the form `[[x1,y1],[x2,y2]]`, and normalizes them so that\n   * `x1 <= x2` and `y1 <= y2`. It then returns a filter which accepts any points which are in the\n   * rectangular range including the lower values but excluding the higher values.\n   *\n   * If an array of two values are given to the RangedTwoDimensionalFilter, it interprets the values as\n   * two x coordinates `x1` and `x2` and returns a filter which accepts any points for which `x1 <= x <\n   * x2`.\n   *\n   * Its `filterType` is 'RangedTwoDimensionalFilter'\n   * @name RangedTwoDimensionalFilter\n   * @memberof filters\n   * @param {Array<Array<Number>>} filter\n   * @returns {Array<Array<Number>>}\n   * @constructor\n   */\n  filters.RangedTwoDimensionalFilter = function (filter) {\n    if (filter === null) {\n      return null;\n    }\n    const f = filter;\n    let fromBottomLeft;\n    if (f[0] instanceof Array) {\n      fromBottomLeft = [[Math.min(filter[0][0], filter[1][0]), Math.min(filter[0][1], filter[1][1])], [Math.max(filter[0][0], filter[1][0]), Math.max(filter[0][1], filter[1][1])]];\n    } else {\n      fromBottomLeft = [[filter[0], -Infinity], [filter[1], Infinity]];\n    }\n    f.isFiltered = function (value) {\n      let x, y;\n      if (value instanceof Array) {\n        x = value[0];\n        y = value[1];\n      } else {\n        x = value;\n        y = fromBottomLeft[0][1];\n      }\n      return x >= fromBottomLeft[0][0] && x < fromBottomLeft[1][0] && y >= fromBottomLeft[0][1] && y < fromBottomLeft[1][1];\n    };\n    f.filterType = 'RangedTwoDimensionalFilter';\n    return f;\n  };\n\n  // ******** Sunburst Chart ********\n\n  /**\n   * HierarchyFilter is a filter which accepts a key path as an array. It matches any node at, or\n   * child of, the given path. It is used by the {@link SunburstChart sunburst chart} to include particular cells and all\n   * their children as they are clicked.\n   *\n   * @name HierarchyFilter\n   * @memberof filters\n   * @param {String} path\n   * @returns {Array<String>}\n   * @constructor\n   */\n  filters.HierarchyFilter = function (path) {\n    if (path === null) {\n      return null;\n    }\n    const filter = path.slice(0);\n    filter.isFiltered = function (value) {\n      if (!(filter.length && value && value.length && value.length >= filter.length)) {\n        return false;\n      }\n      for (let i = 0; i < filter.length; i++) {\n        if (value[i] !== filter[i]) {\n          return false;\n        }\n      }\n      return true;\n    };\n    return filter;\n  };\n  class InvalidStateException extends Error {}\n\n  /**\n   * Returns a function that given a string property name, can be used to pluck the property off an object.  A function\n   * can be passed as the second argument to also alter the data being returned.\n   *\n   * This can be a useful shorthand method to create accessor functions.\n   * @example\n   * var xPluck = pluck('x');\n   * var objA = {x: 1};\n   * xPluck(objA) // 1\n   * @example\n   * var xPosition = pluck('x', function (x, i) {\n   *     // `this` is the original datum,\n   *     // `x` is the x property of the datum,\n   *     // `i` is the position in the array\n   *     return this.radius + x;\n   * });\n   * selectAll('.circle').data(...).x(xPosition);\n   * @function pluck\n   * @param {String} n\n   * @param {Function} [f]\n   * @returns {Function}\n   */\n  const pluck = function (n, f) {\n    if (!f) {\n      return function (d) {\n        return d[n];\n      };\n    }\n    return function (d, i) {\n      return f.call(d, d[n], i);\n    };\n  };\n\n  /**\n   * @namespace utils\n   * @type {{}}\n   */\n  const utils = {};\n\n  /**\n   * Print a single value filter.\n   * @method printSingleValue\n   * @memberof utils\n   * @param {any} filter\n   * @returns {String}\n   */\n  utils.printSingleValue = function (filter) {\n    let s = `${filter}`;\n    if (filter instanceof Date) {\n      s = config.dateFormat(filter);\n    } else if (typeof filter === 'string') {\n      s = filter;\n    } else if (utils.isFloat(filter)) {\n      s = utils.printSingleValue.fformat(filter);\n    } else if (utils.isInteger(filter)) {\n      s = Math.round(filter);\n    }\n    return s;\n  };\n  utils.printSingleValue.fformat = d3Format.format('.2f');\n\n  // convert 'day' to d3.timeDay and similar\n  utils._toTimeFunc = function (t) {\n    const mappings = {\n      'second': d3Time.timeSecond,\n      'minute': d3Time.timeMinute,\n      'hour': d3Time.timeHour,\n      'day': d3Time.timeDay,\n      'week': d3Time.timeWeek,\n      'month': d3Time.timeMonth,\n      'year': d3Time.timeYear\n    };\n    return mappings[t];\n  };\n\n  /**\n   * Arbitrary add one value to another.\n   *\n   * If the value l is of type Date, adds r units to it. t becomes the unit.\n   * For example utils.add(dt, 3, 'week') will add 3 (r = 3) weeks (t= 'week') to dt.\n   *\n   * If l is of type numeric, t is ignored. In this case if r is of type string,\n   * it is assumed to be percentage (whether or not it includes %). For example\n   * utils.add(30, 10) will give 40 and utils.add(30, '10') will give 33.\n   *\n   * They also generate strange results if l is a string.\n   * @method add\n   * @memberof utils\n   * @param {Date|Number} l the value to modify\n   * @param {String|Number} r the amount by which to modify the value\n   * @param {Function|String} [t=d3.timeDay] if `l` is a `Date`, then this should be a\n   * [d3 time interval](https://github.com/d3/d3-time/blob/master/README.md#_interval).\n   * For backward compatibility with dc.js 2.0, it can also be the name of an interval, i.e.\n   * 'millis', 'second', 'minute', 'hour', 'day', 'week', 'month', or 'year'\n   * @returns {Date|Number}\n   */\n  utils.add = function (l, r, t) {\n    if (typeof r === 'string') {\n      r = r.replace('%', '');\n    }\n    if (l instanceof Date) {\n      if (typeof r === 'string') {\n        r = +r;\n      }\n      if (t === 'millis') {\n        return new Date(l.getTime() + r);\n      }\n      t = t || d3Time.timeDay;\n      if (typeof t !== 'function') {\n        t = utils._toTimeFunc(t);\n      }\n      return t.offset(l, r);\n    } else if (typeof r === 'string') {\n      const percentage = +r / 100;\n      return l > 0 ? l * (1 + percentage) : l * (1 - percentage);\n    } else {\n      return l + r;\n    }\n  };\n\n  /**\n   * Arbitrary subtract one value from another.\n   *\n   * If the value l is of type Date, subtracts r units from it. t becomes the unit.\n   * For example utils.subtract(dt, 3, 'week') will subtract 3 (r = 3) weeks (t= 'week') from dt.\n   *\n   * If l is of type numeric, t is ignored. In this case if r is of type string,\n   * it is assumed to be percentage (whether or not it includes %). For example\n   * utils.subtract(30, 10) will give 20 and utils.subtract(30, '10') will give 27.\n   *\n   * They also generate strange results if l is a string.\n   * @method subtract\n   * @memberof utils\n   * @param {Date|Number} l the value to modify\n   * @param {String|Number} r the amount by which to modify the value\n   * @param {Function|String} [t=d3.timeDay] if `l` is a `Date`, then this should be a\n   * [d3 time interval](https://github.com/d3/d3-time/blob/master/README.md#_interval).\n   * For backward compatibility with dc.js 2.0, it can also be the name of an interval, i.e.\n   * 'millis', 'second', 'minute', 'hour', 'day', 'week', 'month', or 'year'\n   * @returns {Date|Number}\n   */\n  utils.subtract = function (l, r, t) {\n    if (typeof r === 'string') {\n      r = r.replace('%', '');\n    }\n    if (l instanceof Date) {\n      if (typeof r === 'string') {\n        r = +r;\n      }\n      if (t === 'millis') {\n        return new Date(l.getTime() - r);\n      }\n      t = t || d3Time.timeDay;\n      if (typeof t !== 'function') {\n        t = utils._toTimeFunc(t);\n      }\n      return t.offset(l, -r);\n    } else if (typeof r === 'string') {\n      const percentage = +r / 100;\n      return l < 0 ? l * (1 + percentage) : l * (1 - percentage);\n    } else {\n      return l - r;\n    }\n  };\n\n  /**\n   * Is the value a number?\n   * @method isNumber\n   * @memberof utils\n   * @param {any} n\n   * @returns {Boolean}\n   */\n  utils.isNumber = function (n) {\n    return n === +n;\n  };\n\n  /**\n   * Is the value a float?\n   * @method isFloat\n   * @memberof utils\n   * @param {any} n\n   * @returns {Boolean}\n   */\n  utils.isFloat = function (n) {\n    return n === +n && n !== (n | 0);\n  };\n\n  /**\n   * Is the value an integer?\n   * @method isInteger\n   * @memberof utils\n   * @param {any} n\n   * @returns {Boolean}\n   */\n  utils.isInteger = function (n) {\n    return n === +n && n === (n | 0);\n  };\n\n  /**\n   * Is the value very close to zero?\n   * @method isNegligible\n   * @memberof utils\n   * @param {any} n\n   * @returns {Boolean}\n   */\n  utils.isNegligible = function (n) {\n    return !utils.isNumber(n) || n < constants.NEGLIGIBLE_NUMBER && n > -constants.NEGLIGIBLE_NUMBER;\n  };\n\n  /**\n   * Ensure the value is no greater or less than the min/max values.  If it is return the boundary value.\n   * @method clamp\n   * @memberof utils\n   * @param {any} val\n   * @param {any} min\n   * @param {any} max\n   * @returns {any}\n   */\n  utils.clamp = function (val, min, max) {\n    return val < min ? min : val > max ? max : val;\n  };\n\n  /**\n   * Given `x`, return a function that always returns `x`.\n   *\n   * {@link https://github.com/d3/d3/blob/master/CHANGES.md#internals `d3.functor` was removed in d3 version 4}.\n   * This function helps to implement the replacement,\n   * `typeof x === \"function\" ? x : utils.constant(x)`\n   * @method constant\n   * @memberof utils\n   * @param {any} x\n   * @returns {Function}\n   */\n  utils.constant = function (x) {\n    return function () {\n      return x;\n    };\n  };\n\n  /**\n   * Using a simple static counter, provide a unique integer id.\n   * @method uniqueId\n   * @memberof utils\n   * @returns {Number}\n   */\n  let _idCounter = 0;\n  utils.uniqueId = function () {\n    return ++_idCounter;\n  };\n\n  /**\n   * Convert a name to an ID.\n   * @method nameToId\n   * @memberof utils\n   * @param {String} name\n   * @returns {String}\n   */\n  utils.nameToId = function (name) {\n    return name.toLowerCase().replace(/[\\s]/g, '_').replace(/[\\.']/g, '');\n  };\n\n  /**\n   * Append or select an item on a parent element.\n   * @method appendOrSelect\n   * @memberof utils\n   * @param {d3.selection} parent\n   * @param {String} selector\n   * @param {String} tag\n   * @returns {d3.selection}\n   */\n  utils.appendOrSelect = function (parent, selector, tag) {\n    tag = tag || selector;\n    let element = parent.select(selector);\n    if (element.empty()) {\n      element = parent.append(tag);\n    }\n    return element;\n  };\n\n  /**\n   * Return the number if the value is a number; else 0.\n   * @method safeNumber\n   * @memberof utils\n   * @param {Number|any} n\n   * @returns {Number}\n   */\n  utils.safeNumber = function (n) {\n    return utils.isNumber(+n) ? +n : 0;\n  };\n\n  /**\n   * Return true if both arrays are equal, if both array are null these are considered equal\n   * @method arraysEqual\n   * @memberof utils\n   * @param {Array|null} a1\n   * @param {Array|null} a2\n   * @returns {Boolean}\n   */\n  utils.arraysEqual = function (a1, a2) {\n    if (!a1 && !a2) {\n      return true;\n    }\n    if (!a1 || !a2) {\n      return false;\n    }\n    return a1.length === a2.length &&\n    // If elements are not integers/strings, we hope that it will match because of toString\n    // Test cases cover dates as well.\n    a1.every((elem, i) => elem.valueOf() === a2[i].valueOf());\n  };\n\n  // ******** Sunburst Chart ********\n  utils.allChildren = function (node) {\n    let paths = [];\n    paths.push(node.path);\n    console.log('currentNode', node);\n    if (node.children) {\n      for (let i = 0; i < node.children.length; i++) {\n        paths = paths.concat(utils.allChildren(node.children[i]));\n      }\n    }\n    return paths;\n  };\n\n  // builds a d3 Hierarchy from a collection\n  // TODO: turn this monster method something better.\n  utils.toHierarchy = function (list, accessor) {\n    const root = {\n      'key': 'root',\n      'children': []\n    };\n    for (let i = 0; i < list.length; i++) {\n      const data = list[i];\n      const parts = data.key;\n      const value = accessor(data);\n      let currentNode = root;\n      for (let j = 0; j < parts.length; j++) {\n        const currentPath = parts.slice(0, j + 1);\n        const children = currentNode.children;\n        const nodeName = parts[j];\n        let childNode;\n        if (j + 1 < parts.length) {\n          // Not yet at the end of the sequence; move down the tree.\n          childNode = findChild(children, nodeName);\n\n          // If we don't already have a child node for this branch, create it.\n          if (childNode === void 0) {\n            childNode = {\n              'key': nodeName,\n              'children': [],\n              'path': currentPath\n            };\n            children.push(childNode);\n          }\n          currentNode = childNode;\n        } else {\n          // Reached the end of the sequence; create a leaf node.\n          childNode = {\n            'key': nodeName,\n            'value': value,\n            'data': data,\n            'path': currentPath\n          };\n          children.push(childNode);\n        }\n      }\n    }\n    return root;\n  };\n  function findChild(children, nodeName) {\n    for (let k = 0; k < children.length; k++) {\n      if (children[k].key === nodeName) {\n        return children[k];\n      }\n    }\n  }\n  utils.getAncestors = function (node) {\n    const path = [];\n    let current = node;\n    while (current.parent) {\n      path.unshift(current.name);\n      current = current.parent;\n    }\n    return path;\n  };\n  utils.arraysIdentical = function (a, b) {\n    let i = a.length;\n    if (i !== b.length) {\n      return false;\n    }\n    while (i--) {\n      if (a[i] !== b[i]) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  /**\n   * @namespace printers\n   * @type {{}}\n   */\n  const printers = {};\n\n  /**\n   * Converts a list of filters into a readable string.\n   * @method filters\n   * @memberof printers\n   * @param {Array<filters>} filters\n   * @returns {String}\n   */\n  printers.filters = function (filters) {\n    let s = '';\n    for (let i = 0; i < filters.length; ++i) {\n      if (i > 0) {\n        s += ', ';\n      }\n      s += printers.filter(filters[i]);\n    }\n    return s;\n  };\n\n  /**\n   * Converts a filter into a readable string.\n   * @method filter\n   * @memberof printers\n   * @param {filters|any|Array<any>} filter\n   * @returns {String}\n   */\n  printers.filter = function (filter) {\n    let s = '';\n    if (typeof filter !== 'undefined' && filter !== null) {\n      if (filter instanceof Array) {\n        if (filter.length >= 2) {\n          s = `[${filter.map(e => utils.printSingleValue(e)).join(' -> ')}]`;\n        } else if (filter.length >= 1) {\n          s = utils.printSingleValue(filter[0]);\n        }\n      } else {\n        s = utils.printSingleValue(filter);\n      }\n    }\n    return s;\n  };\n\n  /**\n   * @namespace units\n   * @type {{}}\n   */\n  const units = {};\n\n  /**\n   * The default value for {@link CoordinateGridMixin#xUnits .xUnits} for the\n   * {@link CoordinateGridMixin Coordinate Grid Chart} and should\n   * be used when the x values are a sequence of integers.\n   * It is a function that counts the number of integers in the range supplied in its start and end parameters.\n   * @method integers\n   * @memberof units\n   * @see {@link CoordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n   * @example\n   * chart.xUnits(units.integers) // already the default\n   * @param {Number} start\n   * @param {Number} end\n   * @returns {Number}\n   */\n  units.integers = function (start, end) {\n    return Math.abs(end - start);\n  };\n\n  /**\n   * This argument can be passed to the {@link CoordinateGridMixin#xUnits .xUnits} function of a\n   * coordinate grid chart to specify ordinal units for the x axis. Usually this parameter is used in\n   * combination with passing\n   * {@link https://github.com/d3/d3-scale/blob/master/README.md#ordinal-scales d3.scaleOrdinal}\n   * to {@link CoordinateGridMixin#x .x}.\n   *\n   * As of dc.js 3.0, this is purely a placeholder or magic value which causes the chart to go into ordinal mode; the\n   * function is not called.\n   * @method ordinal\n   * @memberof units\n   * @return {uncallable}\n   * @see {@link https://github.com/d3/d3-scale/blob/master/README.md#ordinal-scales d3.scaleOrdinal}\n   * @see {@link CoordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n   * @see {@link CoordinateGridMixin#x coordinateGridMixin.x}\n   * @example\n   * chart.xUnits(units.ordinal)\n   *      .x(d3.scaleOrdinal())\n   */\n  units.ordinal = function () {\n    throw new Error('dc.units.ordinal should not be called - it is a placeholder');\n  };\n\n  /**\n   * @namespace fp\n   * @memberof units\n   * @type {{}}\n   */\n  units.fp = {};\n  /**\n   * This function generates an argument for the {@link CoordinateGridMixin Coordinate Grid Chart}\n   * {@link CoordinateGridMixin#xUnits .xUnits} function specifying that the x values are floating-point\n   * numbers with the given precision.\n   * The returned function determines how many values at the given precision will fit into the range\n   * supplied in its start and end parameters.\n   * @method precision\n   * @memberof units.fp\n   * @see {@link CoordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n   * @example\n   * // specify values (and ticks) every 0.1 units\n   * chart.xUnits(units.fp.precision(0.1)\n   * // there are 500 units between 0.5 and 1 if the precision is 0.001\n   * var thousandths = units.fp.precision(0.001);\n   * thousandths(0.5, 1.0) // returns 500\n   * @param {Number} precision\n   * @returns {Function} start-end unit function\n   */\n  units.fp.precision = function (precision) {\n    const _f = function (s, e) {\n      const d = Math.abs((e - s) / _f.resolution);\n      if (utils.isNegligible(d - Math.floor(d))) {\n        return Math.floor(d);\n      } else {\n        return Math.ceil(d);\n      }\n    };\n    _f.resolution = precision;\n    return _f;\n  };\n  const _defaultFilterHandler = (dimension, filters) => {\n    if (filters.length === 0) {\n      dimension.filter(null);\n    } else if (filters.length === 1 && !filters[0].isFiltered) {\n      // single value and not a function-based filter\n      dimension.filterExact(filters[0]);\n    } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n      // single range-based filter\n      dimension.filterRange(filters[0]);\n    } else {\n      dimension.filterFunction(d => {\n        for (let i = 0; i < filters.length; i++) {\n          const filter = filters[i];\n          if (filter.isFiltered) {\n            if (filter.isFiltered(d)) {\n              return true;\n            }\n          } else if (filter <= d && filter >= d) {\n            return true;\n          }\n        }\n        return false;\n      });\n    }\n    return filters;\n  };\n  const _defaultHasFilterHandler = (filters, filter) => {\n    if (filter === null || typeof filter === 'undefined') {\n      return filters.length > 0;\n    }\n    return filters.some(f => filter <= f && filter >= f);\n  };\n  const _defaultRemoveFilterHandler = (filters, filter) => {\n    for (let i = 0; i < filters.length; i++) {\n      if (filters[i] <= filter && filters[i] >= filter) {\n        filters.splice(i, 1);\n        break;\n      }\n    }\n    return filters;\n  };\n  const _defaultAddFilterHandler = (filters, filter) => {\n    filters.push(filter);\n    return filters;\n  };\n  const _defaultResetFilterHandler = filters => [];\n\n  /**\n   * `BaseMixin` is an abstract functional object representing a basic `dc` chart object\n   * for all chart and widget implementations. Methods from the {@link #BaseMixin BaseMixin} are inherited\n   * and available on all chart implementations in the `dc` library.\n   * @mixin BaseMixin\n   */\n  class BaseMixin {\n    constructor() {\n      this.__dcFlag__ = utils.uniqueId();\n      this._svgDescription = null;\n      this._keyboardAccessible = false;\n      this._dimension = undefined;\n      this._group = undefined;\n      this._anchor = undefined;\n      this._root = undefined;\n      this._svg = undefined;\n      this._isChild = undefined;\n      this._minWidth = 200;\n      this._defaultWidthCalc = element => {\n        const width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n        return width && width > this._minWidth ? width : this._minWidth;\n      };\n      this._widthCalc = this._defaultWidthCalc;\n      this._minHeight = 200;\n      this._defaultHeightCalc = element => {\n        const height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n        return height && height > this._minHeight ? height : this._minHeight;\n      };\n      this._heightCalc = this._defaultHeightCalc;\n      this._width = undefined;\n      this._height = undefined;\n      this._useViewBoxResizing = false;\n      this._keyAccessor = pluck('key');\n      this._valueAccessor = pluck('value');\n      this._label = pluck('key');\n      this._ordering = pluck('key');\n      this._renderLabel = false;\n      this._title = d => `${this.keyAccessor()(d)}: ${this.valueAccessor()(d)}`;\n      this._renderTitle = true;\n      this._controlsUseVisibility = false;\n      this._transitionDuration = 750;\n      this._transitionDelay = 0;\n      this._filterPrinter = printers.filters;\n      this._mandatoryAttributesList = ['dimension', 'group'];\n      this._chartGroup = constants.DEFAULT_CHART_GROUP;\n      this._listeners = d3Dispatch.dispatch('preRender', 'postRender', 'preRedraw', 'postRedraw', 'filtered', 'zoomed', 'renderlet', 'pretransition');\n      this._legend = undefined;\n      this._commitHandler = undefined;\n      this._defaultData = group => group.all();\n      this._data = this._defaultData;\n      this._filters = [];\n      this._filterHandler = _defaultFilterHandler;\n      this._hasFilterHandler = _defaultHasFilterHandler;\n      this._removeFilterHandler = _defaultRemoveFilterHandler;\n      this._addFilterHandler = _defaultAddFilterHandler;\n      this._resetFilterHandler = _defaultResetFilterHandler;\n    }\n\n    /**\n     * Set or get the height attribute of a chart. The height is applied to the SVGElement generated by\n     * the chart when rendered (or re-rendered). If a value is given, then it will be used to calculate\n     * the new height and the chart returned for method chaining.  The value can either be a numeric, a\n     * function, or falsy. If no value is specified then the value of the current height attribute will\n     * be returned.\n     *\n     * By default, without an explicit height being given, the chart will select the width of its\n     * anchor element. If that isn't possible it defaults to 200 (provided by the\n     * {@link BaseMixin#minHeight minHeight} property). Setting the value falsy will return\n     * the chart to the default behavior.\n     * @see {@link BaseMixin#minHeight minHeight}\n     * @example\n     * // Default height\n     * chart.height(function (element) {\n     *     var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n     *     return (height && height > chart.minHeight()) ? height : chart.minHeight();\n     * });\n     *\n     * chart.height(250); // Set the chart's height to 250px;\n     * chart.height(function(anchor) { return doSomethingWith(anchor); }); // set the chart's height with a function\n     * chart.height(null); // reset the height to the default auto calculation\n     * @param {Number|Function} [height]\n     * @returns {Number|BaseMixin}\n     */\n    height(height) {\n      if (!arguments.length) {\n        if (!utils.isNumber(this._height)) {\n          // only calculate once\n          this._height = this._heightCalc(this._root.node());\n        }\n        return this._height;\n      }\n      this._heightCalc = height ? typeof height === 'function' ? height : utils.constant(height) : this._defaultHeightCalc;\n      this._height = undefined;\n      return this;\n    }\n\n    /**\n     * Set or get the width attribute of a chart.\n     * @see {@link BaseMixin#height height}\n     * @see {@link BaseMixin#minWidth minWidth}\n     * @example\n     * // Default width\n     * chart.width(function (element) {\n     *     var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n     *     return (width && width > chart.minWidth()) ? width : chart.minWidth();\n     * });\n     * @param {Number|Function} [width]\n     * @returns {Number|BaseMixin}\n     */\n    width(width) {\n      if (!arguments.length) {\n        if (!utils.isNumber(this._width)) {\n          // only calculate once\n          this._width = this._widthCalc(this._root.node());\n        }\n        return this._width;\n      }\n      this._widthCalc = width ? typeof width === 'function' ? width : utils.constant(width) : this._defaultWidthCalc;\n      this._width = undefined;\n      return this;\n    }\n\n    /**\n     * Set or get the minimum width attribute of a chart. This only has effect when used with the default\n     * {@link BaseMixin#width width} function.\n     * @see {@link BaseMixin#width width}\n     * @param {Number} [minWidth=200]\n     * @returns {Number|BaseMixin}\n     */\n    minWidth(minWidth) {\n      if (!arguments.length) {\n        return this._minWidth;\n      }\n      this._minWidth = minWidth;\n      return this;\n    }\n\n    /**\n     * Set or get the minimum height attribute of a chart. This only has effect when used with the default\n     * {@link BaseMixin#height height} function.\n     * @see {@link BaseMixin#height height}\n     * @param {Number} [minHeight=200]\n     * @returns {Number|BaseMixin}\n     */\n    minHeight(minHeight) {\n      if (!arguments.length) {\n        return this._minHeight;\n      }\n      this._minHeight = minHeight;\n      return this;\n    }\n\n    /**\n     * Turn on/off using the SVG\n     * {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox `viewBox` attribute}.\n     * When enabled, `viewBox` will be set on the svg root element instead of `width` and `height`.\n     * Requires that the chart aspect ratio be defined using chart.width(w) and chart.height(h).\n     *\n     * This will maintain the aspect ratio while enabling the chart to resize responsively to the\n     * space given to the chart using CSS. For example, the chart can use `width: 100%; height:\n     * 100%` or absolute positioning to resize to its parent div.\n     *\n     * Since the text will be sized as if the chart is drawn according to the width and height, and\n     * will be resized if the chart is any other size, you need to set the chart width and height so\n     * that the text looks good. In practice, 600x400 seems to work pretty well for most charts.\n     *\n     * You can see examples of this resizing strategy in the [Chart Resizing\n     * Examples](http://dc-js.github.io/dc.js/resizing/); just add `?resize=viewbox` to any of the\n     * one-chart examples to enable `useViewBoxResizing`.\n     * @param {Boolean} [useViewBoxResizing=false]\n     * @returns {Boolean|BaseMixin}\n     */\n    useViewBoxResizing(useViewBoxResizing) {\n      if (!arguments.length) {\n        return this._useViewBoxResizing;\n      }\n      this._useViewBoxResizing = useViewBoxResizing;\n      return this;\n    }\n\n    /**\n     * **mandatory**\n     *\n     * Set or get the dimension attribute of a chart. In `dc`, a dimension can be any valid\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter dimension}\n     *\n     * If a value is given, then it will be used as the new dimension. If no value is specified then\n     * the current dimension will be returned.\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter.dimension}\n     * @example\n     * var index = crossfilter([]);\n     * var dimension = index.dimension(pluck('key'));\n     * chart.dimension(dimension);\n     * @param {crossfilter.dimension} [dimension]\n     * @returns {crossfilter.dimension|BaseMixin}\n     */\n    dimension(dimension) {\n      if (!arguments.length) {\n        return this._dimension;\n      }\n      this._dimension = dimension;\n      this.expireCache();\n      return this;\n    }\n\n    /**\n     * Set the data callback or retrieve the chart's data set. The data callback is passed the chart's\n     * group and by default will return\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all}.\n     * This behavior may be modified to, for instance, return only the top 5 groups.\n     * @example\n     * // Default data function\n     * chart.data(function (group) { return group.all(); });\n     *\n     * chart.data(function (group) { return group.top(5); });\n     * @param {Function} [callback]\n     * @returns {*|BaseMixin}\n     */\n    data(callback) {\n      if (!arguments.length) {\n        return this._data(this._group);\n      }\n      this._data = typeof callback === 'function' ? callback : utils.constant(callback);\n      this.expireCache();\n      return this;\n    }\n\n    /**\n     * **mandatory**\n     *\n     * Set or get the group attribute of a chart. In `dc` a group is a\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter group}.\n     * Usually the group should be created from the particular dimension associated with the same chart. If a value is\n     * given, then it will be used as the new group.\n     *\n     * If no value specified then the current group will be returned.\n     * If `name` is specified then it will be used to generate legend label.\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n     * @example\n     * var index = crossfilter([]);\n     * var dimension = index.dimension(pluck('key'));\n     * chart.dimension(dimension);\n     * chart.group(dimension.group().reduceSum());\n     * @param {crossfilter.group} [group]\n     * @param {String} [name]\n     * @returns {crossfilter.group|BaseMixin}\n     */\n    group(group, name) {\n      if (!arguments.length) {\n        return this._group;\n      }\n      this._group = group;\n      this._groupName = name;\n      this.expireCache();\n      return this;\n    }\n\n    /**\n     * Get or set an accessor to order ordinal dimensions.  The chart uses\n     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort Array.sort}\n     * to sort elements; this accessor returns the value to order on.\n     * @example\n     * // Default ordering accessor\n     * _chart.ordering(pluck('key'));\n     * @param {Function} [orderFunction]\n     * @returns {Function|BaseMixin}\n     */\n    ordering(orderFunction) {\n      if (!arguments.length) {\n        return this._ordering;\n      }\n      this._ordering = orderFunction;\n      this.expireCache();\n      return this;\n    }\n    _computeOrderedGroups(data) {\n      // clone the array before sorting, otherwise Array.sort sorts in-place\n      return Array.from(data).sort((a, b) => d3Array.ascending(this._ordering(a), this._ordering(b)));\n    }\n\n    /**\n     * Clear all filters associated with this chart. The same effect can be achieved by calling\n     * {@link BaseMixin#filter chart.filter(null)}.\n     * @returns {BaseMixin}\n     */\n    filterAll() {\n      return this.filter(null);\n    }\n\n    /**\n     * Execute d3 single selection in the chart's scope using the given selector and return the d3\n     * selection.\n     *\n     * This function is **not chainable** since it does not return a chart instance; however the d3\n     * selection result can be chained to d3 function calls.\n     * @see {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3.select}\n     * @example\n     * // Has the same effect as d3.select('#chart-id').select(selector)\n     * chart.select(selector)\n     * @param {String} sel CSS selector string\n     * @returns {d3.selection}\n     */\n    select(sel) {\n      return this._root.select(sel);\n    }\n\n    /**\n     * Execute in scope d3 selectAll using the given selector and return d3 selection result.\n     *\n     * This function is **not chainable** since it does not return a chart instance; however the d3\n     * selection result can be chained to d3 function calls.\n     * @see {@link https://github.com/d3/d3-selection/blob/master/README.md#selectAll d3.selectAll}\n     * @example\n     * // Has the same effect as d3.select('#chart-id').selectAll(selector)\n     * chart.selectAll(selector)\n     * @param {String} sel CSS selector string\n     * @returns {d3.selection}\n     */\n    selectAll(sel) {\n      return this._root ? this._root.selectAll(sel) : null;\n    }\n\n    /**\n     * Set the root SVGElement to either be an existing chart's root; or any valid [d3 single\n     * selector](https://github.com/d3/d3-selection/blob/master/README.md#selecting-elements) specifying a dom\n     * block element such as a div; or a dom element or d3 selection. Optionally registers the chart\n     * within the chartGroup. This class is called internally on chart initialization, but be called\n     * again to relocate the chart. However, it will orphan any previously created SVGElements.\n     * @param {anchorChart|anchorSelector|anchorNode} [parent]\n     * @param {String} [chartGroup]\n     * @returns {String|node|d3.selection|BaseMixin}\n     */\n    anchor(parent, chartGroup) {\n      if (!arguments.length) {\n        return this._anchor;\n      }\n      if (instanceOfChart(parent)) {\n        this._anchor = parent.anchor();\n        if (this._anchor.children) {\n          // is _anchor a div?\n          this._anchor = `#${parent.anchorName()}`;\n        }\n        this._root = parent.root();\n        this._isChild = true;\n      } else if (parent) {\n        if (parent.select && parent.classed) {\n          // detect d3 selection\n          this._anchor = parent.node();\n        } else {\n          this._anchor = parent;\n        }\n        this._root = d3Selection.select(this._anchor);\n        this._root.classed(constants.CHART_CLASS, true);\n        registerChart(this, chartGroup);\n        this._isChild = false;\n      } else {\n        throw new BadArgumentException('parent must be defined');\n      }\n      this._chartGroup = chartGroup;\n      return this;\n    }\n\n    /**\n     * Returns the DOM id for the chart's anchored location.\n     * @returns {String}\n     */\n    anchorName() {\n      const a = this.anchor();\n      if (a && a.id) {\n        return a.id;\n      }\n      if (a && a.replace) {\n        return a.replace('#', '');\n      }\n      return `dc-chart${this.chartID()}`;\n    }\n\n    /**\n     * Returns the root element where a chart resides. Usually it will be the parent div element where\n     * the SVGElement was created. You can also pass in a new root element however this is usually handled by\n     * dc internally. Resetting the root element on a chart outside of dc internals may have\n     * unexpected consequences.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement HTMLElement}\n     * @param {HTMLElement} [rootElement]\n     * @returns {HTMLElement|BaseMixin}\n     */\n    root(rootElement) {\n      if (!arguments.length) {\n        return this._root;\n      }\n      this._root = rootElement;\n      return this;\n    }\n\n    /**\n     * Returns the top SVGElement for this specific chart. You can also pass in a new SVGElement,\n     * however this is usually handled by dc internally. Resetting the SVGElement on a chart outside\n     * of dc internals may have unexpected consequences.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n     * @param {SVGElement|d3.selection} [svgElement]\n     * @returns {SVGElement|d3.selection|BaseMixin}\n     */\n    svg(svgElement) {\n      if (!arguments.length) {\n        return this._svg;\n      }\n      this._svg = svgElement;\n      return this;\n    }\n\n    /**\n     * Remove the chart's SVGElements from the dom and recreate the container SVGElement.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n     * @returns {SVGElement}\n     */\n    resetSvg() {\n      this.select('svg').remove();\n      return this.generateSvg();\n    }\n    sizeSvg() {\n      if (this._svg) {\n        if (!this._useViewBoxResizing) {\n          this._svg.attr('width', this.width()).attr('height', this.height());\n        } else if (!this._svg.attr('viewBox')) {\n          this._svg.attr('viewBox', `0 0 ${this.width()} ${this.height()}`);\n        }\n      }\n    }\n    generateSvg() {\n      this._svg = this.root().append('svg');\n      if (this._svgDescription || this._keyboardAccessible) {\n        this._svg.append('desc').attr('id', `desc-id-${this.__dcFlag__}`).html(`${this.svgDescription()}`);\n        this._svg.attr('tabindex', '0').attr('role', 'img').attr('aria-labelledby', `desc-id-${this.__dcFlag__}`);\n      }\n      this.sizeSvg();\n      return this._svg;\n    }\n\n    /**\n     * Set or get description text for the entire SVG graphic. If set, will create a `<desc>` element as the first\n     * child of the SVG with the description text and also make the SVG focusable from keyboard.\n     * @param {String} [description]\n     * @returns {String|BaseMixin}\n     */\n    svgDescription(description) {\n      if (!arguments.length) {\n        return this._svgDescription || this.constructor.name;\n      }\n      this._svgDescription = description;\n      return this;\n    }\n\n    /**\n     * If set, interactive chart elements like individual bars in a bar chart or symbols in a scatter plot\n     * will be focusable from keyboard and on pressing Enter or Space will behave as if clicked on.\n     * \n     * If `svgDescription` has not been explicitly set, will also set SVG description text to the class\n     * constructor name, like BarChart or HeatMap, and make the entire SVG focusable.\n     * @param {Boolean} [keyboardAccessible=false]\n     * @returns {Boolean|BarChart}\n     */\n    keyboardAccessible(keyboardAccessible) {\n      if (!arguments.length) {\n        return this._keyboardAccessible;\n      }\n      this._keyboardAccessible = keyboardAccessible;\n      return this;\n    }\n\n    /**\n     * Set or get the filter printer function. The filter printer function is used to generate human\n     * friendly text for filter value(s) associated with the chart instance. The text will get shown\n     * in the `.filter element; see {@link BaseMixin#turnOnControls turnOnControls}.\n     *\n     * By default dc charts use a default filter printer {@link printers.filters printers.filters}\n     * that provides simple printing support for both single value and ranged filters.\n     * @example\n     * // for a chart with an ordinal brush, print the filters in upper case\n     * chart.filterPrinter(function(filters) {\n     *   return filters.map(function(f) { return f.toUpperCase(); }).join(', ');\n     * });\n     * // for a chart with a range brush, print the filter as start and extent\n     * chart.filterPrinter(function(filters) {\n     *   return 'start ' + utils.printSingleValue(filters[0][0]) +\n     *     ' extent ' + utils.printSingleValue(filters[0][1] - filters[0][0]);\n     * });\n     * @param {Function} [filterPrinterFunction=printers.filters]\n     * @returns {Function|BaseMixin}\n     */\n    filterPrinter(filterPrinterFunction) {\n      if (!arguments.length) {\n        return this._filterPrinter;\n      }\n      this._filterPrinter = filterPrinterFunction;\n      return this;\n    }\n\n    /**\n     * If set, use the `visibility` attribute instead of the `display` attribute for showing/hiding\n     * chart reset and filter controls, for less disruption to the layout.\n     * @param {Boolean} [controlsUseVisibility=false]\n     * @returns {Boolean|BaseMixin}\n     */\n    controlsUseVisibility(controlsUseVisibility) {\n      if (!arguments.length) {\n        return this._controlsUseVisibility;\n      }\n      this._controlsUseVisibility = controlsUseVisibility;\n      return this;\n    }\n\n    /**\n     * Turn on optional control elements within the root element. dc currently supports the\n     * following html control elements.\n     * * root.selectAll('.reset') - elements are turned on if the chart has an active filter. This type\n     * of control element is usually used to store a reset link to allow user to reset filter on a\n     * certain chart. This element will be turned off automatically if the filter is cleared.\n     * * root.selectAll('.filter') elements are turned on if the chart has an active filter. The text\n     * content of this element is then replaced with the current filter value using the filter printer\n     * function. This type of element will be turned off automatically if the filter is cleared.\n     * @returns {BaseMixin}\n     */\n    turnOnControls() {\n      if (this._root) {\n        const attribute = this.controlsUseVisibility() ? 'visibility' : 'display';\n        this.selectAll('.reset').style(attribute, null);\n        this.selectAll('.filter').text(this._filterPrinter(this.filters())).style(attribute, null);\n      }\n      return this;\n    }\n\n    /**\n     * Turn off optional control elements within the root element.\n     * @see {@link BaseMixin#turnOnControls turnOnControls}\n     * @returns {BaseMixin}\n     */\n    turnOffControls() {\n      if (this._root) {\n        const attribute = this.controlsUseVisibility() ? 'visibility' : 'display';\n        const value = this.controlsUseVisibility() ? 'hidden' : 'none';\n        this.selectAll('.reset').style(attribute, value);\n        this.selectAll('.filter').style(attribute, value).text(this.filter());\n      }\n      return this;\n    }\n\n    /**\n     * Set or get the animation transition duration (in milliseconds) for this chart instance.\n     * @param {Number} [duration=750]\n     * @returns {Number|BaseMixin}\n     */\n    transitionDuration(duration) {\n      if (!arguments.length) {\n        return this._transitionDuration;\n      }\n      this._transitionDuration = duration;\n      return this;\n    }\n\n    /**\n     * Set or get the animation transition delay (in milliseconds) for this chart instance.\n     * @param {Number} [delay=0]\n     * @returns {Number|BaseMixin}\n     */\n    transitionDelay(delay) {\n      if (!arguments.length) {\n        return this._transitionDelay;\n      }\n      this._transitionDelay = delay;\n      return this;\n    }\n    _mandatoryAttributes(_) {\n      if (!arguments.length) {\n        return this._mandatoryAttributesList;\n      }\n      this._mandatoryAttributesList = _;\n      return this;\n    }\n    checkForMandatoryAttributes(a) {\n      if (!this[a] || !this[a]()) {\n        throw new InvalidStateException(`Mandatory attribute chart.${a} is missing on chart[#${this.anchorName()}]`);\n      }\n    }\n\n    /**\n     * Invoking this method will force the chart to re-render everything from scratch. Generally it\n     * should only be used to render the chart for the first time on the page or if you want to make\n     * sure everything is redrawn from scratch instead of relying on the default incremental redrawing\n     * behaviour.\n     * @returns {BaseMixin}\n     */\n    render() {\n      this._height = this._width = undefined; // force recalculate\n      this._listeners.call('preRender', this, this);\n      if (this._mandatoryAttributesList) {\n        this._mandatoryAttributesList.forEach(e => this.checkForMandatoryAttributes(e));\n      }\n      const result = this._doRender();\n      if (this._legend) {\n        this._legend.render();\n      }\n      this._activateRenderlets('postRender');\n      return result;\n    }\n    _makeKeyboardAccessible(onClickFunction) {\n      for (var _len = arguments.length, onClickArgs = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        onClickArgs[_key - 1] = arguments[_key];\n      }\n      // called from each chart module's render and redraw methods\n      const tabElements = this._svg.selectAll('.dc-tabbable').attr('tabindex', 0);\n      if (onClickFunction) {\n        tabElements.on('keydown', d3compat.eventHandler((d, event) => {\n          // trigger only if d is an object undestood by KeyAccessor()\n          if (event.keyCode === 13 && typeof d === 'object') {\n            onClickFunction.call(this, d, ...onClickArgs);\n          }\n          // special case for space key press - prevent scrolling\n          if (event.keyCode === 32 && typeof d === 'object') {\n            onClickFunction.call(this, d, ...onClickArgs);\n            event.preventDefault();\n          }\n        }));\n      }\n    }\n    _activateRenderlets(event) {\n      this._listeners.call('pretransition', this, this);\n      if (this.transitionDuration() > 0 && this._svg) {\n        this._svg.transition().duration(this.transitionDuration()).delay(this.transitionDelay()).on('end', () => {\n          this._listeners.call('renderlet', this, this);\n          if (event) {\n            this._listeners.call(event, this, this);\n          }\n        });\n      } else {\n        this._listeners.call('renderlet', this, this);\n        if (event) {\n          this._listeners.call(event, this, this);\n        }\n      }\n    }\n\n    /**\n     * Calling redraw will cause the chart to re-render data changes incrementally. If there is no\n     * change in the underlying data dimension then calling this method will have no effect on the\n     * chart. Most chart interaction in dc will automatically trigger this method through internal\n     * events (in particular {@link redrawAll redrawAll}); therefore, you only need to\n     * manually invoke this function if data is manipulated outside of dc's control (for example if\n     * data is loaded in the background using\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}).\n     * @returns {BaseMixin}\n     */\n    redraw() {\n      this.sizeSvg();\n      this._listeners.call('preRedraw', this, this);\n      const result = this._doRedraw();\n      if (this._legend) {\n        this._legend.render();\n      }\n      this._activateRenderlets('postRedraw');\n      return result;\n    }\n\n    /**\n     * Gets/sets the commit handler. If the chart has a commit handler, the handler will be called when\n     * the chart's filters have changed, in order to send the filter data asynchronously to a server.\n     *\n     * Unlike other functions in dc.js, the commit handler is asynchronous. It takes two arguments:\n     * a flag indicating whether this is a render (true) or a redraw (false), and a callback to be\n     * triggered once the commit is done. The callback has the standard node.js continuation signature\n     * with error first and result second.\n     * @param {Function} commitHandler\n     * @returns {BaseMixin}\n     */\n    commitHandler(commitHandler) {\n      if (!arguments.length) {\n        return this._commitHandler;\n      }\n      this._commitHandler = commitHandler;\n      return this;\n    }\n\n    /**\n     * Redraws all charts in the same group as this chart, typically in reaction to a filter\n     * change. If the chart has a {@link BaseMixin.commitFilter commitHandler}, it will\n     * be executed and waited for.\n     * @returns {BaseMixin}\n     */\n    redrawGroup() {\n      if (this._commitHandler) {\n        this._commitHandler(false, (error, result) => {\n          if (error) {\n            console.log(error);\n          } else {\n            redrawAll(this.chartGroup());\n          }\n        });\n      } else {\n        redrawAll(this.chartGroup());\n      }\n      return this;\n    }\n\n    /**\n     * Renders all charts in the same group as this chart. If the chart has a\n     * {@link BaseMixin.commitFilter commitHandler}, it will be executed and waited for\n     * @returns {BaseMixin}\n     */\n    renderGroup() {\n      if (this._commitHandler) {\n        this._commitHandler(false, (error, result) => {\n          if (error) {\n            console.log(error);\n          } else {\n            renderAll(this.chartGroup());\n          }\n        });\n      } else {\n        renderAll(this.chartGroup());\n      }\n      return this;\n    }\n    _invokeFilteredListener(f) {\n      if (f !== undefined) {\n        this._listeners.call('filtered', this, this, f);\n      }\n    }\n    _invokeZoomedListener() {\n      this._listeners.call('zoomed', this, this);\n    }\n\n    /**\n     * Set or get the has-filter handler. The has-filter handler is a function that checks to see if\n     * the chart's current filters (first argument) include a specific filter (second argument).  Using a custom has-filter handler allows\n     * you to change the way filters are checked for and replaced.\n     * @example\n     * // default has-filter handler\n     * chart.hasFilterHandler(function (filters, filter) {\n     *     if (filter === null || typeof(filter) === 'undefined') {\n     *         return filters.length > 0;\n     *     }\n     *     return filters.some(function (f) {\n     *         return filter <= f && filter >= f;\n     *     });\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.hasFilterHandler(function(filters, filter) {\n     *     return false;\n     * });\n     * @param {Function} [hasFilterHandler]\n     * @returns {Function|BaseMixin}\n     */\n    hasFilterHandler(hasFilterHandler) {\n      if (!arguments.length) {\n        return this._hasFilterHandler;\n      }\n      this._hasFilterHandler = hasFilterHandler;\n      return this;\n    }\n\n    /**\n     * Check whether any active filter or a specific filter is associated with particular chart instance.\n     * This function is **not chainable**.\n     * @see {@link BaseMixin#hasFilterHandler hasFilterHandler}\n     * @param {*} [filter]\n     * @returns {Boolean}\n     */\n    hasFilter(filter) {\n      return this._hasFilterHandler(this._filters, filter);\n    }\n\n    /**\n     * Set or get the remove filter handler. The remove filter handler is a function that removes a\n     * filter from the chart's current filters. Using a custom remove filter handler allows you to\n     * change how filters are removed or perform additional work when removing a filter, e.g. when\n     * using a filter server other than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @example\n     * // default remove filter handler\n     * chart.removeFilterHandler(function (filters, filter) {\n     *     for (var i = 0; i < filters.length; i++) {\n     *         if (filters[i] <= filter && filters[i] >= filter) {\n     *             filters.splice(i, 1);\n     *             break;\n     *         }\n     *     }\n     *     return filters;\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.removeFilterHandler(function(filters, filter) {\n     *     return filters;\n     * });\n     * @param {Function} [removeFilterHandler]\n     * @returns {Function|BaseMixin}\n     */\n    removeFilterHandler(removeFilterHandler) {\n      if (!arguments.length) {\n        return this._removeFilterHandler;\n      }\n      this._removeFilterHandler = removeFilterHandler;\n      return this;\n    }\n\n    /**\n     * Set or get the add filter handler. The add filter handler is a function that adds a filter to\n     * the chart's filter list. Using a custom add filter handler allows you to change the way filters\n     * are added or perform additional work when adding a filter, e.g. when using a filter server other\n     * than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @example\n     * // default add filter handler\n     * chart.addFilterHandler(function (filters, filter) {\n     *     filters.push(filter);\n     *     return filters;\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.addFilterHandler(function(filters, filter) {\n     *     return filters;\n     * });\n     * @param {Function} [addFilterHandler]\n     * @returns {Function|BaseMixin}\n     */\n    addFilterHandler(addFilterHandler) {\n      if (!arguments.length) {\n        return this._addFilterHandler;\n      }\n      this._addFilterHandler = addFilterHandler;\n      return this;\n    }\n\n    /**\n     * Set or get the reset filter handler. The reset filter handler is a function that resets the\n     * chart's filter list by returning a new list. Using a custom reset filter handler allows you to\n     * change the way filters are reset, or perform additional work when resetting the filters,\n     * e.g. when using a filter server other than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @example\n     * // default remove filter handler\n     * function (filters) {\n     *     return [];\n     * }\n     *\n     * // custom filter handler (no-op)\n     * chart.resetFilterHandler(function(filters) {\n     *     return filters;\n     * });\n     * @param {Function} [resetFilterHandler]\n     * @returns {BaseMixin}\n     */\n    resetFilterHandler(resetFilterHandler) {\n      if (!arguments.length) {\n        return this._resetFilterHandler;\n      }\n      this._resetFilterHandler = resetFilterHandler;\n      return this;\n    }\n    applyFilters(filters) {\n      if (this.dimension() && this.dimension().filter) {\n        const fs = this._filterHandler(this.dimension(), filters);\n        if (fs) {\n          filters = fs;\n        }\n      }\n      return filters;\n    }\n\n    /**\n     * Replace the chart filter. This is equivalent to calling `chart.filter(null).filter(filter)`\n     * but more efficient because the filter is only applied once.\n     *\n     * @param {*} [filter]\n     * @returns {BaseMixin}\n     */\n    replaceFilter(filter) {\n      this._filters = this._resetFilterHandler(this._filters);\n      this.filter(filter);\n      return this;\n    }\n\n    /**\n     * Filter the chart by the given parameter, or return the current filter if no input parameter\n     * is given.\n     *\n     * The filter parameter can take one of these forms:\n     * * A single value: the value will be toggled (added if it is not present in the current\n     * filters, removed if it is present)\n     * * An array containing a single array of values (`[[value,value,value]]`): each value is\n     * toggled\n     * * When appropriate for the chart, a {@link filters dc filter object} such as\n     *   * {@link filters.RangedFilter `filters.RangedFilter`} for the\n     * {@link CoordinateGridMixin CoordinateGridMixin} charts\n     *   * {@link filters.TwoDimensionalFilter `filters.TwoDimensionalFilter`} for the\n     * {@link HeatMap heat map}\n     *   * {@link filters.RangedTwoDimensionalFilter `filters.RangedTwoDimensionalFilter`}\n     * for the {@link ScatterPlot scatter plot}\n     * * `null`: the filter will be reset using the\n     * {@link BaseMixin#resetFilterHandler resetFilterHandler}\n     *\n     * Note that this is always a toggle (even when it doesn't make sense for the filter type). If\n     * you wish to replace the current filter, either call `chart.filter(null)` first - or it's more\n     * efficient to call {@link BaseMixin#replaceFilter `chart.replaceFilter(filter)`} instead.\n     *\n     * Each toggle is executed by checking if the value is already present using the\n     * {@link BaseMixin#hasFilterHandler hasFilterHandler}; if it is not present, it is added\n     * using the {@link BaseMixin#addFilterHandler addFilterHandler}; if it is already present,\n     * it is removed using the {@link BaseMixin#removeFilterHandler removeFilterHandler}.\n     *\n     * Once the filters array has been updated, the filters are applied to the\n     * crossfilter dimension, using the {@link BaseMixin#filterHandler filterHandler}.\n     *\n     * Once you have set the filters, call {@link BaseMixin#redrawGroup `chart.redrawGroup()`}\n     * (or {@link redrawAll `redrawAll()`}) to redraw the chart's group.\n     * @see {@link BaseMixin#addFilterHandler addFilterHandler}\n     * @see {@link BaseMixin#removeFilterHandler removeFilterHandler}\n     * @see {@link BaseMixin#resetFilterHandler resetFilterHandler}\n     * @see {@link BaseMixin#filterHandler filterHandler}\n     * @example\n     * // filter by a single string\n     * chart.filter('Sunday');\n     * // filter by a single age\n     * chart.filter(18);\n     * // filter by a set of states\n     * chart.filter([['MA', 'TX', 'ND', 'WA']]);\n     * // filter by range -- note the use of filters.RangedFilter, which is different\n     * // from the syntax for filtering a crossfilter dimension directly, dimension.filter([15,20])\n     * chart.filter(filters.RangedFilter(15,20));\n     * @param {*} [filter]\n     * @returns {BaseMixin}\n     */\n    filter(filter) {\n      if (!arguments.length) {\n        return this._filters.length > 0 ? this._filters[0] : null;\n      }\n      let filters = this._filters;\n      if (filter instanceof Array && filter[0] instanceof Array && !filter.isFiltered) {\n        // toggle each filter\n        filter[0].forEach(f => {\n          if (this._hasFilterHandler(filters, f)) {\n            filters = this._removeFilterHandler(filters, f);\n          } else {\n            filters = this._addFilterHandler(filters, f);\n          }\n        });\n      } else if (filter === null) {\n        filters = this._resetFilterHandler(filters);\n      } else {\n        if (this._hasFilterHandler(filters, filter)) {\n          filters = this._removeFilterHandler(filters, filter);\n        } else {\n          filters = this._addFilterHandler(filters, filter);\n        }\n      }\n      this._filters = this.applyFilters(filters);\n      this._invokeFilteredListener(filter);\n      if (this._root !== null && this.hasFilter()) {\n        this.turnOnControls();\n      } else {\n        this.turnOffControls();\n      }\n      return this;\n    }\n\n    /**\n     * Returns all current filters. This method does not perform defensive cloning of the internal\n     * filter array before returning, therefore any modification of the returned array will effect the\n     * chart's internal filter storage.\n     * @returns {Array<*>}\n     */\n    filters() {\n      return this._filters;\n    }\n    highlightSelected(e) {\n      d3Selection.select(e).classed(constants.SELECTED_CLASS, true);\n      d3Selection.select(e).classed(constants.DESELECTED_CLASS, false);\n    }\n    fadeDeselected(e) {\n      d3Selection.select(e).classed(constants.SELECTED_CLASS, false);\n      d3Selection.select(e).classed(constants.DESELECTED_CLASS, true);\n    }\n    resetHighlight(e) {\n      d3Selection.select(e).classed(constants.SELECTED_CLASS, false);\n      d3Selection.select(e).classed(constants.DESELECTED_CLASS, false);\n    }\n\n    /**\n     * This function is passed to d3 as the onClick handler for each chart. The default behavior is to\n     * filter on the clicked datum (passed to the callback) and redraw the chart group.\n     *\n     * This function can be replaced in order to change the click behavior (but first look at\n     * @example\n     * var oldHandler = chart.onClick;\n     * chart.onClick = function(datum) {\n     *   // use datum.\n     * @param {*} datum\n     * @return {undefined}\n     */\n    onClick(datum) {\n      const filter = this.keyAccessor()(datum);\n      events.trigger(() => {\n        this.filter(filter);\n        this.redrawGroup();\n      });\n    }\n\n    /**\n     * Set or get the filter handler. The filter handler is a function that performs the filter action\n     * on a specific dimension. Using a custom filter handler allows you to perform additional logic\n     * before or after filtering.\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter crossfilter.dimension.filter}\n     * @example\n     * // the default filter handler handles all possible cases for the charts in dc.js\n     * // you can replace it with something more specialized for your own chart\n     * chart.filterHandler(function (dimension, filters) {\n     *     if (filters.length === 0) {\n     *         // the empty case (no filtering)\n     *         dimension.filter(null);\n     *     } else if (filters.length === 1 && !filters[0].isFiltered) {\n     *         // single value and not a function-based filter\n     *         dimension.filterExact(filters[0]);\n     *     } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n     *         // single range-based filter\n     *         dimension.filterRange(filters[0]);\n     *     } else {\n     *         // an array of values, or an array of filter objects\n     *         dimension.filterFunction(function (d) {\n     *             for (var i = 0; i < filters.length; i++) {\n     *                 var filter = filters[i];\n     *                 if (filter.isFiltered && filter.isFiltered(d)) {\n     *                     return true;\n     *                 } else if (filter <= d && filter >= d) {\n     *                     return true;\n     *                 }\n     *             }\n     *             return false;\n     *         });\n     *     }\n     *     return filters;\n     * });\n     *\n     * // custom filter handler\n     * chart.filterHandler(function(dimension, filter){\n     *     var newFilter = filter + 10;\n     *     dimension.filter(newFilter);\n     *     return newFilter; // set the actual filter value to the new value\n     * });\n     * @param {Function} [filterHandler]\n     * @returns {Function|BaseMixin}\n     */\n    filterHandler(filterHandler) {\n      if (!arguments.length) {\n        return this._filterHandler;\n      }\n      this._filterHandler = filterHandler;\n      return this;\n    }\n\n    // abstract function stub\n    _doRender() {\n      // do nothing in base, should be overridden by sub-function\n      return this;\n    }\n    _doRedraw() {\n      // do nothing in base, should be overridden by sub-function\n      return this;\n    }\n    legendables() {\n      // do nothing in base, should be overridden by sub-function\n      return [];\n    }\n    legendHighlight() {\n      // do nothing in base, should be overridden by sub-function\n    }\n    legendReset() {\n      // do nothing in base, should be overridden by sub-function\n    }\n    legendToggle() {\n      // do nothing in base, should be overriden by sub-function\n    }\n    isLegendableHidden() {\n      // do nothing in base, should be overridden by sub-function\n      return false;\n    }\n\n    /**\n     * Set or get the key accessor function. The key accessor function is used to retrieve the key\n     * value from the crossfilter group. Key values are used differently in different charts, for\n     * example keys correspond to slices in a pie chart and x axis positions in a grid coordinate chart.\n     * @example\n     * // default key accessor\n     * chart.keyAccessor(function(d) { return d.key; });\n     * // custom key accessor for a multi-value crossfilter reduction\n     * chart.keyAccessor(function(p) { return p.value.absGain; });\n     * @param {Function} [keyAccessor]\n     * @returns {Function|BaseMixin}\n     */\n    keyAccessor(keyAccessor) {\n      if (!arguments.length) {\n        return this._keyAccessor;\n      }\n      this._keyAccessor = keyAccessor;\n      return this;\n    }\n\n    /**\n     * Set or get the value accessor function. The value accessor function is used to retrieve the\n     * value from the crossfilter group. Group values are used differently in different charts, for\n     * example values correspond to slice sizes in a pie chart and y axis positions in a grid\n     * coordinate chart.\n     * @example\n     * // default value accessor\n     * chart.valueAccessor(function(d) { return d.value; });\n     * // custom value accessor for a multi-value crossfilter reduction\n     * chart.valueAccessor(function(p) { return p.value.percentageGain; });\n     * @param {Function} [valueAccessor]\n     * @returns {Function|BaseMixin}\n     */\n    valueAccessor(valueAccessor) {\n      if (!arguments.length) {\n        return this._valueAccessor;\n      }\n      this._valueAccessor = valueAccessor;\n      return this;\n    }\n\n    /**\n     * Set or get the label function. The chart class will use this function to render labels for each\n     * child element in the chart, e.g. slices in a pie chart or bubbles in a bubble chart. Not every\n     * chart supports the label function, for example line chart does not use this function\n     * at all. By default, enables labels; pass false for the second parameter if this is not desired.\n     * @example\n     * // default label function just return the key\n     * chart.label(function(d) { return d.key; });\n     * // label function has access to the standard d3 data binding and can get quite complicated\n     * chart.label(function(d) { return d.data.key + '(' + Math.floor(d.data.value / all.value() * 100) + '%)'; });\n     * @param {Function} [labelFunction]\n     * @param {Boolean} [enableLabels=true]\n     * @returns {Function|BaseMixin}\n     */\n    label(labelFunction, enableLabels) {\n      if (!arguments.length) {\n        return this._label;\n      }\n      this._label = labelFunction;\n      if (enableLabels === undefined || enableLabels) {\n        this._renderLabel = true;\n      }\n      return this;\n    }\n\n    /**\n     * Turn on/off label rendering\n     * @param {Boolean} [renderLabel=false]\n     * @returns {Boolean|BaseMixin}\n     */\n    renderLabel(renderLabel) {\n      if (!arguments.length) {\n        return this._renderLabel;\n      }\n      this._renderLabel = renderLabel;\n      return this;\n    }\n\n    /**\n     * Set or get the title function. The chart class will use this function to render the SVGElement title\n     * (usually interpreted by browser as tooltips) for each child element in the chart, e.g. a slice\n     * in a pie chart or a bubble in a bubble chart. Almost every chart supports the title function;\n     * however in grid coordinate charts you need to turn off the brush in order to see titles, because\n     * otherwise the brush layer will block tooltip triggering.\n     * @example\n     * // default title function shows \"key: value\"\n     * chart.title(function(d) { return d.key + ': ' + d.value; });\n     * // title function has access to the standard d3 data binding and can get quite complicated\n     * chart.title(function(p) {\n     *    return p.key.getFullYear()\n     *        + '\\n'\n     *        + 'Index Gain: ' + numberFormat(p.value.absGain) + '\\n'\n     *        + 'Index Gain in Percentage: ' + numberFormat(p.value.percentageGain) + '%\\n'\n     *        + 'Fluctuation / Index Ratio: ' + numberFormat(p.value.fluctuationPercentage) + '%';\n     * });\n     * @param {Function} [titleFunction]\n     * @returns {Function|BaseMixin}\n     */\n    title(titleFunction) {\n      if (!arguments.length) {\n        return this._title;\n      }\n      this._title = titleFunction;\n      return this;\n    }\n\n    /**\n     * Turn on/off title rendering, or return the state of the render title flag if no arguments are\n     * given.\n     * @param {Boolean} [renderTitle=true]\n     * @returns {Boolean|BaseMixin}\n     */\n    renderTitle(renderTitle) {\n      if (!arguments.length) {\n        return this._renderTitle;\n      }\n      this._renderTitle = renderTitle;\n      return this;\n    }\n\n    /**\n     * Get or set the chart group to which this chart belongs. Chart groups are rendered or redrawn\n     * together since it is expected they share the same underlying crossfilter data set.\n     * @param {String} [chartGroup]\n     * @returns {String|BaseMixin}\n     */\n    chartGroup(chartGroup) {\n      if (!arguments.length) {\n        return this._chartGroup;\n      }\n      if (!this._isChild) {\n        deregisterChart(this, this._chartGroup);\n      }\n      this._chartGroup = chartGroup;\n      if (!this._isChild) {\n        registerChart(this, this._chartGroup);\n      }\n      return this;\n    }\n\n    /**\n     * Expire the internal chart cache. dc charts cache some data internally on a per chart basis to\n     * speed up rendering and avoid unnecessary calculation; however it might be useful to clear the\n     * cache if you have changed state which will affect rendering.  For example, if you invoke\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}\n     * function or reset group or dimension after rendering, it is a good idea to\n     * clear the cache to make sure charts are rendered properly.\n     * @returns {BaseMixin}\n     */\n    expireCache() {\n      // do nothing in base, should be overridden by sub-function\n      return this;\n    }\n\n    /**\n     * Attach a Legend widget to this chart. The legend widget will automatically draw legend labels\n     * based on the color setting and names associated with each group.\n     * @example\n     * chart.legend(new Legend().x(400).y(10).itemHeight(13).gap(5))\n     * @param {Legend} [legend]\n     * @returns {Legend|BaseMixin}\n     */\n    legend(legend) {\n      if (!arguments.length) {\n        return this._legend;\n      }\n      this._legend = legend;\n      this._legend.parent(this);\n      return this;\n    }\n\n    /**\n     * Returns the internal numeric ID of the chart.\n     * @returns {String}\n     */\n    chartID() {\n      return this.__dcFlag__;\n    }\n\n    /**\n     * Set chart options using a configuration object. Each key in the object will cause the method of\n     * the same name to be called with the value to set that attribute for the chart.\n     * @example\n     * chart.options({dimension: myDimension, group: myGroup});\n     * @param {{}} opts\n     * @returns {BaseMixin}\n     */\n    options(opts) {\n      const applyOptions = ['anchor', 'group', 'xAxisLabel', 'yAxisLabel', 'stack', 'title', 'point', 'getColor', 'overlayGeoJson'];\n      for (const o in opts) {\n        if (typeof this[o] === 'function') {\n          if (opts[o] instanceof Array && applyOptions.indexOf(o) !== -1) {\n            this[o].apply(this, opts[o]);\n          } else {\n            this[o].call(this, opts[o]);\n          }\n        } else {\n          logger.debug(`Not a valid option setter name: ${o}`);\n        }\n      }\n      return this;\n    }\n\n    /**\n     * All dc chart instance supports the following listeners.\n     * Supports the following events:\n     * * `renderlet` - This listener function will be invoked after transitions after redraw and render. Replaces the\n     * deprecated {@link BaseMixin#renderlet renderlet} method.\n     * * `pretransition` - Like `.on('renderlet', ...)` but the event is fired before transitions start.\n     * * `preRender` - This listener function will be invoked before chart rendering.\n     * * `postRender` - This listener function will be invoked after chart finish rendering including\n     * all renderlets' logic.\n     * * `preRedraw` - This listener function will be invoked before chart redrawing.\n     * * `postRedraw` - This listener function will be invoked after chart finish redrawing\n     * including all renderlets' logic.\n     * * `filtered` - This listener function will be invoked after a filter is applied, added or removed.\n     * * `zoomed` - This listener function will be invoked after a zoom is triggered.\n     * @see {@link https://github.com/d3/d3-dispatch/blob/master/README.md#dispatch_on d3.dispatch.on}\n     * @example\n     * .on('renderlet', function(chart, filter){...})\n     * .on('pretransition', function(chart, filter){...})\n     * .on('preRender', function(chart){...})\n     * .on('postRender', function(chart){...})\n     * .on('preRedraw', function(chart){...})\n     * .on('postRedraw', function(chart){...})\n     * .on('filtered', function(chart, filter){...})\n     * .on('zoomed', function(chart, filter){...})\n     * @param {String} event\n     * @param {Function} listener\n     * @returns {BaseMixin}\n     */\n    on(event, listener) {\n      this._listeners.on(event, listener);\n      return this;\n    }\n\n    /**\n     * A renderlet is similar to an event listener on rendering event. Multiple renderlets can be added\n     * to an individual chart.  Each time a chart is rerendered or redrawn the renderlets are invoked\n     * right after the chart finishes its transitions, giving you a way to modify the SVGElements.\n     * Renderlet functions take the chart instance as the only input parameter and you can\n     * use the dc API or use raw d3 to achieve pretty much any effect.\n     *\n     * Use {@link BaseMixin#on on} with a 'renderlet' prefix.\n     * Generates a random key for the renderlet, which makes it hard to remove.\n     * @deprecated chart.renderlet has been deprecated. Please use chart.on(\"renderlet.<renderletKey>\", renderletFunction)\n     * @example\n     * // do this instead of .renderlet(function(chart) { ... })\n     * chart.on(\"renderlet\", function(chart){\n     *     // mix of dc API and d3 manipulation\n     *     chart.select('g.y').style('display', 'none');\n     *     // its a closure so you can also access other chart variable available in the closure scope\n     *     moveChart.filter(chart.filter());\n     * });\n     * @param {Function} renderletFunction\n     * @returns {BaseMixin}\n     */\n    renderlet(renderletFunction) {\n      logger.warnOnce('chart.renderlet has been deprecated. Please use chart.on(\"renderlet.<renderletKey>\", renderletFunction)');\n      this.on(`renderlet.${utils.uniqueId()}`, renderletFunction);\n      return this;\n    }\n  }\n  const baseMixin = () => new BaseMixin();\n\n  /**\n   * The Color Mixin is an abstract chart functional class providing universal coloring support\n   * as a mix-in for any concrete chart implementation.\n   * @mixin ColorMixin\n   * @param {Object} Base\n   * @returns {ColorMixin}\n   */\n  const ColorMixin = Base => class extends Base {\n    constructor() {\n      super();\n      this._colors = d3Scale.scaleOrdinal(config.defaultColors());\n      this._colorAccessor = d => this.keyAccessor()(d);\n      this._colorCalculator = undefined;\n      {\n        const chart = this;\n        // ES6: this method is called very differently from stack-mixin and derived charts\n        // Removing and placing it as a member method is tricky\n\n        /**\n             * Get the color for the datum d and counter i. This is used internally by charts to retrieve a color.\n             * @method getColor\n             * @memberof ColorMixin\n             * @instance\n             * @param {*} d\n             * @param {Number} [i]\n             * @returns {String}\n             */\n        chart.getColor = function (d, i) {\n          return chart._colorCalculator ? chart._colorCalculator.call(this, d, i) : chart._colors(chart._colorAccessor.call(this, d, i));\n        };\n      }\n    }\n\n    /**\n         * Set the domain by determining the min and max values as retrieved by\n         * {@link ColorMixin#colorAccessor .colorAccessor} over the chart's dataset.\n         * @memberof ColorMixin\n         * @instance\n         * @returns {ColorMixin}\n         */\n    calculateColorDomain() {\n      const newDomain = [d3Array.min(this.data(), this.colorAccessor()), d3Array.max(this.data(), this.colorAccessor())];\n      this._colors.domain(newDomain);\n      return this;\n    }\n\n    /**\n         * Retrieve current color scale or set a new color scale. This methods accepts any function that\n         * operates like a d3 scale.\n         * @memberof ColorMixin\n         * @instance\n         * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\n         * @example\n         * // alternate categorical scale\n         * chart.colors(d3.scale.category20b());\n         * // ordinal scale\n         * chart.colors(d3.scaleOrdinal().range(['red','green','blue']));\n         * // convenience method, the same as above\n         * chart.ordinalColors(['red','green','blue']);\n         * // set a linear scale\n         * chart.linearColors([\"#4575b4\", \"#ffffbf\", \"#a50026\"]);\n         * @param {d3.scale} [colorScale=d3.scaleOrdinal(d3.schemeCategory20c)]\n         * @returns {d3.scale|ColorMixin}\n         */\n    colors(colorScale) {\n      if (!arguments.length) {\n        return this._colors;\n      }\n      if (colorScale instanceof Array) {\n        this._colors = d3Scale.scaleQuantize().range(colorScale); // deprecated legacy support, note: this fails for ordinal domains\n      } else {\n        this._colors = typeof colorScale === 'function' ? colorScale : utils.constant(colorScale);\n      }\n      return this;\n    }\n\n    /**\n         * Convenience method to set the color scale to\n         * {@link https://github.com/d3/d3-scale/blob/master/README.md#ordinal-scales d3.scaleOrdinal} with\n         * range `r`.\n         * @memberof ColorMixin\n         * @instance\n         * @param {Array<String>} r\n         * @returns {ColorMixin}\n         */\n    ordinalColors(r) {\n      return this.colors(d3Scale.scaleOrdinal().range(r));\n    }\n\n    /**\n         * Convenience method to set the color scale to an Hcl interpolated linear scale with range `r`.\n         * @memberof ColorMixin\n         * @instance\n         * @param {Array<Number>} r\n         * @returns {ColorMixin}\n         */\n    linearColors(r) {\n      return this.colors(d3Scale.scaleLinear().range(r).interpolate(d3Interpolate.interpolateHcl));\n    }\n\n    /**\n         * Set or the get color accessor function. This function will be used to map a data point in a\n         * crossfilter group to a color value on the color scale. The default function uses the key\n         * accessor.\n         * @memberof ColorMixin\n         * @instance\n         * @example\n         * // default index based color accessor\n         * .colorAccessor(function (d, i){return i;})\n         * // color accessor for a multi-value crossfilter reduction\n         * .colorAccessor(function (d){return d.value.absGain;})\n         * @param {Function} [colorAccessor]\n         * @returns {Function|ColorMixin}\n         */\n    colorAccessor(colorAccessor) {\n      if (!arguments.length) {\n        return this._colorAccessor;\n      }\n      this._colorAccessor = colorAccessor;\n      return this;\n    }\n\n    /**\n         * Set or get the current domain for the color mapping function. The domain must be supplied as an\n         * array.\n         *\n         * Note: previously this method accepted a callback function. Instead you may use a custom scale\n         * set by {@link ColorMixin#colors .colors}.\n         * @memberof ColorMixin\n         * @instance\n         * @param {Array<String>} [domain]\n         * @returns {Array<String>|ColorMixin}\n         */\n    colorDomain(domain) {\n      if (!arguments.length) {\n        return this._colors.domain();\n      }\n      this._colors.domain(domain);\n      return this;\n    }\n\n    /**\n         * Overrides the color selection algorithm, replacing it with a simple function.\n         *\n         * Normally colors will be determined by calling the `colorAccessor` to get a value, and then passing that\n         * value through the `colorScale`.\n         *\n         * But sometimes it is difficult to get a color scale to produce the desired effect. The `colorCalculator`\n         * takes the datum and index and returns a color directly.\n         * @memberof ColorMixin\n         * @instance\n         * @param {*} [colorCalculator]\n         * @returns {Function|ColorMixin}\n         */\n    colorCalculator(colorCalculator) {\n      if (!arguments.length) {\n        return this._colorCalculator || this.getColor;\n      }\n      this._colorCalculator = colorCalculator;\n      return this;\n    }\n  };\n\n  /**\n   * This Mixin provides reusable functionalities for any chart that needs to visualize data using bubbles.\n   * @mixin BubbleMixin\n   * @mixes ColorMixin\n   * @param {Object} Base\n   * @returns {BubbleMixin}\n   */\n  const BubbleMixin = Base => class extends ColorMixin(Base) {\n    constructor() {\n      super();\n      this._maxBubbleRelativeSize = 0.3;\n      this._minRadiusWithLabel = 10;\n      this._sortBubbleSize = false;\n      this._elasticRadius = false;\n      this._excludeElasticZero = true;\n\n      // These cane be used by derived classes as well, so member status\n      this.BUBBLE_NODE_CLASS = 'node';\n      this.BUBBLE_CLASS = 'bubble';\n      this.MIN_RADIUS = 10;\n      this.renderLabel(true);\n      this.data(group => {\n        const data = group.all();\n        if (this._keyboardAccessible) {\n          // sort based on the x value (key)\n          data.sort((a, b) => d3Array.ascending(this.keyAccessor()(a), this.keyAccessor()(b)));\n        }\n        if (this._sortBubbleSize) {\n          // sort descending so smaller bubbles are on top\n          const radiusAccessor = this.radiusValueAccessor();\n          data.sort((a, b) => d3Array.descending(radiusAccessor(a), radiusAccessor(b)));\n        }\n        return data;\n      });\n      this._r = d3Scale.scaleLinear().domain([0, 100]);\n    }\n    _rValueAccessor(d) {\n      return d.r;\n    }\n\n    /**\n         * Get or set the bubble radius scale. By default the bubble chart uses\n         * {@link https://github.com/d3/d3-scale/blob/master/README.md#scaleLinear d3.scaleLinear().domain([0, 100])}\n         * as its radius scale.\n         * @memberof BubbleMixin\n         * @instance\n         * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\n         * @param {d3.scale} [bubbleRadiusScale=d3.scaleLinear().domain([0, 100])]\n         * @returns {d3.scale|BubbleMixin}\n         */\n    r(bubbleRadiusScale) {\n      if (!arguments.length) {\n        return this._r;\n      }\n      this._r = bubbleRadiusScale;\n      return this;\n    }\n\n    /**\n         * Turn on or off the elastic bubble radius feature, or return the value of the flag. If this\n         * feature is turned on, then bubble radii will be automatically rescaled to fit the chart better.\n         * @memberof BubbleMixin\n         * @instance\n         * @param {Boolean} [elasticRadius=false]\n         * @returns {Boolean|BubbleChart}\n         */\n    elasticRadius(elasticRadius) {\n      if (!arguments.length) {\n        return this._elasticRadius;\n      }\n      this._elasticRadius = elasticRadius;\n      return this;\n    }\n    calculateRadiusDomain() {\n      if (this._elasticRadius) {\n        this.r().domain([this.rMin(), this.rMax()]);\n      }\n    }\n\n    /**\n         * Get or set the radius value accessor function. If set, the radius value accessor function will\n         * be used to retrieve a data value for each bubble. The data retrieved then will be mapped using\n         * the r scale to the actual bubble radius. This allows you to encode a data dimension using bubble\n         * size.\n         * @memberof BubbleMixin\n         * @instance\n         * @param {Function} [radiusValueAccessor]\n         * @returns {Function|BubbleMixin}\n         */\n    radiusValueAccessor(radiusValueAccessor) {\n      if (!arguments.length) {\n        return this._rValueAccessor;\n      }\n      this._rValueAccessor = radiusValueAccessor;\n      return this;\n    }\n    rMin() {\n      let values = this.data().map(this.radiusValueAccessor());\n      if (this._excludeElasticZero) {\n        values = values.filter(value => value > 0);\n      }\n      return d3Array.min(values);\n    }\n    rMax() {\n      return d3Array.max(this.data(), e => this.radiusValueAccessor()(e));\n    }\n    bubbleR(d) {\n      const value = this.radiusValueAccessor()(d);\n      let r = this.r()(value);\n      if (isNaN(r) || value <= 0) {\n        r = 0;\n      }\n      return r;\n    }\n    _labelFunction(d) {\n      return this.label()(d);\n    }\n    _shouldLabel(d) {\n      return this.bubbleR(d) > this._minRadiusWithLabel;\n    }\n    _labelOpacity(d) {\n      return this._shouldLabel(d) ? 1 : 0;\n    }\n    _labelPointerEvent(d) {\n      return this._shouldLabel(d) ? 'all' : 'none';\n    }\n    _doRenderLabel(bubbleGEnter) {\n      if (this.renderLabel()) {\n        let label = bubbleGEnter.select('text');\n        if (label.empty()) {\n          label = bubbleGEnter.append('text').attr('text-anchor', 'middle').attr('dy', '.3em').on('click', d3compat.eventHandler(d => this.onClick(d)));\n        }\n        label.attr('opacity', 0).attr('pointer-events', d => this._labelPointerEvent(d)).text(d => this._labelFunction(d));\n        transition(label, this.transitionDuration(), this.transitionDelay()).attr('opacity', d => this._labelOpacity(d));\n      }\n    }\n    doUpdateLabels(bubbleGEnter) {\n      if (this.renderLabel()) {\n        const labels = bubbleGEnter.select('text').attr('pointer-events', d => this._labelPointerEvent(d)).text(d => this._labelFunction(d));\n        transition(labels, this.transitionDuration(), this.transitionDelay()).attr('opacity', d => this._labelOpacity(d));\n      }\n    }\n    _titleFunction(d) {\n      return this.title()(d);\n    }\n    _doRenderTitles(g) {\n      if (this.renderTitle()) {\n        const title = g.select('title');\n        if (title.empty()) {\n          g.append('title').text(d => this._titleFunction(d));\n        }\n      }\n    }\n    doUpdateTitles(g) {\n      if (this.renderTitle()) {\n        g.select('title').text(d => this._titleFunction(d));\n      }\n    }\n\n    /**\n         * Turn on or off the bubble sorting feature, or return the value of the flag. If enabled,\n         * bubbles will be sorted by their radius, with smaller bubbles in front.\n         * @memberof BubbleChart\n         * @instance\n         * @param {Boolean} [sortBubbleSize=false]\n         * @returns {Boolean|BubbleChart}\n         */\n    sortBubbleSize(sortBubbleSize) {\n      if (!arguments.length) {\n        return this._sortBubbleSize;\n      }\n      this._sortBubbleSize = sortBubbleSize;\n      return this;\n    }\n\n    /**\n         * Get or set the minimum radius. This will be used to initialize the radius scale's range.\n         * @memberof BubbleMixin\n         * @instance\n         * @param {Number} [radius=10]\n         * @returns {Number|BubbleMixin}\n         */\n    minRadius(radius) {\n      if (!arguments.length) {\n        return this.MIN_RADIUS;\n      }\n      this.MIN_RADIUS = radius;\n      return this;\n    }\n\n    /**\n         * Get or set the minimum radius for label rendering. If a bubble's radius is less than this value\n         * then no label will be rendered.\n         * @memberof BubbleMixin\n         * @instance\n         * @param {Number} [radius=10]\n         * @returns {Number|BubbleMixin}\n         */\n\n    minRadiusWithLabel(radius) {\n      if (!arguments.length) {\n        return this._minRadiusWithLabel;\n      }\n      this._minRadiusWithLabel = radius;\n      return this;\n    }\n\n    /**\n         * Get or set the maximum relative size of a bubble to the length of x axis. This value is useful\n         * when the difference in radius between bubbles is too great.\n         * @memberof BubbleMixin\n         * @instance\n         * @param {Number} [relativeSize=0.3]\n         * @returns {Number|BubbleMixin}\n         */\n    maxBubbleRelativeSize(relativeSize) {\n      if (!arguments.length) {\n        return this._maxBubbleRelativeSize;\n      }\n      this._maxBubbleRelativeSize = relativeSize;\n      return this;\n    }\n\n    /**\n     * Should the chart exclude zero when calculating elastic bubble radius?\n     * @memberof BubbleMixin\n     * @instance\n     * @param  {Boolean} [excludeZero=true]\n     * @returns {Boolean|BubbleMixin}\n     */\n    excludeElasticZero(excludeZero) {\n      if (!arguments.length) {\n        return this._excludeElasticZero;\n      }\n      this._excludeElasticZero = excludeZero;\n      return this;\n    }\n    fadeDeselectedArea(selection) {\n      if (this.hasFilter()) {\n        const chart = this;\n        this.selectAll(`g.${chart.BUBBLE_NODE_CLASS}`).each(function (d) {\n          if (chart.isSelectedNode(d)) {\n            chart.highlightSelected(this);\n          } else {\n            chart.fadeDeselected(this);\n          }\n        });\n      } else {\n        const chart = this;\n        this.selectAll(`g.${chart.BUBBLE_NODE_CLASS}`).each(function () {\n          chart.resetHighlight(this);\n        });\n      }\n    }\n    isSelectedNode(d) {\n      return this.hasFilter(d.key);\n    }\n    onClick(d) {\n      const filter = d.key;\n      events.trigger(() => {\n        this.filter(filter);\n        this.redrawGroup();\n      });\n    }\n  };\n\n  /**\n   * Cap is a mixin that groups small data elements below a _cap_ into an *others* grouping for both the\n   * Row and Pie Charts.\n   *\n   * The top ordered elements in the group up to the cap amount will be kept in the chart, and the rest\n   * will be replaced with an *others* element, with value equal to the sum of the replaced values. The\n   * keys of the elements below the cap limit are recorded in order to filter by those keys when the\n   * others* element is clicked.\n   * @mixin CapMixin\n   * @param {Object} Base\n   * @returns {CapMixin}\n   */\n  const CapMixin = Base => class extends Base {\n    constructor() {\n      super();\n      this._cap = Infinity;\n      this._takeFront = true;\n      this._othersLabel = 'Others';\n      this._othersGrouper = (topItems, restItems) => {\n        const restItemsSum = d3Array.sum(restItems, this.valueAccessor()),\n          restKeys = restItems.map(this.keyAccessor());\n        if (restItemsSum > 0) {\n          return topItems.concat([{\n            others: restKeys,\n            key: this.othersLabel(),\n            value: restItemsSum\n          }]);\n        }\n        return topItems;\n      };\n\n      // emulate old group.top(N) ordering\n      this.ordering(kv => -kv.value);\n\n      // return N \"top\" groups, where N is the cap, sorted by baseMixin.ordering\n      // whether top means front or back depends on takeFront\n      this.data(group => {\n        if (this._cap === Infinity) {\n          return this._computeOrderedGroups(group.all());\n        } else {\n          let items = group.all(),\n            rest;\n          items = this._computeOrderedGroups(items); // sort by baseMixin.ordering\n\n          if (this._cap) {\n            if (this._takeFront) {\n              rest = items.slice(this._cap);\n              items = items.slice(0, this._cap);\n            } else {\n              const start = Math.max(0, items.length - this._cap);\n              rest = items.slice(0, start);\n              items = items.slice(start);\n            }\n          }\n          if (this._othersGrouper) {\n            return this._othersGrouper(items, rest);\n          }\n          return items;\n        }\n      });\n    }\n    cappedKeyAccessor(d, i) {\n      if (d.others) {\n        return d.key;\n      }\n      return this.keyAccessor()(d, i);\n    }\n    cappedValueAccessor(d, i) {\n      if (d.others) {\n        return d.value;\n      }\n      return this.valueAccessor()(d, i);\n    }\n\n    /**\n         * Get or set the count of elements to that will be included in the cap. If there is an\n         * {@link CapMixin#othersGrouper othersGrouper}, any further elements will be combined in an\n         * extra element with its name determined by {@link CapMixin#othersLabel othersLabel}.\n         *\n         * As of dc.js 2.1 and onward, the capped charts use\n         * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all()}\n         * and {@link BaseMixin#ordering BaseMixin.ordering()} to determine the order of\n         * elements. Then `cap` and {@link CapMixin#takeFront takeFront} determine how many elements\n         * to keep, from which end of the resulting array.\n         *\n         * **Migration note:** Up through dc.js 2.0.*, capping used\n         * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_top group.top(N)},\n         * which selects the largest items according to\n         * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_order group.order()}.\n         * The chart then sorted the items according to {@link BaseMixin#ordering baseMixin.ordering()}.\n         * So the two values essentially had to agree, but if the `group.order()` was incorrect (it's\n         * easy to forget about), the wrong rows or slices would be displayed, in the correct order.\n         *\n         * If your chart previously relied on `group.order()`, use `chart.ordering()` instead. As of\n         * 2.1.5, the ordering defaults to sorting from greatest to least like `group.top(N)` did.\n         *\n         * If you want to cap by one ordering but sort by another, you can still do this by\n         * specifying your own {@link BaseMixin#data `.data()`} callback. For details, see the example\n         * {@link https://dc-js.github.io/dc.js/examples/cap-and-sort-differently.html Cap and Sort Differently}.\n         * @memberof CapMixin\n         * @instance\n         * @param {Number} [count=Infinity]\n         * @returns {Number|CapMixin}\n         */\n    cap(count) {\n      if (!arguments.length) {\n        return this._cap;\n      }\n      this._cap = count;\n      return this;\n    }\n\n    /**\n         * Get or set the direction of capping. If set, the chart takes the first\n         * {@link CapMixin#cap cap} elements from the sorted array of elements; otherwise\n         * it takes the last `cap` elements.\n         * @memberof CapMixin\n         * @instance\n         * @param {Boolean} [takeFront=true]\n         * @returns {Boolean|CapMixin}\n         */\n    takeFront(takeFront) {\n      if (!arguments.length) {\n        return this._takeFront;\n      }\n      this._takeFront = takeFront;\n      return this;\n    }\n\n    /**\n         * Get or set the label for *Others* slice when slices cap is specified.\n         * @memberof CapMixin\n         * @instance\n         * @param {String} [label=\"Others\"]\n         * @returns {String|CapMixin}\n         */\n    othersLabel(label) {\n      if (!arguments.length) {\n        return this._othersLabel;\n      }\n      this._othersLabel = label;\n      return this;\n    }\n\n    /**\n         * Get or set the grouper function that will perform the insertion of data for the *Others* slice\n         * if the slices cap is specified. If set to a falsy value, no others will be added.\n         *\n         * The grouper function takes an array of included (\"top\") items, and an array of the rest of\n         * the items. By default the grouper function computes the sum of the rest.\n         * @memberof CapMixin\n         * @instance\n         * @example\n         * // Do not show others\n         * chart.othersGrouper(null);\n         * // Default others grouper\n         * chart.othersGrouper(function (topItems, restItems) {\n         *     var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\n         *         restKeys = restItems.map(_chart.keyAccessor());\n         *     if (restItemsSum > 0) {\n         *         return topItems.concat([{\n         *             others: restKeys,\n         *             key: _chart.othersLabel(),\n         *             value: restItemsSum\n         *         }]);\n         *     }\n         *     return topItems;\n         * });\n         * @param {Function} [grouperFunction]\n         * @returns {Function|CapMixin}\n         */\n    othersGrouper(grouperFunction) {\n      if (!arguments.length) {\n        return this._othersGrouper;\n      }\n      this._othersGrouper = grouperFunction;\n      return this;\n    }\n    onClick(d) {\n      if (d.others) {\n        this.filter([d.others]);\n      }\n      super.onClick(d);\n    }\n  };\n\n  /**\n   * Margin is a mixin that provides margin utility functions for both the Row Chart and Coordinate Grid\n   * Charts.\n   * @mixin MarginMixin\n   * @param {Object} Base\n   * @returns {MarginMixin}\n   */\n  class MarginMixin extends BaseMixin {\n    constructor() {\n      super();\n      this._margin = {\n        top: 10,\n        right: 50,\n        bottom: 30,\n        left: 30\n      };\n    }\n\n    /**\n     * Get or set the margins for a particular coordinate grid chart instance. The margins is stored as\n     * an associative Javascript array.\n     * @memberof MarginMixin\n     * @instance\n     * @example\n     * var leftMargin = chart.margins().left; // 30 by default\n     * chart.margins().left = 50;\n     * leftMargin = chart.margins().left; // now 50\n     * @param {{top: Number, right: Number, left: Number, bottom: Number}} [margins={top: 10, right: 50, bottom: 30, left: 30}]\n     * @returns {{top: Number, right: Number, left: Number, bottom: Number}|MarginMixin}\n     */\n    margins(margins) {\n      if (!arguments.length) {\n        return this._margin;\n      }\n      this._margin = margins;\n      return this;\n    }\n\n    /**\n     * Effective width of the chart excluding margins (in pixels).\n     *\n     * @returns {number}\n     */\n    effectiveWidth() {\n      return this.width() - this.margins().left - this.margins().right;\n    }\n\n    /**\n     * Effective height of the chart excluding margins (in pixels).\n     *\n     * @returns {number}\n     */\n    effectiveHeight() {\n      return this.height() - this.margins().top - this.margins().bottom;\n    }\n  }\n  const GRID_LINE_CLASS = 'grid-line';\n  const HORIZONTAL_CLASS = 'horizontal';\n  const VERTICAL_CLASS = 'vertical';\n  const Y_AXIS_LABEL_CLASS = 'y-axis-label';\n  const X_AXIS_LABEL_CLASS = 'x-axis-label';\n  const CUSTOM_BRUSH_HANDLE_CLASS = 'custom-brush-handle';\n  const DEFAULT_AXIS_LABEL_PADDING = 12;\n\n  /**\n   * Coordinate Grid is an abstract base chart designed to support a number of coordinate grid based\n   * concrete chart types, e.g. bar chart, line chart, and bubble chart.\n   * @mixin CoordinateGridMixin\n   * @mixes ColorMixin\n   * @mixes MarginMixin\n   */\n  class CoordinateGridMixin extends ColorMixin(MarginMixin) {\n    constructor() {\n      super();\n      this.colors(d3Scale.scaleOrdinal(d3ScaleChromatic.schemeCategory10));\n      this._mandatoryAttributes().push('x');\n      this._parent = undefined;\n      this._g = undefined;\n      this._chartBodyG = undefined;\n      this._x = undefined;\n      this._origX = undefined; // Will hold original scale in case of zoom\n      this._xOriginalDomain = undefined;\n      this._xAxis = null;\n      this._xUnits = units.integers;\n      this._xAxisPadding = 0;\n      this._xAxisPaddingUnit = d3Time.timeDay;\n      this._xElasticity = false;\n      this._xAxisLabel = undefined;\n      this._xAxisLabelPadding = 0;\n      this._lastXDomain = undefined;\n      this._y = undefined;\n      this._yAxis = null;\n      this._yAxisPadding = 0;\n      this._yElasticity = false;\n      this._yAxisLabel = undefined;\n      this._yAxisLabelPadding = 0;\n      this._brush = d3Brush.brushX();\n      this._gBrush = undefined;\n      this._brushOn = true;\n      this._parentBrushOn = false;\n      this._round = undefined;\n      this._ignoreBrushEvents = false; // ignore when carrying out programmatic brush operations\n\n      this._renderHorizontalGridLine = false;\n      this._renderVerticalGridLine = false;\n      this._resizing = false;\n      this._unitCount = undefined;\n      this._zoomScale = [1, Infinity];\n      this._zoomOutRestrict = true;\n      this._zoom = d3Zoom.zoom().on('zoom', d3compat.eventHandler((d, evt) => this._onZoom(evt)));\n      this._nullZoom = d3Zoom.zoom().on('zoom', null);\n      this._hasBeenMouseZoomable = false;\n      this._ignoreZoomEvents = false; // ignore when carrying out programmatic zoom operations\n\n      this._rangeChart = undefined;\n      this._focusChart = undefined;\n      this._mouseZoomable = false;\n      this._clipPadding = 0;\n      this._fOuterRangeBandPadding = 0.5;\n      this._fRangeBandPadding = 0;\n      this._useRightYAxis = false;\n      this._useTopXAxis = false;\n    }\n\n    /**\n     * When changing the domain of the x or y scale, it is necessary to tell the chart to recalculate\n     * and redraw the axes. (`.rescale()` is called automatically when the x or y scale is replaced\n     * with {@link CoordinateGridMixin+x .x()} or {@link CoordinateGridMixin#y .y()}, and has\n     * no effect on elastic scales.)\n     * @returns {CoordinateGridMixin}\n     */\n    rescale() {\n      this._unitCount = undefined;\n      this._resizing = true;\n      return this;\n    }\n    resizing(resizing) {\n      if (!arguments.length) {\n        return this._resizing;\n      }\n      this._resizing = resizing;\n      return this;\n    }\n\n    /**\n     * Get or set the range selection chart associated with this instance. Setting the range selection\n     * chart using this function will automatically update its selection brush when the current chart\n     * zooms in. In return the given range chart will also automatically attach this chart as its focus\n     * chart hence zoom in when range brush updates.\n     *\n     * Usually the range and focus charts will share a dimension. The range chart will set the zoom\n     * boundaries for the focus chart, so its dimension values must be compatible with the domain of\n     * the focus chart.\n     *\n     * See the [Nasdaq 100 Index](http://dc-js.github.com/dc.js/) example for this effect in action.\n     * @param {CoordinateGridMixin} [rangeChart]\n     * @returns {CoordinateGridMixin}\n     */\n    rangeChart(rangeChart) {\n      if (!arguments.length) {\n        return this._rangeChart;\n      }\n      this._rangeChart = rangeChart;\n      this._rangeChart.focusChart(this);\n      return this;\n    }\n\n    /**\n     * Get or set the scale extent for mouse zooms.\n     * @param {Array<Number|Date>} [extent=[1, Infinity]]\n     * @returns {Array<Number|Date>|CoordinateGridMixin}\n     */\n    zoomScale(extent) {\n      if (!arguments.length) {\n        return this._zoomScale;\n      }\n      this._zoomScale = extent;\n      return this;\n    }\n\n    /**\n     * Get or set the zoom restriction for the chart. If true limits the zoom to origional domain of the chart.\n     * @param {Boolean} [zoomOutRestrict=true]\n     * @returns {Boolean|CoordinateGridMixin}\n     */\n    zoomOutRestrict(zoomOutRestrict) {\n      if (!arguments.length) {\n        return this._zoomOutRestrict;\n      }\n      this._zoomOutRestrict = zoomOutRestrict;\n      return this;\n    }\n    _generateG(parent) {\n      if (parent === undefined) {\n        this._parent = this.svg();\n      } else {\n        this._parent = parent;\n      }\n      const href = window.location.href.split('#')[0];\n      this._g = this._parent.append('g');\n      this._chartBodyG = this._g.append('g').attr('class', 'chart-body').attr('transform', `translate(${this.margins().left}, ${this.margins().top})`).attr('clip-path', `url(${href}#${this._getClipPathId()})`);\n      return this._g;\n    }\n\n    /**\n     * Get or set the root g element. This method is usually used to retrieve the g element in order to\n     * overlay custom svg drawing programatically. **Caution**: The root g element is usually generated\n     * by dc.js internals, and resetting it might produce unpredictable result.\n     * @param {SVGElement} [gElement]\n     * @returns {SVGElement|CoordinateGridMixin}\n     */\n    g(gElement) {\n      if (!arguments.length) {\n        return this._g;\n      }\n      this._g = gElement;\n      return this;\n    }\n\n    /**\n     * Set or get mouse zoom capability flag (default: false). When turned on the chart will be\n     * zoomable using the mouse wheel. If the range selector chart is attached zooming will also update\n     * the range selection brush on the associated range selector chart.\n     * @param {Boolean} [mouseZoomable=false]\n     * @returns {Boolean|CoordinateGridMixin}\n     */\n    mouseZoomable(mouseZoomable) {\n      if (!arguments.length) {\n        return this._mouseZoomable;\n      }\n      this._mouseZoomable = mouseZoomable;\n      return this;\n    }\n\n    /**\n     * Retrieve the svg group for the chart body.\n     * @param {SVGElement} [chartBodyG]\n     * @returns {SVGElement}\n     */\n    chartBodyG(chartBodyG) {\n      if (!arguments.length) {\n        return this._chartBodyG;\n      }\n      this._chartBodyG = chartBodyG;\n      return this;\n    }\n\n    /**\n     * **mandatory**\n     *\n     * Get or set the x scale. The x scale can be any d3\n     * {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale} or\n     * {@link https://github.com/d3/d3-scale/blob/master/README.md#ordinal-scales ordinal scale}\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\n     * @example\n     * // set x to a linear scale\n     * chart.x(d3.scaleLinear().domain([-2500, 2500]))\n     * // set x to a time scale to generate histogram\n     * chart.x(d3.scaleTime().domain([new Date(1985, 0, 1), new Date(2012, 11, 31)]))\n     * @param {d3.scale} [xScale]\n     * @returns {d3.scale|CoordinateGridMixin}\n     */\n    x(xScale) {\n      if (!arguments.length) {\n        return this._x;\n      }\n      this._x = xScale;\n      this._xOriginalDomain = this._x.domain();\n      this.rescale();\n      return this;\n    }\n    xOriginalDomain() {\n      return this._xOriginalDomain;\n    }\n\n    /**\n     * Set or get the xUnits function. The coordinate grid chart uses the xUnits function to calculate\n     * the number of data projections on the x axis such as the number of bars for a bar chart or the\n     * number of dots for a line chart.\n     *\n     * This function is expected to return a Javascript array of all data points on the x axis, or\n     * the number of points on the axis. d3 time range functions [d3.timeDays, d3.timeMonths, and\n     * d3.timeYears](https://github.com/d3/d3-time/blob/master/README.md#intervals) are all valid\n     * xUnits functions.\n     *\n     * dc.js also provides a few units function, see the {@link units Units Namespace} for\n     * a list of built-in units functions.\n     *\n     * Note that as of dc.js 3.0, `units.ordinal` is not a real function, because it is not\n     * possible to define this function compliant with the d3 range functions. It was already a\n     * magic value which caused charts to behave differently, and now it is completely so.\n     * @example\n     * // set x units to count days\n     * chart.xUnits(d3.timeDays);\n     * // set x units to count months\n     * chart.xUnits(d3.timeMonths);\n     *\n     * // A custom xUnits function can be used as long as it follows the following interface:\n     * // units in integer\n     * function(start, end) {\n     *      // simply calculates how many integers in the domain\n     *      return Math.abs(end - start);\n     * }\n     *\n     * // fixed units\n     * function(start, end) {\n     *      // be aware using fixed units will disable the focus/zoom ability on the chart\n     *      return 1000;\n     * }\n     * @param {Function} [xUnits=units.integers]\n     * @returns {Function|CoordinateGridMixin}\n     */\n    xUnits(xUnits) {\n      if (!arguments.length) {\n        return this._xUnits;\n      }\n      this._xUnits = xUnits;\n      return this;\n    }\n\n    /**\n     * Set or get the x axis used by a particular coordinate grid chart instance. This function is most\n     * useful when x axis customization is required. The x axis in dc.js is an instance of a\n     * {@link https://github.com/d3/d3-axis/blob/master/README.md#axisBottom d3 bottom axis object};\n     * therefore it supports any valid d3 axisBottom manipulation.\n     *\n     * **Caution**: The x axis is usually generated internally by dc; resetting it may cause\n     * unexpected results. Note also that when used as a getter, this function is not chainable:\n     * it returns the axis, not the chart,\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n         * so attempting to call chart functions after calling `.xAxis()` will fail}.\n     * @see {@link https://github.com/d3/d3-axis/blob/master/README.md#axisBottom d3.axisBottom}\n     * @example\n     * // customize x axis tick format\n     * chart.xAxis().tickFormat(function(v) {return v + '%';});\n     * // customize x axis tick values\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.axis} [xAxis=d3.axisBottom()]\n     * @returns {d3.axis|CoordinateGridMixin}\n     */\n    xAxis(xAxis) {\n      if (!arguments.length) {\n        if (!this._xAxis) {\n          this._xAxis = this._createXAxis();\n        }\n        return this._xAxis;\n      }\n      this._xAxis = xAxis;\n      return this;\n    }\n\n    /**\n     * Turn on/off elastic x axis behavior. If x axis elasticity is turned on, then the grid chart will\n     * attempt to recalculate the x axis range whenever a redraw event is triggered.\n     * @param {Boolean} [elasticX=false]\n     * @returns {Boolean|CoordinateGridMixin}\n     */\n    elasticX(elasticX) {\n      if (!arguments.length) {\n        return this._xElasticity;\n      }\n      this._xElasticity = elasticX;\n      return this;\n    }\n\n    /**\n     * Set or get x axis padding for the elastic x axis. The padding will be added to both end of the x\n     * axis if elasticX is turned on; otherwise it is ignored.\n     *\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n     * number or date x axes.  When padding a date axis, an integer represents number of units being padded\n     * and a percentage string will be treated the same as an integer. The unit will be determined by the\n     * xAxisPaddingUnit variable.\n     * @param {Number|String} [padding=0]\n     * @returns {Number|String|CoordinateGridMixin}\n     */\n    xAxisPadding(padding) {\n      if (!arguments.length) {\n        return this._xAxisPadding;\n      }\n      this._xAxisPadding = padding;\n      return this;\n    }\n\n    /**\n     * Set or get x axis padding unit for the elastic x axis. The padding unit will determine which unit to\n     * use when applying xAxis padding if elasticX is turned on and if x-axis uses a time dimension;\n     * otherwise it is ignored.\n     *\n     * The padding unit should be a\n     * [d3 time interval](https://github.com/d3/d3-time/blob/master/README.md#self._interval).\n     * For backward compatibility with dc.js 2.0, it can also be the name of a d3 time interval\n     * ('day', 'hour', etc). Available arguments are the\n     * [d3 time intervals](https://github.com/d3/d3-time/blob/master/README.md#intervals d3.timeInterval).\n     * @param {String} [unit=d3.timeDay]\n     * @returns {String|CoordinateGridMixin}\n     */\n    xAxisPaddingUnit(unit) {\n      if (!arguments.length) {\n        return this._xAxisPaddingUnit;\n      }\n      this._xAxisPaddingUnit = unit;\n      return this;\n    }\n\n    /**\n     * Returns the number of units displayed on the x axis. If the x axis is ordinal (`xUnits` is\n     * `units.ordinal`), this is the number of items in the domain of the x scale. Otherwise, the\n     * x unit count is calculated using the {@link CoordinateGridMixin#xUnits xUnits} function.\n     * @returns {Number}\n     */\n    xUnitCount() {\n      if (this._unitCount === undefined) {\n        if (this.isOrdinal()) {\n          // In this case it number of items in domain\n          this._unitCount = this.x().domain().length;\n        } else {\n          this._unitCount = this.xUnits()(this.x().domain()[0], this.x().domain()[1]);\n\n          // Sometimes xUnits() may return an array while sometimes directly the count\n          if (this._unitCount instanceof Array) {\n            this._unitCount = this._unitCount.length;\n          }\n        }\n      }\n      return this._unitCount;\n    }\n\n    /**\n     * Gets or sets whether the chart should be drawn with a right axis instead of a left axis. When\n     * used with a chart in a composite chart, allows both left and right Y axes to be shown on a\n     * chart.\n     * @param {Boolean} [useRightYAxis=false]\n     * @returns {Boolean|CoordinateGridMixin}\n     */\n    useRightYAxis(useRightYAxis) {\n      if (!arguments.length) {\n        return this._useRightYAxis;\n      }\n\n      // We need to warn if value is changing after self._yAxis was created\n      if (this._useRightYAxis !== useRightYAxis && this._yAxis) {\n        logger.warn('Value of useRightYAxis has been altered, after yAxis was created. ' + 'You might get unexpected yAxis behavior. ' + 'Make calls to useRightYAxis sooner in your chart creation process.');\n      }\n      this._useRightYAxis = useRightYAxis;\n      return this;\n    }\n\n    /**\n     * Gets or sets whether the chart should be drawn with a top axis instead of a bottom axis. When\n     * used with a chart in a composite chart, allows both top and bottom X axes to be shown on a\n     * chart.\n     * @param {Boolean} [useTopXAxis=false]\n     * @returns {Boolean|CoordinateGridMixin}\n     */\n    useTopXAxis(useTopXAxis) {\n      if (!arguments.length) {\n        return this._useTopXAxis;\n      }\n\n      // We need to warn if value is changing after self._yAxis was created\n      if (this._useTopXAxis !== useTopXAxis && this._xAxis) {\n        logger.warn('Value of useTopXAxis has been altered, after xAxis was created. ' + 'You might get unexpected yAxis behavior. ' + 'Make calls to useTopXAxis sooner in your chart creation process.');\n      }\n      this._useTopXAxis = useTopXAxis;\n      return this;\n    }\n\n    /**\n     * Returns true if the chart is using ordinal xUnits ({@link units.ordinal units.ordinal}, or false\n     * otherwise. Most charts behave differently with ordinal data and use the result of this method to\n     * trigger the appropriate logic.\n     * @returns {Boolean}\n     */\n    isOrdinal() {\n      return this.xUnits() === units.ordinal;\n    }\n    _useOuterPadding() {\n      return true;\n    }\n    _ordinalXDomain() {\n      const groups = this._computeOrderedGroups(this.data());\n      return groups.map(this.keyAccessor());\n    }\n    _createXAxis() {\n      return this._useTopXAxis ? d3Axis.axisTop() : d3Axis.axisBottom();\n    }\n\n    // eslint-disable-next-line complexity\n    _prepareXAxis(g, render) {\n      if (!this.isOrdinal()) {\n        if (this.elasticX()) {\n          this._x.domain([this.xAxisMin(), this.xAxisMax()]);\n        }\n      } else {\n        // self._chart.isOrdinal()\n        // D3v4 - Ordinal charts would need scaleBand\n        // bandwidth is a method in scaleBand\n        // (https://github.com/d3/d3-scale/blob/master/README.md#scaleBand)\n        if (!this._x.bandwidth) {\n          // If self._x is not a scaleBand create a new scale and\n          // copy the original domain to the new scale\n          logger.warn('For compatibility with d3v4+, dc.js d3.0 ordinal bar/line/bubble charts need ' + 'd3.scaleBand() for the x scale, instead of d3.scaleOrdinal(). ' + 'Replacing .x() with a d3.scaleBand with the same domain - ' + 'make the same change in your code to avoid this warning!');\n          this._x = d3Scale.scaleBand().domain(this._x.domain());\n        }\n        if (this.elasticX() || this._x.domain().length === 0) {\n          this._x.domain(this._ordinalXDomain());\n        }\n      }\n\n      // has the domain changed?\n      const xdom = this._x.domain();\n      if (render || !utils.arraysEqual(this._lastXDomain, xdom)) {\n        this.rescale();\n      }\n      this._lastXDomain = xdom;\n\n      // please can't we always use rangeBands for bar charts?\n      if (this.isOrdinal()) {\n        this._x.range([0, this.xAxisLength()]).paddingInner(this._fRangeBandPadding).paddingOuter(this._useOuterPadding() ? this._fOuterRangeBandPadding : 0);\n      } else {\n        this._x.range([0, this.xAxisLength()]);\n      }\n      if (!this._xAxis) {\n        this._xAxis = this._createXAxis();\n      }\n      this._xAxis = this._xAxis.scale(this.x());\n      this._renderVerticalGridLines(g);\n    }\n    renderXAxis(g) {\n      let axisXG = g.select('g.x');\n      if (axisXG.empty()) {\n        axisXG = g.append('g').attr('class', 'axis x').attr('transform', `translate(${this.margins().left},${this._xAxisY()})`);\n      }\n      let axisXLab = g.select(`text.${X_AXIS_LABEL_CLASS}`);\n      const axisXLabY = this._useTopXAxis ? this._xAxisLabelPadding : this.height() - this._xAxisLabelPadding;\n      if (axisXLab.empty() && this.xAxisLabel()) {\n        axisXLab = g.append('text').attr('class', X_AXIS_LABEL_CLASS).attr('transform', `translate(${this.margins().left + this.xAxisLength() / 2},${axisXLabY})`).attr('text-anchor', 'middle');\n      }\n      if (this.xAxisLabel() && axisXLab.text() !== this.xAxisLabel()) {\n        axisXLab.text(this.xAxisLabel());\n      }\n      transition(axisXG, this.transitionDuration(), this.transitionDelay()).attr('transform', `translate(${this.margins().left},${this._xAxisY()})`).call(this._xAxis);\n      transition(axisXLab, this.transitionDuration(), this.transitionDelay()).attr('transform', `translate(${this.margins().left + this.xAxisLength() / 2},${axisXLabY})`);\n    }\n    _renderVerticalGridLines(g) {\n      let gridLineG = g.select(`g.${VERTICAL_CLASS}`);\n      if (this._renderVerticalGridLine) {\n        if (gridLineG.empty()) {\n          gridLineG = g.insert('g', ':first-child').attr('class', `${GRID_LINE_CLASS} ${VERTICAL_CLASS}`).attr('transform', `translate(${this.margins().left},${this.margins().top})`);\n        }\n        const ticks = this._xAxis.tickValues() ? this._xAxis.tickValues() : typeof this._x.ticks === 'function' ? this._x.ticks.apply(this._x, this._xAxis.tickArguments()) : this._x.domain();\n        const lines = gridLineG.selectAll('line').data(ticks);\n\n        // enter\n        const linesGEnter = lines.enter().append('line').attr('x1', d => this._x(d)).attr('y1', this._xAxisY() - this.margins().top).attr('x2', d => this._x(d)).attr('y2', 0).attr('opacity', 0);\n        transition(linesGEnter, this.transitionDuration(), this.transitionDelay()).attr('opacity', 0.5);\n\n        // update\n        transition(lines, this.transitionDuration(), this.transitionDelay()).attr('x1', d => this._x(d)).attr('y1', this._xAxisY() - this.margins().top).attr('x2', d => this._x(d)).attr('y2', 0);\n\n        // exit\n        lines.exit().remove();\n      } else {\n        gridLineG.selectAll('line').remove();\n      }\n    }\n    _xAxisY() {\n      return this._useTopXAxis ? this.margins().top : this.height() - this.margins().bottom;\n    }\n    xAxisLength() {\n      return this.effectiveWidth();\n    }\n\n    /**\n     * Set or get the x axis label. If setting the label, you may optionally include additional padding to\n     * the margin to make room for the label. By default the padded is set to 12 to accomodate the text height.\n     * @param {String} [labelText]\n     * @param {Number} [padding=12]\n     * @returns {String}\n     */\n    xAxisLabel(labelText, padding) {\n      if (!arguments.length) {\n        return this._xAxisLabel;\n      }\n      this._xAxisLabel = labelText;\n      this.margins().bottom -= this._xAxisLabelPadding;\n      this._xAxisLabelPadding = padding === undefined ? DEFAULT_AXIS_LABEL_PADDING : padding;\n      this.margins().bottom += this._xAxisLabelPadding;\n      return this;\n    }\n    _createYAxis() {\n      return this._useRightYAxis ? d3Axis.axisRight() : d3Axis.axisLeft();\n    }\n    _prepareYAxis(g) {\n      if (this._y === undefined || this.elasticY()) {\n        if (this._y === undefined) {\n          this._y = d3Scale.scaleLinear();\n        }\n        const _min = this.yAxisMin() || 0;\n        const _max = this.yAxisMax() || 0;\n        this._y.domain([_min, _max]).rangeRound([this.yAxisHeight(), 0]);\n      }\n      this._y.range([this.yAxisHeight(), 0]);\n      if (!this._yAxis) {\n        this._yAxis = this._createYAxis();\n      }\n      this._yAxis.scale(this._y);\n      this._renderHorizontalGridLinesForAxis(g, this._y, this._yAxis);\n    }\n    renderYAxisLabel(axisClass, text, rotation, labelXPosition) {\n      labelXPosition = labelXPosition || this._yAxisLabelPadding;\n      let axisYLab = this.g().select(`text.${Y_AXIS_LABEL_CLASS}.${axisClass}-label`);\n      const labelYPosition = this.margins().top + this.yAxisHeight() / 2;\n      if (axisYLab.empty() && text) {\n        axisYLab = this.g().append('text').attr('transform', `translate(${labelXPosition},${labelYPosition}),rotate(${rotation})`).attr('class', `${Y_AXIS_LABEL_CLASS} ${axisClass}-label`).attr('text-anchor', 'middle').text(text);\n      }\n      if (text && axisYLab.text() !== text) {\n        axisYLab.text(text);\n      }\n      transition(axisYLab, this.transitionDuration(), this.transitionDelay()).attr('transform', `translate(${labelXPosition},${labelYPosition}),rotate(${rotation})`);\n    }\n    renderYAxisAt(axisClass, axis, position) {\n      let axisYG = this.g().select(`g.${axisClass}`);\n      if (axisYG.empty()) {\n        axisYG = this.g().append('g').attr('class', `axis ${axisClass}`).attr('transform', `translate(${position},${this.margins().top})`);\n      }\n      transition(axisYG, this.transitionDuration(), this.transitionDelay()).attr('transform', `translate(${position},${this.margins().top})`).call(axis);\n    }\n    renderYAxis() {\n      const axisPosition = this._useRightYAxis ? this.width() - this.margins().right : this._yAxisX();\n      this.renderYAxisAt('y', this._yAxis, axisPosition);\n      const labelPosition = this._useRightYAxis ? this.width() - this._yAxisLabelPadding : this._yAxisLabelPadding;\n      const rotation = this._useRightYAxis ? 90 : -90;\n      this.renderYAxisLabel('y', this.yAxisLabel(), rotation, labelPosition);\n    }\n    _renderHorizontalGridLinesForAxis(g, scale, axis) {\n      let gridLineG = g.select(`g.${HORIZONTAL_CLASS}`);\n      if (this._renderHorizontalGridLine) {\n        // see https://github.com/d3/d3-axis/blob/master/src/axis.js#L48\n        const ticks = axis.tickValues() ? axis.tickValues() : scale.ticks ? scale.ticks.apply(scale, axis.tickArguments()) : scale.domain();\n        if (gridLineG.empty()) {\n          gridLineG = g.insert('g', ':first-child').attr('class', `${GRID_LINE_CLASS} ${HORIZONTAL_CLASS}`).attr('transform', `translate(${this.margins().left},${this.margins().top})`);\n        }\n        const lines = gridLineG.selectAll('line').data(ticks);\n\n        // enter\n        const linesGEnter = lines.enter().append('line').attr('x1', 1).attr('y1', d => scale(d)).attr('x2', this.xAxisLength()).attr('y2', d => scale(d)).attr('opacity', 0);\n        transition(linesGEnter, this.transitionDuration(), this.transitionDelay()).attr('opacity', 0.5);\n\n        // update\n        transition(lines, this.transitionDuration(), this.transitionDelay()).attr('x1', 1).attr('y1', d => scale(d)).attr('x2', this.xAxisLength()).attr('y2', d => scale(d));\n\n        // exit\n        lines.exit().remove();\n      } else {\n        gridLineG.selectAll('line').remove();\n      }\n    }\n    _yAxisX() {\n      return this.useRightYAxis() ? this.width() - this.margins().right : this.margins().left;\n    }\n\n    /**\n     * Set or get the y axis label. If setting the label, you may optionally include additional padding\n     * to the margin to make room for the label. By default the padding is set to 12 to accommodate the\n     * text height.\n     * @param {String} [labelText]\n     * @param {Number} [padding=12]\n     * @returns {String|CoordinateGridMixin}\n     */\n    yAxisLabel(labelText, padding) {\n      if (!arguments.length) {\n        return this._yAxisLabel;\n      }\n      this._yAxisLabel = labelText;\n      this.margins().left -= this._yAxisLabelPadding;\n      this._yAxisLabelPadding = padding === undefined ? DEFAULT_AXIS_LABEL_PADDING : padding;\n      this.margins().left += this._yAxisLabelPadding;\n      return this;\n    }\n\n    /**\n     * Get or set the y scale. The y scale is typically automatically determined by the chart implementation.\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\n     * @param {d3.scale} [yScale]\n     * @returns {d3.scale|CoordinateGridMixin}\n     */\n    y(yScale) {\n      if (!arguments.length) {\n        return this._y;\n      }\n      this._y = yScale;\n      this.rescale();\n      return this;\n    }\n\n    /**\n     * Set or get the y axis used by the coordinate grid chart instance. This function is most useful\n     * when y axis customization is required. Depending on `useRightYAxis` the y axis in dc.js is an instance of\n     * either [d3.axisLeft](https://github.com/d3/d3-axis/blob/master/README.md#axisLeft) or\n     * [d3.axisRight](https://github.com/d3/d3-axis/blob/master/README.md#axisRight); therefore it supports any\n     * valid d3 axis manipulation.\n     *\n     * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\n     * unexpected results.  Note also that when used as a getter, this function is not chainable: it\n     * returns the axis, not the chart,\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n         * so attempting to call chart functions after calling `.yAxis()` will fail}.\n     * In addition, depending on whether you are going to use the axis on left or right\n     * you need to appropriately pass [d3.axisLeft](https://github.com/d3/d3-axis/blob/master/README.md#axisLeft)\n     * or [d3.axisRight](https://github.com/d3/d3-axis/blob/master/README.md#axisRight)\n     * @see {@link https://github.com/d3/d3-axis/blob/master/README.md d3.axis}\n     * @example\n     * // customize y axis tick format\n     * chart.yAxis().tickFormat(function(v) {return v + '%';});\n     * // customize y axis tick values\n     * chart.yAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.axisLeft|d3.axisRight} [yAxis]\n     * @returns {d3.axisLeft|d3.axisRight|CoordinateGridMixin}\n     */\n    yAxis(yAxis) {\n      if (!arguments.length) {\n        if (!this._yAxis) {\n          this._yAxis = this._createYAxis();\n        }\n        return this._yAxis;\n      }\n      this._yAxis = yAxis;\n      return this;\n    }\n\n    /**\n     * Turn on/off elastic y axis behavior. If y axis elasticity is turned on, then the grid chart will\n     * attempt to recalculate the y axis range whenever a redraw event is triggered.\n     * @param {Boolean} [elasticY=false]\n     * @returns {Boolean|CoordinateGridMixin}\n     */\n    elasticY(elasticY) {\n      if (!arguments.length) {\n        return this._yElasticity;\n      }\n      this._yElasticity = elasticY;\n      return this;\n    }\n\n    /**\n     * Turn on/off horizontal grid lines.\n     * @param {Boolean} [renderHorizontalGridLines=false]\n     * @returns {Boolean|CoordinateGridMixin}\n     */\n    renderHorizontalGridLines(renderHorizontalGridLines) {\n      if (!arguments.length) {\n        return this._renderHorizontalGridLine;\n      }\n      this._renderHorizontalGridLine = renderHorizontalGridLines;\n      return this;\n    }\n\n    /**\n     * Turn on/off vertical grid lines.\n     * @param {Boolean} [renderVerticalGridLines=false]\n     * @returns {Boolean|CoordinateGridMixin}\n     */\n    renderVerticalGridLines(renderVerticalGridLines) {\n      if (!arguments.length) {\n        return this._renderVerticalGridLine;\n      }\n      this._renderVerticalGridLine = renderVerticalGridLines;\n      return this;\n    }\n\n    /**\n     * Calculates the minimum x value to display in the chart. Includes xAxisPadding if set.\n     * @returns {*}\n     */\n    xAxisMin() {\n      const m = d3Array.min(this.data(), e => this.keyAccessor()(e));\n      return utils.subtract(m, this._xAxisPadding, this._xAxisPaddingUnit);\n    }\n\n    /**\n     * Calculates the maximum x value to display in the chart. Includes xAxisPadding if set.\n     * @returns {*}\n     */\n    xAxisMax() {\n      const m = d3Array.max(this.data(), e => this.keyAccessor()(e));\n      return utils.add(m, this._xAxisPadding, this._xAxisPaddingUnit);\n    }\n\n    /**\n     * Calculates the minimum y value to display in the chart. Includes yAxisPadding if set.\n     * @returns {*}\n     */\n    yAxisMin() {\n      const m = d3Array.min(this.data(), e => this.valueAccessor()(e));\n      return utils.subtract(m, this._yAxisPadding);\n    }\n\n    /**\n     * Calculates the maximum y value to display in the chart. Includes yAxisPadding if set.\n     * @returns {*}\n     */\n    yAxisMax() {\n      const m = d3Array.max(this.data(), e => this.valueAccessor()(e));\n      return utils.add(m, this._yAxisPadding);\n    }\n\n    /**\n     * Set or get y axis padding for the elastic y axis. The padding will be added to the top and\n     * bottom of the y axis if elasticY is turned on; otherwise it is ignored.\n     *\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n     * number or date axes. When padding a date axis, an integer represents number of days being padded\n     * and a percentage string will be treated the same as an integer.\n     * @param {Number|String} [padding=0]\n     * @returns {Number|CoordinateGridMixin}\n     */\n    yAxisPadding(padding) {\n      if (!arguments.length) {\n        return this._yAxisPadding;\n      }\n      this._yAxisPadding = padding;\n      return this;\n    }\n    yAxisHeight() {\n      return this.effectiveHeight();\n    }\n\n    /**\n     * Set or get the rounding function used to quantize the selection when brushing is enabled.\n     * @example\n     * // set x unit round to by month, this will make sure range selection brush will\n     * // select whole months\n     * chart.round(d3.timeMonth.round);\n     * @param {Function} [round]\n     * @returns {Function|CoordinateGridMixin}\n     */\n    round(round) {\n      if (!arguments.length) {\n        return this._round;\n      }\n      this._round = round;\n      return this;\n    }\n    _rangeBandPadding(_) {\n      if (!arguments.length) {\n        return this._fRangeBandPadding;\n      }\n      this._fRangeBandPadding = _;\n      return this;\n    }\n    _outerRangeBandPadding(_) {\n      if (!arguments.length) {\n        return this._fOuterRangeBandPadding;\n      }\n      this._fOuterRangeBandPadding = _;\n      return this;\n    }\n    filter(_) {\n      if (!arguments.length) {\n        return super.filter();\n      }\n      super.filter(_);\n      this.redrawBrush(_, false);\n      return this;\n    }\n\n    /**\n     * Get or set the brush. Brush must be an instance of d3 brushes\n     * https://github.com/d3/d3-brush/blob/master/README.md\n     * You will use this only if you are writing a new chart type that supports brushing.\n     *\n     * **Caution**: dc creates and manages brushes internally. Go through and understand the source code\n     * if you want to pass a new brush object. Even if you are only using the getter,\n     * the brush object may not behave the way you expect.\n     *\n     * @param {d3.brush} [_]\n     * @returns {d3.brush|CoordinateGridMixin}\n     */\n    brush(_) {\n      if (!arguments.length) {\n        return this._brush;\n      }\n      this._brush = _;\n      return this;\n    }\n    renderBrush(g, doTransition) {\n      if (this._brushOn) {\n        this._brush.on('start brush end', d3compat.eventHandler((d, evt) => this._brushing(evt)));\n\n        // To retrieve selection we need self._gBrush\n        this._gBrush = g.append('g').attr('class', 'brush').attr('transform', `translate(${this.margins().left},${this.margins().top})`);\n        this.setBrushExtents();\n        this.createBrushHandlePaths(this._gBrush, doTransition);\n        this.redrawBrush(this.filter(), doTransition);\n      }\n    }\n    createBrushHandlePaths(gBrush) {\n      let brushHandles = gBrush.selectAll(`path.${CUSTOM_BRUSH_HANDLE_CLASS}`).data([{\n        type: 'w'\n      }, {\n        type: 'e'\n      }]);\n      brushHandles = brushHandles.enter().append('path').attr('class', CUSTOM_BRUSH_HANDLE_CLASS).merge(brushHandles);\n      brushHandles.attr('d', d => this.resizeHandlePath(d));\n    }\n    extendBrush(brushSelection) {\n      if (brushSelection && this.round()) {\n        brushSelection[0] = this.round()(brushSelection[0]);\n        brushSelection[1] = this.round()(brushSelection[1]);\n      }\n      return brushSelection;\n    }\n    brushIsEmpty(brushSelection) {\n      return !brushSelection || brushSelection[1] <= brushSelection[0];\n    }\n    _brushing(evt) {\n      if (this._ignoreBrushEvents) {\n        return;\n      }\n      let brushSelection = evt.selection;\n      if (brushSelection) {\n        brushSelection = brushSelection.map(this.x().invert);\n      }\n      brushSelection = this.extendBrush(brushSelection);\n      this.redrawBrush(brushSelection, false);\n      const rangedFilter = this.brushIsEmpty(brushSelection) ? null : filters.RangedFilter(brushSelection[0], brushSelection[1]);\n      events.trigger(() => {\n        this.applyBrushSelection(rangedFilter);\n      }, constants.EVENT_DELAY);\n    }\n\n    // This can be overridden in a derived chart. For example Composite chart overrides it\n    applyBrushSelection(rangedFilter) {\n      this.replaceFilter(rangedFilter);\n      this.redrawGroup();\n    }\n    _withoutBrushEvents(closure) {\n      const oldValue = this._ignoreBrushEvents;\n      this._ignoreBrushEvents = true;\n      try {\n        closure();\n      } finally {\n        this._ignoreBrushEvents = oldValue;\n      }\n    }\n    setBrushExtents(doTransition) {\n      this._withoutBrushEvents(() => {\n        // Set boundaries of the brush, must set it before applying to self._gBrush\n        this._brush.extent([[0, 0], [this.effectiveWidth(), this.effectiveHeight()]]);\n      });\n      this._gBrush.call(this._brush);\n    }\n    redrawBrush(brushSelection, doTransition) {\n      if (this._brushOn && this._gBrush) {\n        if (this._resizing) {\n          this.setBrushExtents(doTransition);\n        }\n        if (!brushSelection) {\n          this._withoutBrushEvents(() => {\n            this._gBrush.call(this._brush.move, null);\n          });\n          this._gBrush.selectAll(`path.${CUSTOM_BRUSH_HANDLE_CLASS}`).attr('display', 'none');\n        } else {\n          const scaledSelection = [this._x(brushSelection[0]), this._x(brushSelection[1])];\n          const gBrush = optionalTransition(doTransition, this.transitionDuration(), this.transitionDelay())(this._gBrush);\n          this._withoutBrushEvents(() => {\n            gBrush.call(this._brush.move, scaledSelection);\n          });\n          gBrush.selectAll(`path.${CUSTOM_BRUSH_HANDLE_CLASS}`).attr('display', null).attr('transform', (d, i) => `translate(${this._x(brushSelection[i])}, 0)`).attr('d', d => this.resizeHandlePath(d));\n        }\n      }\n      this.fadeDeselectedArea(brushSelection);\n    }\n    fadeDeselectedArea(brushSelection) {\n      // do nothing, sub-chart should override this function\n    }\n\n    // borrowed from Crossfilter example\n    resizeHandlePath(d) {\n      d = d.type;\n      const e = +(d === 'e'),\n        x = e ? 1 : -1,\n        y = this.effectiveHeight() / 3;\n      return `M${0.5 * x},${y}A6,6 0 0 ${e} ${6.5 * x},${y + 6}V${2 * y - 6}A6,6 0 0 ${e} ${0.5 * x},${2 * y}Z` + `M${2.5 * x},${y + 8}V${2 * y - 8}M${4.5 * x},${y + 8}V${2 * y - 8}`;\n    }\n    _getClipPathId() {\n      return `${this.anchorName().replace(/[ .#=\\[\\]\"]/g, '-')}-clip`;\n    }\n\n    /**\n     * Get or set the padding in pixels for the clip path. Once set padding will be applied evenly to\n     * the top, left, right, and bottom when the clip path is generated. If set to zero, the clip area\n     * will be exactly the chart body area minus the margins.\n     * @param {Number} [padding=5]\n     * @returns {Number|CoordinateGridMixin}\n     */\n    clipPadding(padding) {\n      if (!arguments.length) {\n        return this._clipPadding;\n      }\n      this._clipPadding = padding;\n      return this;\n    }\n    _generateClipPath() {\n      const defs = utils.appendOrSelect(this._parent, 'defs');\n      // cannot select <clippath> elements; bug in WebKit, must select by id\n      // https://groups.google.com/forum/#!topic/d3-js/6EpAzQ2gU9I\n      const id = this._getClipPathId();\n      const chartBodyClip = utils.appendOrSelect(defs, `#${id}`, 'clipPath').attr('id', id);\n      const padding = this._clipPadding * 2;\n      utils.appendOrSelect(chartBodyClip, 'rect').attr('width', this.xAxisLength() + padding).attr('height', this.yAxisHeight() + padding).attr('transform', `translate(-${this._clipPadding}, -${this._clipPadding})`);\n    }\n    _preprocessData() {}\n    _doRender() {\n      this.resetSvg();\n      this._preprocessData();\n      this._generateG();\n      this._generateClipPath();\n      this._drawChart(true);\n      this._configureMouseZoom();\n      return this;\n    }\n    _doRedraw() {\n      this._preprocessData();\n      this._drawChart(false);\n      this._generateClipPath();\n      return this;\n    }\n    _drawChart(render) {\n      if (this.isOrdinal()) {\n        this._brushOn = false;\n      }\n      this._prepareXAxis(this.g(), render);\n      this._prepareYAxis(this.g());\n      this.plotData();\n      if (this.elasticX() || this._resizing || render) {\n        this.renderXAxis(this.g());\n      }\n      if (this.elasticY() || this._resizing || render) {\n        this.renderYAxis(this.g());\n      }\n      if (render) {\n        this.renderBrush(this.g(), false);\n      } else {\n        // Animate the brush only while resizing\n        this.redrawBrush(this.filter(), this._resizing);\n      }\n      this.fadeDeselectedArea(this.filter());\n      this.resizing(false);\n    }\n    _configureMouseZoom() {\n      // Save a copy of original x scale\n      this._origX = this._x.copy();\n      if (this._mouseZoomable) {\n        this._enableMouseZoom();\n      } else if (this._hasBeenMouseZoomable) {\n        this._disableMouseZoom();\n      }\n    }\n    _enableMouseZoom() {\n      this._hasBeenMouseZoomable = true;\n      const extent = [[0, 0], [this.effectiveWidth(), this.effectiveHeight()]];\n      this._zoom.scaleExtent(this._zoomScale).extent(extent).duration(this.transitionDuration());\n      if (this._zoomOutRestrict) {\n        // Ensure minimum zoomScale is at least 1\n        const zoomScaleMin = Math.max(this._zoomScale[0], 1);\n        this._zoom.translateExtent(extent).scaleExtent([zoomScaleMin, this._zoomScale[1]]);\n      }\n      this.root().call(this._zoom);\n\n      // Tell D3 zoom our current zoom/pan status\n      this._updateD3zoomTransform();\n    }\n    _disableMouseZoom() {\n      this.root().call(this._nullZoom);\n    }\n    _zoomHandler(newDomain, noRaiseEvents) {\n      let domFilter;\n      if (this._hasRangeSelected(newDomain)) {\n        this.x().domain(newDomain);\n        domFilter = filters.RangedFilter(newDomain[0], newDomain[1]);\n      } else {\n        this.x().domain(this._xOriginalDomain);\n        domFilter = null;\n      }\n      this.replaceFilter(domFilter);\n      this.rescale();\n      this.redraw();\n      if (!noRaiseEvents) {\n        if (this._rangeChart && !utils.arraysEqual(this.filter(), this._rangeChart.filter())) {\n          events.trigger(() => {\n            this._rangeChart.replaceFilter(domFilter);\n            this._rangeChart.redraw();\n          });\n        }\n        this._invokeZoomedListener();\n        events.trigger(() => {\n          this.redrawGroup();\n        }, constants.EVENT_DELAY);\n      }\n    }\n\n    // event.transform.rescaleX(self._origX).domain() should give back newDomain\n    _domainToZoomTransform(newDomain, origDomain, xScale) {\n      const k = (origDomain[1] - origDomain[0]) / (newDomain[1] - newDomain[0]);\n      const xt = -1 * xScale(newDomain[0]);\n      return d3Zoom.zoomIdentity.scale(k).translate(xt, 0);\n    }\n\n    // If we changing zoom status (for example by calling focus), tell D3 zoom about it\n    _updateD3zoomTransform() {\n      if (this._zoom) {\n        this._withoutZoomEvents(() => {\n          this._zoom.transform(this.root(), this._domainToZoomTransform(this.x().domain(), this._xOriginalDomain, this._origX));\n        });\n      }\n    }\n    _withoutZoomEvents(closure) {\n      const oldValue = this._ignoreZoomEvents;\n      this._ignoreZoomEvents = true;\n      try {\n        closure();\n      } finally {\n        this._ignoreZoomEvents = oldValue;\n      }\n    }\n    _onZoom(evt) {\n      // ignore zoom events if it was caused by a programmatic change\n      if (this._ignoreZoomEvents) {\n        return;\n      }\n      const newDomain = evt.transform.rescaleX(this._origX).domain();\n      this.focus(newDomain, false);\n    }\n    _checkExtents(ext, outerLimits) {\n      if (!ext || ext.length !== 2 || !outerLimits || outerLimits.length !== 2) {\n        return ext;\n      }\n      if (ext[0] > outerLimits[1] || ext[1] < outerLimits[0]) {\n        console.warn('Could not intersect extents, will reset');\n      }\n      // Math.max does not work (as the values may be dates as well)\n      return [ext[0] > outerLimits[0] ? ext[0] : outerLimits[0], ext[1] < outerLimits[1] ? ext[1] : outerLimits[1]];\n    }\n\n    /**\n     * Zoom this chart to focus on the given range. The given range should be an array containing only\n     * 2 elements (`[start, end]`) defining a range in the x domain. If the range is not given or set\n     * to null, then the zoom will be reset. _For focus to work elasticX has to be turned off;\n     * otherwise focus will be ignored.\n     *\n     * To avoid ping-pong volley of events between a pair of range and focus charts please set\n     * `noRaiseEvents` to `true`. In that case it will update this chart but will not fire `zoom` event\n     * and not try to update back the associated range chart.\n     * If you are calling it manually - typically you will leave it to `false` (the default).\n     *\n     * @example\n     * chart.on('renderlet', function(chart) {\n     *     // smooth the rendering through event throttling\n     *     events.trigger(function(){\n     *          // focus some other chart to the range selected by user on this chart\n     *          someOtherChart.focus(chart.filter());\n     *     });\n     * })\n     * @param {Array<Number>} [range]\n     * @param {Boolean} [noRaiseEvents = false]\n     * @return {undefined}\n     */\n    focus(range, noRaiseEvents) {\n      if (this._zoomOutRestrict) {\n        // ensure range is within self._xOriginalDomain\n        range = this._checkExtents(range, this._xOriginalDomain);\n\n        // If it has an associated range chart ensure range is within domain of that rangeChart\n        if (this._rangeChart) {\n          range = this._checkExtents(range, this._rangeChart.x().domain());\n        }\n      }\n      this._zoomHandler(range, noRaiseEvents);\n      this._updateD3zoomTransform();\n    }\n    refocused() {\n      return !utils.arraysEqual(this.x().domain(), this._xOriginalDomain);\n    }\n    focusChart(c) {\n      if (!arguments.length) {\n        return this._focusChart;\n      }\n      this._focusChart = c;\n      this.on('filtered.dcjs-range-chart', chart => {\n        if (!chart.filter()) {\n          events.trigger(() => {\n            this._focusChart.x().domain(this._focusChart.xOriginalDomain(), true);\n          });\n        } else if (!utils.arraysEqual(chart.filter(), this._focusChart.filter())) {\n          events.trigger(() => {\n            this._focusChart.focus(chart.filter(), true);\n          });\n        }\n      });\n      return this;\n    }\n\n    /**\n     * Turn on/off the brush-based range filter. When brushing is on then user can drag the mouse\n     * across a chart with a quantitative scale to perform range filtering based on the extent of the\n     * brush, or click on the bars of an ordinal bar chart or slices of a pie chart to filter and\n     * un-filter them. However turning on the brush filter will disable other interactive elements on\n     * the chart such as highlighting, tool tips, and reference lines. Zooming will still be possible\n     * if enabled, but only via scrolling (panning will be disabled.)\n     * @param {Boolean} [brushOn=true]\n     * @returns {Boolean|CoordinateGridMixin}\n     */\n    brushOn(brushOn) {\n      if (!arguments.length) {\n        return this._brushOn;\n      }\n      this._brushOn = brushOn;\n      return this;\n    }\n\n    /**\n     * This will be internally used by composite chart onto children. Please go not invoke directly.\n     *\n     * @protected\n     * @param {Boolean} [brushOn=false]\n     * @returns {Boolean|CoordinateGridMixin}\n     */\n    parentBrushOn(brushOn) {\n      if (!arguments.length) {\n        return this._parentBrushOn;\n      }\n      this._parentBrushOn = brushOn;\n      return this;\n    }\n\n    // Get the SVG rendered brush\n    gBrush() {\n      return this._gBrush;\n    }\n    _hasRangeSelected(range) {\n      return range instanceof Array && range.length > 1;\n    }\n  }\n\n  // https://github.com/d3/d3-plugins/blob/master/box/box.js\n\n  const d3Box = function () {\n    let width = 1;\n    let height = 1;\n    let duration = 0;\n    const delay = 0;\n    let domain = null;\n    let value = Number;\n    let whiskers = boxWhiskers;\n    let quartiles = boxQuartiles;\n    let tickFormat = null;\n\n    // Enhanced attributes\n    let renderDataPoints = false;\n    const dataRadius = 3;\n    let dataOpacity = 0.3;\n    let dataWidthPortion = 0.8;\n    let renderTitle = false;\n    let showOutliers = true;\n    let boldOutlier = false;\n\n    // For each small multiple…\n    function box(g) {\n      g.each(function (data, index) {\n        data = data.map(value).sort(d3Array.ascending);\n        const _g = d3Selection.select(this);\n        const n = data.length;\n        let min;\n        let max;\n\n        // Leave if there are no items.\n        if (n === 0) {\n          return;\n        }\n\n        // Compute quartiles. Must return exactly 3 elements.\n        const quartileData = data.quartiles = quartiles(data);\n\n        // Compute whiskers. Must return exactly 2 elements, or null.\n        const whiskerIndices = whiskers && whiskers.call(this, data, index),\n          whiskerData = whiskerIndices && whiskerIndices.map(_i => data[_i]);\n\n        // Compute outliers. If no whiskers are specified, all data are 'outliers'.\n        // We compute the outliers as indices, so that we can join across transitions!\n        const outlierIndices = whiskerIndices ? d3Array.range(0, whiskerIndices[0]).concat(d3Array.range(whiskerIndices[1] + 1, n)) : d3Array.range(n);\n\n        // Determine the maximum value based on if outliers are shown\n        if (showOutliers) {\n          min = data[0];\n          max = data[n - 1];\n        } else {\n          min = data[whiskerIndices[0]];\n          max = data[whiskerIndices[1]];\n        }\n        const pointIndices = d3Array.range(whiskerIndices[0], whiskerIndices[1] + 1);\n\n        // Compute the new x-scale.\n        const x1 = d3Scale.scaleLinear().domain(domain && domain.call(this, data, index) || [min, max]).range([height, 0]);\n\n        // Retrieve the old x-scale, if this is an update.\n        const x0 = this.__chart__ || d3Scale.scaleLinear().domain([0, Infinity]).range(x1.range());\n\n        // Stash the new scale.\n        this.__chart__ = x1;\n\n        // Note: the box, median, and box tick elements are fixed in number,\n        // so we only have to handle enter and update. In contrast, the outliers\n        // and other elements are variable, so we need to exit them! Variable\n        // elements also fade in and out.\n\n        // Update center line: the vertical line spanning the whiskers.\n        const center = _g.selectAll('line.center').data(whiskerData ? [whiskerData] : []);\n        center.enter().insert('line', 'rect').attr('class', 'center').attr('x1', width / 2).attr('y1', d => x0(d[0])).attr('x2', width / 2).attr('y2', d => x0(d[1])).style('opacity', 1e-6).transition().duration(duration).delay(delay).style('opacity', 1).attr('y1', d => x1(d[0])).attr('y2', d => x1(d[1]));\n        center.transition().duration(duration).delay(delay).style('opacity', 1).attr('x1', width / 2).attr('x2', width / 2).attr('y1', d => x1(d[0])).attr('y2', d => x1(d[1]));\n        center.exit().transition().duration(duration).delay(delay).style('opacity', 1e-6).attr('y1', d => x1(d[0])).attr('y2', d => x1(d[1])).remove();\n\n        // Update innerquartile box.\n        const _box = _g.selectAll('rect.box').data([quartileData]);\n        _box.enter().append('rect').attr('class', 'box').attr('x', 0).attr('y', d => x0(d[2])).attr('width', width).attr('height', d => x0(d[0]) - x0(d[2])).style('fill-opacity', renderDataPoints ? 0.1 : 1).transition().duration(duration).delay(delay).attr('y', d => x1(d[2])).attr('height', d => x1(d[0]) - x1(d[2]));\n        _box.transition().duration(duration).delay(delay).attr('width', width).attr('y', d => x1(d[2])).attr('height', d => x1(d[0]) - x1(d[2]));\n\n        // Update median line.\n        const medianLine = _g.selectAll('line.median').data([quartileData[1]]);\n        medianLine.enter().append('line').attr('class', 'median').attr('x1', 0).attr('y1', x0).attr('x2', width).attr('y2', x0).transition().duration(duration).delay(delay).attr('y1', x1).attr('y2', x1);\n        medianLine.transition().duration(duration).delay(delay).attr('x1', 0).attr('x2', width).attr('y1', x1).attr('y2', x1);\n\n        // Update whiskers.\n        const whisker = _g.selectAll('line.whisker').data(whiskerData || []);\n        whisker.enter().insert('line', 'circle, text').attr('class', 'whisker').attr('x1', 0).attr('y1', x0).attr('x2', width).attr('y2', x0).style('opacity', 1e-6).transition().duration(duration).delay(delay).attr('y1', x1).attr('y2', x1).style('opacity', 1);\n        whisker.transition().duration(duration).delay(delay).attr('x1', 0).attr('x2', width).attr('y1', x1).attr('y2', x1).style('opacity', 1);\n        whisker.exit().transition().duration(duration).delay(delay).attr('y1', x1).attr('y2', x1).style('opacity', 1e-6).remove();\n\n        // Update outliers.\n        if (showOutliers) {\n          const outlierClass = boldOutlier ? 'outlierBold' : 'outlier';\n          const outlierSize = boldOutlier ? 3 : 5;\n          const outlierX = boldOutlier ? function () {\n            return Math.floor(Math.random() * (width * dataWidthPortion) + 1 + (width - width * dataWidthPortion) / 2);\n          } : function () {\n            return width / 2;\n          };\n          const outlier = _g.selectAll(`circle.${outlierClass}`).data(outlierIndices, Number);\n          outlier.enter().insert('circle', 'text').attr('class', outlierClass).attr('r', outlierSize).attr('cx', outlierX).attr('cy', i => x0(data[i])).style('opacity', 1e-6).transition().duration(duration).delay(delay).attr('cy', i => x1(data[i])).style('opacity', 0.6);\n          if (renderTitle) {\n            outlier.selectAll('title').remove();\n            outlier.append('title').text(i => data[i]);\n          }\n          outlier.transition().duration(duration).delay(delay).attr('cx', outlierX).attr('cy', i => x1(data[i])).style('opacity', 0.6);\n          outlier.exit().transition().duration(duration).delay(delay).attr('cy', 0) //function (i) { return x1(d[i]); })\n          .style('opacity', 1e-6).remove();\n        }\n\n        // Update Values\n        if (renderDataPoints) {\n          const point = _g.selectAll('circle.data').data(pointIndices);\n          point.enter().insert('circle', 'text').attr('class', 'data').attr('r', dataRadius).attr('cx', () => Math.floor(Math.random() * (width * dataWidthPortion) + 1 + (width - width * dataWidthPortion) / 2)).attr('cy', i => x0(data[i])).style('opacity', 1e-6).transition().duration(duration).delay(delay).attr('cy', i => x1(data[i])).style('opacity', dataOpacity);\n          if (renderTitle) {\n            point.selectAll('title').remove();\n            point.append('title').text(i => data[i]);\n          }\n          point.transition().duration(duration).delay(delay).attr('cx', () => Math.floor(Math.random() * (width * dataWidthPortion) + 1 + (width - width * dataWidthPortion) / 2)).attr('cy', i => x1(data[i])).style('opacity', dataOpacity);\n          point.exit().transition().duration(duration).delay(delay).attr('cy', 0).style('opacity', 1e-6).remove();\n        }\n\n        // Compute the tick format.\n        const format = tickFormat || x1.tickFormat(8);\n\n        // Update box ticks.\n        const boxTick = _g.selectAll('text.box').data(quartileData);\n        boxTick.enter().append('text').attr('class', 'box').attr('dy', '.3em').attr('dx', (d, i) => i & 1 ? 6 : -6).attr('x', (d, i) => i & 1 ? width : 0).attr('y', x0).attr('text-anchor', (d, i) => i & 1 ? 'start' : 'end').text(format).transition().duration(duration).delay(delay).attr('y', x1);\n        boxTick.transition().duration(duration).delay(delay).text(format).attr('x', (d, i) => i & 1 ? width : 0).attr('y', x1);\n\n        // Update whisker ticks. These are handled separately from the box\n        // ticks because they may or may not exist, and we want don't want\n        // to join box ticks pre-transition with whisker ticks post-.\n        const whiskerTick = _g.selectAll('text.whisker').data(whiskerData || []);\n        whiskerTick.enter().append('text').attr('class', 'whisker').attr('dy', '.3em').attr('dx', 6).attr('x', width).attr('y', x0).text(format).style('opacity', 1e-6).transition().duration(duration).delay(delay).attr('y', x1).style('opacity', 1);\n        whiskerTick.transition().duration(duration).delay(delay).text(format).attr('x', width).attr('y', x1).style('opacity', 1);\n        whiskerTick.exit().transition().duration(duration).delay(delay).attr('y', x1).style('opacity', 1e-6).remove();\n\n        // Remove temporary quartiles element from within data array.\n        delete data.quartiles;\n      });\n      d3Timer.timerFlush();\n    }\n    box.width = function (x) {\n      if (!arguments.length) {\n        return width;\n      }\n      width = x;\n      return box;\n    };\n    box.height = function (x) {\n      if (!arguments.length) {\n        return height;\n      }\n      height = x;\n      return box;\n    };\n    box.tickFormat = function (x) {\n      if (!arguments.length) {\n        return tickFormat;\n      }\n      tickFormat = x;\n      return box;\n    };\n    box.showOutliers = function (x) {\n      if (!arguments.length) {\n        return showOutliers;\n      }\n      showOutliers = x;\n      return box;\n    };\n    box.boldOutlier = function (x) {\n      if (!arguments.length) {\n        return boldOutlier;\n      }\n      boldOutlier = x;\n      return box;\n    };\n    box.renderDataPoints = function (x) {\n      if (!arguments.length) {\n        return renderDataPoints;\n      }\n      renderDataPoints = x;\n      return box;\n    };\n    box.renderTitle = function (x) {\n      if (!arguments.length) {\n        return renderTitle;\n      }\n      renderTitle = x;\n      return box;\n    };\n    box.dataOpacity = function (x) {\n      if (!arguments.length) {\n        return dataOpacity;\n      }\n      dataOpacity = x;\n      return box;\n    };\n    box.dataWidthPortion = function (x) {\n      if (!arguments.length) {\n        return dataWidthPortion;\n      }\n      dataWidthPortion = x;\n      return box;\n    };\n    box.duration = function (x) {\n      if (!arguments.length) {\n        return duration;\n      }\n      duration = x;\n      return box;\n    };\n    box.domain = function (x) {\n      if (!arguments.length) {\n        return domain;\n      }\n      domain = x === null ? x : typeof x === 'function' ? x : utils.constant(x);\n      return box;\n    };\n    box.value = function (x) {\n      if (!arguments.length) {\n        return value;\n      }\n      value = x;\n      return box;\n    };\n    box.whiskers = function (x) {\n      if (!arguments.length) {\n        return whiskers;\n      }\n      whiskers = x;\n      return box;\n    };\n    box.quartiles = function (x) {\n      if (!arguments.length) {\n        return quartiles;\n      }\n      quartiles = x;\n      return box;\n    };\n    return box;\n  };\n  function boxWhiskers(d) {\n    return [0, d.length - 1];\n  }\n  function boxQuartiles(d) {\n    return [d3Array.quantile(d, 0.25), d3Array.quantile(d, 0.5), d3Array.quantile(d, 0.75)];\n  }\n\n  /**\n   * Stack Mixin is an mixin that provides cross-chart support of stackability using d3.stack.\n   * @mixin StackMixin\n   * @mixes CoordinateGridMixin\n   */\n  class StackMixin extends CoordinateGridMixin {\n    constructor() {\n      super();\n      this._stackLayout = d3Shape.stack();\n      this._stack = [];\n      this._titles = {};\n      this._hidableStacks = false;\n      this._evadeDomainFilter = false;\n      this.data(() => {\n        const layers = this._stack.filter(this._visibility);\n        if (!layers.length) {\n          return [];\n        }\n        layers.forEach((l, i) => this._prepareValues(l, i));\n        const v4data = layers[0].values.map((v, i) => {\n          const col = {\n            x: v.x\n          };\n          layers.forEach(layer => {\n            col[layer.name] = layer.values[i].y;\n          });\n          return col;\n        });\n        const keys = layers.map(layer => layer.name);\n        const v4result = this.stackLayout().keys(keys)(v4data);\n        v4result.forEach((series, i) => {\n          series.forEach((ys, j) => {\n            layers[i].values[j].y0 = ys[0];\n            layers[i].values[j].y1 = ys[1];\n          });\n        });\n        return layers;\n      });\n      this.colorAccessor(function (d) {\n        return this.layer || this.name || d.name || d.layer;\n      });\n    }\n    _prepareValues(layer, layerIdx) {\n      const valAccessor = layer.accessor || this.valueAccessor();\n      layer.name = String(layer.name || layerIdx);\n      const allValues = layer.group.all().map((d, i) => ({\n        x: this.keyAccessor()(d, i),\n        y: layer.hidden ? null : valAccessor(d, i),\n        data: d,\n        layer: layer.name,\n        hidden: layer.hidden\n      }));\n      layer.domainValues = allValues.filter(l => this._domainFilter()(l));\n      layer.values = this.evadeDomainFilter() ? allValues : layer.domainValues;\n    }\n    _domainFilter() {\n      if (!this.x()) {\n        return utils.constant(true);\n      }\n      const xDomain = this.x().domain();\n      if (this.isOrdinal()) {\n        // TODO #416\n        //var domainSet = d3.set(xDomain);\n        return () => true //domainSet.has(p.x);\n        ;\n      }\n\n      if (this.elasticX()) {\n        return () => true;\n      }\n      return p => p.x >= xDomain[0] && p.x <= xDomain[xDomain.length - 1];\n    }\n\n    /**\n     * Stack a new crossfilter group onto this chart with an optional custom value accessor. All stacks\n     * in the same chart will share the same key accessor and therefore the same set of keys.\n     *\n     * For example, in a stacked bar chart, the bars of each stack will be positioned using the same set\n     * of keys on the x axis, while stacked vertically. If name is specified then it will be used to\n     * generate the legend label.\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n     * @example\n     * // stack group using default accessor\n     * chart.stack(valueSumGroup)\n     * // stack group using custom accessor\n     * .stack(avgByDayGroup, function(d){return d.value.avgByDay;});\n     * @param {crossfilter.group} group\n     * @param {String} [name]\n     * @param {Function} [accessor]\n     * @returns {Array<{group: crossfilter.group, name: String, accessor: Function}>|StackMixin}\n     */\n    stack(group, name, accessor) {\n      if (!arguments.length) {\n        return this._stack;\n      }\n      if (arguments.length <= 2) {\n        accessor = name;\n      }\n      const layer = {\n        group: group\n      };\n      if (typeof name === 'string') {\n        layer.name = name;\n      }\n      if (typeof accessor === 'function') {\n        layer.accessor = accessor;\n      }\n      this._stack.push(layer);\n      return this;\n    }\n    group(g, n, f) {\n      if (!arguments.length) {\n        return super.group();\n      }\n      this._stack = [];\n      this._titles = {};\n      this.stack(g, n);\n      if (f) {\n        this.valueAccessor(f);\n      }\n      return super.group(g, n);\n    }\n\n    /**\n     * Allow named stacks to be hidden or shown by clicking on legend items.\n     * This does not affect the behavior of hideStack or showStack.\n     * @param {Boolean} [hidableStacks=false]\n     * @returns {Boolean|StackMixin}\n     */\n    hidableStacks(hidableStacks) {\n      if (!arguments.length) {\n        return this._hidableStacks;\n      }\n      this._hidableStacks = hidableStacks;\n      return this;\n    }\n    _findLayerByName(n) {\n      const i = this._stack.map(pluck('name')).indexOf(n);\n      return this._stack[i];\n    }\n\n    /**\n     * Hide all stacks on the chart with the given name.\n     * The chart must be re-rendered for this change to appear.\n     * @param {String} stackName\n     * @returns {StackMixin}\n     */\n    hideStack(stackName) {\n      const layer = this._findLayerByName(stackName);\n      if (layer) {\n        layer.hidden = true;\n      }\n      return this;\n    }\n\n    /**\n     * Show all stacks on the chart with the given name.\n     * The chart must be re-rendered for this change to appear.\n     * @param {String} stackName\n     * @returns {StackMixin}\n     */\n    showStack(stackName) {\n      const layer = this._findLayerByName(stackName);\n      if (layer) {\n        layer.hidden = false;\n      }\n      return this;\n    }\n    getValueAccessorByIndex(index) {\n      return this._stack[index].accessor || this.valueAccessor();\n    }\n    yAxisMin() {\n      const m = d3Array.min(this._flattenStack(), p => p.y < 0 ? p.y + p.y0 : p.y0);\n      return utils.subtract(m, this.yAxisPadding());\n    }\n    yAxisMax() {\n      const m = d3Array.max(this._flattenStack(), p => p.y > 0 ? p.y + p.y0 : p.y0);\n      return utils.add(m, this.yAxisPadding());\n    }\n    _flattenStack() {\n      // A round about way to achieve flatMap\n      // When target browsers support flatMap, just replace map -> flatMap, no concat needed\n      const values = this.data().map(layer => layer.domainValues);\n      return [].concat(...values);\n    }\n    xAxisMin() {\n      const m = d3Array.min(this._flattenStack(), pluck('x'));\n      return utils.subtract(m, this.xAxisPadding(), this.xAxisPaddingUnit());\n    }\n    xAxisMax() {\n      const m = d3Array.max(this._flattenStack(), pluck('x'));\n      return utils.add(m, this.xAxisPadding(), this.xAxisPaddingUnit());\n    }\n\n    /**\n     * Set or get the title function. Chart class will use this function to render svg title (usually interpreted by\n     * browser as tooltips) for each child element in the chart, i.e. a slice in a pie chart or a bubble in a bubble chart.\n     * Almost every chart supports title function however in grid coordinate chart you need to turn off brush in order to\n     * use title otherwise the brush layer will block tooltip trigger.\n     *\n     * If the first argument is a stack name, the title function will get or set the title for that stack. If stackName\n     * is not provided, the first stack is implied.\n     * @example\n     * // set a title function on 'first stack'\n     * chart.title('first stack', function(d) { return d.key + ': ' + d.value; });\n     * // get a title function from 'second stack'\n     * var secondTitleFunction = chart.title('second stack');\n     * @param {String} [stackName]\n     * @param {Function} [titleAccessor]\n     * @returns {String|StackMixin}\n     */\n    title(stackName, titleAccessor) {\n      if (!stackName) {\n        return super.title();\n      }\n      if (typeof stackName === 'function') {\n        return super.title(stackName);\n      }\n      if (stackName === this._groupName && typeof titleAccessor === 'function') {\n        return super.title(titleAccessor);\n      }\n      if (typeof titleAccessor !== 'function') {\n        return this._titles[stackName] || super.title();\n      }\n      this._titles[stackName] = titleAccessor;\n      return this;\n    }\n\n    /**\n     * Gets or sets the stack layout algorithm, which computes a baseline for each stack and\n     * propagates it to the next.\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Stack-Layout.md d3.stackD3v3}\n     * @param {Function} [_stack=d3.stackD3v3]\n     * @returns {Function|StackMixin}\n     */\n    stackLayout(_stack) {\n      if (!arguments.length) {\n        return this._stackLayout;\n      }\n      this._stackLayout = _stack;\n      return this;\n    }\n\n    /**\n     * Since dc.js 2.0, there has been {@link https://github.com/dc-js/dc.js/issues/949 an issue}\n     * where points are filtered to the current domain. While this is a useful optimization, it is\n     * incorrectly implemented: the next point outside the domain is required in order to draw lines\n     * that are clipped to the bounds, as well as bars that are partly clipped.\n     *\n     * A fix will be included in dc.js 2.1.x, but a workaround is needed for dc.js 2.0 and until\n     * that fix is published, so set this flag to skip any filtering of points.\n     *\n     * Once the bug is fixed, this flag will have no effect, and it will be deprecated.\n     * @param {Boolean} [evadeDomainFilter=false]\n     * @returns {Boolean|StackMixin}\n     */\n    evadeDomainFilter(evadeDomainFilter) {\n      if (!arguments.length) {\n        return this._evadeDomainFilter;\n      }\n      this._evadeDomainFilter = evadeDomainFilter;\n      return this;\n    }\n    _visibility(l) {\n      return !l.hidden;\n    }\n    _ordinalXDomain() {\n      const flat = this._flattenStack().map(pluck('data'));\n      const ordered = this._computeOrderedGroups(flat);\n      return ordered.map(this.keyAccessor());\n    }\n    legendables() {\n      return this._stack.map((layer, i) => ({\n        chart: this,\n        name: layer.name,\n        hidden: layer.hidden || false,\n        color: this.getColor.call(layer, layer.values, i)\n      }));\n    }\n    isLegendableHidden(d) {\n      const layer = this._findLayerByName(d.name);\n      return layer ? layer.hidden : false;\n    }\n    legendToggle(d) {\n      if (this._hidableStacks) {\n        if (this.isLegendableHidden(d)) {\n          this.showStack(d.name);\n        } else {\n          this.hideStack(d.name);\n        }\n        //_chart.redraw();\n        this.renderGroup();\n      }\n    }\n  }\n  const MIN_BAR_WIDTH = 1;\n  const DEFAULT_GAP_BETWEEN_BARS = 2;\n  const LABEL_PADDING = 3;\n\n  /**\n   * Concrete bar chart/histogram implementation.\n   *\n   * Examples:\n   * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n   * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n   * @mixes StackMixin\n   */\n  class BarChart extends StackMixin {\n    /**\n     * Create a Bar Chart\n     * @example\n     * // create a bar chart under #chart-container1 element using the default global chart group\n     * var chart1 = new BarChart('#chart-container1');\n     * // create a bar chart under #chart-container2 element using chart group A\n     * var chart2 = new BarChart('#chart-container2', 'chartGroupA');\n     * // create a sub-chart under a composite parent chart\n     * var chart3 = new BarChart(compositeChart);\n     * @param {String|node|d3.selection|CompositeChart} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector}\n     * specifying a dom block element such as a div; or a dom element or d3 selection.  If the bar\n     * chart is a sub-chart in a {@link CompositeChart Composite Chart} then pass in the parent\n     * composite chart instance instead.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor(parent, chartGroup) {\n      super();\n      this._gap = DEFAULT_GAP_BETWEEN_BARS;\n      this._centerBar = false;\n      this._alwaysUseRounding = false;\n      this._barWidth = undefined;\n      this.label(d => utils.printSingleValue(d.y0 + d.y), false);\n      this.anchor(parent, chartGroup);\n    }\n\n    /**\n     * Get or set the outer padding on an ordinal bar chart. This setting has no effect on non-ordinal charts.\n     * Will pad the width by `padding * barWidth` on each side of the chart.\n     * @param {Number} [padding=0.5]\n     * @returns {Number|BarChart}\n     */\n    outerPadding(padding) {\n      if (!arguments.length) {\n        return this._outerRangeBandPadding();\n      }\n      return this._outerRangeBandPadding(padding);\n    }\n    rescale() {\n      super.rescale();\n      this._barWidth = undefined;\n      return this;\n    }\n    render() {\n      if (this.round() && this._centerBar && !this._alwaysUseRounding) {\n        logger.warn('By default, brush rounding is disabled if bars are centered. ' + 'See dc.js bar chart API documentation for details.');\n      }\n      return super.render();\n    }\n    plotData() {\n      let layers = this.chartBodyG().selectAll('g.stack').data(this.data());\n      this._calculateBarWidth();\n      layers = layers.enter().append('g').attr('class', (d, i) => `stack _${i}`).merge(layers);\n      const last = layers.size() - 1;\n      {\n        const chart = this;\n        layers.each(function (d, i) {\n          const layer = d3Selection.select(this);\n          chart._renderBars(layer, i, d);\n          if (chart.renderLabel() && last === i) {\n            chart._renderLabels(layer, i, d);\n          }\n        });\n      }\n    }\n    _barHeight(d) {\n      return utils.safeNumber(Math.abs(this.y()(d.y + d.y0) - this.y()(d.y0)));\n    }\n    _labelXPos(d) {\n      let x = this.x()(d.x);\n      if (!this._centerBar) {\n        x += this._barWidth / 2;\n      }\n      if (this.isOrdinal() && this._gap !== undefined) {\n        x += this._gap / 2;\n      }\n      return utils.safeNumber(x);\n    }\n    _labelYPos(d) {\n      let y = this.y()(d.y + d.y0);\n      if (d.y < 0) {\n        y -= this._barHeight(d);\n      }\n      return utils.safeNumber(y - LABEL_PADDING);\n    }\n    _renderLabels(layer, layerIndex, data) {\n      const labels = layer.selectAll('text.barLabel').data(data.values, pluck('x'));\n      const labelsEnterUpdate = labels.enter().append('text').attr('class', 'barLabel').attr('text-anchor', 'middle').attr('x', d => this._labelXPos(d)).attr('y', d => this._labelYPos(d)).merge(labels);\n      if (this.isOrdinal()) {\n        labelsEnterUpdate.on('click', d3compat.eventHandler(d => this.onClick(d)));\n        labelsEnterUpdate.attr('cursor', 'pointer');\n      }\n      transition(labelsEnterUpdate, this.transitionDuration(), this.transitionDelay()).attr('x', d => this._labelXPos(d)).attr('y', d => this._labelYPos(d)).text(d => this.label()(d));\n      transition(labels.exit(), this.transitionDuration(), this.transitionDelay()).attr('height', 0).remove();\n    }\n    _barXPos(d) {\n      let x = this.x()(d.x);\n      if (this._centerBar) {\n        x -= this._barWidth / 2;\n      }\n      if (this.isOrdinal() && this._gap !== undefined) {\n        x += this._gap / 2;\n      }\n      return utils.safeNumber(x);\n    }\n    _renderBars(layer, layerIndex, data) {\n      const bars = layer.selectAll('rect.bar').data(data.values, pluck('x'));\n      const enter = bars.enter().append('rect').attr('class', 'bar').classed('dc-tabbable', this._keyboardAccessible).attr('fill', pluck('data', this.getColor)).attr('x', d => this._barXPos(d)).attr('y', this.yAxisHeight()).attr('height', 0);\n      const barsEnterUpdate = enter.merge(bars);\n      if (this.renderTitle()) {\n        enter.append('title').text(pluck('data', this.title(data.name)));\n      }\n      if (this.isOrdinal()) {\n        barsEnterUpdate.on('click', d3compat.eventHandler(d => this.onClick(d)));\n      }\n      if (this._keyboardAccessible) {\n        this._makeKeyboardAccessible(this.onClick);\n      }\n      transition(barsEnterUpdate, this.transitionDuration(), this.transitionDelay()).attr('x', d => this._barXPos(d)).attr('y', d => {\n        let y = this.y()(d.y + d.y0);\n        if (d.y < 0) {\n          y -= this._barHeight(d);\n        }\n        return utils.safeNumber(y);\n      }).attr('width', this._barWidth).attr('height', d => this._barHeight(d)).attr('fill', pluck('data', this.getColor)).select('title').text(pluck('data', this.title(data.name)));\n      transition(bars.exit(), this.transitionDuration(), this.transitionDelay()).attr('x', d => this.x()(d.x)).attr('width', this._barWidth * 0.9).remove();\n    }\n    _calculateBarWidth() {\n      if (this._barWidth === undefined) {\n        const numberOfBars = this.xUnitCount();\n\n        // please can't we always use rangeBands for bar charts?\n        if (this.isOrdinal() && this._gap === undefined) {\n          this._barWidth = Math.floor(this.x().bandwidth());\n        } else if (this._gap) {\n          this._barWidth = Math.floor((this.xAxisLength() - (numberOfBars - 1) * this._gap) / numberOfBars);\n        } else {\n          this._barWidth = Math.floor(this.xAxisLength() / (1 + this.barPadding()) / numberOfBars);\n        }\n        if (this._barWidth === Infinity || isNaN(this._barWidth) || this._barWidth < MIN_BAR_WIDTH) {\n          this._barWidth = MIN_BAR_WIDTH;\n        }\n      }\n    }\n    fadeDeselectedArea(brushSelection) {\n      const bars = this.chartBodyG().selectAll('rect.bar');\n      if (this.isOrdinal()) {\n        if (this.hasFilter()) {\n          bars.classed(constants.SELECTED_CLASS, d => this.hasFilter(d.x));\n          bars.classed(constants.DESELECTED_CLASS, d => !this.hasFilter(d.x));\n        } else {\n          bars.classed(constants.SELECTED_CLASS, false);\n          bars.classed(constants.DESELECTED_CLASS, false);\n        }\n      } else if (this.brushOn() || this.parentBrushOn()) {\n        if (!this.brushIsEmpty(brushSelection)) {\n          const start = brushSelection[0];\n          const end = brushSelection[1];\n          bars.classed(constants.DESELECTED_CLASS, d => d.x < start || d.x >= end);\n        } else {\n          bars.classed(constants.DESELECTED_CLASS, false);\n        }\n      }\n    }\n\n    /**\n     * Whether the bar chart will render each bar centered around the data position on the x-axis.\n     * @param {Boolean} [centerBar=false]\n     * @returns {Boolean|BarChart}\n     */\n    centerBar(centerBar) {\n      if (!arguments.length) {\n        return this._centerBar;\n      }\n      this._centerBar = centerBar;\n      return this;\n    }\n    onClick(d) {\n      super.onClick(d.data);\n    }\n\n    /**\n     * Get or set the spacing between bars as a fraction of bar size. Valid values are between 0-1.\n     * Setting this value will also remove any previously set {@link BarChart#gap gap}. See the\n     * {@link https://github.com/d3/d3-scale/blob/master/README.md#scaleBand d3 docs}\n     * for a visual description of how the padding is applied.\n     * @param {Number} [barPadding=0]\n     * @returns {Number|BarChart}\n     */\n    barPadding(barPadding) {\n      if (!arguments.length) {\n        return this._rangeBandPadding();\n      }\n      this._rangeBandPadding(barPadding);\n      this._gap = undefined;\n      return this;\n    }\n    _useOuterPadding() {\n      return this._gap === undefined;\n    }\n\n    /**\n     * Manually set fixed gap (in px) between bars instead of relying on the default auto-generated\n     * gap.  By default the bar chart implementation will calculate and set the gap automatically\n     * based on the number of data points and the length of the x axis.\n     * @param {Number} [gap=2]\n     * @returns {Number|BarChart}\n     */\n    gap(gap) {\n      if (!arguments.length) {\n        return this._gap;\n      }\n      this._gap = gap;\n      return this;\n    }\n    extendBrush(brushSelection) {\n      if (brushSelection && this.round() && (!this._centerBar || this._alwaysUseRounding)) {\n        brushSelection[0] = this.round()(brushSelection[0]);\n        brushSelection[1] = this.round()(brushSelection[1]);\n      }\n      return brushSelection;\n    }\n\n    /**\n     * Set or get whether rounding is enabled when bars are centered. If false, using\n     * rounding with centered bars will result in a warning and rounding will be ignored.  This flag\n     * has no effect if bars are not {@link BarChart#centerBar centered}.\n     * When using standard d3.js rounding methods, the brush often doesn't align correctly with\n     * centered bars since the bars are offset.  The rounding function must add an offset to\n     * compensate, such as in the following example.\n     * @example\n     * chart.round(function(n) { return Math.floor(n) + 0.5; });\n     * @param {Boolean} [alwaysUseRounding=false]\n     * @returns {Boolean|BarChart}\n     */\n    alwaysUseRounding(alwaysUseRounding) {\n      if (!arguments.length) {\n        return this._alwaysUseRounding;\n      }\n      this._alwaysUseRounding = alwaysUseRounding;\n      return this;\n    }\n    legendHighlight(d) {\n      const colorFilter = (color, inv) => function () {\n        const item = d3Selection.select(this);\n        const match = item.attr('fill') === color;\n        return inv ? !match : match;\n      };\n      if (!this.isLegendableHidden(d)) {\n        this.g().selectAll('rect.bar').classed('highlight', colorFilter(d.color)).classed('fadeout', colorFilter(d.color, true));\n      }\n    }\n    legendReset() {\n      this.g().selectAll('rect.bar').classed('highlight', false).classed('fadeout', false);\n    }\n    xAxisMax() {\n      let max = super.xAxisMax();\n      if ('resolution' in this.xUnits()) {\n        const res = this.xUnits().resolution;\n        max += res;\n      }\n      return max;\n    }\n  }\n  const barChart = (parent, chartGroup) => new BarChart(parent, chartGroup);\n\n  // Returns a function to compute the interquartile range.\n  function defaultWhiskersIQR(k) {\n    return d => {\n      const q1 = d.quartiles[0];\n      const q3 = d.quartiles[2];\n      const iqr = (q3 - q1) * k;\n      let i = -1;\n      let j = d.length;\n      do {\n        ++i;\n      } while (d[i] < q1 - iqr);\n      do {\n        --j;\n      } while (d[j] > q3 + iqr);\n      return [i, j];\n    };\n  }\n\n  /**\n   * A box plot is a chart that depicts numerical data via their quartile ranges.\n   *\n   * Examples:\n   * - {@link http://dc-js.github.io/dc.js/examples/boxplot-basic.html Boxplot Basic example}\n   * - {@link http://dc-js.github.io/dc.js/examples/boxplot-enhanced.html Boxplot Enhanced example}\n   * - {@link http://dc-js.github.io/dc.js/examples/boxplot-render-data.html Boxplot Render Data example}\n   * - {@link http://dc-js.github.io/dc.js/examples/boxplot-time.html Boxplot time example}\n   * @mixes CoordinateGridMixin\n   */\n  class BoxPlot extends CoordinateGridMixin {\n    /**\n     * Create a Box Plot.\n     *\n     * @example\n     * // create a box plot under #chart-container1 element using the default global chart group\n     * var boxPlot1 = new BoxPlot('#chart-container1');\n     * // create a box plot under #chart-container2 element using chart group A\n     * var boxPlot2 = new BoxPlot('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor(parent, chartGroup) {\n      super();\n      this._whiskerIqrFactor = 1.5;\n      this._whiskersIqr = defaultWhiskersIQR;\n      this._whiskers = this._whiskersIqr(this._whiskerIqrFactor);\n      this._box = d3Box();\n      this._tickFormat = null;\n      this._renderDataPoints = false;\n      this._dataOpacity = 0.3;\n      this._dataWidthPortion = 0.8;\n      this._showOutliers = true;\n      this._boldOutlier = false;\n\n      // Used in yAxisMin and yAxisMax to add padding in pixel coordinates\n      // so the min and max data points/whiskers are within the chart\n      this._yRangePadding = 8;\n      this._boxWidth = (innerChartWidth, xUnits) => {\n        if (this.isOrdinal()) {\n          return this.x().bandwidth();\n        } else {\n          return innerChartWidth / (1 + this.boxPadding()) / xUnits;\n        }\n      };\n\n      // default to ordinal\n      this.x(d3Scale.scaleBand());\n      this.xUnits(units.ordinal);\n\n      // valueAccessor should return an array of values that can be coerced into numbers\n      // or if data is overloaded for a static array of arrays, it should be `Number`.\n      // Empty arrays are not included.\n      this.data(group => group.all().map(d => {\n        d.map = accessor => accessor.call(d, d);\n        return d;\n      }).filter(d => {\n        const values = this.valueAccessor()(d);\n        return values.length !== 0;\n      }));\n      this.boxPadding(0.8);\n      this.outerPadding(0.5);\n      this.anchor(parent, chartGroup);\n    }\n\n    /**\n     * Get or set the spacing between boxes as a fraction of box size. Valid values are within 0-1.\n     * See the {@link https://github.com/d3/d3-scale/blob/master/README.md#scaleBand d3 docs}\n     * for a visual description of how the padding is applied.\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md#scaleBand d3.scaleBand}\n     * @param {Number} [padding=0.8]\n     * @returns {Number|BoxPlot}\n     */\n    boxPadding(padding) {\n      if (!arguments.length) {\n        return this._rangeBandPadding();\n      }\n      return this._rangeBandPadding(padding);\n    }\n\n    /**\n     * Get or set the outer padding on an ordinal box chart. This setting has no effect on non-ordinal charts\n     * or on charts with a custom {@link BoxPlot#boxWidth .boxWidth}. Will pad the width by\n     * `padding * barWidth` on each side of the chart.\n     * @param {Number} [padding=0.5]\n     * @returns {Number|BoxPlot}\n     */\n    outerPadding(padding) {\n      if (!arguments.length) {\n        return this._outerRangeBandPadding();\n      }\n      return this._outerRangeBandPadding(padding);\n    }\n\n    /**\n     * Get or set the numerical width of the boxplot box. The width may also be a function taking as\n     * parameters the chart width excluding the right and left margins, as well as the number of x\n     * units.\n     * @example\n     * // Using numerical parameter\n     * chart.boxWidth(10);\n     * // Using function\n     * chart.boxWidth((innerChartWidth, xUnits) { ... });\n     * @param {Number|Function} [boxWidth=0.5]\n     * @returns {Number|Function|BoxPlot}\n     */\n    boxWidth(boxWidth) {\n      if (!arguments.length) {\n        return this._boxWidth;\n      }\n      this._boxWidth = typeof boxWidth === 'function' ? boxWidth : utils.constant(boxWidth);\n      return this;\n    }\n    _boxTransform(d, i) {\n      const xOffset = this.x()(this.keyAccessor()(d, i));\n      return `translate(${xOffset}, 0)`;\n    }\n    _preprocessData() {\n      if (this.elasticX()) {\n        this.x().domain([]);\n      }\n    }\n    plotData() {\n      this._calculatedBoxWidth = this._boxWidth(this.effectiveWidth(), this.xUnitCount());\n      this._box.whiskers(this._whiskers).width(this._calculatedBoxWidth).height(this.effectiveHeight()).value(this.valueAccessor()).domain(this.y().domain()).duration(this.transitionDuration()).tickFormat(this._tickFormat).renderDataPoints(this._renderDataPoints).dataOpacity(this._dataOpacity).dataWidthPortion(this._dataWidthPortion).renderTitle(this.renderTitle()).showOutliers(this._showOutliers).boldOutlier(this._boldOutlier);\n      const boxesG = this.chartBodyG().selectAll('g.box').data(this.data(), this.keyAccessor());\n      const boxesGEnterUpdate = this._renderBoxes(boxesG);\n      this._updateBoxes(boxesGEnterUpdate);\n      this._removeBoxes(boxesG);\n      this.fadeDeselectedArea(this.filter());\n    }\n    _renderBoxes(boxesG) {\n      const boxesGEnter = boxesG.enter().append('g');\n      boxesGEnter.attr('class', 'box').classed('dc-tabbable', this._keyboardAccessible).attr('transform', (d, i) => this._boxTransform(d, i)).call(this._box).on('click', d3compat.eventHandler(d => {\n        this.filter(this.keyAccessor()(d));\n        this.redrawGroup();\n      })).selectAll('circle').classed('dc-tabbable', this._keyboardAccessible);\n      if (this._keyboardAccessible) {\n        this._makeKeyboardAccessible(this.onClick);\n      }\n      return boxesGEnter.merge(boxesG);\n    }\n    _updateBoxes(boxesG) {\n      const chart = this;\n      transition(boxesG, this.transitionDuration(), this.transitionDelay()).attr('transform', (d, i) => this._boxTransform(d, i)).call(this._box).each(function (d) {\n        const color = chart.getColor(d, 0);\n        d3Selection.select(this).select('rect.box').attr('fill', color);\n        d3Selection.select(this).selectAll('circle.data').attr('fill', color);\n      });\n    }\n    _removeBoxes(boxesG) {\n      boxesG.exit().remove().call(this._box);\n    }\n    _minDataValue() {\n      return d3Array.min(this.data(), e => d3Array.min(this.valueAccessor()(e)));\n    }\n    _maxDataValue() {\n      return d3Array.max(this.data(), e => d3Array.max(this.valueAccessor()(e)));\n    }\n    _yAxisRangeRatio() {\n      return (this._maxDataValue() - this._minDataValue()) / this.effectiveHeight();\n    }\n    onClick(d) {\n      this.filter(this.keyAccessor()(d));\n      this.redrawGroup();\n    }\n    fadeDeselectedArea(brushSelection) {\n      const chart = this;\n      if (this.hasFilter()) {\n        if (this.isOrdinal()) {\n          this.g().selectAll('g.box').each(function (d) {\n            if (chart.isSelectedNode(d)) {\n              chart.highlightSelected(this);\n            } else {\n              chart.fadeDeselected(this);\n            }\n          });\n        } else {\n          if (!(this.brushOn() || this.parentBrushOn())) {\n            return;\n          }\n          const start = brushSelection[0];\n          const end = brushSelection[1];\n          this.g().selectAll('g.box').each(function (d) {\n            const key = chart.keyAccessor()(d);\n            if (key < start || key >= end) {\n              chart.fadeDeselected(this);\n            } else {\n              chart.highlightSelected(this);\n            }\n          });\n        }\n      } else {\n        this.g().selectAll('g.box').each(function () {\n          chart.resetHighlight(this);\n        });\n      }\n    }\n    isSelectedNode(d) {\n      return this.hasFilter(this.keyAccessor()(d));\n    }\n    yAxisMin() {\n      const padding = this._yRangePadding * this._yAxisRangeRatio();\n      return utils.subtract(this._minDataValue() - padding, this.yAxisPadding());\n    }\n    yAxisMax() {\n      const padding = this._yRangePadding * this._yAxisRangeRatio();\n      return utils.add(this._maxDataValue() + padding, this.yAxisPadding());\n    }\n\n    /**\n     * Get or set the numerical format of the boxplot median, whiskers and quartile labels. Defaults\n     * to integer formatting.\n     * @example\n     * // format ticks to 2 decimal places\n     * chart.tickFormat(d3.format('.2f'));\n     * @param {Function} [tickFormat]\n     * @returns {Number|Function|BoxPlot}\n     */\n    tickFormat(tickFormat) {\n      if (!arguments.length) {\n        return this._tickFormat;\n      }\n      this._tickFormat = tickFormat;\n      return this;\n    }\n\n    /**\n     * Get or set the amount of padding to add, in pixel coordinates, to the top and\n     * bottom of the chart to accommodate box/whisker labels.\n     * @example\n     * // allow more space for a bigger whisker font\n     * chart.yRangePadding(12);\n     * @param {Function} [yRangePadding = 8]\n     * @returns {Number|Function|BoxPlot}\n     */\n    yRangePadding(yRangePadding) {\n      if (!arguments.length) {\n        return this._yRangePadding;\n      }\n      this._yRangePadding = yRangePadding;\n      return this;\n    }\n\n    /**\n     * Get or set whether individual data points will be rendered.\n     * @example\n     * // Enable rendering of individual data points\n     * chart.renderDataPoints(true);\n     * @param {Boolean} [show=false]\n     * @returns {Boolean|BoxPlot}\n     */\n    renderDataPoints(show) {\n      if (!arguments.length) {\n        return this._renderDataPoints;\n      }\n      this._renderDataPoints = show;\n      return this;\n    }\n\n    /**\n     * Get or set the opacity when rendering data.\n     * @example\n     * // If individual data points are rendered increase the opacity.\n     * chart.dataOpacity(0.7);\n     * @param {Number} [opacity=0.3]\n     * @returns {Number|BoxPlot}\n     */\n    dataOpacity(opacity) {\n      if (!arguments.length) {\n        return this._dataOpacity;\n      }\n      this._dataOpacity = opacity;\n      return this;\n    }\n\n    /**\n     * Get or set the portion of the width of the box to show data points.\n     * @example\n     * // If individual data points are rendered increase the data box.\n     * chart.dataWidthPortion(0.9);\n     * @param {Number} [percentage=0.8]\n     * @returns {Number|BoxPlot}\n     */\n    dataWidthPortion(percentage) {\n      if (!arguments.length) {\n        return this._dataWidthPortion;\n      }\n      this._dataWidthPortion = percentage;\n      return this;\n    }\n\n    /**\n     * Get or set whether outliers will be rendered.\n     * @example\n     * // Disable rendering of outliers\n     * chart.showOutliers(false);\n     * @param {Boolean} [show=true]\n     * @returns {Boolean|BoxPlot}\n     */\n    showOutliers(show) {\n      if (!arguments.length) {\n        return this._showOutliers;\n      }\n      this._showOutliers = show;\n      return this;\n    }\n\n    /**\n     * Get or set whether outliers will be drawn bold.\n     * @example\n     * // If outliers are rendered display as bold\n     * chart.boldOutlier(true);\n     * @param {Boolean} [show=false]\n     * @returns {Boolean|BoxPlot}\n     */\n    boldOutlier(show) {\n      if (!arguments.length) {\n        return this._boldOutlier;\n      }\n      this._boldOutlier = show;\n      return this;\n    }\n  }\n  const boxPlot = (parent, chartGroup) => new BoxPlot(parent, chartGroup);\n\n  /**\n   * A concrete implementation of a general purpose bubble chart that allows data visualization using the\n   * following dimensions:\n   * - x axis position\n   * - y axis position\n   * - bubble radius\n   * - color\n   *\n   * Examples:\n   * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n   * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n   * @mixes BubbleMixin\n   * @mixes CoordinateGridMixin\n   */\n  class BubbleChart extends BubbleMixin(CoordinateGridMixin) {\n    /**\n     * Create a Bubble Chart.\n     *\n     * @example\n     * // create a bubble chart under #chart-container1 element using the default global chart group\n     * var bubbleChart1 = new BubbleChart('#chart-container1');\n     * // create a bubble chart under #chart-container2 element using chart group A\n     * var bubbleChart2 = new BubbleChart('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor(parent, chartGroup) {\n      super();\n      this.transitionDuration(750);\n      this.transitionDelay(0);\n      this.anchor(parent, chartGroup);\n    }\n    _bubbleLocator(d) {\n      return `translate(${this._bubbleX(d)},${this._bubbleY(d)})`;\n    }\n    plotData() {\n      this.calculateRadiusDomain();\n      this.r().range([this.MIN_RADIUS, this.xAxisLength() * this.maxBubbleRelativeSize()]);\n      const data = this.data();\n      let bubbleG = this.chartBodyG().selectAll(`g.${this.BUBBLE_NODE_CLASS}`).data(data, d => d.key);\n      if (this.sortBubbleSize() || this.keyboardAccessible()) {\n        // update dom order based on sort\n        bubbleG.order();\n      }\n      this._removeNodes(bubbleG);\n      bubbleG = this._renderNodes(bubbleG);\n      this._updateNodes(bubbleG);\n      this.fadeDeselectedArea(this.filter());\n    }\n    _renderNodes(bubbleG) {\n      const bubbleGEnter = bubbleG.enter().append('g');\n      bubbleGEnter.attr('class', this.BUBBLE_NODE_CLASS).attr('transform', d => this._bubbleLocator(d)).append('circle').attr('class', (d, i) => `${this.BUBBLE_CLASS} _${i}`).on('click', d3compat.eventHandler(d => this.onClick(d))).classed('dc-tabbable', this._keyboardAccessible).attr('fill', this.getColor).attr('r', 0);\n      bubbleG = bubbleGEnter.merge(bubbleG);\n      transition(bubbleG, this.transitionDuration(), this.transitionDelay()).select(`circle.${this.BUBBLE_CLASS}`).attr('r', d => this.bubbleR(d)).attr('opacity', d => this.bubbleR(d) > 0 ? 1 : 0);\n      if (this._keyboardAccessible) {\n        this._makeKeyboardAccessible(this.onClick);\n      }\n      this._doRenderLabel(bubbleGEnter);\n      this._doRenderTitles(bubbleGEnter);\n      return bubbleG;\n    }\n    _updateNodes(bubbleG) {\n      transition(bubbleG, this.transitionDuration(), this.transitionDelay()).attr('transform', d => this._bubbleLocator(d)).select(`circle.${this.BUBBLE_CLASS}`).attr('fill', this.getColor).attr('r', d => this.bubbleR(d)).attr('opacity', d => this.bubbleR(d) > 0 ? 1 : 0);\n      this.doUpdateLabels(bubbleG);\n      this.doUpdateTitles(bubbleG);\n    }\n    _removeNodes(bubbleG) {\n      bubbleG.exit().remove();\n    }\n    _bubbleX(d) {\n      let x = this.x()(this.keyAccessor()(d));\n      if (isNaN(x) || !isFinite(x)) {\n        x = 0;\n      }\n      return x;\n    }\n    _bubbleY(d) {\n      let y = this.y()(this.valueAccessor()(d));\n      if (isNaN(y) || !isFinite(y)) {\n        y = 0;\n      }\n      return y;\n    }\n    renderBrush() {\n      // override default x axis brush from parent chart\n    }\n    redrawBrush(brushSelection, doTransition) {\n      // override default x axis brush from parent chart\n      this.fadeDeselectedArea(brushSelection);\n    }\n  }\n  const bubbleChart = (parent, chartGroup) => new BubbleChart(parent, chartGroup);\n  const BUBBLE_OVERLAY_CLASS = 'bubble-overlay';\n  const BUBBLE_NODE_CLASS = 'node';\n  const BUBBLE_CLASS = 'bubble';\n\n  /**\n   * The bubble overlay chart is quite different from the typical bubble chart. With the bubble overlay\n   * chart you can arbitrarily place bubbles on an existing svg or bitmap image, thus changing the\n   * typical x and y positioning while retaining the capability to visualize data using bubble radius\n   * and coloring.\n   *\n   * Examples:\n   * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n   * @mixes BubbleMixin\n   * @mixes BaseMixin\n   */\n  class BubbleOverlay extends BubbleMixin(BaseMixin) {\n    /**\n     * Create a Bubble Overlay.\n     *\n     * @example\n     * // create a bubble overlay chart on top of the '#chart-container1 svg' element using the default global chart group\n     * var bubbleChart1 = BubbleOverlayChart('#chart-container1').svg(d3.select('#chart-container1 svg'));\n     * // create a bubble overlay chart on top of the '#chart-container2 svg' element using chart group A\n     * var bubbleChart2 = new CompositeChart('#chart-container2', 'chartGroupA').svg(d3.select('#chart-container2 svg'));\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor(parent, chartGroup) {\n      super();\n\n      /**\n       * **mandatory**\n       *\n       * Set the underlying svg image element. Unlike other dc charts this chart will not generate a svg\n       * element; therefore the bubble overlay chart will not work if this function is not invoked. If the\n       * underlying image is a bitmap, then an empty svg will need to be created on top of the image.\n       * @example\n       * // set up underlying svg element\n       * chart.svg(d3.select('#chart svg'));\n       * @param {SVGElement|d3.selection} [imageElement]\n       * @returns {BubbleOverlay}\n       */\n      this._g = undefined;\n      this._points = [];\n      this._keyboardAccessible = false;\n      this.transitionDuration(750);\n      this.transitionDelay(0);\n      this.radiusValueAccessor(d => d.value);\n      this.anchor(parent, chartGroup);\n    }\n\n    /**\n     * **mandatory**\n     *\n     * Set up a data point on the overlay. The name of a data point should match a specific 'key' among\n     * data groups generated using keyAccessor.  If a match is found (point name <-> data group key)\n     * then a bubble will be generated at the position specified by the function. x and y\n     * value specified here are relative to the underlying svg.\n     * @param {String} name\n     * @param {Number} x\n     * @param {Number} y\n     * @returns {BubbleOverlay}\n     */\n    point(name, x, y) {\n      this._points.push({\n        name: name,\n        x: x,\n        y: y\n      });\n      return this;\n    }\n    _doRender() {\n      this._g = this._initOverlayG();\n      this.r().range([this.MIN_RADIUS, this.width() * this.maxBubbleRelativeSize()]);\n      this._initializeBubbles();\n      this.fadeDeselectedArea(this.filter());\n      return this;\n    }\n    _initOverlayG() {\n      this._g = this.select(`g.${BUBBLE_OVERLAY_CLASS}`);\n      if (this._g.empty()) {\n        this._g = this.svg().append('g').attr('class', BUBBLE_OVERLAY_CLASS);\n      }\n      return this._g;\n    }\n    _initializeBubbles() {\n      const data = this._mapData();\n      this.calculateRadiusDomain();\n      this._points.forEach(point => {\n        const nodeG = this._getNodeG(point, data);\n        let circle = nodeG.select(`circle.${BUBBLE_CLASS}`);\n        if (circle.empty()) {\n          circle = nodeG.append('circle').attr('class', BUBBLE_CLASS).classed('dc-tabbable', this._keyboardAccessible).attr('r', 0).attr('fill', this.getColor).on('click', d3compat.eventHandler(d => this.onClick(d)));\n        }\n        if (this._keyboardAccessible) {\n          this._makeKeyboardAccessible(this.onClick);\n        }\n        transition(circle, this.transitionDuration(), this.transitionDelay()).attr('r', d => this.bubbleR(d));\n        this._doRenderLabel(nodeG);\n        this._doRenderTitles(nodeG);\n      });\n    }\n    _mapData() {\n      const data = {};\n      this.data().forEach(datum => {\n        data[this.keyAccessor()(datum)] = datum;\n      });\n      return data;\n    }\n    _getNodeG(point, data) {\n      const bubbleNodeClass = `${BUBBLE_NODE_CLASS} ${utils.nameToId(point.name)}`;\n      let nodeG = this._g.select(`g.${utils.nameToId(point.name)}`);\n      if (nodeG.empty()) {\n        nodeG = this._g.append('g').attr('class', bubbleNodeClass).attr('transform', `translate(${point.x},${point.y})`);\n      }\n      nodeG.datum(data[point.name]);\n      return nodeG;\n    }\n    _doRedraw() {\n      this._updateBubbles();\n      this.fadeDeselectedArea(this.filter());\n      return this;\n    }\n    _updateBubbles() {\n      const data = this._mapData();\n      this.calculateRadiusDomain();\n      this._points.forEach(point => {\n        const nodeG = this._getNodeG(point, data);\n        const circle = nodeG.select(`circle.${BUBBLE_CLASS}`);\n        transition(circle, this.transitionDuration(), this.transitionDelay()).attr('r', d => this.bubbleR(d)).attr('fill', this.getColor);\n        this.doUpdateLabels(nodeG);\n        this.doUpdateTitles(nodeG);\n      });\n    }\n    debug(flag) {\n      if (flag) {\n        let debugG = this.select(`g.${constants.DEBUG_GROUP_CLASS}`);\n        if (debugG.empty()) {\n          debugG = this.svg().append('g').attr('class', constants.DEBUG_GROUP_CLASS);\n        }\n        const debugText = debugG.append('text').attr('x', 10).attr('y', 20);\n        debugG.append('rect').attr('width', this.width()).attr('height', this.height()).on('mousemove', d3compat.eventHandler((d, evt) => {\n          const position = d3compat.pointer(evt, debugG.node());\n          const msg = `${position[0]}, ${position[1]}`;\n          debugText.text(msg);\n        }));\n      } else {\n        this.selectAll('.debug').remove();\n      }\n      return this;\n    }\n  }\n  const bubbleOverlay = (parent, chartGroup) => new BubbleOverlay(parent, chartGroup);\n  const GROUP_CSS_CLASS = 'dc-cbox-group';\n  const ITEM_CSS_CLASS = 'dc-cbox-item';\n\n  /**\n   * The CboxMenu is a simple widget designed to filter a dimension by\n   * selecting option(s) from a set of HTML `<input />` elements. The menu can be\n   * made into a set of radio buttons (single select) or checkboxes (multiple).\n   * @mixes BaseMixin\n   */\n  class CboxMenu extends BaseMixin {\n    /**\n     * Create a Cbox Menu.\n     *\n     * @example\n     * // create a cboxMenu under #cbox-container using the default global chart group\n     * var cbox = new CboxMenu('#cbox-container')\n     *                .dimension(states)\n     *                .group(stateGroup);\n     * // the option text can be set via the title() function\n     * // by default the option text is '`key`: `value`'\n     * cbox.title(function (d){\n     *     return 'STATE: ' + d.key;\n     * })\n     * @param {String|node|d3.selection|CompositeChart} parent - Any valid\n     * [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this widget should be placed in.\n     * Interaction with the widget will only trigger events and redraws within its group.\n     */\n    constructor(parent, chartGroup) {\n      super();\n      this._cbox = undefined;\n      this._promptText = 'Select all';\n      this._multiple = false;\n      this._inputType = 'radio';\n      this._promptValue = null;\n      this._uniqueId = utils.uniqueId();\n      this.data(group => group.all().filter(this._filterDisplayed));\n\n      // There is an accessor for this attribute, initialized with default value\n      this._filterDisplayed = d => this.valueAccessor()(d) > 0;\n      this._order = (a, b) => {\n        if (this.keyAccessor()(a) > this.keyAccessor()(b)) {\n          return 1;\n        }\n        if (this.keyAccessor()(a) < this.keyAccessor()(b)) {\n          return -1;\n        }\n        return 0;\n      };\n      this.anchor(parent, chartGroup);\n    }\n    _doRender() {\n      return this._doRedraw();\n    }\n    _doRedraw() {\n      this.select('ul').remove();\n      this._cbox = this.root().append('ul').classed(GROUP_CSS_CLASS, true);\n      this._renderOptions();\n      if (this.hasFilter() && this._multiple) {\n        this._cbox.selectAll('input')\n        // adding `false` avoids failing test cases in phantomjs\n        .property('checked', d => d && this.filters().indexOf(String(this.keyAccessor()(d))) >= 0 || false);\n      } else if (this.hasFilter()) {\n        this._cbox.selectAll('input').property('checked', d => {\n          if (!d) {\n            return false;\n          }\n          return this.keyAccessor()(d) === this.filter();\n        });\n      }\n      return this;\n    }\n    _renderOptions() {\n      let options = this._cbox.selectAll(`li.${ITEM_CSS_CLASS}`).data(this.data(), d => this.keyAccessor()(d));\n      options.exit().remove();\n      options = options.enter().append('li').classed(ITEM_CSS_CLASS, true).merge(options);\n      options.append('input').attr('type', this._inputType).attr('value', d => this.keyAccessor()(d)).attr('name', `domain_${this._uniqueId}`).attr('id', (d, i) => `input_${this._uniqueId}_${i}`);\n      options.append('label').attr('for', (d, i) => `input_${this._uniqueId}_${i}`).text(this.title());\n      const chart = this;\n      // 'all' option\n      if (this._multiple) {\n        this._cbox.append('li').append('input').attr('type', 'reset').text(this._promptText).on('click', d3compat.eventHandler(function (d, evt) {\n          return chart._onChange(d, evt, this);\n        }));\n      } else {\n        const li = this._cbox.append('li');\n        li.append('input').attr('type', this._inputType).attr('value', this._promptValue).attr('name', `domain_${this._uniqueId}`).attr('id', (d, i) => `input_${this._uniqueId}_all`).property('checked', true);\n        li.append('label').attr('for', (d, i) => `input_${this._uniqueId}_all`).text(this._promptText);\n      }\n      this._cbox.selectAll(`li.${ITEM_CSS_CLASS}`).sort(this._order);\n      this._cbox.on('change', d3compat.eventHandler(function (d, evt) {\n        return chart._onChange(d, evt, this);\n      }));\n      return options;\n    }\n    _onChange(d, evt, element) {\n      let values;\n      const target = d3Selection.select(evt.target);\n      let options;\n      if (!target.datum()) {\n        values = this._promptValue || null;\n      } else {\n        options = d3Selection.select(element).selectAll('input').filter(function (o) {\n          if (o) {\n            return this.checked;\n          }\n        });\n        values = options.nodes().map(option => option.value);\n        // check if only prompt option is selected\n        if (!this._multiple && values.length === 1) {\n          values = values[0];\n        }\n      }\n      this.onChange(values);\n    }\n    onChange(val) {\n      if (val && this._multiple) {\n        this.replaceFilter([val]);\n      } else if (val) {\n        this.replaceFilter(val);\n      } else {\n        this.filterAll();\n      }\n      events.trigger(() => {\n        this.redrawGroup();\n      });\n    }\n\n    /**\n     * Get or set the function that controls the ordering of option tags in the\n     * cbox menu. By default options are ordered by the group key in ascending\n     * order.\n     * @param {Function} [order]\n     * @returns {Function|CboxMenu}\n     * @example\n     * // order by the group's value\n     * chart.order(function (a,b) {\n     *     return a.value > b.value ? 1 : b.value > a.value ? -1 : 0;\n     * });\n     */\n    order(order) {\n      if (!arguments.length) {\n        return this._order;\n      }\n      this._order = order;\n      return this;\n    }\n\n    /**\n     * Get or set the text displayed in the options used to prompt selection.\n     * @param {String} [promptText='Select all']\n     * @returns {String|CboxMenu}\n     * @example\n     * chart.promptText('All states');\n     */\n    promptText(promptText) {\n      if (!arguments.length) {\n        return this._promptText;\n      }\n      this._promptText = promptText;\n      return this;\n    }\n\n    /**\n     * Get or set the function that filters options prior to display. By default options\n     * with a value of < 1 are not displayed.\n     * @param {function} [filterDisplayed]\n     * @returns {Function|CboxMenu}\n     * @example\n     * // display all options override the `filterDisplayed` function:\n     * chart.filterDisplayed(function () {\n     *     return true;\n     * });\n     */\n    filterDisplayed(filterDisplayed) {\n      if (!arguments.length) {\n        return this._filterDisplayed;\n      }\n      this._filterDisplayed = filterDisplayed;\n      return this;\n    }\n\n    /**\n     * Controls the type of input element. Setting it to true converts\n     * the HTML `input` tags from radio buttons to checkboxes.\n     * @param {boolean} [multiple=false]\n     * @returns {Boolean|CboxMenu}\n     * @example\n     * chart.multiple(true);\n     */\n    multiple(multiple) {\n      if (!arguments.length) {\n        return this._multiple;\n      }\n      this._multiple = multiple;\n      if (this._multiple) {\n        this._inputType = 'checkbox';\n      } else {\n        this._inputType = 'radio';\n      }\n      return this;\n    }\n\n    /**\n     * Controls the default value to be used for\n     * [dimension.filter](https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter)\n     * when only the prompt value is selected. If `null` (the default), no filtering will occur when\n     * just the prompt is selected.\n     * @param {?*} [promptValue=null]\n     * @returns {*|CboxMenu}\n     */\n    promptValue(promptValue) {\n      if (!arguments.length) {\n        return this._promptValue;\n      }\n      this._promptValue = promptValue;\n      return this;\n    }\n  }\n  const cboxMenu = (parent, chartGroup) => new CboxMenu(parent, chartGroup);\n  const SUB_CHART_CLASS = 'sub';\n  const DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING = 12;\n\n  /**\n   * Composite charts are a special kind of chart that render multiple charts on the same Coordinate\n   * Grid. You can overlay (compose) different bar/line/area charts in a single composite chart to\n   * achieve some quite flexible charting effects.\n   * @mixes CoordinateGridMixin\n   */\n  class CompositeChart extends CoordinateGridMixin {\n    /**\n     * Create a Composite Chart.\n     * @example\n     * // create a composite chart under #chart-container1 element using the default global chart group\n     * var compositeChart1 = new CompositeChart('#chart-container1');\n     * // create a composite chart under #chart-container2 element using chart group A\n     * var compositeChart2 = new CompositeChart('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor(parent, chartGroup) {\n      super();\n      this._children = [];\n      this._childOptions = {};\n      this._shareColors = false;\n      this._shareTitle = true;\n      this._alignYAxes = false;\n      this._rightYAxis = d3Axis.axisRight();\n      this._rightYAxisLabel = 0;\n      this._rightYAxisLabelPadding = DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING;\n      this._rightY = undefined;\n      this._rightAxisGridLines = false;\n      this._mandatoryAttributes([]);\n      this.transitionDuration(500);\n      this.transitionDelay(0);\n      this.on('filtered.dcjs-composite-chart', chart => {\n        // Propagate the filters onto the children\n        // Notice that on children the call is .replaceFilter and not .filter\n        //   the reason is that _chart.filter() returns the entire current set of filters not just the last added one\n        for (let i = 0; i < this._children.length; ++i) {\n          this._children[i].replaceFilter(this.filter());\n        }\n      });\n      this.anchor(parent, chartGroup);\n    }\n    _generateG() {\n      const g = super._generateG();\n      for (let i = 0; i < this._children.length; ++i) {\n        const child = this._children[i];\n        this._generateChildG(child, i);\n        if (!child.dimension()) {\n          child.dimension(this.dimension());\n        }\n        if (!child.group()) {\n          child.group(this.group());\n        }\n        child.chartGroup(this.chartGroup());\n        child.svg(this.svg());\n        child.xUnits(this.xUnits());\n        child.transitionDuration(this.transitionDuration(), this.transitionDelay());\n        child.parentBrushOn(this.brushOn());\n        child.brushOn(false);\n        child.renderTitle(this.renderTitle());\n        child.elasticX(this.elasticX());\n      }\n      return g;\n    }\n    rescale() {\n      super.rescale();\n      this._children.forEach(child => {\n        child.rescale();\n      });\n      return this;\n    }\n    resizing(resizing) {\n      if (!arguments.length) {\n        return super.resizing();\n      }\n      super.resizing(resizing);\n      this._children.forEach(child => {\n        child.resizing(resizing);\n      });\n      return this;\n    }\n    _prepareYAxis() {\n      const left = this._leftYAxisChildren().length !== 0;\n      const right = this._rightYAxisChildren().length !== 0;\n      const ranges = this._calculateYAxisRanges(left, right);\n      if (left) {\n        this._prepareLeftYAxis(ranges);\n      }\n      if (right) {\n        this._prepareRightYAxis(ranges);\n      }\n      if (this._leftYAxisChildren().length > 0 && !this._rightAxisGridLines) {\n        this._renderHorizontalGridLinesForAxis(this.g(), this.y(), this.yAxis());\n      } else if (this._rightYAxisChildren().length > 0) {\n        this._renderHorizontalGridLinesForAxis(this.g(), this._rightY, this._rightYAxis);\n      }\n    }\n    renderYAxis() {\n      if (this._leftYAxisChildren().length !== 0) {\n        this.renderYAxisAt('y', this.yAxis(), this.margins().left);\n        this.renderYAxisLabel('y', this.yAxisLabel(), -90);\n      }\n      if (this._rightYAxisChildren().length !== 0) {\n        this.renderYAxisAt('yr', this.rightYAxis(), this.width() - this.margins().right);\n        this.renderYAxisLabel('yr', this.rightYAxisLabel(), 90, this.width() - this._rightYAxisLabelPadding);\n      }\n    }\n    _calculateYAxisRanges(left, right) {\n      let lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax;\n      let ranges;\n      if (left) {\n        lyAxisMin = this._yAxisMin();\n        lyAxisMax = this._yAxisMax();\n      }\n      if (right) {\n        ryAxisMin = this._rightYAxisMin();\n        ryAxisMax = this._rightYAxisMax();\n      }\n      if (this.alignYAxes() && left && right) {\n        ranges = this._alignYAxisRanges(lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax);\n      }\n      return ranges || {\n        lyAxisMin: lyAxisMin,\n        lyAxisMax: lyAxisMax,\n        ryAxisMin: ryAxisMin,\n        ryAxisMax: ryAxisMax\n      };\n    }\n    _alignYAxisRanges(lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax) {\n      // since the two series will share a zero, each Y is just a multiple\n      // of the other. and the ratio should be the ratio of the ranges of the\n      // input data, so that they come out the same height. so we just min/max\n\n      // note: both ranges already include zero due to the stack mixin (#667)\n      // if #667 changes, we can reconsider whether we want data height or\n      // height from zero to be equal. and it will be possible for the axes\n      // to be aligned but not visible.\n      const extentRatio = (ryAxisMax - ryAxisMin) / (lyAxisMax - lyAxisMin);\n      return {\n        lyAxisMin: Math.min(lyAxisMin, ryAxisMin / extentRatio),\n        lyAxisMax: Math.max(lyAxisMax, ryAxisMax / extentRatio),\n        ryAxisMin: Math.min(ryAxisMin, lyAxisMin * extentRatio),\n        ryAxisMax: Math.max(ryAxisMax, lyAxisMax * extentRatio)\n      };\n    }\n    _prepareRightYAxis(ranges) {\n      const needDomain = this.rightY() === undefined || this.elasticY(),\n        needRange = needDomain || this.resizing();\n      if (this.rightY() === undefined) {\n        this.rightY(d3Scale.scaleLinear());\n      }\n      if (needDomain) {\n        this.rightY().domain([ranges.ryAxisMin, ranges.ryAxisMax]);\n      }\n      if (needRange) {\n        this.rightY().rangeRound([this.yAxisHeight(), 0]);\n      }\n      this.rightY().range([this.yAxisHeight(), 0]);\n      this.rightYAxis(this.rightYAxis().scale(this.rightY()));\n\n      // In D3v4 create a RightAxis\n      // _chart.rightYAxis().orient('right');\n    }\n\n    _prepareLeftYAxis(ranges) {\n      const needDomain = this.y() === undefined || this.elasticY(),\n        needRange = needDomain || this.resizing();\n      if (this.y() === undefined) {\n        this.y(d3Scale.scaleLinear());\n      }\n      if (needDomain) {\n        this.y().domain([ranges.lyAxisMin, ranges.lyAxisMax]);\n      }\n      if (needRange) {\n        this.y().rangeRound([this.yAxisHeight(), 0]);\n      }\n      this.y().range([this.yAxisHeight(), 0]);\n      this.yAxis(this.yAxis().scale(this.y()));\n\n      // In D3v4 create a LeftAxis\n      // _chart.yAxis().orient('left');\n    }\n\n    _generateChildG(child, i) {\n      child._generateG(this.g());\n      child.g().attr('class', `${SUB_CHART_CLASS} _${i}`);\n    }\n    plotData() {\n      for (let i = 0; i < this._children.length; ++i) {\n        const child = this._children[i];\n        if (!child.g()) {\n          this._generateChildG(child, i);\n        }\n        if (this._shareColors) {\n          child.colors(this.colors());\n        }\n        child.x(this.x());\n        child.xAxis(this.xAxis());\n        if (child.useRightYAxis()) {\n          child.y(this.rightY());\n          child.yAxis(this.rightYAxis());\n        } else {\n          child.y(this.y());\n          child.yAxis(this.yAxis());\n        }\n        child.plotData();\n        child._activateRenderlets();\n      }\n    }\n\n    /**\n     * Get or set whether to draw gridlines from the right y axis.  Drawing from the left y axis is the\n     * default behavior. This option is only respected when subcharts with both left and right y-axes\n     * are present.\n     * @param {Boolean} [useRightAxisGridLines=false]\n     * @returns {Boolean|CompositeChart}\n     */\n    useRightAxisGridLines(useRightAxisGridLines) {\n      if (!arguments) {\n        return this._rightAxisGridLines;\n      }\n      this._rightAxisGridLines = useRightAxisGridLines;\n      return this;\n    }\n\n    /**\n     * Get or set chart-specific options for all child charts. This is equivalent to calling\n     * {@link BaseMixin#options .options} on each child chart.\n     * @param {Object} [childOptions]\n     * @returns {Object|CompositeChart}\n     */\n    childOptions(childOptions) {\n      if (!arguments.length) {\n        return this._childOptions;\n      }\n      this._childOptions = childOptions;\n      this._children.forEach(child => {\n        child.options(this._childOptions);\n      });\n      return this;\n    }\n    fadeDeselectedArea(brushSelection) {\n      if (this.brushOn()) {\n        for (let i = 0; i < this._children.length; ++i) {\n          const child = this._children[i];\n          child.fadeDeselectedArea(brushSelection);\n        }\n      }\n    }\n\n    /**\n     * Set or get the right y axis label.\n     * @param {String} [rightYAxisLabel]\n     * @param {Number} [padding]\n     * @returns {String|CompositeChart}\n     */\n    rightYAxisLabel(rightYAxisLabel, padding) {\n      if (!arguments.length) {\n        return this._rightYAxisLabel;\n      }\n      this._rightYAxisLabel = rightYAxisLabel;\n      this.margins().right -= this._rightYAxisLabelPadding;\n      this._rightYAxisLabelPadding = padding === undefined ? DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING : padding;\n      this.margins().right += this._rightYAxisLabelPadding;\n      return this;\n    }\n\n    /**\n     * Combine the given charts into one single composite coordinate grid chart.\n     * @example\n     * moveChart.compose([\n     *     // when creating sub-chart you need to pass in the parent chart\n     *     new LineChart(moveChart)\n     *         .group(indexAvgByMonthGroup) // if group is missing then parent's group will be used\n     *         .valueAccessor(function (d){return d.value.avg;})\n     *         // most of the normal functions will continue to work in a composed chart\n     *         .renderArea(true)\n     *         .stack(monthlyMoveGroup, function (d){return d.value;})\n     *         .title(function (d){\n     *             var value = d.value.avg?d.value.avg:d.value;\n     *             if(isNaN(value)) value = 0;\n     *             return dateFormat(d.key) + '\\n' + numberFormat(value);\n     *         }),\n     *     new BarChart(moveChart)\n     *         .group(volumeByMonthGroup)\n     *         .centerBar(true)\n     * ]);\n     * @param {Array<Chart>} [subChartArray]\n     * @returns {CompositeChart}\n     */\n    compose(subChartArray) {\n      this._children = subChartArray;\n      this._children.forEach(child => {\n        child.height(this.height());\n        child.width(this.width());\n        child.margins(this.margins());\n        if (this._shareTitle) {\n          child.title(this.title());\n        }\n        child.options(this._childOptions);\n      });\n      this.rescale();\n      return this;\n    }\n    _setChildrenProperty(prop, value) {\n      this._children.forEach(child => {\n        child[prop](value);\n      });\n    }\n\n    // properties passed through in compose()\n    height(height) {\n      if (!arguments.length) {\n        return super.height();\n      }\n      super.height(height);\n      this._setChildrenProperty('height', height);\n      return this;\n    }\n    width(width) {\n      if (!arguments.length) {\n        return super.width();\n      }\n      super.width(width);\n      this._setChildrenProperty('width', width);\n      return this;\n    }\n    margins(margins) {\n      if (!arguments.length) {\n        return super.margins();\n      }\n      super.margins(margins);\n      this._setChildrenProperty('margins', margins);\n      return this;\n    }\n\n    /**\n     * Returns the child charts which are composed into the composite chart.\n     * @returns {Array<BaseMixin>}\n     */\n    children() {\n      return this._children;\n    }\n\n    /**\n     * Get or set color sharing for the chart. If set, the {@link ColorMixin#colors .colors()} value from this chart\n     * will be shared with composed children. Additionally if the child chart implements\n     * Stackable and has not set a custom .colorAccessor, then it will generate a color\n     * specific to its order in the composition.\n     * @param {Boolean} [shareColors=false]\n     * @returns {Boolean|CompositeChart}\n     */\n    shareColors(shareColors) {\n      if (!arguments.length) {\n        return this._shareColors;\n      }\n      this._shareColors = shareColors;\n      return this;\n    }\n\n    /**\n     * Get or set title sharing for the chart. If set, the {@link BaseMixin#title .title()} value from\n     * this chart will be shared with composed children.\n     *\n     * Note: currently you must call this before `compose` or the child will still get the parent's\n     * `title` function!\n     * @param {Boolean} [shareTitle=true]\n     * @returns {Boolean|CompositeChart}\n     */\n    shareTitle(shareTitle) {\n      if (!arguments.length) {\n        return this._shareTitle;\n      }\n      this._shareTitle = shareTitle;\n      return this;\n    }\n\n    /**\n     * Get or set the y scale for the right axis. The right y scale is typically automatically\n     * generated by the chart implementation.\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\n     * @param {d3.scale} [yScale]\n     * @returns {d3.scale|CompositeChart}\n     */\n    rightY(yScale) {\n      if (!arguments.length) {\n        return this._rightY;\n      }\n      this._rightY = yScale;\n      this.rescale();\n      return this;\n    }\n\n    /**\n     * Get or set alignment between left and right y axes. A line connecting '0' on both y axis\n     * will be parallel to x axis. This only has effect when {@link CoordinateGridMixin#elasticY elasticY} is true.\n     * @param {Boolean} [alignYAxes=false]\n     * @returns {Chart}\n     */\n    alignYAxes(alignYAxes) {\n      if (!arguments.length) {\n        return this._alignYAxes;\n      }\n      this._alignYAxes = alignYAxes;\n      this.rescale();\n      return this;\n    }\n    _leftYAxisChildren() {\n      return this._children.filter(child => !child.useRightYAxis());\n    }\n    _rightYAxisChildren() {\n      return this._children.filter(child => child.useRightYAxis());\n    }\n    _getYAxisMin(charts) {\n      return charts.map(c => c.yAxisMin());\n    }\n    _yAxisMin() {\n      return d3Array.min(this._getYAxisMin(this._leftYAxisChildren()));\n    }\n    _rightYAxisMin() {\n      return d3Array.min(this._getYAxisMin(this._rightYAxisChildren()));\n    }\n    _getYAxisMax(charts) {\n      return charts.map(c => c.yAxisMax());\n    }\n    _yAxisMax() {\n      return utils.add(d3Array.max(this._getYAxisMax(this._leftYAxisChildren())), this.yAxisPadding());\n    }\n    _rightYAxisMax() {\n      return utils.add(d3Array.max(this._getYAxisMax(this._rightYAxisChildren())), this.yAxisPadding());\n    }\n    _getAllXAxisMinFromChildCharts() {\n      return this._children.map(c => c.xAxisMin());\n    }\n    xAxisMin() {\n      return utils.subtract(d3Array.min(this._getAllXAxisMinFromChildCharts()), this.xAxisPadding(), this.xAxisPaddingUnit());\n    }\n    _getAllXAxisMaxFromChildCharts() {\n      return this._children.map(c => c.xAxisMax());\n    }\n    xAxisMax() {\n      return utils.add(d3Array.max(this._getAllXAxisMaxFromChildCharts()), this.xAxisPadding(), this.xAxisPaddingUnit());\n    }\n    legendables() {\n      return this._children.reduce((items, child) => {\n        if (this._shareColors) {\n          child.colors(this.colors());\n        }\n        items.push.apply(items, child.legendables());\n        return items;\n      }, []);\n    }\n    legendHighlight(d) {\n      for (let j = 0; j < this._children.length; ++j) {\n        const child = this._children[j];\n        child.legendHighlight(d);\n      }\n    }\n    legendReset(d) {\n      for (let j = 0; j < this._children.length; ++j) {\n        const child = this._children[j];\n        child.legendReset(d);\n      }\n    }\n    legendToggle() {\n      console.log('composite should not be getting legendToggle itself');\n    }\n\n    /**\n     * Set or get the right y axis used by the composite chart. This function is most useful when y\n     * axis customization is required. The y axis in dc.js is an instance of a\n     * [d3.axisRight](https://github.com/d3/d3-axis/blob/master/README.md#axisRight) therefore it supports any valid\n     * d3 axis manipulation.\n     *\n     * **Caution**: The right y axis is usually generated internally by dc; resetting it may cause\n     * unexpected results.  Note also that when used as a getter, this function is not chainable: it\n     * returns the axis, not the chart,\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n     * so attempting to call chart functions after calling `.yAxis()` will fail}.\n     * @see {@link https://github.com/d3/d3-axis/blob/master/README.md#axisRight}\n     * @example\n     * // customize y axis tick format\n     * chart.rightYAxis().tickFormat(function (v) {return v + '%';});\n     * // customize y axis tick values\n     * chart.rightYAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.axisRight} [rightYAxis]\n     * @returns {d3.axisRight|CompositeChart}\n     */\n    rightYAxis(rightYAxis) {\n      if (!arguments.length) {\n        return this._rightYAxis;\n      }\n      this._rightYAxis = rightYAxis;\n      return this;\n    }\n    yAxisMin() {\n      throw new Error('Not supported for this chart type');\n    }\n    yAxisMax() {\n      throw new Error('Not supported for this chart type');\n    }\n  }\n  const compositeChart = (parent, chartGroup) => new CompositeChart(parent, chartGroup);\n\n  /**\n   * The data count widget is a simple widget designed to display the number of records selected by the\n   * current filters out of the total number of records in the data set. Once created the data count widget\n   * will automatically update the text content of child elements with the following classes:\n   *\n   * * `.total-count` - total number of records\n   * * `.filter-count` - number of records matched by the current filters\n   *\n   * Note: this widget works best for the specific case of showing the number of records out of a\n   * total. If you want a more general-purpose numeric display, please use the\n   * {@link NumberDisplay} widget instead.\n   *\n   * Examples:\n   * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n   * @mixes BaseMixin\n   */\n  class DataCount extends BaseMixin {\n    /**\n     * Create a Data Count widget.\n     * @example\n     * var ndx = crossfilter(data);\n     * var all = ndx.groupAll();\n     *\n     * new DataCount('.dc-data-count')\n     *     .crossfilter(ndx)\n     *     .groupAll(all);\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor(parent, chartGroup) {\n      super();\n      this._formatNumber = d3Format.format(',d');\n      this._crossfilter = null;\n      this._groupAll = null;\n      this._html = {\n        some: '',\n        all: ''\n      };\n      this._mandatoryAttributes(['crossfilter', 'groupAll']);\n      this.anchor(parent, chartGroup);\n    }\n\n    /**\n     * Gets or sets an optional object specifying HTML templates to use depending how many items are\n     * selected. The text `%total-count` will replaced with the total number of records, and the text\n     * `%filter-count` will be replaced with the number of selected records.\n     * - all: HTML template to use if all items are selected\n     * - some: HTML template to use if not all items are selected\n     * @example\n     * counter.html({\n     *      some: '%filter-count out of %total-count records selected',\n     *      all: 'All records selected. Click on charts to apply filters'\n     * })\n     * @param {{some:String, all: String}} [options]\n     * @returns {{some:String, all: String}|DataCount}\n     */\n    html(options) {\n      if (!arguments.length) {\n        return this._html;\n      }\n      if (options.all) {\n        this._html.all = options.all;\n      }\n      if (options.some) {\n        this._html.some = options.some;\n      }\n      return this;\n    }\n\n    /**\n     * Gets or sets an optional function to format the filter count and total count.\n     * @see {@link https://github.com/d3/d3-format/blob/master/README.md#format d3.format}\n     * @example\n     * counter.formatNumber(d3.format('.2g'))\n     * @param {Function} [formatter=d3.format('.2g')]\n     * @returns {Function|DataCount}\n     */\n    formatNumber(formatter) {\n      if (!arguments.length) {\n        return this._formatNumber;\n      }\n      this._formatNumber = formatter;\n      return this;\n    }\n    _doRender() {\n      const tot = this.crossfilter().size(),\n        val = this.groupAll().value();\n      const all = this._formatNumber(tot);\n      const selected = this._formatNumber(val);\n      if (tot === val && this._html.all !== '') {\n        this.root().html(this._html.all.replace('%total-count', all).replace('%filter-count', selected));\n      } else if (this._html.some !== '') {\n        this.root().html(this._html.some.replace('%total-count', all).replace('%filter-count', selected));\n      } else {\n        this.selectAll('.total-count').text(all);\n        this.selectAll('.filter-count').text(selected);\n      }\n      return this;\n    }\n    _doRedraw() {\n      return this._doRender();\n    }\n    crossfilter(cf) {\n      if (!arguments.length) {\n        return this._crossfilter;\n      }\n      this._crossfilter = cf;\n      return this;\n    }\n    dimension(cf) {\n      logger.warnOnce('consider using dataCount.crossfilter instead of dataCount.dimension for clarity');\n      if (!arguments.length) {\n        return this.crossfilter();\n      }\n      return this.crossfilter(cf);\n    }\n    groupAll(groupAll) {\n      if (!arguments.length) {\n        return this._groupAll;\n      }\n      this._groupAll = groupAll;\n      return this;\n    }\n    group(groupAll) {\n      logger.warnOnce('consider using dataCount.groupAll instead of dataCount.group for clarity');\n      if (!arguments.length) {\n        return this.groupAll();\n      }\n      return this.groupAll(groupAll);\n    }\n  }\n  const dataCount = (parent, chartGroup) => new DataCount(parent, chartGroup);\n  const LABEL_CSS_CLASS = 'dc-grid-label';\n  const ITEM_CSS_CLASS$1 = 'dc-grid-item';\n  const SECTION_CSS_CLASS = 'dc-grid-section dc-grid-group';\n  const GRID_CSS_CLASS = 'dc-grid-top';\n\n  /**\n   * Data grid is a simple widget designed to list the filtered records, providing\n   * a simple way to define how the items are displayed.\n   *\n   * Note: Formerly the data grid chart (and data table) used the {@link DataGrid#group group} attribute as a\n   * keying function for {@link https://github.com/d3/d3-collection/blob/master/README.md#nest nesting} the data\n   * together in sections.  This was confusing so it has been renamed to `section`, although `group` still works.\n   *\n   * Examples:\n   * - {@link https://dc-js.github.io/dc.js/ep/ List of members of the european parliament}\n   * @mixes BaseMixin\n   */\n  class DataGrid extends BaseMixin {\n    /**\n     * Create a Data Grid.\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor(parent, chartGroup) {\n      super();\n      this._section = null;\n      this._size = 999; // shouldn't be needed, but you might\n      this._html = function (d) {\n        return `you need to provide an html() handling param:  ${JSON.stringify(d)}`;\n      };\n      this._sortBy = function (d) {\n        return d;\n      };\n      this._order = d3Array.ascending;\n      this._beginSlice = 0;\n      this._endSlice = undefined;\n      this._htmlSection = d => `<div class='${SECTION_CSS_CLASS}'><h1 class='${LABEL_CSS_CLASS}'>${this.keyAccessor()(d)}</h1></div>`;\n      this._mandatoryAttributes(['dimension', 'section']);\n      this.anchor(parent, chartGroup);\n    }\n    _doRender() {\n      this.selectAll(`div.${GRID_CSS_CLASS}`).remove();\n      this._renderItems(this._renderSections());\n      return this;\n    }\n    _renderSections() {\n      const sections = this.root().selectAll(`div.${GRID_CSS_CLASS}`).data(this._nestEntries(), d => this.keyAccessor()(d));\n      const itemSection = sections.enter().append('div').attr('class', GRID_CSS_CLASS);\n      if (this._htmlSection) {\n        itemSection.html(d => this._htmlSection(d));\n      }\n      sections.exit().remove();\n      return itemSection;\n    }\n    _nestEntries() {\n      let entries = this.dimension().top(this._size);\n      entries = entries.sort((a, b) => this._order(this._sortBy(a), this._sortBy(b))).slice(this._beginSlice, this._endSlice);\n      return d3compat.nester({\n        key: this.section(),\n        sortKeys: this._order,\n        entries\n      });\n    }\n    _renderItems(sections) {\n      let items = sections.order().selectAll(`div.${ITEM_CSS_CLASS$1}`).data(d => d.values);\n      items.exit().remove();\n      items = items.enter().append('div').attr('class', ITEM_CSS_CLASS$1).html(d => this._html(d)).merge(items);\n      return items;\n    }\n    _doRedraw() {\n      return this._doRender();\n    }\n\n    /**\n     * Get or set the section function for the data grid. The section function takes a data row and\n     * returns the key to specify to {@link https://github.com/d3/d3-collection/blob/master/README.md#nest d3.nest}\n     * to split rows into sections.\n     *\n     * Do not pass in a crossfilter section as this will not work.\n     * @example\n     * // section rows by the value of their field\n     * chart\n     *     .section(function(d) { return d.field; })\n     * @param {Function} section Function taking a row of data and returning the nest key.\n     * @returns {Function|DataGrid}\n     */\n    section(section) {\n      if (!arguments.length) {\n        return this._section;\n      }\n      this._section = section;\n      return this;\n    }\n\n    /**\n     * Backward-compatible synonym for {@link DataGrid#section section}.\n     *\n     * @param {Function} section Function taking a row of data and returning the nest key.\n     * @returns {Function|DataGrid}\n     */\n    group(section) {\n      logger.warnOnce('consider using dataGrid.section instead of dataGrid.group for clarity');\n      if (!arguments.length) {\n        return this.section();\n      }\n      return this.section(section);\n    }\n\n    /**\n     * Get or set the index of the beginning slice which determines which entries get displayed by the widget.\n     * Useful when implementing pagination.\n     * @param {Number} [beginSlice=0]\n     * @returns {Number|DataGrid}\n     */\n    beginSlice(beginSlice) {\n      if (!arguments.length) {\n        return this._beginSlice;\n      }\n      this._beginSlice = beginSlice;\n      return this;\n    }\n\n    /**\n     * Get or set the index of the end slice which determines which entries get displayed by the widget.\n     * Useful when implementing pagination.\n     * @param {Number} [endSlice]\n     * @returns {Number|DataGrid}\n     */\n    endSlice(endSlice) {\n      if (!arguments.length) {\n        return this._endSlice;\n      }\n      this._endSlice = endSlice;\n      return this;\n    }\n\n    /**\n     * Get or set the grid size which determines the number of items displayed by the widget.\n     * @param {Number} [size=999]\n     * @returns {Number|DataGrid}\n     */\n    size(size) {\n      if (!arguments.length) {\n        return this._size;\n      }\n      this._size = size;\n      return this;\n    }\n\n    /**\n     * Get or set the function that formats an item. The data grid widget uses a\n     * function to generate dynamic html. Use your favourite templating engine or\n     * generate the string directly.\n     * @example\n     * chart.html(function (d) { return '<div class='item '+data.exampleCategory+''>'+data.exampleString+'</div>';});\n     * @param {Function} [html]\n     * @returns {Function|DataGrid}\n     */\n    html(html) {\n      if (!arguments.length) {\n        return this._html;\n      }\n      this._html = html;\n      return this;\n    }\n\n    /**\n     * Get or set the function that formats a section label.\n     * @example\n     * chart.htmlSection (function (d) { return '<h2>'.d.key . 'with ' . d.values.length .' items</h2>'});\n     * @param {Function} [htmlSection]\n     * @returns {Function|DataGrid}\n     */\n    htmlSection(htmlSection) {\n      if (!arguments.length) {\n        return this._htmlSection;\n      }\n      this._htmlSection = htmlSection;\n      return this;\n    }\n\n    /**\n     * Backward-compatible synonym for {@link DataGrid#htmlSection htmlSection}.\n     * @param {Function} [htmlSection]\n     * @returns {Function|DataGrid}\n     */\n    htmlGroup(htmlSection) {\n      logger.warnOnce('consider using dataGrid.htmlSection instead of dataGrid.htmlGroup for clarity');\n      if (!arguments.length) {\n        return this.htmlSection();\n      }\n      return this.htmlSection(htmlSection);\n    }\n\n    /**\n     * Get or set sort-by function. This function works as a value accessor at the item\n     * level and returns a particular field to be sorted.\n     * @example\n     * chart.sortBy(function(d) {\n     *     return d.date;\n     * });\n     * @param {Function} [sortByFunction]\n     * @returns {Function|DataGrid}\n     */\n    sortBy(sortByFunction) {\n      if (!arguments.length) {\n        return this._sortBy;\n      }\n      this._sortBy = sortByFunction;\n      return this;\n    }\n\n    /**\n     * Get or set sort the order function.\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#descending d3.descending}\n     * @example\n     * chart.order(d3.descending);\n     * @param {Function} [order=d3.ascending]\n     * @returns {Function|DataGrid}\n     */\n    order(order) {\n      if (!arguments.length) {\n        return this._order;\n      }\n      this._order = order;\n      return this;\n    }\n  }\n  const dataGrid = (parent, chartGroup) => new DataGrid(parent, chartGroup);\n  const LABEL_CSS_CLASS$1 = 'dc-table-label';\n  const ROW_CSS_CLASS = 'dc-table-row';\n  const COLUMN_CSS_CLASS = 'dc-table-column';\n  const SECTION_CSS_CLASS$1 = 'dc-table-section dc-table-group';\n  const HEAD_CSS_CLASS = 'dc-table-head';\n\n  /**\n   * The data table is a simple widget designed to list crossfilter focused data set (rows being\n   * filtered) in a good old tabular fashion.\n   *\n   * An interesting feature of the data table is that you can pass a crossfilter group to the\n   * `dimension`, if you want to show aggregated data instead of raw data rows. This requires no\n   * special code as long as you specify the {@link DataTable#order order} as `d3.descending`,\n   * since the data table will use `dimension.top()` to fetch the data in that case, and the method is\n   * equally supported on the crossfilter group as the crossfilter dimension.\n   *\n   * If you want to display aggregated data in ascending order, you will need to wrap the group\n   * in a [fake dimension](https://github.com/dc-js/dc.js/wiki/FAQ#fake-dimensions) to support the\n   * `.bottom()` method. See the example linked below for more details.\n   *\n   * Note: Formerly the data table (and data grid chart) used the {@link DataTable#group group} attribute as a\n   * keying function for {@link https://github.com/d3/d3-collection/blob/master/README.md#nest nesting} the data\n   * together in sections.  This was confusing so it has been renamed to `section`, although `group` still works.\n   * Examples:\n   * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n   * - {@link http://dc-js.github.io/dc.js/examples/table-on-aggregated-data.html dataTable on a crossfilter group}\n   * ({@link https://github.com/dc-js/dc.js/blob/master/web-src/examples/table-on-aggregated-data.html source})\n   *\n   * @mixes BaseMixin\n   */\n  class DataTable extends BaseMixin {\n    /**\n     * Create a Data Table.\n     *\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor(parent, chartGroup) {\n      super();\n      this._size = 25;\n      this._columns = [];\n      this._sortBy = d => d;\n      this._order = d3Array.ascending;\n      this._beginSlice = 0;\n      this._endSlice = undefined;\n      this._showSections = true;\n      this._section = () => ''; // all in one section\n\n      this._mandatoryAttributes(['dimension']);\n      this.anchor(parent, chartGroup);\n    }\n    _doRender() {\n      this.selectAll('tbody').remove();\n      this._renderRows(this._renderSections());\n      return this;\n    }\n    _doColumnValueFormat(v, d) {\n      return typeof v === 'function' ? v(d) :\n      // v as function\n      typeof v === 'string' ? d[v] :\n      // v is field name string\n      v.format(d); // v is Object, use fn (element 2)\n    }\n\n    _doColumnHeaderFormat(d) {\n      // if 'function', convert to string representation\n      // show a string capitalized\n      // if an object then display its label string as-is.\n      return typeof d === 'function' ? this._doColumnHeaderFnToString(d) : typeof d === 'string' ? this._doColumnHeaderCapitalize(d) : String(d.label);\n    }\n    _doColumnHeaderCapitalize(s) {\n      // capitalize\n      return s.charAt(0).toUpperCase() + s.slice(1);\n    }\n    _doColumnHeaderFnToString(f) {\n      // columnString(f) {\n      let s = String(f);\n      const i1 = s.indexOf('return ');\n      if (i1 >= 0) {\n        const i2 = s.lastIndexOf(';');\n        if (i2 >= 0) {\n          s = s.substring(i1 + 7, i2);\n          const i3 = s.indexOf('numberFormat');\n          if (i3 >= 0) {\n            s = s.replace('numberFormat', '');\n          }\n        }\n      }\n      return s;\n    }\n    _renderSections() {\n      // The 'original' example uses all 'functions'.\n      // If all 'functions' are used, then don't remove/add a header, and leave\n      // the html alone. This preserves the functionality of earlier releases.\n      // A 2nd option is a string representing a field in the data.\n      // A third option is to supply an Object such as an array of 'information', and\n      // supply your own _doColumnHeaderFormat and _doColumnValueFormat functions to\n      // create what you need.\n      let bAllFunctions = true;\n      this._columns.forEach(f => {\n        bAllFunctions = bAllFunctions & typeof f === 'function';\n      });\n      if (!bAllFunctions) {\n        // ensure one thead\n        let thead = this.selectAll('thead').data([0]);\n        thead.exit().remove();\n        thead = thead.enter().append('thead').merge(thead);\n\n        // with one tr\n        let headrow = thead.selectAll('tr').data([0]);\n        headrow.exit().remove();\n        headrow = headrow.enter().append('tr').merge(headrow);\n\n        // with a th for each column\n        const headcols = headrow.selectAll('th').data(this._columns);\n        headcols.exit().remove();\n        headcols.enter().append('th').merge(headcols).attr('class', HEAD_CSS_CLASS).html(d => this._doColumnHeaderFormat(d));\n      }\n      const sections = this.root().selectAll('tbody').data(this._nestEntries(), d => this.keyAccessor()(d));\n      const rowSection = sections.enter().append('tbody');\n      if (this._showSections === true) {\n        rowSection.append('tr').attr('class', SECTION_CSS_CLASS$1).append('td').attr('class', LABEL_CSS_CLASS$1).attr('colspan', this._columns.length).html(d => this.keyAccessor()(d));\n      }\n      sections.exit().remove();\n      return rowSection;\n    }\n    _nestEntries() {\n      let entries;\n      if (this._order === d3Array.ascending) {\n        entries = this.dimension().bottom(this._size);\n      } else {\n        entries = this.dimension().top(this._size);\n      }\n      entries = entries.sort((a, b) => this._order(this._sortBy(a), this._sortBy(b))).slice(this._beginSlice, this._endSlice);\n      return d3compat.nester({\n        key: this.section(),\n        sortKeys: this._order,\n        entries\n      });\n    }\n    _renderRows(sections) {\n      const rows = sections.order().selectAll(`tr.${ROW_CSS_CLASS}`).data(d => d.values);\n      const rowEnter = rows.enter().append('tr').attr('class', ROW_CSS_CLASS);\n      this._columns.forEach((v, i) => {\n        rowEnter.append('td').attr('class', `${COLUMN_CSS_CLASS} _${i}`).html(d => this._doColumnValueFormat(v, d));\n      });\n      rows.exit().remove();\n      return rows;\n    }\n    _doRedraw() {\n      return this._doRender();\n    }\n\n    /**\n     * Get or set the section function for the data table. The section function takes a data row and\n     * returns the key to specify to {@link https://github.com/d3/d3-collection/blob/master/README.md#nest d3.nest}\n     * to split rows into sections. By default there will be only one section with no name.\n     *\n     * Set {@link DataTable#showSections showSections} to false to hide the section headers\n     *\n     * @example\n     * // section rows by the value of their field\n     * chart\n     *     .section(function(d) { return d.field; })\n     * @param {Function} section Function taking a row of data and returning the nest key.\n     * @returns {Function|DataTable}\n     */\n    section(section) {\n      if (!arguments.length) {\n        return this._section;\n      }\n      this._section = section;\n      return this;\n    }\n\n    /**\n     * Backward-compatible synonym for {@link DataTable#section section}.\n     *\n     * @param {Function} section Function taking a row of data and returning the nest key.\n     * @returns {Function|DataTable}\n     */\n    group(section) {\n      logger.warnOnce('consider using dataTable.section instead of dataTable.group for clarity');\n      if (!arguments.length) {\n        return this.section();\n      }\n      return this.section(section);\n    }\n\n    /**\n     * Get or set the table size which determines the number of rows displayed by the widget.\n     * @param {Number} [size=25]\n     * @returns {Number|DataTable}\n     */\n    size(size) {\n      if (!arguments.length) {\n        return this._size;\n      }\n      this._size = size;\n      return this;\n    }\n\n    /**\n     * Get or set the index of the beginning slice which determines which entries get displayed\n     * by the widget. Useful when implementing pagination.\n     *\n     * Note: the sortBy function will determine how the rows are ordered for pagination purposes.\n      * See the {@link http://dc-js.github.io/dc.js/examples/table-pagination.html table pagination example}\n     * to see how to implement the pagination user interface using `beginSlice` and `endSlice`.\n     * @param {Number} [beginSlice=0]\n     * @returns {Number|DataTable}\n     */\n    beginSlice(beginSlice) {\n      if (!arguments.length) {\n        return this._beginSlice;\n      }\n      this._beginSlice = beginSlice;\n      return this;\n    }\n\n    /**\n     * Get or set the index of the end slice which determines which entries get displayed by the\n     * widget. Useful when implementing pagination. See {@link DataTable#beginSlice `beginSlice`} for more information.\n     * @param {Number|undefined} [endSlice=undefined]\n     * @returns {Number|DataTable}\n     */\n    endSlice(endSlice) {\n      if (!arguments.length) {\n        return this._endSlice;\n      }\n      this._endSlice = endSlice;\n      return this;\n    }\n\n    /**\n     * Get or set column functions. The data table widget supports several methods of specifying the\n     * columns to display.\n     *\n     * The original method uses an array of functions to generate dynamic columns. Column functions\n     * are simple javascript functions with only one input argument `d` which represents a row in\n     * the data set. The return value of these functions will be used to generate the content for\n     * each cell. However, this method requires the HTML for the table to have a fixed set of column\n     * headers.\n     *\n     * <pre><code>chart.columns([\n     *     function(d) { return d.date; },\n     *     function(d) { return d.open; },\n     *     function(d) { return d.close; },\n     *     function(d) { return numberFormat(d.close - d.open); },\n     *     function(d) { return d.volume; }\n     * ]);\n     * </code></pre>\n     *\n     * In the second method, you can list the columns to read from the data without specifying it as\n     * a function, except where necessary (ie, computed columns).  Note the data element name is\n     * capitalized when displayed in the table header. You can also mix in functions as necessary,\n     * using the third `{label, format}` form, as shown below.\n     *\n     * <pre><code>chart.columns([\n     *     \"date\",    // d[\"date\"], ie, a field accessor; capitalized automatically\n     *     \"open\",    // ...\n     *     \"close\",   // ...\n     *     {\n     *         label: \"Change\",\n     *         format: function (d) {\n     *             return numberFormat(d.close - d.open);\n     *         }\n     *     },\n     *     \"volume\"   // d[\"volume\"], ie, a field accessor; capitalized automatically\n     * ]);\n     * </code></pre>\n     *\n     * In the third example, we specify all fields using the `{label, format}` method:\n     * <pre><code>chart.columns([\n     *     {\n     *         label: \"Date\",\n     *         format: function (d) { return d.date; }\n     *     },\n     *     {\n     *         label: \"Open\",\n     *         format: function (d) { return numberFormat(d.open); }\n     *     },\n     *     {\n     *         label: \"Close\",\n     *         format: function (d) { return numberFormat(d.close); }\n     *     },\n     *     {\n     *         label: \"Change\",\n     *         format: function (d) { return numberFormat(d.close - d.open); }\n     *     },\n     *     {\n     *         label: \"Volume\",\n     *         format: function (d) { return d.volume; }\n     *     }\n     * ]);\n     * </code></pre>\n     *\n     * You may wish to override the dataTable functions `_doColumnHeaderCapitalize` and\n     * `_doColumnHeaderFnToString`, which are used internally to translate the column information or\n     * function into a displayed header. The first one is used on the \"string\" column specifier; the\n     * second is used to transform a stringified function into something displayable. For the Stock\n     * example, the function for Change becomes the table header **d.close - d.open**.\n     *\n     * Finally, you can even specify a completely different form of column definition. To do this,\n     * override `_chart._doColumnHeaderFormat` and `_chart._doColumnValueFormat` Be aware that\n     * fields without numberFormat specification will be displayed just as they are stored in the\n     * data, unformatted.\n     * @param {Array<Function>} [columns=[]]\n     * @returns {Array<Function>}|DataTable}\n     */\n    columns(columns) {\n      if (!arguments.length) {\n        return this._columns;\n      }\n      this._columns = columns;\n      return this;\n    }\n\n    /**\n     * Get or set sort-by function. This function works as a value accessor at row level and returns a\n     * particular field to be sorted by.\n     * @example\n     * chart.sortBy(function(d) {\n     *     return d.date;\n     * });\n     * @param {Function} [sortBy=identity function]\n     * @returns {Function|DataTable}\n     */\n    sortBy(sortBy) {\n      if (!arguments.length) {\n        return this._sortBy;\n      }\n      this._sortBy = sortBy;\n      return this;\n    }\n\n    /**\n     * Get or set sort order. If the order is `d3.ascending`, the data table will use\n     * `dimension().bottom()` to fetch the data; otherwise it will use `dimension().top()`\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#descending d3.descending}\n     * @example\n     * chart.order(d3.descending);\n     * @param {Function} [order=d3.ascending]\n     * @returns {Function|DataTable}\n     */\n    order(order) {\n      if (!arguments.length) {\n        return this._order;\n      }\n      this._order = order;\n      return this;\n    }\n\n    /**\n     * Get or set if section header rows will be shown.\n     * @example\n     * chart\n     *     .section([value], [name])\n     *     .showSections(true|false);\n     * @param {Boolean} [showSections=true]\n     * @returns {Boolean|DataTable}\n     */\n    showSections(showSections) {\n      if (!arguments.length) {\n        return this._showSections;\n      }\n      this._showSections = showSections;\n      return this;\n    }\n\n    /**\n     * Backward-compatible synonym for {@link DataTable#showSections showSections}.\n     * @param {Boolean} [showSections=true]\n     * @returns {Boolean|DataTable}\n     */\n    showGroups(showSections) {\n      logger.warnOnce('consider using dataTable.showSections instead of dataTable.showGroups for clarity');\n      if (!arguments.length) {\n        return this.showSections();\n      }\n      return this.showSections(showSections);\n    }\n  }\n  const dataTable = (parent, chartGroup) => new DataTable(parent, chartGroup);\n\n  /**\n   * The geo choropleth chart is designed as an easy way to create a crossfilter driven choropleth map\n   * from GeoJson data. This chart implementation was inspired by\n   * {@link http://bl.ocks.org/4060606 the great d3 choropleth example}.\n   *\n   * Examples:\n   * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n   * @mixes ColorMixin\n   * @mixes BaseMixin\n   */\n  class GeoChoroplethChart extends ColorMixin(BaseMixin) {\n    /**\n     * Create a Geo Choropleth Chart.\n     * @example\n     * // create a choropleth chart under '#us-chart' element using the default global chart group\n     * var chart1 = new GeoChoroplethChart('#us-chart');\n     * // create a choropleth chart under '#us-chart2' element using chart group A\n     * var chart2 = new CompositeChart('#us-chart2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor(parent, chartGroup) {\n      super();\n      this.colorAccessor(d => d || 0);\n      this._geoPath = d3Geo.geoPath();\n      this._projectionFlag = undefined;\n      this._projection = undefined;\n      this._geoJsons = [];\n      this.anchor(parent, chartGroup);\n    }\n    _doRender() {\n      this.resetSvg();\n      for (let layerIndex = 0; layerIndex < this._geoJsons.length; ++layerIndex) {\n        const states = this.svg().append('g').attr('class', `layer${layerIndex}`);\n        let regionG = states.selectAll(`g.${this._geoJson(layerIndex).name}`).data(this._geoJson(layerIndex).data);\n        regionG = regionG.enter().append('g').attr('class', this._geoJson(layerIndex).name).merge(regionG);\n        regionG.append('path').classed('dc-tabbable', this._keyboardAccessible).attr('fill', 'white').attr('d', this._getGeoPath());\n        regionG.append('title');\n        this._plotData(layerIndex);\n      }\n      this._projectionFlag = false;\n    }\n    _plotData(layerIndex) {\n      const data = this._generateLayeredData();\n      if (this._isDataLayer(layerIndex)) {\n        const regionG = this._renderRegionG(layerIndex);\n        this._renderPaths(regionG, layerIndex, data);\n        this._renderTitles(regionG, layerIndex, data);\n      }\n    }\n    _generateLayeredData() {\n      const data = {};\n      const groupAll = this.data();\n      for (let i = 0; i < groupAll.length; ++i) {\n        data[this.keyAccessor()(groupAll[i])] = this.valueAccessor()(groupAll[i]);\n      }\n      return data;\n    }\n    _isDataLayer(layerIndex) {\n      return this._geoJson(layerIndex).keyAccessor;\n    }\n    _renderRegionG(layerIndex) {\n      const regionG = this.svg().selectAll(this._layerSelector(layerIndex)).classed('selected', d => this._isSelected(layerIndex, d)).classed('deselected', d => this._isDeselected(layerIndex, d)).attr('class', d => {\n        const layerNameClass = this._geoJson(layerIndex).name;\n        const regionClass = utils.nameToId(this._geoJson(layerIndex).keyAccessor(d));\n        let baseClasses = `${layerNameClass} ${regionClass}`;\n        if (this._isSelected(layerIndex, d)) {\n          baseClasses += ' selected';\n        }\n        if (this._isDeselected(layerIndex, d)) {\n          baseClasses += ' deselected';\n        }\n        return baseClasses;\n      });\n      return regionG;\n    }\n    _layerSelector(layerIndex) {\n      return `g.layer${layerIndex} g.${this._geoJson(layerIndex).name}`;\n    }\n    _isSelected(layerIndex, d) {\n      return this.hasFilter() && this.hasFilter(this._getKey(layerIndex, d));\n    }\n    _isDeselected(layerIndex, d) {\n      return this.hasFilter() && !this.hasFilter(this._getKey(layerIndex, d));\n    }\n    _getKey(layerIndex, d) {\n      return this._geoJson(layerIndex).keyAccessor(d);\n    }\n    _geoJson(index) {\n      return this._geoJsons[index];\n    }\n    _renderPaths(regionG, layerIndex, data) {\n      const paths = regionG.select('path').attr('fill', function () {\n        const currentFill = d3Selection.select(this).attr('fill');\n        if (currentFill) {\n          return currentFill;\n        }\n        return 'none';\n      }).on('click', d3compat.eventHandler(d => this.onClick(d, layerIndex)));\n      if (this._keyboardAccessible) {\n        this._makeKeyboardAccessible(this.onClick, layerIndex);\n      }\n      transition(paths, this.transitionDuration(), this.transitionDelay()).attr('fill', (d, i) => this.getColor(data[this._geoJson(layerIndex).keyAccessor(d)], i));\n    }\n    onClick(d, layerIndex) {\n      const selectedRegion = this._geoJson(layerIndex).keyAccessor(d);\n      events.trigger(() => {\n        this.filter(selectedRegion);\n        this.redrawGroup();\n      });\n    }\n    _renderTitles(regionG, layerIndex, data) {\n      if (this.renderTitle()) {\n        regionG.selectAll('title').text(d => {\n          const key = this._getKey(layerIndex, d);\n          const value = data[key];\n          return this.title()({\n            key: key,\n            value: value\n          });\n        });\n      }\n    }\n    _doRedraw() {\n      for (let layerIndex = 0; layerIndex < this._geoJsons.length; ++layerIndex) {\n        this._plotData(layerIndex);\n        if (this._projectionFlag) {\n          this.svg().selectAll(`g.${this._geoJson(layerIndex).name} path`).attr('d', this._getGeoPath());\n        }\n      }\n      this._projectionFlag = false;\n    }\n\n    /**\n     * **mandatory**\n     *\n     * Use this function to insert a new GeoJson map layer. This function can be invoked multiple times\n     * if you have multiple GeoJson data layers to render on top of each other. If you overlay multiple\n     * layers with the same name the new overlay will override the existing one.\n     * @see {@link http://geojson.org/ GeoJSON}\n     * @see {@link https://github.com/topojson/topojson/wiki TopoJSON}\n     * @see {@link https://github.com/topojson/topojson-1.x-api-reference/blob/master/API-Reference.md#wiki-feature topojson.feature}\n     * @example\n     * // insert a layer for rendering US states\n     * chart.overlayGeoJson(statesJson.features, 'state', function(d) {\n     *      return d.properties.name;\n     * });\n     * @param {_geoJson} json - a geojson feed\n     * @param {String} name - name of the layer\n     * @param {Function} keyAccessor - accessor function used to extract 'key' from the GeoJson data. The key extracted by\n     * this function should match the keys returned by the crossfilter groups.\n     * @returns {GeoChoroplethChart}\n     */\n    overlayGeoJson(json, name, keyAccessor) {\n      for (let i = 0; i < this._geoJsons.length; ++i) {\n        if (this._geoJsons[i].name === name) {\n          this._geoJsons[i].data = json;\n          this._geoJsons[i].keyAccessor = keyAccessor;\n          return this;\n        }\n      }\n      this._geoJsons.push({\n        name: name,\n        data: json,\n        keyAccessor: keyAccessor\n      });\n      return this;\n    }\n\n    /**\n     * Gets or sets a custom geo projection function. See the available\n     * {@link https://github.com/d3/d3-geo/blob/master/README.md#projections d3 geo projection functions}.\n     *\n     * Starting version 3.0 it has been deprecated to rely on the default projection being\n     * {@link https://github.com/d3/d3-geo/blob/master/README.md#geoAlbersUsa d3.geoAlbersUsa()}. Please\n     * set it explicitly. {@link https://bl.ocks.org/mbostock/5557726\n     * Considering that `null` is also a valid value for projection}, if you need\n     * projection to be `null` please set it explicitly to `null`.\n     * @see {@link https://github.com/d3/d3-geo/blob/master/README.md#projections d3.projection}\n     * @see {@link https://github.com/d3/d3-geo-projection d3-geo-projection}\n     * @param {d3.projection} [projection=d3.geoAlbersUsa()]\n     * @returns {d3.projection|GeoChoroplethChart}\n     */\n    projection(projection) {\n      if (!arguments.length) {\n        return this._projection;\n      }\n      this._projection = projection;\n      this._projectionFlag = true;\n      return this;\n    }\n    _getGeoPath() {\n      if (this._projection === undefined) {\n        logger.warn('choropleth projection default of geoAlbers is deprecated,' + ' in next version projection will need to be set explicitly');\n        return this._geoPath.projection(d3Geo.geoAlbersUsa());\n      }\n      return this._geoPath.projection(this._projection);\n    }\n\n    /**\n     * Returns all GeoJson layers currently registered with this chart. The returned array is a\n     * reference to this chart's internal data structure, so any modification to this array will also\n     * modify this chart's internal registration.\n     * @returns {Array<{name:String, data: Object, accessor: Function}>}\n     */\n    geoJsons() {\n      return this._geoJsons;\n    }\n\n    /**\n     * Returns the {@link https://github.com/d3/d3-geo/blob/master/README.md#paths d3.geoPath} object used to\n     * render the projection and features.  Can be useful for figuring out the bounding box of the\n     * feature set and thus a way to calculate scale and translation for the projection.\n     * @see {@link https://github.com/d3/d3-geo/blob/master/README.md#paths d3.geoPath}\n     * @returns {d3.geoPath}\n     */\n    geoPath() {\n      return this._geoPath;\n    }\n\n    /**\n     * Remove a GeoJson layer from this chart by name\n     * @param {String} name\n     * @returns {GeoChoroplethChart}\n     */\n    removeGeoJson(name) {\n      const geoJsons = [];\n      for (let i = 0; i < this._geoJsons.length; ++i) {\n        const layer = this._geoJsons[i];\n        if (layer.name !== name) {\n          geoJsons.push(layer);\n        }\n      }\n      this._geoJsons = geoJsons;\n      return this;\n    }\n  }\n  const geoChoroplethChart = (parent, chartGroup) => new GeoChoroplethChart(parent, chartGroup);\n  const DEFAULT_BORDER_RADIUS = 6.75;\n\n  /**\n   * A heat map is matrix that represents the values of two dimensions of data using colors.\n   * @mixes ColorMixin\n   * @mixes MarginMixin\n   * @mixes BaseMixin\n   */\n  class HeatMap extends ColorMixin(MarginMixin) {\n    /**\n     * Create a Heat Map\n     * @example\n     * // create a heat map under #chart-container1 element using the default global chart group\n     * var heatMap1 = new HeatMap('#chart-container1');\n     * // create a heat map under #chart-container2 element using chart group A\n     * var heatMap2 = new HeatMap('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor(parent, chartGroup) {\n      super();\n      this._chartBody = undefined;\n      this._cols = undefined;\n      this._rows = undefined;\n      this._colOrdering = d3Array.ascending;\n      this._rowOrdering = d3Array.ascending;\n      this._colScale = d3Scale.scaleBand();\n      this._rowScale = d3Scale.scaleBand();\n      this._xBorderRadius = DEFAULT_BORDER_RADIUS;\n      this._yBorderRadius = DEFAULT_BORDER_RADIUS;\n      this._mandatoryAttributes(['group']);\n      this.title(this.colorAccessor());\n      this._colsLabel = d => d;\n      this._rowsLabel = d => d;\n      this._xAxisOnClick = d => {\n        this._filterAxis(0, d);\n      };\n      this._yAxisOnClick = d => {\n        this._filterAxis(1, d);\n      };\n      this._boxOnClick = d => {\n        const filter = d.key;\n        events.trigger(() => {\n          this.filter(filters.TwoDimensionalFilter(filter));\n          this.redrawGroup();\n        });\n      };\n      this.anchor(parent, chartGroup);\n    }\n\n    /**\n     * Set or get the column label function. The chart class uses this function to render\n     * column labels on the X axis. It is passed the column name.\n     * @example\n     * // the default label function just returns the name\n     * chart.colsLabel(function(d) { return d; });\n     * @param  {Function} [labelFunction=function(d) { return d; }]\n     * @returns {Function|HeatMap}\n     */\n    colsLabel(labelFunction) {\n      if (!arguments.length) {\n        return this._colsLabel;\n      }\n      this._colsLabel = labelFunction;\n      return this;\n    }\n\n    /**\n     * Set or get the row label function. The chart class uses this function to render\n     * row labels on the Y axis. It is passed the row name.\n     * @example\n     * // the default label function just returns the name\n     * chart.rowsLabel(function(d) { return d; });\n     * @param  {Function} [labelFunction=function(d) { return d; }]\n     * @returns {Function|HeatMap}\n     */\n    rowsLabel(labelFunction) {\n      if (!arguments.length) {\n        return this._rowsLabel;\n      }\n      this._rowsLabel = labelFunction;\n      return this;\n    }\n    _filterAxis(axis, value) {\n      const cellsOnAxis = this.selectAll('.box-group').filter(d => d.key[axis] === value);\n      const unfilteredCellsOnAxis = cellsOnAxis.filter(d => !this.hasFilter(d.key));\n      events.trigger(() => {\n        const selection = unfilteredCellsOnAxis.empty() ? cellsOnAxis : unfilteredCellsOnAxis;\n        const filtersList = selection.data().map(kv => filters.TwoDimensionalFilter(kv.key));\n        this.filter([filtersList]);\n        this.redrawGroup();\n      });\n    }\n    filter(filter) {\n      const nonstandardFilter = f => {\n        logger.warnOnce('heatmap.filter taking a coordinate is deprecated - please pass dc.filters.TwoDimensionalFilter instead');\n        return this._filter(filters.TwoDimensionalFilter(f));\n      };\n      if (!arguments.length) {\n        return super.filter();\n      }\n      if (filter !== null && filter.filterType !== 'TwoDimensionalFilter' && !(Array.isArray(filter) && Array.isArray(filter[0]) && filter[0][0].filterType === 'TwoDimensionalFilter')) {\n        return nonstandardFilter(filter);\n      }\n      return super.filter(filter);\n    }\n\n    /**\n     * Gets or sets the values used to create the rows of the heatmap, as an array. By default, all\n     * the values will be fetched from the data using the value accessor.\n     * @param  {Array<String|Number>} [rows]\n     * @returns {Array<String|Number>|HeatMap}\n     */\n\n    rows(rows) {\n      if (!arguments.length) {\n        return this._rows;\n      }\n      this._rows = rows;\n      return this;\n    }\n\n    /**\n     * Get or set a comparator to order the rows.\n     * Default is {@link https://github.com/d3/d3-array#ascending d3.ascending}.\n     * @param  {Function} [rowOrdering]\n     * @returns {Function|HeatMap}\n     */\n    rowOrdering(rowOrdering) {\n      if (!arguments.length) {\n        return this._rowOrdering;\n      }\n      this._rowOrdering = rowOrdering;\n      return this;\n    }\n\n    /**\n     * Gets or sets the keys used to create the columns of the heatmap, as an array. By default, all\n     * the values will be fetched from the data using the key accessor.\n     * @param  {Array<String|Number>} [cols]\n     * @returns {Array<String|Number>|HeatMap}\n     */\n    cols(cols) {\n      if (!arguments.length) {\n        return this._cols;\n      }\n      this._cols = cols;\n      return this;\n    }\n\n    /**\n     * Get or set a comparator to order the columns.\n     * Default is  {@link https://github.com/d3/d3-array#ascending d3.ascending}.\n     * @param  {Function} [colOrdering]\n     * @returns {Function|HeatMap}\n     */\n    colOrdering(colOrdering) {\n      if (!arguments.length) {\n        return this._colOrdering;\n      }\n      this._colOrdering = colOrdering;\n      return this;\n    }\n    _doRender() {\n      this.resetSvg();\n      this._chartBody = this.svg().append('g').attr('class', 'heatmap').attr('transform', `translate(${this.margins().left},${this.margins().top})`);\n      return this._doRedraw();\n    }\n    _doRedraw() {\n      const data = this.data();\n      let rows = this.rows() || data.map(this.valueAccessor()),\n        cols = this.cols() || data.map(this.keyAccessor());\n      if (this._rowOrdering) {\n        rows = rows.sort(this._rowOrdering);\n      }\n      if (this._colOrdering) {\n        cols = cols.sort(this._colOrdering);\n      }\n      rows = this._rowScale.domain(rows);\n      cols = this._colScale.domain(cols);\n      const rowCount = rows.domain().length,\n        colCount = cols.domain().length,\n        boxWidth = Math.floor(this.effectiveWidth() / colCount),\n        boxHeight = Math.floor(this.effectiveHeight() / rowCount);\n      cols.rangeRound([0, this.effectiveWidth()]);\n      rows.rangeRound([this.effectiveHeight(), 0]);\n      let boxes = this._chartBody.selectAll('g.box-group').data(this.data(), (d, i) => `${this.keyAccessor()(d, i)}\\0${this.valueAccessor()(d, i)}`);\n      boxes.exit().remove();\n      const gEnter = boxes.enter().append('g').attr('class', 'box-group');\n      gEnter.append('rect').attr('class', 'heat-box').classed('dc-tabbable', this._keyboardAccessible).attr('fill', 'white').attr('x', (d, i) => cols(this.keyAccessor()(d, i))).attr('y', (d, i) => rows(this.valueAccessor()(d, i))).on('click', d3compat.eventHandler(this.boxOnClick()));\n      if (this._keyboardAccessible) {\n        this._makeKeyboardAccessible(this.boxOnClick);\n      }\n      boxes = gEnter.merge(boxes);\n      if (this.renderTitle()) {\n        gEnter.append('title');\n        boxes.select('title').text(this.title());\n      }\n      transition(boxes.select('rect'), this.transitionDuration(), this.transitionDelay()).attr('x', (d, i) => cols(this.keyAccessor()(d, i))).attr('y', (d, i) => rows(this.valueAccessor()(d, i))).attr('rx', this._xBorderRadius).attr('ry', this._yBorderRadius).attr('fill', this.getColor).attr('width', boxWidth).attr('height', boxHeight);\n      let gCols = this._chartBody.select('g.cols');\n      if (gCols.empty()) {\n        gCols = this._chartBody.append('g').attr('class', 'cols axis');\n      }\n      let gColsText = gCols.selectAll('text').data(cols.domain());\n      gColsText.exit().remove();\n      gColsText = gColsText.enter().append('text').attr('x', d => cols(d) + boxWidth / 2).style('text-anchor', 'middle').attr('y', this.effectiveHeight()).attr('dy', 12).on('click', d3compat.eventHandler(this.xAxisOnClick())).text(this.colsLabel()).merge(gColsText);\n      transition(gColsText, this.transitionDuration(), this.transitionDelay()).text(this.colsLabel()).attr('x', d => cols(d) + boxWidth / 2).attr('y', this.effectiveHeight());\n      let gRows = this._chartBody.select('g.rows');\n      if (gRows.empty()) {\n        gRows = this._chartBody.append('g').attr('class', 'rows axis');\n      }\n      let gRowsText = gRows.selectAll('text').data(rows.domain());\n      gRowsText.exit().remove();\n      gRowsText = gRowsText.enter().append('text').style('text-anchor', 'end').attr('x', 0).attr('dx', -2).attr('y', d => rows(d) + boxHeight / 2).attr('dy', 6).on('click', d3compat.eventHandler(this.yAxisOnClick())).text(this.rowsLabel()).merge(gRowsText);\n      transition(gRowsText, this.transitionDuration(), this.transitionDelay()).text(this.rowsLabel()).attr('y', d => rows(d) + boxHeight / 2);\n      if (this.hasFilter()) {\n        const chart = this;\n        this.selectAll('g.box-group').each(function (d) {\n          if (chart.isSelectedNode(d)) {\n            chart.highlightSelected(this);\n          } else {\n            chart.fadeDeselected(this);\n          }\n        });\n      } else {\n        const chart = this;\n        this.selectAll('g.box-group').each(function () {\n          chart.resetHighlight(this);\n        });\n      }\n      return this;\n    }\n\n    /**\n     * Gets or sets the handler that fires when an individual cell is clicked in the heatmap.\n     * By default, filtering of the cell will be toggled.\n     * @example\n     * // default box on click handler\n     * chart.boxOnClick(function (d) {\n     *     var filter = d.key;\n     *     events.trigger(function () {\n     *         _chart.filter(filter);\n     *         _chart.redrawGroup();\n     *     });\n     * });\n     * @param  {Function} [handler]\n     * @returns {Function|HeatMap}\n     */\n    boxOnClick(handler) {\n      if (!arguments.length) {\n        return this._boxOnClick;\n      }\n      this._boxOnClick = handler;\n      return this;\n    }\n\n    /**\n     * Gets or sets the handler that fires when a column tick is clicked in the x axis.\n     * By default, if any cells in the column are unselected, the whole column will be selected,\n     * otherwise the whole column will be unselected.\n     * @param  {Function} [handler]\n     * @returns {Function|HeatMap}\n     */\n    xAxisOnClick(handler) {\n      if (!arguments.length) {\n        return this._xAxisOnClick;\n      }\n      this._xAxisOnClick = handler;\n      return this;\n    }\n\n    /**\n     * Gets or sets the handler that fires when a row tick is clicked in the y axis.\n     * By default, if any cells in the row are unselected, the whole row will be selected,\n     * otherwise the whole row will be unselected.\n     * @param  {Function} [handler]\n     * @returns {Function|HeatMap}\n     */\n    yAxisOnClick(handler) {\n      if (!arguments.length) {\n        return this._yAxisOnClick;\n      }\n      this._yAxisOnClick = handler;\n      return this;\n    }\n\n    /**\n     * Gets or sets the X border radius.  Set to 0 to get full rectangles.\n     * @param  {Number} [xBorderRadius=6.75]\n     * @returns {Number|HeatMap}\n     */\n    xBorderRadius(xBorderRadius) {\n      if (!arguments.length) {\n        return this._xBorderRadius;\n      }\n      this._xBorderRadius = xBorderRadius;\n      return this;\n    }\n\n    /**\n     * Gets or sets the Y border radius.  Set to 0 to get full rectangles.\n     * @param  {Number} [yBorderRadius=6.75]\n     * @returns {Number|HeatMap}\n     */\n    yBorderRadius(yBorderRadius) {\n      if (!arguments.length) {\n        return this._yBorderRadius;\n      }\n      this._yBorderRadius = yBorderRadius;\n      return this;\n    }\n    isSelectedNode(d) {\n      return this.hasFilter(d.key);\n    }\n  }\n  const heatMap = (parent, chartGroup) => new HeatMap(parent, chartGroup);\n\n  /**\n   * htmlLegend is a attachable widget that can be added to other dc charts to render horizontal/vertical legend\n   * labels.\n   * @example\n   * chart.legend(HtmlLegend().container(legendContainerElement).horizontal(false))\n   * @returns {HtmlLegend}\n   */\n  class HtmlLegend {\n    constructor() {\n      this._htmlLegendDivCssClass = 'dc-html-legend';\n      this._legendItemCssClassHorizontal = 'dc-legend-item-horizontal';\n      this._legendItemCssClassVertical = 'dc-legend-item-vertical';\n      this._parent = undefined;\n      this._container = undefined;\n      this._legendText = pluck('name');\n      this._maxItems = undefined;\n      this._horizontal = false;\n      this._legendItemClass = undefined;\n      this._highlightSelected = false;\n      this._keyboardAccessible = false;\n    }\n    parent(p) {\n      if (!arguments.length) {\n        return this._parent;\n      }\n      this._parent = p;\n      return this;\n    }\n    render() {\n      this._defaultLegendItemCssClass = this._horizontal ? this._legendItemCssClassHorizontal : this._legendItemCssClassVertical;\n      this._container.select(`div.${this._htmlLegendDivCssClass}`).remove();\n      const container = this._container.append('div').attr('class', this._htmlLegendDivCssClass);\n      container.attr('style', `max-width:${this._container.nodes()[0].style.width}`);\n      let legendables = this._parent.legendables();\n      const filters = this._parent.filters();\n      if (this._maxItems !== undefined) {\n        legendables = legendables.slice(0, this._maxItems);\n      }\n      const legendItemClassName = this._legendItemClass ? this._legendItemClass : this._defaultLegendItemCssClass;\n      const itemEnter = container.selectAll(`div.${legendItemClassName}`).data(legendables).enter().append('div').classed(legendItemClassName, true).on('mouseover', d3compat.eventHandler(d => this._parent.legendHighlight(d))).on('mouseout', d3compat.eventHandler(d => this._parent.legendReset(d))).on('click', d3compat.eventHandler(d => this._parent.legendToggle(d)));\n      if (this._highlightSelected) {\n        itemEnter.classed(constants.SELECTED_CLASS, d => filters.indexOf(d.name) !== -1);\n      }\n      itemEnter.append('span').attr('class', 'dc-legend-item-color').style('background-color', pluck('color'));\n      itemEnter.append('span').attr('class', 'dc-legend-item-label').classed('dc-tabbable', this._keyboardAccessible).attr('title', this._legendText).text(this._legendText);\n      if (this._keyboardAccessible) {\n        this._makeLegendKeyboardAccessible();\n      }\n    }\n\n    /**\n     * Set the container selector for the legend widget. Required.\n     * @param {String} [container]\n     * @return {String|HtmlLegend}\n     */\n    container(container) {\n      if (!arguments.length) {\n        return this._container;\n      }\n      this._container = d3Selection.select(container);\n      return this;\n    }\n\n    /**\n     * This can be optionally used to override class for legenditem and just use this class style.\n     * This is helpful for overriding the style of a particular chart rather than overriding\n     * the style for all charts.\n     *\n     * Setting this will disable the highlighting of selected items also.\n     * @param {String} [legendItemClass]\n     * @return {String|HtmlLegend}\n     */\n    legendItemClass(legendItemClass) {\n      if (!arguments.length) {\n        return this._legendItemClass;\n      }\n      this._legendItemClass = legendItemClass;\n      return this;\n    }\n\n    /**\n     * This can be optionally used to enable highlighting legends for the selections/filters for the\n     * chart.\n     * @param {String} [highlightSelected]\n     * @return {String|HtmlLegend}\n     */\n    highlightSelected(highlightSelected) {\n      if (!arguments.length) {\n        return this._highlightSelected;\n      }\n      this._highlightSelected = highlightSelected;\n      return this;\n    }\n\n    /**\n     * Display the legend horizontally instead of vertically\n     * @param {String} [horizontal]\n     * @return {String|HtmlLegend}\n     */\n    horizontal(horizontal) {\n      if (!arguments.length) {\n        return this._horizontal;\n      }\n      this._horizontal = horizontal;\n      return this;\n    }\n\n    /**\n     * Set or get the legend text function. The legend widget uses this function to render the legend\n     * text for each item. If no function is specified the legend widget will display the names\n     * associated with each group.\n     * @param  {Function} [legendText]\n     * @returns {Function|HtmlLegend}\n     * @example\n     * // default legendText\n     * legend.legendText(pluck('name'))\n     *\n     * // create numbered legend items\n     * chart.legend(new HtmlLegend().legendText(function(d, i) { return i + '. ' + d.name; }))\n     *\n     * // create legend displaying group counts\n     * chart.legend(new HtmlLegend().legendText(function(d) { return d.name + ': ' d.data; }))\n     */\n    legendText(legendText) {\n      if (!arguments.length) {\n        return this._legendText;\n      }\n      this._legendText = legendText;\n      return this;\n    }\n\n    /**\n     * Maximum number of legend items to display\n     * @param  {Number} [maxItems]\n     * @return {HtmlLegend}\n     */\n    maxItems(maxItems) {\n      if (!arguments.length) {\n        return this._maxItems;\n      }\n      this._maxItems = utils.isNumber(maxItems) ? maxItems : undefined;\n      return this;\n    }\n\n    /**\n     * If set, individual legend items will be focusable from keyboard and on pressing Enter or Space\n     * will behave as if clicked on.\n     * \n     * If `svgDescription` on the parent chart has not been explicitly set, will also set the default \n     * SVG description text to the class constructor name, like BarChart or HeatMap, and make the entire\n     * SVG focusable.\n     * @param {Boolean} [keyboardAccessible=false]\n     * @returns {Boolean|HtmlLegend}\n     */\n    keyboardAccessible(keyboardAccessible) {\n      if (!arguments.length) {\n        return this._keyboardAccessible;\n      }\n      this._keyboardAccessible = keyboardAccessible;\n      return this;\n    }\n    _makeLegendKeyboardAccessible() {\n      if (!this._parent._svgDescription) {\n        this._parent.svg().append('desc').attr('id', `desc-id-${this._parent.__dcFlag__}`).html(`${this._parent.svgDescription()}`);\n        this._parent.svg().attr('tabindex', '0').attr('role', 'img').attr('aria-labelledby', `desc-id-${this._parent.__dcFlag__}`);\n      }\n      const tabElements = this.container().selectAll('.dc-legend-item-label.dc-tabbable').attr('tabindex', 0);\n      tabElements.on('keydown', d3compat.eventHandler((d, event) => {\n        // trigger only if d is an object\n        if (event.keyCode === 13 && typeof d === 'object') {\n          d.chart.legendToggle(d);\n        }\n        // special case for space key press - prevent scrolling\n        if (event.keyCode === 32 && typeof d === 'object') {\n          d.chart.legendToggle(d);\n          event.preventDefault();\n        }\n      })).on('focus', d3compat.eventHandler(d => {\n        this._parent.legendHighlight(d);\n      })).on('blur', d3compat.eventHandler(d => {\n        this._parent.legendReset(d);\n      }));\n    }\n  }\n  const htmlLegend = () => new HtmlLegend();\n  const LABEL_GAP = 2;\n\n  /**\n   * Legend is a attachable widget that can be added to other dc charts to render horizontal legend\n   * labels.\n   *\n   * Examples:\n   * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n   * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n   * @example\n   * chart.legend(new Legend().x(400).y(10).itemHeight(13).gap(5))\n   * @returns {Legend}\n   */\n  class Legend {\n    constructor() {\n      this._parent = undefined;\n      this._x = 0;\n      this._y = 0;\n      this._itemHeight = 12;\n      this._gap = 5;\n      this._horizontal = false;\n      this._legendWidth = 560;\n      this._itemWidth = 70;\n      this._autoItemWidth = false;\n      this._legendText = pluck('name');\n      this._maxItems = undefined;\n      this._highlightSelected = false;\n      this._keyboardAccessible = false;\n      this._g = undefined;\n    }\n    parent(p) {\n      if (!arguments.length) {\n        return this._parent;\n      }\n      this._parent = p;\n      return this;\n    }\n\n    /**\n     * Set or get x coordinate for legend widget.\n     * @param  {Number} [x=0]\n     * @returns {Number|Legend}\n     */\n    x(x) {\n      if (!arguments.length) {\n        return this._x;\n      }\n      this._x = x;\n      return this;\n    }\n\n    /**\n     * Set or get y coordinate for legend widget.\n     * @param  {Number} [y=0]\n     * @returns {Number|Legend}\n     */\n    y(y) {\n      if (!arguments.length) {\n        return this._y;\n      }\n      this._y = y;\n      return this;\n    }\n\n    /**\n     * Set or get gap between legend items.\n     * @param  {Number} [gap=5]\n     * @returns {Number|Legend}\n     */\n    gap(gap) {\n      if (!arguments.length) {\n        return this._gap;\n      }\n      this._gap = gap;\n      return this;\n    }\n\n    /**\n     * This can be optionally used to enable highlighting legends for the selections/filters for the\n     * chart.\n     * @param {String} [highlightSelected]\n     * @return {String|dc.legend}\n     **/\n    highlightSelected(highlightSelected) {\n      if (!arguments.length) {\n        return this._highlightSelected;\n      }\n      this._highlightSelected = highlightSelected;\n      return this;\n    }\n\n    /**\n     * Set or get legend item height.\n     * @param  {Number} [itemHeight=12]\n     * @returns {Number|Legend}\n     */\n    itemHeight(itemHeight) {\n      if (!arguments.length) {\n        return this._itemHeight;\n      }\n      this._itemHeight = itemHeight;\n      return this;\n    }\n\n    /**\n     * Position legend horizontally instead of vertically.\n     * @param  {Boolean} [horizontal=false]\n     * @returns {Boolean|Legend}\n     */\n    horizontal(horizontal) {\n      if (!arguments.length) {\n        return this._horizontal;\n      }\n      this._horizontal = horizontal;\n      return this;\n    }\n\n    /**\n     * Maximum width for horizontal legend.\n     * @param  {Number} [legendWidth=500]\n     * @returns {Number|Legend}\n     */\n    legendWidth(legendWidth) {\n      if (!arguments.length) {\n        return this._legendWidth;\n      }\n      this._legendWidth = legendWidth;\n      return this;\n    }\n\n    /**\n     * Legend item width for horizontal legend.\n     * @param  {Number} [itemWidth=70]\n     * @returns {Number|Legend}\n     */\n    itemWidth(itemWidth) {\n      if (!arguments.length) {\n        return this._itemWidth;\n      }\n      this._itemWidth = itemWidth;\n      return this;\n    }\n\n    /**\n     * Turn automatic width for legend items on or off. If true, {@link Legend#itemWidth itemWidth} is ignored.\n     * This setting takes into account the {@link Legend#gap gap}.\n     * @param  {Boolean} [autoItemWidth=false]\n     * @returns {Boolean|Legend}\n     */\n    autoItemWidth(autoItemWidth) {\n      if (!arguments.length) {\n        return this._autoItemWidth;\n      }\n      this._autoItemWidth = autoItemWidth;\n      return this;\n    }\n\n    /**\n     * Set or get the legend text function. The legend widget uses this function to render the legend\n     * text for each item. If no function is specified the legend widget will display the names\n     * associated with each group.\n     * @param  {Function} [legendText]\n     * @returns {Function|Legend}\n     * @example\n     * // default legendText\n     * legend.legendText(pluck('name'))\n     *\n     * // create numbered legend items\n     * chart.legend(new Legend().legendText(function(d, i) { return i + '. ' + d.name; }))\n     *\n     * // create legend displaying group counts\n     * chart.legend(new Legend().legendText(function(d) { return d.name + ': ' d.data; }))\n     */\n    legendText(legendText) {\n      if (!arguments.length) {\n        return this._legendText;\n      }\n      this._legendText = legendText;\n      return this;\n    }\n\n    /**\n     * Maximum number of legend items to display\n     * @param  {Number} [maxItems]\n     * @return {Legend}\n     */\n    maxItems(maxItems) {\n      if (!arguments.length) {\n        return this._maxItems;\n      }\n      this._maxItems = utils.isNumber(maxItems) ? maxItems : undefined;\n      return this;\n    }\n\n    /**\n     * If set, individual legend items will be focusable from keyboard and on pressing Enter or Space\n     * will behave as if clicked on.\n     * \n     * If `svgDescription` on the parent chart has not been explicitly set, will also set the default \n     * SVG description text to the class constructor name, like BarChart or HeatMap, and make the entire\n     * SVG focusable.\n     * @param {Boolean} [keyboardAccessible=false]\n     * @returns {Boolean|Legend}\n     */\n    keyboardAccessible(keyboardAccessible) {\n      if (!arguments.length) {\n        return this._keyboardAccessible;\n      }\n      this._keyboardAccessible = keyboardAccessible;\n      return this;\n    }\n\n    // Implementation methods\n\n    _legendItemHeight() {\n      return this._gap + this._itemHeight;\n    }\n    _makeLegendKeyboardAccessible() {\n      if (!this._parent._svgDescription) {\n        this._parent.svg().append('desc').attr('id', `desc-id-${this._parent.__dcFlag__}`).html(`${this._parent.svgDescription()}`);\n        this._parent.svg().attr('tabindex', '0').attr('role', 'img').attr('aria-labelledby', `desc-id-${this._parent.__dcFlag__}`);\n      }\n      const tabElements = this._parent.svg().selectAll('.dc-legend .dc-tabbable').attr('tabindex', 0);\n      tabElements.on('keydown', d3compat.eventHandler((d, event) => {\n        // trigger only if d is an object\n        if (event.keyCode === 13 && typeof d === 'object') {\n          d.chart.legendToggle(d);\n        }\n        // special case for space key press - prevent scrolling\n        if (event.keyCode === 32 && typeof d === 'object') {\n          d.chart.legendToggle(d);\n          event.preventDefault();\n        }\n      })).on('focus', d3compat.eventHandler(d => {\n        this._parent.legendHighlight(d);\n      })).on('blur', d3compat.eventHandler(d => {\n        this._parent.legendReset(d);\n      }));\n    }\n    render() {\n      this._parent.svg().select('g.dc-legend').remove();\n      this._g = this._parent.svg().append('g').attr('class', 'dc-legend').attr('transform', `translate(${this._x},${this._y})`);\n      let legendables = this._parent.legendables();\n      const filters = this._parent.filters();\n      if (this._maxItems !== undefined) {\n        legendables = legendables.slice(0, this._maxItems);\n      }\n      const itemEnter = this._g.selectAll('g.dc-legend-item').data(legendables).enter().append('g').attr('class', 'dc-legend-item').on('mouseover', d3compat.eventHandler(d => {\n        this._parent.legendHighlight(d);\n      })).on('mouseout', d3compat.eventHandler(d => {\n        this._parent.legendReset(d);\n      })).on('click', d3compat.eventHandler(d => {\n        d.chart.legendToggle(d);\n      }));\n      if (this._highlightSelected) {\n        itemEnter.classed(constants.SELECTED_CLASS, d => filters.indexOf(d.name) !== -1);\n      }\n      this._g.selectAll('g.dc-legend-item').classed('fadeout', d => d.chart.isLegendableHidden(d));\n      if (legendables.some(pluck('dashstyle'))) {\n        itemEnter.append('line').attr('x1', 0).attr('y1', this._itemHeight / 2).attr('x2', this._itemHeight).attr('y2', this._itemHeight / 2).attr('stroke-width', 2).attr('stroke-dasharray', pluck('dashstyle')).attr('stroke', pluck('color'));\n      } else {\n        itemEnter.append('rect').attr('width', this._itemHeight).attr('height', this._itemHeight).attr('fill', d => d ? d.color : 'blue');\n      }\n      {\n        const self = this;\n        itemEnter.append('text').text(self._legendText).classed('dc-tabbable', this._keyboardAccessible).attr('x', self._itemHeight + LABEL_GAP).attr('y', function () {\n          return self._itemHeight / 2 + (this.clientHeight ? this.clientHeight : 13) / 2 - 2;\n        });\n        if (this._keyboardAccessible) {\n          this._makeLegendKeyboardAccessible();\n        }\n      }\n      let cumulativeLegendTextWidth = 0;\n      let row = 0;\n      {\n        const self = this;\n        itemEnter.attr('transform', function (d, i) {\n          if (self._horizontal) {\n            const itemWidth = self._autoItemWidth === true ? this.getBBox().width + self._gap : self._itemWidth;\n            if (cumulativeLegendTextWidth + itemWidth > self._legendWidth && cumulativeLegendTextWidth > 0) {\n              ++row;\n              cumulativeLegendTextWidth = 0;\n            }\n            const translateBy = `translate(${cumulativeLegendTextWidth},${row * self._legendItemHeight()})`;\n            cumulativeLegendTextWidth += itemWidth;\n            return translateBy;\n          } else {\n            return `translate(0,${i * self._legendItemHeight()})`;\n          }\n        });\n      }\n    }\n  }\n  const legend = () => new Legend();\n  const DEFAULT_DOT_RADIUS = 5;\n  const TOOLTIP_G_CLASS = 'dc-tooltip';\n  const DOT_CIRCLE_CLASS = 'dot';\n  const Y_AXIS_REF_LINE_CLASS = 'yRef';\n  const X_AXIS_REF_LINE_CLASS = 'xRef';\n  const DEFAULT_DOT_OPACITY = 1e-6;\n  const LABEL_PADDING$1 = 3;\n\n  /**\n   * Concrete line/area chart implementation.\n   *\n   * Examples:\n   * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n   * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n   * @mixes StackMixin\n   * @mixes CoordinateGridMixin\n   */\n  class LineChart extends StackMixin {\n    /**\n     * Create a Line Chart.\n     * @example\n     * // create a line chart under #chart-container1 element using the default global chart group\n     * var chart1 = new LineChart('#chart-container1');\n     * // create a line chart under #chart-container2 element using chart group A\n     * var chart2 = new LineChart('#chart-container2', 'chartGroupA');\n     * // create a sub-chart under a composite parent chart\n     * var chart3 = new LineChart(compositeChart);\n     * @param {String|node|d3.selection|CompositeChart} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector}\n     * specifying a dom block element such as a div; or a dom element or d3 selection.  If the line\n     * chart is a sub-chart in a {@link CompositeChart Composite Chart} then pass in the parent\n     * composite chart instance instead.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor(parent, chartGroup) {\n      super();\n      this._renderArea = false;\n      this._dotRadius = DEFAULT_DOT_RADIUS;\n      this._dataPointRadius = null;\n      this._dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n      this._dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n      this._curve = null;\n      this._interpolate = null; // d3.curveLinear;  // deprecated in 3.0\n      this._tension = null; // deprecated in 3.0\n      this._defined = undefined;\n      this._dashStyle = undefined;\n      this._xyTipsOn = true;\n      this.transitionDuration(500);\n      this.transitionDelay(0);\n      this._rangeBandPadding(1);\n      this.label(d => utils.printSingleValue(d.y0 + d.y), false);\n      this.anchor(parent, chartGroup);\n    }\n    plotData() {\n      const chartBody = this.chartBodyG();\n      let layersList = chartBody.select('g.stack-list');\n      if (layersList.empty()) {\n        layersList = chartBody.append('g').attr('class', 'stack-list');\n      }\n      let layers = layersList.selectAll('g.stack').data(this.data());\n      const layersEnter = layers.enter().append('g').attr('class', (d, i) => `stack _${i}`);\n      layers = layersEnter.merge(layers);\n      this._drawLine(layersEnter, layers);\n      this._drawArea(layersEnter, layers);\n      this._drawDots(chartBody, layers);\n      if (this.renderLabel()) {\n        this._drawLabels(layers);\n      }\n    }\n\n    /**\n     * Gets or sets the curve factory to use for lines and areas drawn, allowing e.g. step\n     * functions, splines, and cubic interpolation. Typically you would use one of the interpolator functions\n     * provided by {@link https://github.com/d3/d3-shape/blob/master/README.md#curves d3 curves}.\n     *\n     * Replaces the use of {@link LineChart#interpolate} and {@link LineChart#tension}\n     * in dc.js < 3.0\n     *\n     * This is passed to\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#line_curve line.curve} and\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#area_curve area.curve}.\n     * @example\n     * // default\n     * chart\n     *     .curve(d3.curveLinear);\n     * // Add tension to curves that support it\n     * chart\n     *     .curve(d3.curveCardinal.tension(0.5));\n     * // You can use some specialized variation like\n     * // https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline\n     * chart\n     *     .curve(d3.curveCatmullRom.alpha(0.5));\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#line_curve line.curve}\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#area_curve area.curve}\n     * @param  {d3.curve} [curve=d3.curveLinear]\n     * @returns {d3.curve|LineChart}\n     */\n    curve(curve) {\n      if (!arguments.length) {\n        return this._curve;\n      }\n      this._curve = curve;\n      return this;\n    }\n\n    /**\n     * Gets or sets the interpolator to use for lines drawn, by string name, allowing e.g. step\n     * functions, splines, and cubic interpolation.\n     *\n     * Possible values are: 'linear', 'linear-closed', 'step', 'step-before', 'step-after', 'basis',\n     * 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', and\n     * 'monotone'.\n     *\n     * This function exists for backward compatibility. Use {@link LineChart#curve}\n     * which is generic and provides more options.\n     * Value set through `.curve` takes precedence over `.interpolate` and `.tension`.\n     * @deprecated since version 3.0 use {@link LineChart#curve} instead\n     * @see {@link LineChart#curve}\n     * @param  {d3.curve} [interpolate=d3.curveLinear]\n     * @returns {d3.curve|LineChart}\n     */\n    interpolate(interpolate) {\n      logger.warnOnce('dc.lineChart.interpolate has been deprecated since version 3.0 use dc.lineChart.curve instead');\n      if (!arguments.length) {\n        return this._interpolate;\n      }\n      this._interpolate = interpolate;\n      return this;\n    }\n\n    /**\n     * Gets or sets the tension to use for lines drawn, in the range 0 to 1.\n     *\n     * Passed to the {@link https://github.com/d3/d3-shape/blob/master/README.md#curves d3 curve function}\n     * if it provides a `.tension` function. Example:\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#curveCardinal_tension curveCardinal.tension}.\n     *\n     * This function exists for backward compatibility. Use {@link LineChart#curve}\n     * which is generic and provides more options.\n     * Value set through `.curve` takes precedence over `.interpolate` and `.tension`.\n     * @deprecated since version 3.0 use {@link LineChart#curve} instead\n     * @see {@link LineChart#curve}\n     * @param  {Number} [tension=0]\n     * @returns {Number|LineChart}\n     */\n    tension(tension) {\n      logger.warnOnce('dc.lineChart.tension has been deprecated since version 3.0 use dc.lineChart.curve instead');\n      if (!arguments.length) {\n        return this._tension;\n      }\n      this._tension = tension;\n      return this;\n    }\n\n    /**\n     * Gets or sets a function that will determine discontinuities in the line which should be\n     * skipped: the path will be broken into separate subpaths if some points are undefined.\n     * This function is passed to\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#line_defined line.defined}\n     *\n     * Note: crossfilter will sometimes coerce nulls to 0, so you may need to carefully write\n     * custom reduce functions to get this to work, depending on your data. See\n     * {@link https://github.com/dc-js/dc.js/issues/615#issuecomment-49089248 this GitHub comment}\n     * for more details and an example.\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#line_defined line.defined}\n     * @param  {Function} [defined]\n     * @returns {Function|LineChart}\n     */\n    defined(defined) {\n      if (!arguments.length) {\n        return this._defined;\n      }\n      this._defined = defined;\n      return this;\n    }\n\n    /**\n     * Set the line's d3 dashstyle. This value becomes the 'stroke-dasharray' of line. Defaults to empty\n     * array (solid line).\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray stroke-dasharray}\n     * @example\n     * // create a Dash Dot Dot Dot\n     * chart.dashStyle([3,1,1,1]);\n     * @param  {Array<Number>} [dashStyle=[]]\n     * @returns {Array<Number>|LineChart}\n     */\n    dashStyle(dashStyle) {\n      if (!arguments.length) {\n        return this._dashStyle;\n      }\n      this._dashStyle = dashStyle;\n      return this;\n    }\n\n    /**\n     * Get or set render area flag. If the flag is set to true then the chart will render the area\n     * beneath each line and the line chart effectively becomes an area chart.\n     * @param  {Boolean} [renderArea=false]\n     * @returns {Boolean|LineChart}\n     */\n    renderArea(renderArea) {\n      if (!arguments.length) {\n        return this._renderArea;\n      }\n      this._renderArea = renderArea;\n      return this;\n    }\n    _getColor(d, i) {\n      return this.getColor.call(d, d.values, i);\n    }\n\n    // To keep it backward compatible, this covers multiple cases\n    // See https://github.com/dc-js/dc.js/issues/1376\n    // It will be removed when interpolate and tension are removed.\n    _getCurveFactory() {\n      let curve = null;\n\n      // _curve takes precedence\n      if (this._curve) {\n        return this._curve;\n      }\n\n      // Approximate the D3v3 behavior\n      if (typeof this._interpolate === 'function') {\n        curve = this._interpolate;\n      } else {\n        // If _interpolate is string\n        const mapping = {\n          'linear': d3Shape.curveLinear,\n          'linear-closed': d3Shape.curveLinearClosed,\n          'step': d3Shape.curveStep,\n          'step-before': d3Shape.curveStepBefore,\n          'step-after': d3Shape.curveStepAfter,\n          'basis': d3Shape.curveBasis,\n          'basis-open': d3Shape.curveBasisOpen,\n          'basis-closed': d3Shape.curveBasisClosed,\n          'bundle': d3Shape.curveBundle,\n          'cardinal': d3Shape.curveCardinal,\n          'cardinal-open': d3Shape.curveCardinalOpen,\n          'cardinal-closed': d3Shape.curveCardinalClosed,\n          'monotone': d3Shape.curveMonotoneX\n        };\n        curve = mapping[this._interpolate];\n      }\n\n      // Default value\n      if (!curve) {\n        curve = d3Shape.curveLinear;\n      }\n      if (this._tension !== null) {\n        if (typeof curve.tension !== 'function') {\n          logger.warn('tension was specified but the curve/interpolate does not support it.');\n        } else {\n          curve = curve.tension(this._tension);\n        }\n      }\n      return curve;\n    }\n    _drawLine(layersEnter, layers) {\n      const _line = d3Shape.line().x(d => this.x()(d.x)).y(d => this.y()(d.y + d.y0)).curve(this._getCurveFactory());\n      if (this._defined) {\n        _line.defined(this._defined);\n      }\n      const path = layersEnter.append('path').attr('class', 'line').attr('stroke', (d, i) => this._getColor(d, i));\n      if (this._dashStyle) {\n        path.attr('stroke-dasharray', this._dashStyle);\n      }\n      transition(layers.select('path.line'), this.transitionDuration(), this.transitionDelay())\n      //.ease('linear')\n      .attr('stroke', (d, i) => this._getColor(d, i)).attr('d', d => this._safeD(_line(d.values)));\n    }\n    _drawArea(layersEnter, layers) {\n      if (this._renderArea) {\n        const _area = d3Shape.area().x(d => this.x()(d.x)).y1(d => this.y()(d.y + d.y0)).y0(d => this.y()(d.y0)).curve(this._getCurveFactory());\n        if (this._defined) {\n          _area.defined(this._defined);\n        }\n        layersEnter.append('path').attr('class', 'area').attr('fill', (d, i) => this._getColor(d, i)).attr('d', d => this._safeD(_area(d.values)));\n        transition(layers.select('path.area'), this.transitionDuration(), this.transitionDelay())\n        //.ease('linear')\n        .attr('fill', (d, i) => this._getColor(d, i)).attr('d', d => this._safeD(_area(d.values)));\n      }\n    }\n    _safeD(d) {\n      return !d || d.indexOf('NaN') >= 0 ? 'M0,0' : d;\n    }\n    _drawDots(chartBody, layers) {\n      if (this.xyTipsOn() === 'always' || !(this.brushOn() || this.parentBrushOn()) && this.xyTipsOn()) {\n        const tooltipListClass = `${TOOLTIP_G_CLASS}-list`;\n        let tooltips = chartBody.select(`g.${tooltipListClass}`);\n        if (tooltips.empty()) {\n          tooltips = chartBody.append('g').attr('class', tooltipListClass);\n        }\n        layers.each((data, layerIndex) => {\n          let points = data.values;\n          if (this._defined) {\n            points = points.filter(this._defined);\n          }\n          let g = tooltips.select(`g.${TOOLTIP_G_CLASS}._${layerIndex}`);\n          if (g.empty()) {\n            g = tooltips.append('g').attr('class', `${TOOLTIP_G_CLASS} _${layerIndex}`);\n          }\n          this._createRefLines(g);\n          const dots = g.selectAll(`circle.${DOT_CIRCLE_CLASS}`).data(points, pluck('x'));\n          const chart = this;\n          const dotsEnterModify = dots.enter().append('circle').attr('class', DOT_CIRCLE_CLASS).classed('dc-tabbable', this._keyboardAccessible).attr('cx', d => utils.safeNumber(this.x()(d.x))).attr('cy', d => utils.safeNumber(this.y()(d.y + d.y0))).attr('r', this._getDotRadius()).style('fill-opacity', this._dataPointFillOpacity).style('stroke-opacity', this._dataPointStrokeOpacity).attr('fill', this.getColor).attr('stroke', this.getColor).on('mousemove', function () {\n            const dot = d3Selection.select(this);\n            chart._showDot(dot);\n            chart._showRefLines(dot, g);\n          }).on('mouseout', function () {\n            const dot = d3Selection.select(this);\n            chart._hideDot(dot);\n            chart._hideRefLines(g);\n          }).merge(dots);\n\n          // special case for on-focus for line chart and its dots\n          if (this._keyboardAccessible) {\n            this._svg.selectAll('.dc-tabbable').attr('tabindex', 0).on('focus', function () {\n              const dot = d3Selection.select(this);\n              chart._showDot(dot);\n              chart._showRefLines(dot, g);\n            }).on('blur', function () {\n              const dot = d3Selection.select(this);\n              chart._hideDot(dot);\n              chart._hideRefLines(g);\n            });\n          }\n          dotsEnterModify.call(dot => this._doRenderTitle(dot, data));\n          transition(dotsEnterModify, this.transitionDuration()).attr('cx', d => utils.safeNumber(this.x()(d.x))).attr('cy', d => utils.safeNumber(this.y()(d.y + d.y0))).attr('fill', this.getColor);\n          dots.exit().remove();\n        });\n      }\n    }\n    _drawLabels(layers) {\n      const chart = this;\n      layers.each(function (data, layerIndex) {\n        const layer = d3Selection.select(this);\n        const labels = layer.selectAll('text.lineLabel').data(data.values, pluck('x'));\n        const labelsEnterModify = labels.enter().append('text').attr('class', 'lineLabel').attr('text-anchor', 'middle').merge(labels);\n        transition(labelsEnterModify, chart.transitionDuration()).attr('x', d => utils.safeNumber(chart.x()(d.x))).attr('y', d => {\n          const y = chart.y()(d.y + d.y0) - LABEL_PADDING$1;\n          return utils.safeNumber(y);\n        }).text(d => chart.label()(d));\n        transition(labels.exit(), chart.transitionDuration()).attr('height', 0).remove();\n      });\n    }\n    _createRefLines(g) {\n      const yRefLine = g.select(`path.${Y_AXIS_REF_LINE_CLASS}`).empty() ? g.append('path').attr('class', Y_AXIS_REF_LINE_CLASS) : g.select(`path.${Y_AXIS_REF_LINE_CLASS}`);\n      yRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n      const xRefLine = g.select(`path.${X_AXIS_REF_LINE_CLASS}`).empty() ? g.append('path').attr('class', X_AXIS_REF_LINE_CLASS) : g.select(`path.${X_AXIS_REF_LINE_CLASS}`);\n      xRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n    }\n    _showDot(dot) {\n      dot.style('fill-opacity', 0.8);\n      dot.style('stroke-opacity', 0.8);\n      dot.attr('r', this._dotRadius);\n      return dot;\n    }\n    _showRefLines(dot, g) {\n      const x = dot.attr('cx');\n      const y = dot.attr('cy');\n      const yAxisX = this._yAxisX() - this.margins().left;\n      const yAxisRefPathD = `M${yAxisX} ${y}L${x} ${y}`;\n      const xAxisRefPathD = `M${x} ${this.yAxisHeight()}L${x} ${y}`;\n      g.select(`path.${Y_AXIS_REF_LINE_CLASS}`).style('display', '').attr('d', yAxisRefPathD);\n      g.select(`path.${X_AXIS_REF_LINE_CLASS}`).style('display', '').attr('d', xAxisRefPathD);\n    }\n    _getDotRadius() {\n      return this._dataPointRadius || this._dotRadius;\n    }\n    _hideDot(dot) {\n      dot.style('fill-opacity', this._dataPointFillOpacity).style('stroke-opacity', this._dataPointStrokeOpacity).attr('r', this._getDotRadius());\n    }\n    _hideRefLines(g) {\n      g.select(`path.${Y_AXIS_REF_LINE_CLASS}`).style('display', 'none');\n      g.select(`path.${X_AXIS_REF_LINE_CLASS}`).style('display', 'none');\n    }\n    _doRenderTitle(dot, d) {\n      if (this.renderTitle()) {\n        dot.select('title').remove();\n        dot.append('title').text(pluck('data', this.title(d.name)));\n      }\n    }\n\n    /**\n     * Turn on/off the mouseover behavior of an individual data point which renders a circle and x/y axis\n     * dashed lines back to each respective axis.  This is ignored if the chart\n     * {@link CoordinateGridMixin#brushOn brush} is on\n     * @param  {Boolean} [xyTipsOn=false]\n     * @returns {Boolean|LineChart}\n     */\n    xyTipsOn(xyTipsOn) {\n      if (!arguments.length) {\n        return this._xyTipsOn;\n      }\n      this._xyTipsOn = xyTipsOn;\n      return this;\n    }\n\n    /**\n     * Get or set the radius (in px) for dots displayed on the data points.\n     * @param  {Number} [dotRadius=5]\n     * @returns {Number|LineChart}\n     */\n    dotRadius(dotRadius) {\n      if (!arguments.length) {\n        return this._dotRadius;\n      }\n      this._dotRadius = dotRadius;\n      return this;\n    }\n\n    /**\n     * Always show individual dots for each datapoint.\n     *\n     * If `options` is falsy, it disables data point rendering. If no `options` are provided, the\n     * current `options` values are instead returned.\n     * @example\n     * chart.renderDataPoints({radius: 2, fillOpacity: 0.8, strokeOpacity: 0.0})\n     * @param  {{fillOpacity: Number, strokeOpacity: Number, radius: Number}} [options={fillOpacity: 0.8, strokeOpacity: 0.0, radius: 2}]\n     * @returns {{fillOpacity: Number, strokeOpacity: Number, radius: Number}|LineChart}\n     */\n    renderDataPoints(options) {\n      if (!arguments.length) {\n        return {\n          fillOpacity: this._dataPointFillOpacity,\n          strokeOpacity: this._dataPointStrokeOpacity,\n          radius: this._dataPointRadius\n        };\n      } else if (!options) {\n        this._dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n        this._dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n        this._dataPointRadius = null;\n      } else {\n        this._dataPointFillOpacity = options.fillOpacity || 0.8;\n        this._dataPointStrokeOpacity = options.strokeOpacity || 0.0;\n        this._dataPointRadius = options.radius || 2;\n      }\n      return this;\n    }\n    _colorFilter(color, dashstyle, inv) {\n      return function () {\n        const item = d3Selection.select(this);\n        const match = item.attr('stroke') === color && item.attr('stroke-dasharray') === (dashstyle instanceof Array ? dashstyle.join(',') : null) || item.attr('fill') === color;\n        return inv ? !match : match;\n      };\n    }\n    legendHighlight(d) {\n      if (!this.isLegendableHidden(d)) {\n        this.g().selectAll('path.line, path.area').classed('highlight', this._colorFilter(d.color, d.dashstyle)).classed('fadeout', this._colorFilter(d.color, d.dashstyle, true));\n      }\n    }\n    legendReset() {\n      this.g().selectAll('path.line, path.area').classed('highlight', false).classed('fadeout', false);\n    }\n    legendables() {\n      const legendables = super.legendables();\n      if (!this._dashStyle) {\n        return legendables;\n      }\n      return legendables.map(l => {\n        l.dashstyle = this._dashStyle;\n        return l;\n      });\n    }\n  }\n  const lineChart = (parent, chartGroup) => new LineChart(parent, chartGroup);\n  const SPAN_CLASS = 'number-display';\n\n  /**\n   * A display of a single numeric value.\n   *\n   * Unlike other charts, you do not need to set a dimension. Instead a group object must be provided and\n   * a valueAccessor that returns a single value.\n   *\n   * If the group is a {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_groupAll groupAll}\n   * then its `.value()` will be displayed. This is the recommended usage.\n   *\n   * However, if it is given an ordinary group, the `numberDisplay` will show the last bin's value, after\n   * sorting with the {@link https://dc-js.github.io/dc.js/docs/html/dc.baseMixin.html#ordering__anchor ordering}\n   * function. `numberDisplay` defaults the `ordering` function to sorting by value, so this will display\n   * the largest value if the values are numeric.\n   * @mixes BaseMixin\n   */\n  class NumberDisplay extends BaseMixin {\n    /**\n     * Create a Number Display widget.\n     *\n     * @example\n     * // create a number display under #chart-container1 element using the default global chart group\n     * var display1 = new NumberDisplay('#chart-container1');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor(parent, chartGroup) {\n      super();\n      this._formatNumber = d3Format.format('.2s');\n      this._html = {\n        one: '',\n        some: '',\n        none: ''\n      };\n      this._lastValue = undefined;\n      this._ariaLiveRegion = false;\n\n      // dimension not required\n      this._mandatoryAttributes(['group']);\n\n      // default to ordering by value, to emulate old group.top(1) behavior when multiple groups\n      this.ordering(kv => kv.value);\n      this.data(group => {\n        const valObj = group.value ? group.value() : this._maxBin(group.all());\n        return this.valueAccessor()(valObj);\n      });\n      this.transitionDuration(250); // good default\n      this.transitionDelay(0);\n      this.anchor(parent, chartGroup);\n    }\n\n    /**\n     * Gets or sets an optional object specifying HTML templates to use depending on the number\n     * displayed.  The text `%number` will be replaced with the current value.\n     * - one: HTML template to use if the number is 1\n     * - zero: HTML template to use if the number is 0\n     * - some: HTML template to use otherwise\n     * @example\n     * numberWidget.html({\n     *      one:'%number record',\n     *      some:'%number records',\n     *      none:'no records'})\n     * @param {{one:String, some:String, none:String}} [html={one: '', some: '', none: ''}]\n     * @returns {{one:String, some:String, none:String}|NumberDisplay}\n     */\n    html(html) {\n      if (!arguments.length) {\n        return this._html;\n      }\n      if (html.none) {\n        this._html.none = html.none; //if none available\n      } else if (html.one) {\n        this._html.none = html.one; //if none not available use one\n      } else if (html.some) {\n        this._html.none = html.some; //if none and one not available use some\n      }\n\n      if (html.one) {\n        this._html.one = html.one; //if one available\n      } else if (html.some) {\n        this._html.one = html.some; //if one not available use some\n      }\n\n      if (html.some) {\n        this._html.some = html.some; //if some available\n      } else if (html.one) {\n        this._html.some = html.one; //if some not available use one\n      }\n\n      return this;\n    }\n\n    /**\n     * Calculate and return the underlying value of the display.\n     * @returns {Number}\n     */\n    value() {\n      return this.data();\n    }\n    _maxBin(all) {\n      if (!all.length) {\n        return null;\n      }\n      const sorted = this._computeOrderedGroups(all);\n      return sorted[sorted.length - 1];\n    }\n    _doRender() {\n      const newValue = this.value();\n      let span = this.selectAll(`.${SPAN_CLASS}`);\n      if (span.empty()) {\n        span = span.data([0]).enter().append('span').attr('class', SPAN_CLASS).classed('dc-tabbable', this._keyboardAccessible).merge(span);\n        if (this._keyboardAccessible) {\n          span.attr('tabindex', '0');\n        }\n        if (this._ariaLiveRegion) {\n          this.transitionDuration(0);\n          span.attr('aria-live', 'polite');\n        }\n      }\n      {\n        const chart = this;\n        span.transition().duration(chart.transitionDuration()).delay(chart.transitionDelay()).ease(d3Ease.easeQuad).tween('text', function () {\n          // [XA] don't try and interpolate from Infinity, else this breaks.\n          const interpStart = isFinite(chart._lastValue) ? chart._lastValue : 0;\n          const interp = d3Interpolate.interpolateNumber(interpStart || 0, newValue);\n          chart._lastValue = newValue;\n\n          // need to save it in D3v4\n          const node = this;\n          return t => {\n            let html = null;\n            const num = chart.formatNumber()(interp(t));\n            if (newValue === 0 && chart._html.none !== '') {\n              html = chart._html.none;\n            } else if (newValue === 1 && chart._html.one !== '') {\n              html = chart._html.one;\n            } else if (chart._html.some !== '') {\n              html = chart._html.some;\n            }\n            node.innerHTML = html ? html.replace('%number', num) : num;\n          };\n        });\n      }\n    }\n    _doRedraw() {\n      return this._doRender();\n    }\n\n    /**\n     * Get or set a function to format the value for the display.\n     * @see {@link https://github.com/d3/d3-format/blob/master/README.md#format d3.format}\n     * @param {Function} [formatter=d3.format('.2s')]\n     * @returns {Function|NumberDisplay}\n     */\n    formatNumber(formatter) {\n      if (!arguments.length) {\n        return this._formatNumber;\n      }\n      this._formatNumber = formatter;\n      return this;\n    }\n\n    /**\n     * If set, the Number Display widget will have its aria-live attribute set to 'polite' which will\n     * notify screen readers when the widget changes its value. Note that setting this method will also\n     * disable the default transition between the old and the new values. This is to avoid change\n     * notifications spoken out before the new value finishes re-drawing. It is also advisable to check\n     * if the widget has appropriately set accessibility description or label. \n     * @param {Boolean} [ariaLiveRegion=false]\n     * @returns {Boolean|NumberDisplay}\n     */\n    ariaLiveRegion(ariaLiveRegion) {\n      if (!arguments.length) {\n        return this._ariaLiveRegion;\n      }\n      this._ariaLiveRegion = ariaLiveRegion;\n      return this;\n    }\n  }\n  const numberDisplay = (parent, chartGroup) => new NumberDisplay(parent, chartGroup);\n  const DEFAULT_MIN_ANGLE_FOR_LABEL = 0.5;\n\n  /**\n   * The pie chart implementation is usually used to visualize a small categorical distribution.  The pie\n   * chart uses keyAccessor to determine the slices, and valueAccessor to calculate the size of each\n   * slice relative to the sum of all values. Slices are ordered by {@link BaseMixin#ordering ordering}\n   * which defaults to sorting by key.\n   *\n   * Examples:\n   * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n   * @mixes CapMixin\n   * @mixes ColorMixin\n   * @mixes BaseMixin\n   */\n  class PieChart extends CapMixin(ColorMixin(BaseMixin)) {\n    /**\n     * Create a Pie Chart\n     *\n     * @example\n     * // create a pie chart under #chart-container1 element using the default global chart group\n     * var chart1 = new PieChart('#chart-container1');\n     * // create a pie chart under #chart-container2 element using chart group A\n     * var chart2 = new PieChart('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor(parent, chartGroup) {\n      super();\n      this._sliceCssClass = 'pie-slice';\n      this._labelCssClass = 'pie-label';\n      this._sliceGroupCssClass = 'pie-slice-group';\n      this._labelGroupCssClass = 'pie-label-group';\n      this._emptyCssClass = 'empty-chart';\n      this._emptyTitle = 'empty';\n      this._radius = undefined;\n      this._givenRadius = undefined; // specified radius, if any\n      this._innerRadius = 0;\n      this._externalRadiusPadding = 0;\n      this._g = undefined;\n      this._cx = undefined;\n      this._cy = undefined;\n      this._minAngleForLabel = DEFAULT_MIN_ANGLE_FOR_LABEL;\n      this._externalLabelRadius = undefined;\n      this._drawPaths = false;\n      this.colorAccessor(d => this.cappedKeyAccessor(d));\n      this.title(d => `${this.cappedKeyAccessor(d)}: ${this.cappedValueAccessor(d)}`);\n      this.label(d => this.cappedKeyAccessor(d));\n      this.renderLabel(true);\n      this.transitionDuration(350);\n      this.transitionDelay(0);\n      this.anchor(parent, chartGroup);\n    }\n\n    /**\n     * Get or set the maximum number of slices the pie chart will generate. The top slices are determined by\n     * value from high to low. Other slices exceeding the cap will be rolled up into one single *Others* slice.\n     * @param {Number} [cap]\n     * @returns {Number|PieChart}\n     */\n    slicesCap(cap) {\n      return this.cap(cap);\n    }\n    _doRender() {\n      this.resetSvg();\n      this._g = this.svg().append('g').attr('transform', `translate(${this.cx()},${this.cy()})`);\n      this._g.append('g').attr('class', this._sliceGroupCssClass);\n      this._g.append('g').attr('class', this._labelGroupCssClass);\n      this._drawChart();\n      return this;\n    }\n    _drawChart() {\n      // set radius from chart size if none given, or if given radius is too large\n      const maxRadius = d3Array.min([this.width(), this.height()]) / 2;\n      this._radius = this._givenRadius && this._givenRadius < maxRadius ? this._givenRadius : maxRadius;\n      const arcs = this._buildArcs();\n      const pieLayout = this._pieLayout();\n      let pieData;\n      // if we have data...\n      if (d3Array.sum(this.data(), d => this.cappedValueAccessor(d))) {\n        pieData = pieLayout(this.data());\n        this._g.classed(this._emptyCssClass, false);\n      } else {\n        // otherwise we'd be getting NaNs, so override\n        // note: abuse others for its ignoring the value accessor\n        pieData = pieLayout([{\n          key: this._emptyTitle,\n          value: 1,\n          others: [this._emptyTitle]\n        }]);\n        this._g.classed(this._emptyCssClass, true);\n      }\n      if (this._g) {\n        const slices = this._g.select(`g.${this._sliceGroupCssClass}`).selectAll(`g.${this._sliceCssClass}`).data(pieData);\n        const labels = this._g.select(`g.${this._labelGroupCssClass}`).selectAll(`text.${this._labelCssClass}`).data(pieData);\n        this._removeElements(slices, labels);\n        this._createElements(slices, labels, arcs, pieData);\n        this._updateElements(pieData, arcs);\n        this._highlightFilter();\n        transition(this._g, this.transitionDuration(), this.transitionDelay()).attr('transform', `translate(${this.cx()},${this.cy()})`);\n      }\n    }\n    _createElements(slices, labels, arcs, pieData) {\n      const slicesEnter = this._createSliceNodes(slices);\n      this._createSlicePath(slicesEnter, arcs);\n      this._createTitles(slicesEnter);\n      this._createLabels(labels, pieData, arcs);\n    }\n    _createSliceNodes(slices) {\n      return slices.enter().append('g').attr('class', (d, i) => `${this._sliceCssClass} _${i}`).classed('dc-tabbable', this._keyboardAccessible);\n    }\n    _createSlicePath(slicesEnter, arcs) {\n      const slicePath = slicesEnter.append('path').attr('fill', (d, i) => this._fill(d, i)).on('click', d3compat.eventHandler(d => this._onClick(d))).attr('d', (d, i) => this._safeArc(d, i, arcs));\n      if (this._keyboardAccessible) {\n        this._makeKeyboardAccessible(this._onClick);\n      }\n      const tranNodes = transition(slicePath, this.transitionDuration(), this.transitionDelay());\n      if (tranNodes.attrTween) {\n        const chart = this;\n        tranNodes.attrTween('d', function (d) {\n          return chart._tweenPie(d, this);\n        });\n      }\n    }\n    _createTitles(slicesEnter) {\n      if (this.renderTitle()) {\n        slicesEnter.append('title').text(d => this.title()(d.data));\n      }\n    }\n    _applyLabelText(labels) {\n      labels.text(d => {\n        const data = d.data;\n        if ((this._sliceHasNoData(data) || this._sliceTooSmall(d)) && !this._isSelectedSlice(d)) {\n          return '';\n        }\n        return this.label()(d.data);\n      });\n    }\n    _positionLabels(labels, arcs) {\n      this._applyLabelText(labels);\n      transition(labels, this.transitionDuration(), this.transitionDelay()).attr('transform', d => this._labelPosition(d, arcs)).attr('text-anchor', 'middle');\n    }\n    _highlightSlice(i, whether) {\n      this.select(`g.pie-slice._${i}`).classed('highlight', whether);\n    }\n    _createLabels(labels, pieData, arcs) {\n      if (this.renderLabel()) {\n        const labelsEnter = labels.enter().append('text').attr('class', (d, i) => {\n          let classes = `${this._sliceCssClass} ${this._labelCssClass} _${i}`;\n          if (this._externalLabelRadius) {\n            classes += ' external';\n          }\n          return classes;\n        }).on('click', d3compat.eventHandler(d => this._onClick(d))).on('mouseover', d3compat.eventHandler(d => {\n          this._highlightSlice(d.index, true);\n        })).on('mouseout', d3compat.eventHandler(d => {\n          this._highlightSlice(d.index, false);\n        }));\n        this._positionLabels(labelsEnter, arcs);\n        if (this._externalLabelRadius && this._drawPaths) {\n          this._updateLabelPaths(pieData, arcs);\n        }\n      }\n    }\n    _updateLabelPaths(pieData, arcs) {\n      let polyline = this._g.selectAll(`polyline.${this._sliceCssClass}`).data(pieData);\n      polyline.exit().remove();\n      polyline = polyline.enter().append('polyline').attr('class', (d, i) => `pie-path _${i} ${this._sliceCssClass}`).on('click', d3compat.eventHandler(d => this._onClick(d))).on('mouseover', d3compat.eventHandler(d => {\n        this._highlightSlice(d.index, true);\n      })).on('mouseout', d3compat.eventHandler(d => {\n        this._highlightSlice(d.index, false);\n      })).merge(polyline);\n      const arc2 = d3Shape.arc().outerRadius(this._radius - this._externalRadiusPadding + this._externalLabelRadius).innerRadius(this._radius - this._externalRadiusPadding);\n      const tranNodes = transition(polyline, this.transitionDuration(), this.transitionDelay());\n      // this is one rare case where d3.selection differs from d3.transition\n      if (tranNodes.attrTween) {\n        tranNodes.attrTween('points', function (d) {\n          let current = this._current || d;\n          current = {\n            startAngle: current.startAngle,\n            endAngle: current.endAngle\n          };\n          const _interpolate = d3Interpolate.interpolate(current, d);\n          this._current = _interpolate(0);\n          return t => {\n            const d2 = _interpolate(t);\n            return [arcs.centroid(d2), arc2.centroid(d2)];\n          };\n        });\n      } else {\n        tranNodes.attr('points', d => [arcs.centroid(d), arc2.centroid(d)]);\n      }\n      tranNodes.style('visibility', d => d.endAngle - d.startAngle < 0.0001 ? 'hidden' : 'visible');\n    }\n    _updateElements(pieData, arcs) {\n      this._updateSlicePaths(pieData, arcs);\n      this._updateLabels(pieData, arcs);\n      this._updateTitles(pieData);\n    }\n    _updateSlicePaths(pieData, arcs) {\n      const slicePaths = this._g.selectAll(`g.${this._sliceCssClass}`).data(pieData).select('path').attr('d', (d, i) => this._safeArc(d, i, arcs));\n      const tranNodes = transition(slicePaths, this.transitionDuration(), this.transitionDelay());\n      if (tranNodes.attrTween) {\n        const chart = this;\n        tranNodes.attrTween('d', function (d) {\n          return chart._tweenPie(d, this);\n        });\n      }\n      tranNodes.attr('fill', (d, i) => this._fill(d, i));\n    }\n    _updateLabels(pieData, arcs) {\n      if (this.renderLabel()) {\n        const labels = this._g.selectAll(`text.${this._labelCssClass}`).data(pieData);\n        this._positionLabels(labels, arcs);\n        if (this._externalLabelRadius && this._drawPaths) {\n          this._updateLabelPaths(pieData, arcs);\n        }\n      }\n    }\n    _updateTitles(pieData) {\n      if (this.renderTitle()) {\n        this._g.selectAll(`g.${this._sliceCssClass}`).data(pieData).select('title').text(d => this.title()(d.data));\n      }\n    }\n    _removeElements(slices, labels) {\n      slices.exit().remove();\n      labels.exit().remove();\n    }\n    _highlightFilter() {\n      const chart = this;\n      if (this.hasFilter()) {\n        this.selectAll(`g.${this._sliceCssClass}`).each(function (d) {\n          if (chart._isSelectedSlice(d)) {\n            chart.highlightSelected(this);\n          } else {\n            chart.fadeDeselected(this);\n          }\n        });\n      } else {\n        this.selectAll(`g.${this._sliceCssClass}`).each(function () {\n          chart.resetHighlight(this);\n        });\n      }\n    }\n\n    /**\n     * Get or set the external radius padding of the pie chart. This will force the radius of the\n     * pie chart to become smaller or larger depending on the value.\n     * @param {Number} [externalRadiusPadding=0]\n     * @returns {Number|PieChart}\n     */\n    externalRadiusPadding(externalRadiusPadding) {\n      if (!arguments.length) {\n        return this._externalRadiusPadding;\n      }\n      this._externalRadiusPadding = externalRadiusPadding;\n      return this;\n    }\n\n    /**\n     * Get or set the inner radius of the pie chart. If the inner radius is greater than 0px then the\n     * pie chart will be rendered as a doughnut chart.\n     * @param {Number} [innerRadius=0]\n     * @returns {Number|PieChart}\n     */\n    innerRadius(innerRadius) {\n      if (!arguments.length) {\n        return this._innerRadius;\n      }\n      this._innerRadius = innerRadius;\n      return this;\n    }\n\n    /**\n     * Get or set the outer radius. If the radius is not set, it will be half of the minimum of the\n     * chart width and height.\n     * @param {Number} [radius]\n     * @returns {Number|PieChart}\n     */\n    radius(radius) {\n      if (!arguments.length) {\n        return this._givenRadius;\n      }\n      this._givenRadius = radius;\n      return this;\n    }\n\n    /**\n     * Get or set center x coordinate position. Default is center of svg.\n     * @param {Number} [cx]\n     * @returns {Number|PieChart}\n     */\n    cx(cx) {\n      if (!arguments.length) {\n        return this._cx || this.width() / 2;\n      }\n      this._cx = cx;\n      return this;\n    }\n\n    /**\n     * Get or set center y coordinate position. Default is center of svg.\n     * @param {Number} [cy]\n     * @returns {Number|PieChart}\n     */\n    cy(cy) {\n      if (!arguments.length) {\n        return this._cy || this.height() / 2;\n      }\n      this._cy = cy;\n      return this;\n    }\n    _buildArcs() {\n      return d3Shape.arc().outerRadius(this._radius - this._externalRadiusPadding).innerRadius(this._innerRadius);\n    }\n    _isSelectedSlice(d) {\n      return this.hasFilter(this.cappedKeyAccessor(d.data));\n    }\n    _doRedraw() {\n      this._drawChart();\n      return this;\n    }\n\n    /**\n     * Get or set the minimal slice angle for label rendering. Any slice with a smaller angle will not\n     * display a slice label.\n     * @param {Number} [minAngleForLabel=0.5]\n     * @returns {Number|PieChart}\n     */\n    minAngleForLabel(minAngleForLabel) {\n      if (!arguments.length) {\n        return this._minAngleForLabel;\n      }\n      this._minAngleForLabel = minAngleForLabel;\n      return this;\n    }\n    _pieLayout() {\n      return d3Shape.pie().sort(null).value(d => this.cappedValueAccessor(d));\n    }\n    _sliceTooSmall(d) {\n      const angle = d.endAngle - d.startAngle;\n      return isNaN(angle) || angle < this._minAngleForLabel;\n    }\n    _sliceHasNoData(d) {\n      return this.cappedValueAccessor(d) === 0;\n    }\n    _isOffCanvas(current) {\n      return !current || isNaN(current.startAngle) || isNaN(current.endAngle);\n    }\n    _fill(d, i) {\n      return this.getColor(d.data, i);\n    }\n    _onClick(d) {\n      if (this._g.attr('class') !== this._emptyCssClass) {\n        this.onClick(d.data);\n      }\n    }\n    _safeArc(d, i, _arc) {\n      let path = _arc(d, i);\n      if (path.indexOf('NaN') >= 0) {\n        path = 'M0,0';\n      }\n      return path;\n    }\n\n    /**\n     * Title to use for the only slice when there is no data.\n     * @param {String} [title]\n     * @returns {String|PieChart}\n     */\n    emptyTitle(title) {\n      if (arguments.length === 0) {\n        return this._emptyTitle;\n      }\n      this._emptyTitle = title;\n      return this;\n    }\n\n    /**\n     * Position slice labels offset from the outer edge of the chart.\n     *\n     * The argument specifies the extra radius to be added for slice labels.\n     * @param {Number} [externalLabelRadius]\n     * @returns {Number|PieChart}\n     */\n    externalLabels(externalLabelRadius) {\n      if (arguments.length === 0) {\n        return this._externalLabelRadius;\n      } else if (externalLabelRadius) {\n        this._externalLabelRadius = externalLabelRadius;\n      } else {\n        this._externalLabelRadius = undefined;\n      }\n      return this;\n    }\n\n    /**\n     * Get or set whether to draw lines from pie slices to their labels.\n     *\n     * @param {Boolean} [drawPaths]\n     * @returns {Boolean|PieChart}\n     */\n    drawPaths(drawPaths) {\n      if (arguments.length === 0) {\n        return this._drawPaths;\n      }\n      this._drawPaths = drawPaths;\n      return this;\n    }\n    _labelPosition(d, _arc) {\n      let centroid;\n      if (this._externalLabelRadius) {\n        centroid = d3Shape.arc().outerRadius(this._radius - this._externalRadiusPadding + this._externalLabelRadius).innerRadius(this._radius - this._externalRadiusPadding + this._externalLabelRadius).centroid(d);\n      } else {\n        centroid = _arc.centroid(d);\n      }\n      if (isNaN(centroid[0]) || isNaN(centroid[1])) {\n        return 'translate(0,0)';\n      } else {\n        return `translate(${centroid})`;\n      }\n    }\n    legendables() {\n      return this.data().map((d, i) => {\n        const legendable = {\n          name: d.key,\n          data: d.value,\n          others: d.others,\n          chart: this\n        };\n        legendable.color = this.getColor(d, i);\n        return legendable;\n      });\n    }\n    legendHighlight(d) {\n      this._highlightSliceFromLegendable(d, true);\n    }\n    legendReset(d) {\n      this._highlightSliceFromLegendable(d, false);\n    }\n    legendToggle(d) {\n      this.onClick({\n        key: d.name,\n        others: d.others\n      });\n    }\n    _highlightSliceFromLegendable(legendable, highlighted) {\n      this.selectAll('g.pie-slice').each(function (d) {\n        if (legendable.name === d.data.key) {\n          d3Selection.select(this).classed('highlight', highlighted);\n        }\n      });\n    }\n    _tweenPie(b, element) {\n      b.innerRadius = this._innerRadius;\n      let current = element._current;\n      if (this._isOffCanvas(current)) {\n        current = {\n          startAngle: 0,\n          endAngle: 0\n        };\n      } else {\n        // only interpolate startAngle & endAngle, not the whole data object\n        current = {\n          startAngle: current.startAngle,\n          endAngle: current.endAngle\n        };\n      }\n      const i = d3Interpolate.interpolate(current, b);\n      element._current = i(0);\n      return t => this._safeArc(i(t), 0, this._buildArcs());\n    }\n  }\n  const pieChart = (parent, chartGroup) => new PieChart(parent, chartGroup);\n\n  /**\n   * Concrete row chart implementation.\n   *\n   * Examples:\n   * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n   * @mixes CapMixin\n   * @mixes MarginMixin\n   * @mixes ColorMixin\n   * @mixes BaseMixin\n   */\n  class RowChart extends CapMixin(ColorMixin(MarginMixin)) {\n    /**\n     * Create a Row Chart.\n     * @example\n     * // create a row chart under #chart-container1 element using the default global chart group\n     * var chart1 = new RowChart('#chart-container1');\n     * // create a row chart under #chart-container2 element using chart group A\n     * var chart2 = new RowChart('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor(parent, chartGroup) {\n      super();\n      this._g = undefined;\n      this._labelOffsetX = 10;\n      this._labelOffsetY = 15;\n      this._hasLabelOffsetY = false;\n      this._dyOffset = '0.35em'; // this helps center labels https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#svg_text\n      this._titleLabelOffsetX = 2;\n      this._gap = 5;\n      this._fixedBarHeight = false;\n      this._rowCssClass = 'row';\n      this._titleRowCssClass = 'titlerow';\n      this._renderTitleLabel = false;\n      this._x = undefined;\n      this._elasticX = undefined;\n      this._xAxis = d3Axis.axisBottom();\n      this._rowData = undefined;\n      this.rowsCap = this.cap;\n      this.title(d => `${this.cappedKeyAccessor(d)}: ${this.cappedValueAccessor(d)}`);\n      this.label(d => this.cappedKeyAccessor(d));\n      this.anchor(parent, chartGroup);\n    }\n    _calculateAxisScale() {\n      if (!this._x || this._elasticX) {\n        const _extent = d3Array.extent(this._rowData, d => this.cappedValueAccessor(d));\n        if (_extent[0] > 0) {\n          _extent[0] = 0;\n        }\n        if (_extent[1] < 0) {\n          _extent[1] = 0;\n        }\n        this._x = d3Scale.scaleLinear().domain(_extent).range([0, this.effectiveWidth()]);\n      }\n      this._xAxis.scale(this._x);\n    }\n    _drawAxis() {\n      let axisG = this._g.select('g.axis');\n      this._calculateAxisScale();\n      if (axisG.empty()) {\n        axisG = this._g.append('g').attr('class', 'axis');\n      }\n      axisG.attr('transform', `translate(0, ${this.effectiveHeight()})`);\n      transition(axisG, this.transitionDuration(), this.transitionDelay()).call(this._xAxis);\n    }\n    _doRender() {\n      this.resetSvg();\n      this._g = this.svg().append('g').attr('transform', `translate(${this.margins().left},${this.margins().top})`);\n      this._drawChart();\n      return this;\n    }\n\n    /**\n     * Gets or sets the x scale. The x scale can be any d3\n     * {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}.\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\n     * @param {d3.scale} [scale]\n     * @returns {d3.scale|RowChart}\n     */\n    x(scale) {\n      if (!arguments.length) {\n        return this._x;\n      }\n      this._x = scale;\n      return this;\n    }\n    _drawGridLines() {\n      this._g.selectAll('g.tick').select('line.grid-line').remove();\n      this._g.selectAll('g.tick').append('line').attr('class', 'grid-line').attr('x1', 0).attr('y1', 0).attr('x2', 0).attr('y2', () => -this.effectiveHeight());\n    }\n    _drawChart() {\n      this._rowData = this.data();\n      this._drawAxis();\n      this._drawGridLines();\n      let rows = this._g.selectAll(`g.${this._rowCssClass}`).data(this._rowData);\n      this._removeElements(rows);\n      rows = this._createElements(rows).merge(rows);\n      this._updateElements(rows);\n    }\n    _createElements(rows) {\n      const rowEnter = rows.enter().append('g').attr('class', (d, i) => `${this._rowCssClass} _${i}`);\n      rowEnter.append('rect').attr('width', 0);\n      this._createLabels(rowEnter);\n      return rowEnter;\n    }\n    _removeElements(rows) {\n      rows.exit().remove();\n    }\n    _rootValue() {\n      const root = this._x(0);\n      return root === -Infinity || root !== root ? this._x(1) : root;\n    }\n    _updateElements(rows) {\n      const n = this._rowData.length;\n      let height;\n      if (!this._fixedBarHeight) {\n        height = (this.effectiveHeight() - (n + 1) * this._gap) / n;\n      } else {\n        height = this._fixedBarHeight;\n      }\n\n      // vertically align label in center unless they override the value via property setter\n      if (!this._hasLabelOffsetY) {\n        this._labelOffsetY = height / 2;\n      }\n      const rect = rows.attr('transform', (d, i) => `translate(0,${(i + 1) * this._gap + i * height})`).select('rect').attr('height', height).attr('fill', this.getColor).on('click', d3compat.eventHandler(d => this._onClick(d))).classed('dc-tabbable', this._keyboardAccessible).classed('deselected', d => this.hasFilter() ? !this._isSelectedRow(d) : false).classed('selected', d => this.hasFilter() ? this._isSelectedRow(d) : false);\n      if (this._keyboardAccessible) {\n        this._makeKeyboardAccessible(d => this._onClick(d));\n      }\n      transition(rect, this.transitionDuration(), this.transitionDelay()).attr('width', d => Math.abs(this._rootValue() - this._x(this.cappedValueAccessor(d)))).attr('transform', d => this._translateX(d));\n      this._createTitles(rows);\n      this._updateLabels(rows);\n    }\n    _createTitles(rows) {\n      if (this.renderTitle()) {\n        rows.select('title').remove();\n        rows.append('title').text(this.title());\n      }\n    }\n    _createLabels(rowEnter) {\n      if (this.renderLabel()) {\n        rowEnter.append('text').on('click', d3compat.eventHandler(d => this._onClick(d)));\n      }\n      if (this.renderTitleLabel()) {\n        rowEnter.append('text').attr('class', this._titleRowCssClass).on('click', d3compat.eventHandler(d => this._onClick(d)));\n      }\n    }\n    _updateLabels(rows) {\n      if (this.renderLabel()) {\n        const lab = rows.select('text').attr('x', this._labelOffsetX).attr('y', this._labelOffsetY).attr('dy', this._dyOffset).on('click', d3compat.eventHandler(d => this._onClick(d))).attr('class', (d, i) => `${this._rowCssClass} _${i}`).text(d => this.label()(d));\n        transition(lab, this.transitionDuration(), this.transitionDelay()).attr('transform', d => this._translateX(d));\n      }\n      if (this.renderTitleLabel()) {\n        const titlelab = rows.select(`.${this._titleRowCssClass}`).attr('x', this.effectiveWidth() - this._titleLabelOffsetX).attr('y', this._labelOffsetY).attr('dy', this._dyOffset).attr('text-anchor', 'end').on('click', d3compat.eventHandler(d => this._onClick(d))).attr('class', (d, i) => `${this._titleRowCssClass} _${i}`).text(d => this.title()(d));\n        transition(titlelab, this.transitionDuration(), this.transitionDelay()).attr('transform', d => this._translateX(d));\n      }\n    }\n\n    /**\n     * Turn on/off Title label rendering (values) using SVG style of text-anchor 'end'.\n     * @param {Boolean} [renderTitleLabel=false]\n     * @returns {Boolean|RowChart}\n     */\n    renderTitleLabel(renderTitleLabel) {\n      if (!arguments.length) {\n        return this._renderTitleLabel;\n      }\n      this._renderTitleLabel = renderTitleLabel;\n      return this;\n    }\n    _onClick(d) {\n      this.onClick(d);\n    }\n    _translateX(d) {\n      const x = this._x(this.cappedValueAccessor(d)),\n        x0 = this._rootValue(),\n        s = x > x0 ? x0 : x;\n      return `translate(${s},0)`;\n    }\n    _doRedraw() {\n      this._drawChart();\n      return this;\n    }\n\n    /**\n     * Get or sets the x axis for the row chart instance.\n     * See the {@link https://github.com/d3/d3-axis/blob/master/README.md d3.axis}\n     * documention for more information.\n     * @param {d3.axis} [xAxis]\n     * @example\n     * // customize x axis tick format\n     * chart.xAxis().tickFormat(function (v) {return v + '%';});\n     * // customize x axis tick values\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\n     * // use a top-oriented axis. Note: position of the axis and grid lines will need to\n     * // be set manually, see https://dc-js.github.io/dc.js/examples/row-top-axis.html\n     * chart.xAxis(d3.axisTop())\n     * @returns {d3.axis|RowChart}\n     */\n    xAxis(xAxis) {\n      if (!arguments.length) {\n        return this._xAxis;\n      }\n      this._xAxis = xAxis;\n      return this;\n    }\n\n    /**\n     * Get or set the fixed bar height. Default is [false] which will auto-scale bars.\n     * For example, if you want to fix the height for a specific number of bars (useful in TopN charts)\n     * you could fix height as follows (where count = total number of bars in your TopN and gap is\n     * your vertical gap space).\n     * @example\n     * chart.fixedBarHeight( chartheight - (count + 1) * gap / count);\n     * @param {Boolean|Number} [fixedBarHeight=false]\n     * @returns {Boolean|Number|RowChart}\n     */\n    fixedBarHeight(fixedBarHeight) {\n      if (!arguments.length) {\n        return this._fixedBarHeight;\n      }\n      this._fixedBarHeight = fixedBarHeight;\n      return this;\n    }\n\n    /**\n     * Get or set the vertical gap space between rows on a particular row chart instance.\n     * @param {Number} [gap=5]\n     * @returns {Number|RowChart}\n     */\n    gap(gap) {\n      if (!arguments.length) {\n        return this._gap;\n      }\n      this._gap = gap;\n      return this;\n    }\n\n    /**\n     * Get or set the elasticity on x axis. If this attribute is set to true, then the x axis will rescale to auto-fit the\n     * data range when filtered.\n     * @param {Boolean} [elasticX]\n     * @returns {Boolean|RowChart}\n     */\n    elasticX(elasticX) {\n      if (!arguments.length) {\n        return this._elasticX;\n      }\n      this._elasticX = elasticX;\n      return this;\n    }\n\n    /**\n     * Get or set the x offset (horizontal space to the top left corner of a row) for labels on a particular row chart.\n     * @param {Number} [labelOffsetX=10]\n     * @returns {Number|RowChart}\n     */\n    labelOffsetX(labelOffsetX) {\n      if (!arguments.length) {\n        return this._labelOffsetX;\n      }\n      this._labelOffsetX = labelOffsetX;\n      return this;\n    }\n\n    /**\n     * Get or set the y offset (vertical space to the top left corner of a row) for labels on a particular row chart.\n     * @param {Number} [labelOffsety=15]\n     * @returns {Number|RowChart}\n     */\n    labelOffsetY(labelOffsety) {\n      if (!arguments.length) {\n        return this._labelOffsetY;\n      }\n      this._labelOffsetY = labelOffsety;\n      this._hasLabelOffsetY = true;\n      return this;\n    }\n\n    /**\n     * Get of set the x offset (horizontal space between right edge of row and right edge or text.\n     * @param {Number} [titleLabelOffsetX=2]\n     * @returns {Number|RowChart}\n     */\n    titleLabelOffsetX(titleLabelOffsetX) {\n      if (!arguments.length) {\n        return this._titleLabelOffsetX;\n      }\n      this._titleLabelOffsetX = titleLabelOffsetX;\n      return this;\n    }\n    _isSelectedRow(d) {\n      return this.hasFilter(this.cappedKeyAccessor(d));\n    }\n  }\n  const rowChart = (parent, chartGroup) => new RowChart(parent, chartGroup);\n\n  /**\n   * A scatter plot chart\n   *\n   * Examples:\n   * - {@link http://dc-js.github.io/dc.js/examples/scatter.html Scatter Chart}\n   * - {@link http://dc-js.github.io/dc.js/examples/multi-scatter.html Multi-Scatter Chart}\n   * @mixes CoordinateGridMixin\n   */\n  class ScatterPlot extends CoordinateGridMixin {\n    /**\n     * Create a Scatter Plot.\n     * @example\n     * // create a scatter plot under #chart-container1 element using the default global chart group\n     * var chart1 = new ScatterPlot('#chart-container1');\n     * // create a scatter plot under #chart-container2 element using chart group A\n     * var chart2 = new ScatterPlot('#chart-container2', 'chartGroupA');\n     * // create a sub-chart under a composite parent chart\n     * var chart3 = new ScatterPlot(compositeChart);\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor(parent, chartGroup) {\n      super();\n      this._symbol = d3Shape.symbol();\n      this._existenceAccessor = d => d.value;\n      const originalKeyAccessor = this.keyAccessor();\n      this.keyAccessor(d => originalKeyAccessor(d)[0]);\n      this.valueAccessor(d => originalKeyAccessor(d)[1]);\n      this.colorAccessor(() => this._groupName);\n\n      // this basically just counteracts the setting of its own key/value accessors\n      // see https://github.com/dc-js/dc.js/issues/702\n      this.title(d => `${this.keyAccessor()(d)},${this.valueAccessor()(d)}: ${this.existenceAccessor()(d)}`);\n      this._highlightedSize = 7;\n      this._symbolSize = 5;\n      this._excludedSize = 3;\n      this._excludedColor = null;\n      this._excludedOpacity = 1.0;\n      this._emptySize = 0;\n      this._emptyOpacity = 0;\n      this._nonemptyOpacity = 1;\n      this._emptyColor = null;\n      this._filtered = [];\n      this._canvas = null;\n      this._context = null;\n      this._useCanvas = false;\n\n      // Use a 2 dimensional brush\n      this.brush(d3Brush.brush());\n      this._symbol.size((d, i) => this._elementSize(d, i));\n      this.anchor(parent, chartGroup);\n    }\n\n    // Calculates element radius for canvas plot to be comparable to D3 area based symbol sizes\n    _canvasElementSize(d, isFiltered) {\n      if (!this._existenceAccessor(d)) {\n        return this._emptySize / Math.sqrt(Math.PI);\n      } else if (isFiltered) {\n        return this._symbolSize / Math.sqrt(Math.PI);\n      } else {\n        return this._excludedSize / Math.sqrt(Math.PI);\n      }\n    }\n    _elementSize(d, i) {\n      if (!this._existenceAccessor(d)) {\n        return Math.pow(this._emptySize, 2);\n      } else if (this._filtered[i]) {\n        return Math.pow(this._symbolSize, 2);\n      } else {\n        return Math.pow(this._excludedSize, 2);\n      }\n    }\n    _locator(d) {\n      return `translate(${this.x()(this.keyAccessor()(d))},${this.y()(this.valueAccessor()(d))})`;\n    }\n    filter(filter) {\n      if (!arguments.length) {\n        return super.filter();\n      }\n      return super.filter(filters.RangedTwoDimensionalFilter(filter));\n    }\n\n    /**\n     * Method that replaces original resetSvg and appropriately inserts canvas\n     * element along with svg element and sets their CSS properties appropriately\n     * so they are overlapped on top of each other.\n     * Remove the chart's SVGElements from the dom and recreate the container SVGElement.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n     * @returns {SVGElement}\n     */\n    resetSvg() {\n      if (!this._useCanvas) {\n        return super.resetSvg();\n      } else {\n        super.resetSvg(); // Perform original svgReset inherited from baseMixin\n        this.select('canvas').remove(); // remove old canvas\n\n        const svgSel = this.svg();\n        const rootSel = this.root();\n\n        // Set root node to relative positioning and svg to absolute\n        rootSel.style('position', 'relative');\n        svgSel.style('position', 'relative');\n\n        // Check if SVG element already has any extra top/left CSS offsets\n        const svgLeft = isNaN(parseInt(svgSel.style('left'), 10)) ? 0 : parseInt(svgSel.style('left'), 10);\n        const svgTop = isNaN(parseInt(svgSel.style('top'), 10)) ? 0 : parseInt(svgSel.style('top'), 10);\n        const width = this.effectiveWidth();\n        const height = this.effectiveHeight();\n        const margins = this.margins(); // {top: 10, right: 130, bottom: 42, left: 42}\n\n        // Add the canvas element such that it perfectly overlaps the plot area of the scatter plot SVG\n        const devicePixelRatio = window.devicePixelRatio || 1;\n        this._canvas = this.root().append('canvas').attr('x', 0).attr('y', 0).attr('width', width * devicePixelRatio).attr('height', height * devicePixelRatio).style('width', `${width}px`).style('height', `${height}px`).style('position', 'absolute').style('top', `${margins.top + svgTop}px`).style('left', `${margins.left + svgLeft}px`).style('z-index', -1) // Place behind SVG\n        .style('pointer-events', 'none'); // Disable pointer events on canvas so SVG can capture brushing\n\n        // Define canvas context and set clipping path\n        this._context = this._canvas.node().getContext('2d');\n        this._context.scale(devicePixelRatio, devicePixelRatio);\n        this._context.rect(0, 0, width, height);\n        this._context.clip(); // Setup clipping path\n        this._context.imageSmoothingQuality = 'high';\n        return this.svg(); // Respect original return param for this.resetSvg;\n      }\n    }\n\n    _resizeCanvas() {\n      const width = this.effectiveWidth();\n      const height = this.effectiveHeight();\n      const devicePixelRatio = window.devicePixelRatio || 1;\n      this._canvas.attr('width', width * devicePixelRatio).attr('height', height * devicePixelRatio).style('width', `${width}px`).style('height', `${height}px`);\n      this._context.scale(devicePixelRatio, devicePixelRatio);\n    }\n\n    /**\n     * Set or get whether to use canvas backend for plotting scatterPlot. Note that the\n     * canvas backend does not currently support\n     * {@link ScatterPlot#customSymbol customSymbol} or\n     * {@link ScatterPlot#symbol symbol} methods and is limited to always plotting\n     * with filled circles. Symbols are drawn with\n     * {@link ScatterPlot#symbolSize symbolSize} radius. By default, the SVG backend\n     * is used when `useCanvas` is set to `false`.\n     * @param {Boolean} [useCanvas=false]\n     * @return {Boolean|d3.selection}\n     */\n    useCanvas(useCanvas) {\n      if (!arguments.length) {\n        return this._useCanvas;\n      }\n      this._useCanvas = useCanvas;\n      return this;\n    }\n\n    /**\n     * Set or get canvas element. You should usually only ever use the get method as\n     * dc.js will handle canvas element generation.  Provides valid canvas only when\n     * {@link ScatterPlot#useCanvas useCanvas} is set to `true`\n     * @param {CanvasElement|d3.selection} [canvasElement]\n     * @return {CanvasElement|d3.selection}\n     */\n    canvas(canvasElement) {\n      if (!arguments.length) {\n        return this._canvas;\n      }\n      this._canvas = canvasElement;\n      return this;\n    }\n\n    /**\n     * Get canvas 2D context. Provides valid context only when\n     * {@link ScatterPlot#useCanvas useCanvas} is set to `true`\n     * @return {CanvasContext}\n     */\n    context() {\n      return this._context;\n    }\n\n    /*eslint complexity: [2,11] */\n    // Plots data on canvas element. If argument provided, assumes legend is\n    // currently being highlighted and modifies opacity/size of symbols accordingly\n    // @param {Object} [legendHighlightDatum] - Datum provided to legendHighlight method\n    _plotOnCanvas(legendHighlightDatum) {\n      this._resizeCanvas();\n      const context = this.context();\n      context.clearRect(0, 0, (context.canvas.width + 2) * 1, (context.canvas.height + 2) * 1);\n      const data = this.data();\n\n      // Draw the data on canvas\n      data.forEach((d, i) => {\n        const isFiltered = !this.filter() || this.filter().isFiltered([d.key[0], d.key[1]]);\n        // Calculate opacity for current data point\n        let cOpacity = 1;\n        if (!this._existenceAccessor(d)) {\n          cOpacity = this._emptyOpacity;\n        } else if (isFiltered) {\n          cOpacity = this._nonemptyOpacity;\n        } else {\n          cOpacity = this.excludedOpacity();\n        }\n        // Calculate color for current data point\n        let cColor = null;\n        if (this._emptyColor && !this._existenceAccessor(d)) {\n          cColor = this._emptyColor;\n        } else if (this.excludedColor() && !isFiltered) {\n          cColor = this.excludedColor();\n        } else {\n          cColor = this.getColor(d);\n        }\n        let cSize = this._canvasElementSize(d, isFiltered);\n\n        // Adjust params for data points if legend is highlighted\n        if (legendHighlightDatum) {\n          const isHighlighted = cColor === legendHighlightDatum.color;\n          // Calculate opacity for current data point\n          const fadeOutOpacity = 0.1; // TODO: Make this programmatically setable\n          if (!isHighlighted) {\n            // Fade out non-highlighted colors + highlighted colors outside filter\n            cOpacity = fadeOutOpacity;\n          }\n          if (isHighlighted) {\n            // Set size for highlighted color data points\n            cSize = this._highlightedSize / Math.sqrt(Math.PI);\n          }\n        }\n\n        // Draw point on canvas\n        context.save();\n        context.globalAlpha = cOpacity;\n        context.beginPath();\n        context.arc(this.x()(this.keyAccessor()(d)), this.y()(this.valueAccessor()(d)), cSize, 0, 2 * Math.PI, true);\n        context.fillStyle = cColor;\n        context.fill();\n        // context.lineWidth = 0.5; // Commented out code to add stroke around scatter points if desired\n        // context.strokeStyle = '#333';\n        // context.stroke();\n        context.restore();\n      });\n    }\n    _plotOnSVG() {\n      const data = this.data();\n      if (this._keyboardAccessible) {\n        // sort based on the x value (key)\n        data.sort((a, b) => d3Array.ascending(this.keyAccessor()(a), this.keyAccessor()(b)));\n      }\n      let symbols = this.chartBodyG().selectAll('path.symbol').data(data);\n      transition(symbols.exit(), this.transitionDuration(), this.transitionDelay()).attr('opacity', 0).remove();\n      symbols = symbols.enter().append('path').attr('class', 'symbol').classed('dc-tabbable', this._keyboardAccessible).attr('opacity', 0).attr('fill', this.getColor).attr('transform', d => this._locator(d)).merge(symbols);\n\n      // no click handler - just tabindex for reading out of tooltips\n      if (this._keyboardAccessible) {\n        this._makeKeyboardAccessible();\n        symbols.order();\n      }\n      symbols.call(s => this._renderTitles(s, data));\n      symbols.each((d, i) => {\n        this._filtered[i] = !this.filter() || this.filter().isFiltered([this.keyAccessor()(d), this.valueAccessor()(d)]);\n      });\n      transition(symbols, this.transitionDuration(), this.transitionDelay()).attr('opacity', (d, i) => {\n        if (!this._existenceAccessor(d)) {\n          return this._emptyOpacity;\n        } else if (this._filtered[i]) {\n          return this._nonemptyOpacity;\n        } else {\n          return this.excludedOpacity();\n        }\n      }).attr('fill', (d, i) => {\n        if (this._emptyColor && !this._existenceAccessor(d)) {\n          return this._emptyColor;\n        } else if (this.excludedColor() && !this._filtered[i]) {\n          return this.excludedColor();\n        } else {\n          return this.getColor(d);\n        }\n      }).attr('transform', d => this._locator(d)).attr('d', this._symbol);\n    }\n    plotData() {\n      if (this._useCanvas) {\n        this._plotOnCanvas();\n      } else {\n        this._plotOnSVG();\n      }\n    }\n    _renderTitles(_symbol, _d) {\n      if (this.renderTitle()) {\n        _symbol.selectAll('title').remove();\n        _symbol.append('title').text(d => this.title()(d));\n      }\n    }\n\n    /**\n     * Get or set the existence accessor.  If a point exists, it is drawn with\n     * {@link ScatterPlot#symbolSize symbolSize} radius and\n     * opacity 1; if it does not exist, it is drawn with\n     * {@link ScatterPlot#emptySize emptySize} radius and opacity 0. By default,\n     * the existence accessor checks if the reduced value is truthy.\n     * @see {@link ScatterPlot#symbolSize symbolSize}\n     * @see {@link ScatterPlot#emptySize emptySize}\n     * @example\n     * // default accessor\n     * chart.existenceAccessor(function (d) { return d.value; });\n     * @param {Function} [accessor]\n     * @returns {Function|ScatterPlot}\n     */\n    existenceAccessor(accessor) {\n      if (!arguments.length) {\n        return this._existenceAccessor;\n      }\n      this._existenceAccessor = accessor;\n      return this;\n    }\n\n    /**\n     * Get or set the symbol type used for each point. By default the symbol is a circle (d3.symbolCircle).\n     * Type can be a constant or an accessor.\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_type symbol.type}\n     * @example\n     * // Circle type\n     * chart.symbol(d3.symbolCircle);\n     * // Square type\n     * chart.symbol(d3.symbolSquare);\n     * @param {Function} [type=d3.symbolCircle]\n     * @returns {Function|ScatterPlot}\n     */\n    symbol(type) {\n      if (!arguments.length) {\n        return this._symbol.type();\n      }\n      this._symbol.type(type);\n      return this;\n    }\n\n    /**\n     * Get or set the symbol generator. By default `ScatterPlot` will use\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol d3.symbol()}\n     * to generate symbols. `ScatterPlot` will set the\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_size symbol size accessor}\n     * on the symbol generator.\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol d3.symbol}\n     * @see {@link https://stackoverflow.com/questions/25332120/create-additional-d3-js-symbols Create additional D3.js symbols}\n     * @param {String|Function} [customSymbol=d3.symbol()]\n     * @returns {String|Function|ScatterPlot}\n     */\n    customSymbol(customSymbol) {\n      if (!arguments.length) {\n        return this._symbol;\n      }\n      this._symbol = customSymbol;\n      this._symbol.size((d, i) => this._elementSize(d, i));\n      return this;\n    }\n\n    /**\n     * Set or get radius for symbols.\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_size d3.symbol.size}\n     * @param {Number} [symbolSize=3]\n     * @returns {Number|ScatterPlot}\n     */\n    symbolSize(symbolSize) {\n      if (!arguments.length) {\n        return this._symbolSize;\n      }\n      this._symbolSize = symbolSize;\n      return this;\n    }\n\n    /**\n     * Set or get radius for highlighted symbols.\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_size d3.symbol.size}\n     * @param {Number} [highlightedSize=5]\n     * @returns {Number|ScatterPlot}\n     */\n    highlightedSize(highlightedSize) {\n      if (!arguments.length) {\n        return this._highlightedSize;\n      }\n      this._highlightedSize = highlightedSize;\n      return this;\n    }\n\n    /**\n     * Set or get size for symbols excluded from this chart's filter. If null, no\n     * special size is applied for symbols based on their filter status.\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_size d3.symbol.size}\n     * @param {Number} [excludedSize=null]\n     * @returns {Number|ScatterPlot}\n     */\n    excludedSize(excludedSize) {\n      if (!arguments.length) {\n        return this._excludedSize;\n      }\n      this._excludedSize = excludedSize;\n      return this;\n    }\n\n    /**\n     * Set or get color for symbols excluded from this chart's filter. If null, no\n     * special color is applied for symbols based on their filter status.\n     * @param {Number} [excludedColor=null]\n     * @returns {Number|ScatterPlot}\n     */\n    excludedColor(excludedColor) {\n      if (!arguments.length) {\n        return this._excludedColor;\n      }\n      this._excludedColor = excludedColor;\n      return this;\n    }\n\n    /**\n     * Set or get opacity for symbols excluded from this chart's filter.\n     * @param {Number} [excludedOpacity=1.0]\n     * @returns {Number|ScatterPlot}\n     */\n    excludedOpacity(excludedOpacity) {\n      if (!arguments.length) {\n        return this._excludedOpacity;\n      }\n      this._excludedOpacity = excludedOpacity;\n      return this;\n    }\n\n    /**\n     * Set or get radius for symbols when the group is empty.\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_size d3.symbol.size}\n     * @param {Number} [emptySize=0]\n     * @returns {Number|ScatterPlot}\n     */\n    emptySize(emptySize) {\n      if (!arguments.length) {\n        return this._emptySize;\n      }\n      this._emptySize = emptySize;\n      return this;\n    }\n    hiddenSize(emptySize) {\n      if (!arguments.length) {\n        return this.emptySize();\n      }\n      return this.emptySize(emptySize);\n    }\n\n    /**\n     * Set or get color for symbols when the group is empty. If null, just use the\n     * {@link ColorMixin#colors colorMixin.colors} color scale zero value.\n     * @param {String} [emptyColor=null]\n     * @return {String}\n     * @return {ScatterPlot}/\n     */\n    emptyColor(emptyColor) {\n      if (!arguments.length) {\n        return this._emptyColor;\n      }\n      this._emptyColor = emptyColor;\n      return this;\n    }\n\n    /**\n     * Set or get opacity for symbols when the group is empty.\n     * @param {Number} [emptyOpacity=0]\n     * @return {Number}\n     * @return {ScatterPlot}\n     */\n    emptyOpacity(emptyOpacity) {\n      if (!arguments.length) {\n        return this._emptyOpacity;\n      }\n      this._emptyOpacity = emptyOpacity;\n      return this;\n    }\n\n    /**\n     * Set or get opacity for symbols when the group is not empty.\n     * @param {Number} [nonemptyOpacity=1]\n     * @return {Number}\n     * @return {ScatterPlot}\n     */\n    nonemptyOpacity(nonemptyOpacity) {\n      if (!arguments.length) {\n        return this._emptyOpacity;\n      }\n      this._nonemptyOpacity = nonemptyOpacity;\n      return this;\n    }\n    legendables() {\n      return [{\n        chart: this,\n        name: this._groupName,\n        color: this.getColor()\n      }];\n    }\n    legendHighlight(d) {\n      if (this._useCanvas) {\n        this._plotOnCanvas(d); // Supply legend datum to plotOnCanvas\n      } else {\n        this._resizeSymbolsWhere(s => s.attr('fill') === d.color, this._highlightedSize);\n        this.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n          return d3Selection.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', true);\n      }\n    }\n    legendReset(d) {\n      if (this._useCanvas) {\n        this._plotOnCanvas(d); // Supply legend datum to plotOnCanvas\n      } else {\n        this._resizeSymbolsWhere(s => s.attr('fill') === d.color, this._symbolSize);\n        this.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n          return d3Selection.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', false);\n      }\n    }\n    _resizeSymbolsWhere(condition, size) {\n      const symbols = this.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n        return condition(d3Selection.select(this));\n      });\n      const oldSize = this._symbol.size();\n      this._symbol.size(Math.pow(size, 2));\n      transition(symbols, this.transitionDuration(), this.transitionDelay()).attr('d', this._symbol);\n      this._symbol.size(oldSize);\n    }\n    createBrushHandlePaths() {\n      // no handle paths for poly-brushes\n    }\n    extendBrush(brushSelection) {\n      if (this.round()) {\n        brushSelection[0] = brushSelection[0].map(this.round());\n        brushSelection[1] = brushSelection[1].map(this.round());\n      }\n      return brushSelection;\n    }\n    brushIsEmpty(brushSelection) {\n      return !brushSelection || brushSelection[0][0] >= brushSelection[1][0] || brushSelection[0][1] >= brushSelection[1][1];\n    }\n    _brushing(evt) {\n      if (this._ignoreBrushEvents) {\n        return;\n      }\n      let brushSelection = evt.selection;\n\n      // Testing with pixels is more reliable\n      let brushIsEmpty = this.brushIsEmpty(brushSelection);\n      if (brushSelection) {\n        brushSelection = brushSelection.map(point => point.map((coord, i) => {\n          const scale = i === 0 ? this.x() : this.y();\n          return scale.invert(coord);\n        }));\n        brushSelection = this.extendBrush(brushSelection);\n\n        // The rounding process might have made brushSelection empty, so we need to recheck\n        brushIsEmpty = brushIsEmpty && this.brushIsEmpty(brushSelection);\n      }\n      this.redrawBrush(brushSelection, false);\n      const ranged2DFilter = brushIsEmpty ? null : filters.RangedTwoDimensionalFilter(brushSelection);\n      events.trigger(() => {\n        this.replaceFilter(ranged2DFilter);\n        this.redrawGroup();\n      }, constants.EVENT_DELAY);\n    }\n    redrawBrush(brushSelection, doTransition) {\n      // override default x axis brush from parent chart\n      this._gBrush = this.gBrush();\n      if (this.brushOn() && this._gBrush) {\n        if (this.resizing()) {\n          this.setBrushExtents(doTransition);\n        }\n        if (!brushSelection) {\n          this._withoutBrushEvents(() => {\n            this._gBrush.call(this.brush().move, brushSelection);\n          });\n        } else {\n          brushSelection = brushSelection.map(point => point.map((coord, i) => {\n            const scale = i === 0 ? this.x() : this.y();\n            return scale(coord);\n          }));\n          const gBrush = optionalTransition(doTransition, this.transitionDuration(), this.transitionDelay())(this._gBrush);\n          this._withoutBrushEvents(() => {\n            gBrush.call(this.brush().move, brushSelection);\n          });\n        }\n      }\n      this.fadeDeselectedArea(brushSelection);\n    }\n  }\n  const scatterPlot = (parent, chartGroup) => new ScatterPlot(parent, chartGroup);\n  const SELECT_CSS_CLASS = 'dc-select-menu';\n  const OPTION_CSS_CLASS = 'dc-select-option';\n\n  /**\n   * The select menu is a simple widget designed to filter a dimension by selecting an option from\n   * an HTML `<select/>` menu. The menu can be optionally turned into a multiselect.\n   * @mixes BaseMixin\n   */\n  class SelectMenu extends BaseMixin {\n    /**\n     * Create a Select Menu.\n     * @example\n     * // create a select menu under #select-container using the default global chart group\n     * var select = new SelectMenu('#select-container')\n     *                .dimension(states)\n     *                .group(stateGroup);\n     * // the option text can be set via the title() function\n     * // by default the option text is '`key`: `value`'\n     * select.title(function (d){\n     *     return 'STATE: ' + d.key;\n     * })\n     * @param {String|node|d3.selection|CompositeChart} parent - Any valid\n     * [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this widget should be placed in.\n     * Interaction with the widget will only trigger events and redraws within its group.\n     */\n    constructor(parent, chartGroup) {\n      super();\n      this._select = undefined;\n      this._promptText = 'Select all';\n      this._multiple = false;\n      this._promptValue = null;\n      this._numberVisible = null;\n      this.data(group => group.all().filter(this._filterDisplayed));\n      this._filterDisplayed = d => this.valueAccessor()(d) > 0;\n      this._order = (a, b) => {\n        if (this.keyAccessor()(a) > this.keyAccessor()(b)) {\n          return 1;\n        }\n        if (this.keyAccessor()(a) < this.keyAccessor()(b)) {\n          return -1;\n        }\n        return 0;\n      };\n      this.anchor(parent, chartGroup);\n    }\n    _doRender() {\n      this.select('select').remove();\n      this._select = this.root().append('select').classed(SELECT_CSS_CLASS, true);\n      this._select.append('option').text(this._promptText).attr('value', '');\n      this._doRedraw();\n      return this;\n    }\n    _doRedraw() {\n      this._setAttributes();\n      this._renderOptions();\n      // select the option(s) corresponding to current filter(s)\n      if (this.hasFilter() && this._multiple) {\n        this._select.selectAll('option').property('selected', d => typeof d !== 'undefined' && this.filters().indexOf(String(this.keyAccessor()(d))) >= 0);\n      } else if (this.hasFilter()) {\n        this._select.property('value', this.filter());\n      } else {\n        this._select.property('value', '');\n      }\n      return this;\n    }\n    _renderOptions() {\n      const options = this._select.selectAll(`option.${OPTION_CSS_CLASS}`).data(this.data(), d => this.keyAccessor()(d));\n      options.exit().remove();\n      options.enter().append('option').classed(OPTION_CSS_CLASS, true).attr('value', d => this.keyAccessor()(d)).merge(options).text(this.title());\n      this._select.selectAll(`option.${OPTION_CSS_CLASS}`).sort(this._order);\n      this._select.on('change', d3compat.eventHandler((d, evt) => this._onChange(d, evt)));\n    }\n    _onChange(_d, evt) {\n      let values;\n      const target = evt.target;\n      if (target.selectedOptions) {\n        const selectedOptions = Array.prototype.slice.call(target.selectedOptions);\n        values = selectedOptions.map(d => d.value);\n      } else {\n        // IE and other browsers do not support selectedOptions\n        // adapted from this polyfill: https://gist.github.com/brettz9/4212217\n        const options = [].slice.call(evt.target.options);\n        values = options.filter(option => option.selected).map(option => option.value);\n      }\n      // console.log(values);\n      // check if only prompt option is selected\n      if (values.length === 1 && values[0] === '') {\n        values = this._promptValue || null;\n      } else if (!this._multiple && values.length === 1) {\n        values = values[0];\n      }\n      this.onChange(values);\n    }\n    onChange(val) {\n      if (val && this._multiple) {\n        this.replaceFilter([val]);\n      } else if (val) {\n        this.replaceFilter(val);\n      } else {\n        this.filterAll();\n      }\n      events.trigger(() => {\n        this.redrawGroup();\n      });\n    }\n    _setAttributes() {\n      if (this._multiple) {\n        this._select.attr('multiple', true);\n      } else {\n        this._select.attr('multiple', null);\n      }\n      if (this._numberVisible !== null) {\n        this._select.attr('size', this._numberVisible);\n      } else {\n        this._select.attr('size', null);\n      }\n    }\n\n    /**\n     * Get or set the function that controls the ordering of option tags in the\n     * select menu. By default options are ordered by the group key in ascending\n     * order.\n     * @param {Function} [order]\n     * @returns {Function|SelectMenu}\n     * @example\n     * // order by the group's value\n     * chart.order(function (a,b) {\n     *     return a.value > b.value ? 1 : b.value > a.value ? -1 : 0;\n     * });\n     */\n    order(order) {\n      if (!arguments.length) {\n        return this._order;\n      }\n      this._order = order;\n      return this;\n    }\n\n    /**\n     * Get or set the text displayed in the options used to prompt selection.\n     * @param {String} [promptText='Select all']\n     * @returns {String|SelectMenu}\n     * @example\n     * chart.promptText('All states');\n     */\n    promptText(promptText) {\n      if (!arguments.length) {\n        return this._promptText;\n      }\n      this._promptText = promptText;\n      return this;\n    }\n\n    /**\n     * Get or set the function that filters option tags prior to display. By default options\n     * with a value of < 1 are not displayed.\n     * @param {function} [filterDisplayed]\n     * @returns {Function|SelectMenu}\n     * @example\n     * // display all options override the `filterDisplayed` function:\n     * chart.filterDisplayed(function () {\n     *     return true;\n     * });\n     */\n    filterDisplayed(filterDisplayed) {\n      if (!arguments.length) {\n        return this._filterDisplayed;\n      }\n      this._filterDisplayed = filterDisplayed;\n      return this;\n    }\n\n    /**\n     * Controls the type of select menu. Setting it to true converts the underlying\n     * HTML tag into a multiple select.\n     * @param {boolean} [multiple=false]\n     * @returns {boolean|SelectMenu}\n     * @example\n     * chart.multiple(true);\n     */\n    multiple(multiple) {\n      if (!arguments.length) {\n        return this._multiple;\n      }\n      this._multiple = multiple;\n      return this;\n    }\n\n    /**\n     * Controls the default value to be used for\n     * [dimension.filter](https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter)\n     * when only the prompt value is selected. If `null` (the default), no filtering will occur when\n     * just the prompt is selected.\n     * @param {?*} [promptValue=null]\n     * @returns {*|SelectMenu}\n     */\n    promptValue(promptValue) {\n      if (!arguments.length) {\n        return this._promptValue;\n      }\n      this._promptValue = promptValue;\n      return this;\n    }\n\n    /**\n     * Controls the number of items to show in the select menu, when `.multiple()` is true. This\n     * controls the [`size` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#Attributes) of\n     * the `select` element. If `null` (the default), uses the browser's default height.\n     * @param {?number} [numberVisible=null]\n     * @returns {number|SelectMenu}\n     * @example\n     * chart.numberVisible(10);\n     */\n    numberVisible(numberVisible) {\n      if (!arguments.length) {\n        return this._numberVisible;\n      }\n      this._numberVisible = numberVisible;\n      return this;\n    }\n    size(numberVisible) {\n      logger.warnOnce('selectMenu.size is ambiguous - use selectMenu.numberVisible instead');\n      if (!arguments.length) {\n        return this.numberVisible();\n      }\n      return this.numberVisible(numberVisible);\n    }\n  }\n  const selectMenu = (parent, chartGroup) => new SelectMenu(parent, chartGroup);\n\n  /**\n   * A series chart is a chart that shows multiple series of data overlaid on one chart, where the\n   * series is specified in the data. It is a specialization of Composite Chart and inherits all\n   * composite features other than recomposing the chart.\n   *\n   * Examples:\n   * - {@link http://dc-js.github.io/dc.js/examples/series.html Series Chart}\n   * @mixes CompositeChart\n   */\n  class SeriesChart extends CompositeChart {\n    /**\n     * Create a Series Chart.\n     * @example\n     * // create a series chart under #chart-container1 element using the default global chart group\n     * var seriesChart1 = new SeriesChart(\"#chart-container1\");\n     * // create a series chart under #chart-container2 element using chart group A\n     * var seriesChart2 = new SeriesChart(\"#chart-container2\", \"chartGroupA\");\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor(parent, chartGroup) {\n      super(parent, chartGroup);\n      this._keySort = (a, b) => d3Array.ascending(this.keyAccessor()(a), this.keyAccessor()(b));\n      this._charts = {};\n      this._chartFunction = lineChart;\n      this._chartGroup = chartGroup;\n      this._seriesAccessor = undefined;\n      this._seriesSort = d3Array.ascending;\n      this._valueSort = this._keySort;\n      this._mandatoryAttributes().push('seriesAccessor', 'chart');\n      this.shareColors(true);\n    }\n    _compose(subChartArray) {\n      super.compose(subChartArray);\n    }\n    compose(subChartArray) {\n      throw new Error('Not supported for this chart type');\n    }\n    _preprocessData() {\n      const keep = [];\n      let childrenChanged;\n      const nesting = d3compat.nester({\n        key: this._seriesAccessor,\n        sortKeys: this._seriesSort,\n        sortValues: this._valueSort,\n        entries: this.data()\n      });\n      const children = nesting.map((sub, i) => {\n        const subChart = this._charts[sub.key] || this._chartFunction(this, this._chartGroup, sub.key, i);\n        if (!this._charts[sub.key]) {\n          childrenChanged = true;\n        }\n        this._charts[sub.key] = subChart;\n        keep.push(sub.key);\n        return subChart.dimension(this.dimension()).group({\n          all: typeof sub.values === 'function' ? sub.values : utils.constant(sub.values)\n        }, sub.key).keyAccessor(this.keyAccessor()).valueAccessor(this.valueAccessor()).brushOn(false);\n      });\n      // this works around the fact compositeChart doesn't really\n      // have a removal interface\n      Object.keys(this._charts).filter(c => keep.indexOf(c) === -1).forEach(c => {\n        this._clearChart(c);\n        childrenChanged = true;\n      });\n      this._compose(children);\n      if (childrenChanged && this.legend()) {\n        this.legend().render();\n      }\n    }\n    _clearChart(c) {\n      if (this._charts[c].g()) {\n        this._charts[c].g().remove();\n      }\n      delete this._charts[c];\n    }\n    _resetChildren() {\n      Object.keys(this._charts).map(this._clearChart.bind(this));\n      this._charts = {};\n    }\n\n    /**\n     * Get or set the chart function, which generates the child charts.\n     * @example\n     * // put curve on the line charts used for the series\n     * chart.chart(function(c) { return new LineChart(c).curve(d3.curveBasis); })\n     * // do a scatter series chart\n     * chart.chart(anchor => new ScatterPlot(anchor))\n     * @param {Function} [chartFunction= (anchor) =>  new LineChart(anchor)]\n     * @returns {Function|SeriesChart}\n     */\n    chart(chartFunction) {\n      if (!arguments.length) {\n        return this._chartFunction;\n      }\n      this._chartFunction = chartFunction;\n      this._resetChildren();\n      return this;\n    }\n\n    /**\n     * **mandatory**\n     *\n     * Get or set accessor function for the displayed series. Given a datum, this function\n     * should return the series that datum belongs to.\n     * @example\n     * // simple series accessor\n     * chart.seriesAccessor(function(d) { return \"Expt: \" + d.key[0]; })\n     * @param {Function} [accessor]\n     * @returns {Function|SeriesChart}\n     */\n    seriesAccessor(accessor) {\n      if (!arguments.length) {\n        return this._seriesAccessor;\n      }\n      this._seriesAccessor = accessor;\n      this._resetChildren();\n      return this;\n    }\n\n    /**\n     * Get or set a function to sort the list of series by, given series values.\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#descending d3.descending}\n     * @example\n     * chart.seriesSort(d3.descending);\n     * @param {Function} [sortFunction=d3.ascending]\n     * @returns {Function|SeriesChart}\n     */\n    seriesSort(sortFunction) {\n      if (!arguments.length) {\n        return this._seriesSort;\n      }\n      this._seriesSort = sortFunction;\n      this._resetChildren();\n      return this;\n    }\n\n    /**\n     * Get or set a function to sort each series values by. By default this is the key accessor which,\n     * for example, will ensure a lineChart series connects its points in increasing key/x order,\n     * rather than haphazardly.\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#descending d3.descending}\n     * @example\n     * // Default value sort\n     * _chart.valueSort(function keySort (a, b) {\n     *     return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n     * });\n     * @param {Function} [sortFunction]\n     * @returns {Function|SeriesChart}\n     */\n    valueSort(sortFunction) {\n      if (!arguments.length) {\n        return this._valueSort;\n      }\n      this._valueSort = sortFunction;\n      this._resetChildren();\n      return this;\n    }\n  }\n  const seriesChart = (parent, chartGroup) => new SeriesChart(parent, chartGroup);\n  const DEFAULT_MIN_ANGLE_FOR_LABEL$1 = 0.5;\n\n  /**\n   * The sunburst chart implementation is usually used to visualize a small tree distribution.  The sunburst\n   * chart uses keyAccessor to determine the slices, and valueAccessor to calculate the size of each\n   * slice relative to the sum of all values. Slices are ordered by {@link BaseMixin#ordering ordering} which defaults to sorting\n   * by key.\n   *\n   * The keys used in the sunburst chart should be arrays, representing paths in the tree.\n   *\n   * When filtering, the sunburst chart creates instances of {@link Filters.HierarchyFilter HierarchyFilter}.\n   *\n   * @mixes CapMixin\n   * @mixes ColorMixin\n   * @mixes BaseMixin\n   */\n  class SunburstChart extends ColorMixin(BaseMixin) {\n    /**\n     * Create a Sunburst Chart\n     * @example\n     * // create a sunburst chart under #chart-container1 element using the default global chart group\n     * var chart1 = new SunburstChart('#chart-container1');\n     * // create a sunburst chart under #chart-container2 element using chart group A\n     * var chart2 = new SunburstChart('#chart-container2', 'chartGroupA');\n     *\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor(parent, chartGroup) {\n      super();\n      this._sliceCssClass = 'pie-slice';\n      this._emptyCssClass = 'empty-chart';\n      this._emptyTitle = 'empty';\n      this._radius = undefined;\n      this._givenRadius = undefined; // given radius, if any\n      this._innerRadius = 0;\n      this._ringSizes = null;\n      this._g = undefined;\n      this._cx = undefined;\n      this._cy = undefined;\n      this._minAngleForLabel = DEFAULT_MIN_ANGLE_FOR_LABEL$1;\n      this._externalLabelRadius = undefined;\n      this.colorAccessor(d => this.keyAccessor()(d));\n\n      // override cap mixin\n      this.ordering(pluck('key'));\n      this.title(d => `${this.keyAccessor()(d)}: ${this._extendedValueAccessor(d)}`);\n      this.label(d => this.keyAccessor()(d));\n      this.renderLabel(true);\n      this.transitionDuration(350);\n      this.anchor(parent, chartGroup);\n    }\n\n    // Handle cases if value corresponds to generated parent nodes\n    _extendedValueAccessor(d) {\n      if (d.path) {\n        return d.value;\n      }\n      return this.valueAccessor()(d);\n    }\n    _scaleRadius(ringIndex, y) {\n      if (ringIndex === 0) {\n        return this._innerRadius;\n      } else {\n        const customRelativeRadius = d3Array.sum(this.ringSizes().relativeRingSizes.slice(0, ringIndex));\n        const scaleFactor = ringIndex * (1 / this.ringSizes().relativeRingSizes.length) / customRelativeRadius;\n        const standardRadius = (y - this.ringSizes().rootOffset) / (1 - this.ringSizes().rootOffset) * (this._radius - this._innerRadius);\n        return this._innerRadius + standardRadius / scaleFactor;\n      }\n    }\n    _doRender() {\n      this.resetSvg();\n      this._g = this.svg().append('g').attr('transform', `translate(${this.cx()},${this.cy()})`);\n      this._drawChart();\n      return this;\n    }\n    _drawChart() {\n      // set radius from chart size if none given, or if given radius is too large\n      const maxRadius = d3Array.min([this.width(), this.height()]) / 2;\n      this._radius = this._givenRadius && this._givenRadius < maxRadius ? this._givenRadius : maxRadius;\n      const arcs = this._buildArcs();\n      let partitionedNodes, cdata;\n      // if we have data...\n      if (d3Array.sum(this.data(), this.valueAccessor())) {\n        cdata = utils.toHierarchy(this.data(), this.valueAccessor());\n        partitionedNodes = this._partitionNodes(cdata);\n        // First one is the root, which is not needed\n        partitionedNodes.nodes.shift();\n        this._g.classed(this._emptyCssClass, false);\n      } else {\n        // otherwise we'd be getting NaNs, so override\n        // note: abuse others for its ignoring the value accessor\n        cdata = utils.toHierarchy([], d => d.value);\n        partitionedNodes = this._partitionNodes(cdata);\n        this._g.classed(this._emptyCssClass, true);\n      }\n      this.ringSizes().rootOffset = partitionedNodes.rootOffset;\n      this.ringSizes().relativeRingSizes = partitionedNodes.relativeRingSizes;\n      if (this._g) {\n        const slices = this._g.selectAll(`g.${this._sliceCssClass}`).data(partitionedNodes.nodes);\n        this._createElements(slices, arcs, partitionedNodes.nodes);\n        this._updateElements(partitionedNodes.nodes, arcs);\n        this._removeElements(slices);\n        this._highlightFilter();\n        transition(this._g, this.transitionDuration(), this.transitionDelay()).attr('transform', `translate(${this.cx()},${this.cy()})`);\n      }\n    }\n    _createElements(slices, arcs, sunburstData) {\n      const slicesEnter = this._createSliceNodes(slices);\n      this._createSlicePath(slicesEnter, arcs);\n      this._createTitles(slicesEnter);\n      this._createLabels(sunburstData, arcs);\n    }\n    _createSliceNodes(slices) {\n      return slices.enter().append('g').attr('class', (d, i) => `${this._sliceCssClass} _${i} ${this._sliceCssClass}-level-${d.depth}`);\n    }\n    _createSlicePath(slicesEnter, arcs) {\n      const slicePath = slicesEnter.append('path').attr('fill', (d, i) => this._fill(d, i)).on('click', d3compat.eventHandler(d => this.onClick(d))).classed('dc-tabbable', this._keyboardAccessible).attr('d', d => this._safeArc(arcs, d));\n      if (this._keyboardAccessible) {\n        this._makeKeyboardAccessible(this.onClick);\n      }\n      const tranNodes = transition(slicePath, this.transitionDuration());\n      if (tranNodes.attrTween) {\n        const chart = this;\n        tranNodes.attrTween('d', function (d) {\n          return chart._tweenSlice(d, this);\n        });\n      }\n    }\n    _createTitles(slicesEnter) {\n      if (this.renderTitle()) {\n        slicesEnter.append('title').text(d => this.title()(d));\n      }\n    }\n    _positionLabels(labelsEnter, arcs) {\n      transition(labelsEnter, this.transitionDuration()).attr('transform', d => this._labelPosition(d, arcs)).attr('text-anchor', 'middle').text(d => {\n        // position label...\n        if (this._sliceHasNoData(d) || this._sliceTooSmall(d)) {\n          return '';\n        }\n        return this.label()(d);\n      });\n    }\n    _createLabels(sunburstData, arcs) {\n      if (this.renderLabel()) {\n        const labels = this._g.selectAll(`text.${this._sliceCssClass}`).data(sunburstData);\n        labels.exit().remove();\n        const labelsEnter = labels.enter().append('text').attr('class', (d, i) => {\n          let classes = `${this._sliceCssClass} _${i}`;\n          if (this._externalLabelRadius) {\n            classes += ' external';\n          }\n          return classes;\n        }).on('click', d3compat.eventHandler(d => this.onClick(d)));\n        this._positionLabels(labelsEnter, arcs);\n      }\n    }\n    _updateElements(sunburstData, arcs) {\n      this._updateSlicePaths(sunburstData, arcs);\n      this._updateLabels(sunburstData, arcs);\n      this._updateTitles(sunburstData);\n    }\n    _updateSlicePaths(sunburstData, arcs) {\n      const slicePaths = this._g.selectAll(`g.${this._sliceCssClass}`).data(sunburstData).select('path').attr('d', (d, i) => this._safeArc(arcs, d));\n      const tranNodes = transition(slicePaths, this.transitionDuration());\n      if (tranNodes.attrTween) {\n        const chart = this;\n        tranNodes.attrTween('d', function (d) {\n          return chart._tweenSlice(d, this);\n        });\n      }\n      tranNodes.attr('fill', (d, i) => this._fill(d, i));\n    }\n    _updateLabels(sunburstData, arcs) {\n      if (this.renderLabel()) {\n        const labels = this._g.selectAll(`text.${this._sliceCssClass}`).data(sunburstData);\n        this._positionLabels(labels, arcs);\n      }\n    }\n    _updateTitles(sunburstData) {\n      if (this.renderTitle()) {\n        this._g.selectAll(`g.${this._sliceCssClass}`).data(sunburstData).select('title').text(d => this.title()(d));\n      }\n    }\n    _removeElements(slices) {\n      slices.exit().remove();\n    }\n    _highlightFilter() {\n      const chart = this;\n      if (chart.hasFilter()) {\n        chart.selectAll(`g.${chart._sliceCssClass}`).each(function (d) {\n          if (chart._isSelectedSlice(d)) {\n            chart.highlightSelected(this);\n          } else {\n            chart.fadeDeselected(this);\n          }\n        });\n      } else {\n        chart.selectAll(`g.${chart._sliceCssClass}`).each(function (d) {\n          chart.resetHighlight(this);\n        });\n      }\n    }\n\n    /**\n     * Get or set the inner radius of the sunburst chart. If the inner radius is greater than 0px then the\n     * sunburst chart will be rendered as a doughnut chart. Default inner radius is 0px.\n     * @param {Number} [innerRadius=0]\n     * @returns {Number|SunburstChart}\n     */\n    innerRadius(innerRadius) {\n      if (!arguments.length) {\n        return this._innerRadius;\n      }\n      this._innerRadius = innerRadius;\n      return this;\n    }\n\n    /**\n     * Get or set the outer radius. If the radius is not set, it will be half of the minimum of the\n     * chart width and height.\n     * @param {Number} [radius]\n     * @returns {Number|SunburstChart}\n     */\n    radius(radius) {\n      if (!arguments.length) {\n        return this._givenRadius;\n      }\n      this._givenRadius = radius;\n      return this;\n    }\n\n    /**\n     * Get or set center x coordinate position. Default is center of svg.\n     * @param {Number} [cx]\n     * @returns {Number|SunburstChart}\n     */\n    cx(cx) {\n      if (!arguments.length) {\n        return this._cx || this.width() / 2;\n      }\n      this._cx = cx;\n      return this;\n    }\n\n    /**\n     * Get or set center y coordinate position. Default is center of svg.\n     * @param {Number} [cy]\n     * @returns {Number|SunburstChart}\n     */\n    cy(cy) {\n      if (!arguments.length) {\n        return this._cy || this.height() / 2;\n      }\n      this._cy = cy;\n      return this;\n    }\n\n    /**\n     * Get or set the minimal slice angle for label rendering. Any slice with a smaller angle will not\n     * display a slice label.\n     * @param {Number} [minAngleForLabel=0.5]\n     * @returns {Number|SunburstChart}\n     */\n    minAngleForLabel(minAngleForLabel) {\n      if (!arguments.length) {\n        return this._minAngleForLabel;\n      }\n      this._minAngleForLabel = minAngleForLabel;\n      return this;\n    }\n\n    /**\n     * Title to use for the only slice when there is no data.\n     * @param {String} [title]\n     * @returns {String|SunburstChart}\n     */\n    emptyTitle(title) {\n      if (arguments.length === 0) {\n        return this._emptyTitle;\n      }\n      this._emptyTitle = title;\n      return this;\n    }\n\n    /**\n     * Position slice labels offset from the outer edge of the chart.\n     *\n     * The argument specifies the extra radius to be added for slice labels.\n     * @param {Number} [externalLabelRadius]\n     * @returns {Number|SunburstChart}\n     */\n    externalLabels(externalLabelRadius) {\n      if (arguments.length === 0) {\n        return this._externalLabelRadius;\n      } else if (externalLabelRadius) {\n        this._externalLabelRadius = externalLabelRadius;\n      } else {\n        this._externalLabelRadius = undefined;\n      }\n      return this;\n    }\n\n    /**\n     * Constructs the default RingSizes parameter for {@link SunburstChart#ringSizes ringSizes()},\n     * which makes the rings narrower as they get farther away from the center.\n     *\n     * Can be used as a parameter to ringSizes() to reset the default behavior, or modified for custom ring sizes.\n     *\n     * @example\n     *   var chart = new dc.SunburstChart(...);\n     *   chart.ringSizes(chart.defaultRingSizes())\n     * @returns {RingSizes}\n     */\n    defaultRingSizes() {\n      return {\n        partitionDy: () => this._radius * this._radius,\n        scaleInnerRadius: d => d.data.path && d.data.path.length === 1 ? this._innerRadius : Math.sqrt(d.y0),\n        scaleOuterRadius: d => Math.sqrt(d.y1),\n        relativeRingSizesFunction: () => []\n      };\n    }\n\n    /**\n     * Constructs a RingSizes parameter for {@link SunburstChart#ringSizes ringSizes()}\n     * that will make the chart rings equally wide.\n     *\n     * @example\n     *   var chart = new dc.SunburstChart(...);\n     *   chart.ringSizes(chart.equalRingSizes())\n     * @returns {RingSizes}\n     */\n    equalRingSizes() {\n      return this.relativeRingSizes(ringCount => {\n        const result = [];\n        for (let i = 0; i < ringCount; i++) {\n          result.push(1 / ringCount);\n        }\n        return result;\n      });\n    }\n\n    /**\n     * Constructs a RingSizes parameter for {@link SunburstChart#ringSizes ringSizes()} using the given function\n     * to determine each rings width.\n     *\n     * * The function must return an array containing portion values for each ring/level of the chart.\n     * * The length of the array must match the number of rings of the chart at runtime, which is provided as the only\n     *   argument.\n     * * The sum of all portions from the array must be 1 (100%).\n     *\n     * @example\n     * // specific relative portions (the number of rings (3) is known in this case)\n     * chart.ringSizes(chart.relativeRingSizes(function (ringCount) {\n     *     return [.1, .3, .6];\n     * });\n     * @param {Function} [relativeRingSizesFunction]\n     * @returns {RingSizes}\n     */\n    relativeRingSizes(relativeRingSizesFunction) {\n      function assertPortionsArray(relativeSizes, numberOfRings) {\n        if (!Array.isArray(relativeSizes)) {\n          throw new BadArgumentException('relativeRingSizes function must return an array');\n        }\n        const portionsSum = d3Array.sum(relativeSizes);\n        if (Math.abs(portionsSum - 1) > constants.NEGLIGIBLE_NUMBER) {\n          throw new BadArgumentException(`relativeRingSizes : portions must add up to 1, but sum was ${portionsSum}`);\n        }\n        if (relativeSizes.length !== numberOfRings) {\n          throw new BadArgumentException(`relativeRingSizes : number of values must match number of rings (${numberOfRings}) but was ${relativeSizes.length}`);\n        }\n      }\n      return {\n        partitionDy: () => 1,\n        scaleInnerRadius: d => this._scaleRadius(d.data.path.length - 1, d.y0),\n        scaleOuterRadius: d => this._scaleRadius(d.data.path.length, d.y1),\n        relativeRingSizesFunction: ringCount => {\n          const result = relativeRingSizesFunction(ringCount);\n          assertPortionsArray(result, ringCount);\n          return result;\n        }\n      };\n    }\n\n    /**\n     * Get or set the strategy to use for sizing the charts rings.\n     *\n     * There are three strategies available\n     * * {@link SunburstChart#defaultRingSizes `defaultRingSizes`}: the rings get narrower farther away from the center\n     * * {@link SunburstChart#relativeRingSizes `relativeRingSizes`}: set the ring sizes as portions of 1\n     * * {@link SunburstChart#equalRingSizes `equalRingSizes`}: the rings are equally wide\n     *\n     * You can modify the returned strategy, or create your own, for custom ring sizing.\n     *\n     * RingSizes is a duck-typed interface that must support the following methods:\n     * * `partitionDy()`: used for\n     *   {@link https://github.com/d3/d3-hierarchy/blob/v1.1.9/README.md#partition_size `d3.partition.size`}\n     * * `scaleInnerRadius(d)`: takes datum and returns radius for\n     *    {@link https://github.com/d3/d3-shape/blob/v1.3.7/README.md#arc_innerRadius `d3.arc.innerRadius`}\n     * * `scaleOuterRadius(d)`: takes datum and returns radius for\n     *    {@link https://github.com/d3/d3-shape/blob/v1.3.7/README.md#arc_outerRadius `d3.arc.outerRadius`}\n     * * `relativeRingSizesFunction(ringCount)`: takes ring count and returns an array of portions that\n     *   must add up to 1\n     *\n     * @example\n     * // make rings equally wide\n     * chart.ringSizes(chart.equalRingSizes())\n     * // reset to default behavior\n     * chart.ringSizes(chart.defaultRingSizes()))\n     * @param {RingSizes} ringSizes\n     * @returns {Object|SunburstChart}\n     */\n    ringSizes(ringSizes) {\n      if (!arguments.length) {\n        if (!this._ringSizes) {\n          this._ringSizes = this.defaultRingSizes();\n        }\n        return this._ringSizes;\n      }\n      this._ringSizes = ringSizes;\n      return this;\n    }\n    _buildArcs() {\n      return d3Shape.arc().startAngle(d => d.x0).endAngle(d => d.x1).innerRadius(d => this.ringSizes().scaleInnerRadius(d)).outerRadius(d => this.ringSizes().scaleOuterRadius(d));\n    }\n    _isSelectedSlice(d) {\n      return this._isPathFiltered(d.path);\n    }\n    _isPathFiltered(path) {\n      for (let i = 0; i < this.filters().length; i++) {\n        const currentFilter = this.filters()[i];\n        if (currentFilter.isFiltered(path)) {\n          return true;\n        }\n      }\n      return false;\n    }\n\n    // returns all filters that are a parent or child of the path\n    _filtersForPath(path) {\n      const pathFilter = filters.HierarchyFilter(path);\n      const filtersList = [];\n      for (let i = 0; i < this.filters().length; i++) {\n        const currentFilter = this.filters()[i];\n        if (currentFilter.isFiltered(path) || pathFilter.isFiltered(currentFilter)) {\n          filtersList.push(currentFilter);\n        }\n      }\n      return filtersList;\n    }\n    _doRedraw() {\n      this._drawChart();\n      return this;\n    }\n    _partitionNodes(data) {\n      const getSortable = function (d) {\n        return {\n          'key': d.data.key,\n          'value': d.value\n        };\n      };\n      const _hierarchy = d3Hierarchy.hierarchy(data).sum(d => d.children ? 0 : this._extendedValueAccessor(d)).sort((a, b) => d3Array.ascending(this.ordering()(getSortable(a)), this.ordering()(getSortable(b))));\n      const _partition = d3Hierarchy.partition().size([2 * Math.PI, this.ringSizes().partitionDy()]);\n      _partition(_hierarchy);\n\n      // In D3v4 the returned data is slightly different, change it enough to suit our purposes.\n      const nodes = _hierarchy.descendants().map(d => {\n        d.key = d.data.key;\n        d.path = d.data.path;\n        return d;\n      });\n      const relativeSizes = this.ringSizes().relativeRingSizesFunction(_hierarchy.height);\n      return {\n        nodes,\n        rootOffset: _hierarchy.y1,\n        relativeRingSizes: relativeSizes\n      };\n    }\n    _sliceTooSmall(d) {\n      const angle = d.x1 - d.x0;\n      return isNaN(angle) || angle < this._minAngleForLabel;\n    }\n    _sliceHasNoData(d) {\n      return this._extendedValueAccessor(d) === 0;\n    }\n    _isOffCanvas(d) {\n      return !d || isNaN(d.x0) || isNaN(d.y0);\n    }\n    _fill(d, i) {\n      return this.getColor(d.data, i);\n    }\n    onClick(d) {\n      if (this._g.attr('class') === this._emptyCssClass) {\n        return;\n      }\n\n      // Must be better way to handle this, in legends we need to access `d.key`\n      const path = d.path || d.key;\n      const filter = filters.HierarchyFilter(path);\n\n      // filters are equal to parents or children of the path.\n      const filtersList = this._filtersForPath(path);\n      let exactMatch = false;\n      // clear out any filters that cover the path filtered.\n      for (let j = filtersList.length - 1; j >= 0; j--) {\n        const currentFilter = filtersList[j];\n        if (utils.arraysIdentical(currentFilter, path)) {\n          exactMatch = true;\n        }\n        this.filter(filtersList[j]);\n      }\n      events.trigger(() => {\n        // if it is a new filter - put it in.\n        if (!exactMatch) {\n          this.filter(filter);\n        }\n        this.redrawGroup();\n      });\n    }\n    _safeArc(_arc, d) {\n      let path = _arc(d);\n      if (path.indexOf('NaN') >= 0) {\n        path = 'M0,0';\n      }\n      return path;\n    }\n    _labelPosition(d, _arc) {\n      let centroid;\n      if (this._externalLabelRadius) {\n        centroid = d3Shape.arc().outerRadius(this._radius + this._externalLabelRadius).innerRadius(this._radius + this._externalLabelRadius).centroid(d);\n      } else {\n        centroid = _arc.centroid(d);\n      }\n      if (isNaN(centroid[0]) || isNaN(centroid[1])) {\n        return 'translate(0,0)';\n      } else {\n        return `translate(${centroid})`;\n      }\n    }\n    legendables() {\n      return this.data().map((d, i) => {\n        const legendable = {\n          name: d.key,\n          data: d.value,\n          others: d.others,\n          chart: this\n        };\n        legendable.color = this.getColor(d, i);\n        return legendable;\n      });\n    }\n    legendHighlight(d) {\n      this._highlightSliceFromLegendable(d, true);\n    }\n    legendReset(d) {\n      this._highlightSliceFromLegendable(d, false);\n    }\n    legendToggle(d) {\n      this.onClick({\n        key: d.name,\n        others: d.others\n      });\n    }\n    _highlightSliceFromLegendable(legendable, highlighted) {\n      this.selectAll('g.pie-slice').each(function (d) {\n        if (legendable.name === d.key) {\n          d3Selection.select(this).classed('highlight', highlighted);\n        }\n      });\n    }\n    _tweenSlice(d, element) {\n      let current = element._current;\n      if (this._isOffCanvas(current)) {\n        current = {\n          x0: 0,\n          x1: 0,\n          y0: 0,\n          y1: 0\n        };\n      }\n      const tweenTarget = {\n        x0: d.x0,\n        x1: d.x1,\n        y0: d.y0,\n        y1: d.y1\n      };\n      const i = d3Interpolate.interpolate(current, tweenTarget);\n      element._current = i(0);\n      return t => this._safeArc(this._buildArcs(), Object.assign({}, d, i(t)));\n    }\n  }\n  const sunburstChart = (parent, chartGroup) => new SunburstChart(parent, chartGroup);\n  const INPUT_CSS_CLASS = 'dc-text-filter-input';\n\n  /**\n   * Text Filter Widget\n   *\n   * The text filter widget is a simple widget designed to display an input field allowing to filter\n   * data that matches the text typed.\n   * As opposed to the other charts, this doesn't display any result and doesn't update its display,\n   * it's just to input an filter other charts.\n   *\n   * @mixes BaseMixin\n   */\n  class TextFilterWidget extends BaseMixin {\n    /**\n     * Create Text Filter widget\n     * @example\n     *\n     * var data = [{\"firstName\":\"John\",\"lastName\":\"Coltrane\"}{\"firstName\":\"Miles\",lastName:\"Davis\"}]\n     * var ndx = crossfilter(data);\n     * var dimension = ndx.dimension(function(d) {\n     *     return d.lastName.toLowerCase() + ' ' + d.firstName.toLowerCase();\n     * });\n     *\n     * new TextFilterWidget('#search')\n     *     .dimension(dimension);\n     *     // you don't need the group() function\n     *\n     * @param {String|node|d3.selection|CompositeChart} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector}\n     * specifying a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor(parent, chartGroup) {\n      super();\n      this._normalize = s => s.toLowerCase();\n      this._filterFunctionFactory = query => {\n        query = this._normalize(query);\n        return d => this._normalize(d).indexOf(query) !== -1;\n      };\n      this._placeHolder = 'search';\n      this.group(() => {\n        throw 'the group function on textFilterWidget should never be called, please report the issue';\n      });\n      this.anchor(parent, chartGroup);\n    }\n    _doRender() {\n      this.select('input').remove();\n      this._input = this.root().append('input').classed(INPUT_CSS_CLASS, true);\n      const chart = this;\n      this._input.on('input', function () {\n        chart.dimension().filterFunction(chart._filterFunctionFactory(this.value));\n        events.trigger(() => {\n          chart.redrawGroup();\n        }, constants.EVENT_DELAY);\n      });\n      this._doRedraw();\n      return this;\n    }\n    _doRedraw() {\n      this.root().selectAll('input').attr('placeholder', this._placeHolder);\n      return this;\n    }\n\n    /**\n     * This function will be called on values before calling the filter function.\n     * @example\n     * // This is the default\n     * chart.normalize(function (s) {\n     *   return s.toLowerCase();\n     * });\n     * @param {function} [normalize]\n     * @returns {TextFilterWidget|function}\n     */\n    normalize(normalize) {\n      if (!arguments.length) {\n        return this._normalize;\n      }\n      this._normalize = normalize;\n      return this;\n    }\n\n    /**\n     * Placeholder text in the search box.\n     * @example\n     * // This is the default\n     * chart.placeHolder('type to filter');\n     * @param {function} [placeHolder='search']\n     * @returns {TextFilterWidget|string}\n     */\n    placeHolder(placeHolder) {\n      if (!arguments.length) {\n        return this._placeHolder;\n      }\n      this._placeHolder = placeHolder;\n      return this;\n    }\n\n    /**\n     * This function will be called with the search text, it needs to return a function that will be used to\n     * filter the data. The default function checks presence of the search text.\n     * @example\n     * // This is the default\n     * function (query) {\n     *     query = _normalize(query);\n     *     return function (d) {\n     *         return _normalize(d).indexOf(query) !== -1;\n     *     };\n     * };\n     * @param {function} [filterFunctionFactory]\n     * @returns {TextFilterWidget|function}\n     */\n    filterFunctionFactory(filterFunctionFactory) {\n      if (!arguments.length) {\n        return this._filterFunctionFactory;\n      }\n      this._filterFunctionFactory = filterFunctionFactory;\n      return this;\n    }\n  }\n  const textFilterWidget = (parent, chartGroup) => new TextFilterWidget(parent, chartGroup);\n  const majorVer = +d3.version[0];\n  if (majorVer < 6) {\n    Object.assign(d3compat, {\n      eventHandler: handler => function eventHandler(d, _) {\n        handler.call(this, d, d3Selection.event);\n      },\n      // manual firing of event, usu for tests\n      callHandler: function callHandler(handler, that, _, d) {\n        // note: dropping event as well as any extra args\n        // d3@6 does not pass extra args anymore, so we can't use them and remain compatible\n        handler.call(that, d);\n      },\n      nester: _ref2 => {\n        let {\n          key,\n          sortKeys,\n          sortValues,\n          entries\n        } = _ref2;\n        const nester = d3Collection.nest().key(key);\n        if (sortKeys) {\n          nester.sortKeys(sortKeys);\n        }\n        if (sortValues) {\n          nester.sortValues(sortValues);\n        }\n        return nester.entries(entries);\n      },\n      pointer: (evt, elem) => d3Selection.mouse(elem)\n    });\n  }\n  const majorVer$1 = +d3.version[0];\n  if (majorVer$1 > 5) {\n    Object.assign(d3compat, {\n      eventHandler: handler => function eventHandler(event, d) {\n        handler.call(this, d, event);\n      },\n      // manual firing of event, usu for tests\n      callHandler: function callHandler(handler, that, event, d) {\n        handler.call(that, event, d);\n      },\n      nester: _ref3 => {\n        let {\n          key,\n          sortKeys,\n          sortValues,\n          entries\n        } = _ref3;\n        if (sortValues) {\n          entries = [...entries].sort(sortValues);\n        }\n        let out = d3Array.groups(entries, key);\n        if (sortKeys) {\n          out = out.sort(sortKeys);\n        }\n\n        // remap to d3@v5 structure\n        return out.map(e => ({\n          key: `${e[0]}`,\n          // d3@v5 always returns key as string\n          values: e[1]\n        }));\n      },\n      pointer: d3Selection.pointer\n    });\n  }\n  exports.BadArgumentException = BadArgumentException;\n  exports.BarChart = BarChart;\n  exports.BaseMixin = BaseMixin;\n  exports.BoxPlot = BoxPlot;\n  exports.BubbleChart = BubbleChart;\n  exports.BubbleMixin = BubbleMixin;\n  exports.BubbleOverlay = BubbleOverlay;\n  exports.CapMixin = CapMixin;\n  exports.CboxMenu = CboxMenu;\n  exports.ColorMixin = ColorMixin;\n  exports.CompositeChart = CompositeChart;\n  exports.Config = Config;\n  exports.CoordinateGridMixin = CoordinateGridMixin;\n  exports.DataCount = DataCount;\n  exports.DataGrid = DataGrid;\n  exports.DataTable = DataTable;\n  exports.GeoChoroplethChart = GeoChoroplethChart;\n  exports.HeatMap = HeatMap;\n  exports.HtmlLegend = HtmlLegend;\n  exports.InvalidStateException = InvalidStateException;\n  exports.Legend = Legend;\n  exports.LineChart = LineChart;\n  exports.Logger = Logger;\n  exports.MarginMixin = MarginMixin;\n  exports.NumberDisplay = NumberDisplay;\n  exports.PieChart = PieChart;\n  exports.RowChart = RowChart;\n  exports.ScatterPlot = ScatterPlot;\n  exports.SelectMenu = SelectMenu;\n  exports.SeriesChart = SeriesChart;\n  exports.StackMixin = StackMixin;\n  exports.SunburstChart = SunburstChart;\n  exports.TextFilterWidget = TextFilterWidget;\n  exports.afterTransition = afterTransition;\n  exports.barChart = barChart;\n  exports.baseMixin = baseMixin;\n  exports.boxPlot = boxPlot;\n  exports.bubbleChart = bubbleChart;\n  exports.bubbleOverlay = bubbleOverlay;\n  exports.cboxMenu = cboxMenu;\n  exports.chartRegistry = chartRegistry;\n  exports.compositeChart = compositeChart;\n  exports.config = config;\n  exports.constants = constants;\n  exports.d3Box = d3Box;\n  exports.d3compat = d3compat;\n  exports.dataCount = dataCount;\n  exports.dataGrid = dataGrid;\n  exports.dataTable = dataTable;\n  exports.deregisterAllCharts = deregisterAllCharts;\n  exports.deregisterChart = deregisterChart;\n  exports.events = events;\n  exports.filterAll = filterAll;\n  exports.filters = filters;\n  exports.geoChoroplethChart = geoChoroplethChart;\n  exports.hasChart = hasChart;\n  exports.heatMap = heatMap;\n  exports.htmlLegend = htmlLegend;\n  exports.instanceOfChart = instanceOfChart;\n  exports.legend = legend;\n  exports.lineChart = lineChart;\n  exports.logger = logger;\n  exports.numberDisplay = numberDisplay;\n  exports.optionalTransition = optionalTransition;\n  exports.pieChart = pieChart;\n  exports.pluck = pluck;\n  exports.printers = printers;\n  exports.redrawAll = redrawAll;\n  exports.refocusAll = refocusAll;\n  exports.registerChart = registerChart;\n  exports.renderAll = renderAll;\n  exports.renderlet = renderlet;\n  exports.rowChart = rowChart;\n  exports.scatterPlot = scatterPlot;\n  exports.selectMenu = selectMenu;\n  exports.seriesChart = seriesChart;\n  exports.sunburstChart = sunburstChart;\n  exports.textFilterWidget = textFilterWidget;\n  exports.transition = transition;\n  exports.units = units;\n  exports.utils = utils;\n  exports.version = version;\n  Object.defineProperty(exports, '__esModule', {\n    value: true\n  });\n});","map":{"version":3,"names":["BadArgumentException","Error","constants","CHART_CLASS","DEBUG_GROUP_CLASS","STACK_CLASS","DESELECTED_CLASS","SELECTED_CLASS","NODE_INDEX_NAME","GROUP_INDEX_NAME","DEFAULT_CHART_GROUP","EVENT_DELAY","NEGLIGIBLE_NUMBER","Logger","constructor","enableDebugLog","_alreadyWarned","warn","msg","console","log","warnOnce","logger","debug","Config","_defaultColors","_schemeCategory20c","dateFormat","d3TimeFormat","timeFormat","_renderlet","disableTransitions","defaultColors","colors","arguments","length","config","d3compat","eventHandler","handler","a","b","call","nester","_ref","key","sortKeys","sortValues","entries","pointer","ChartRegistry","_chartMap","_initializeChartGroup","group","has","chart","e","indexOf","register","push","deregister","i","anchorName","splice","clear","list","chartRegistry","registerChart","deregisterChart","hasChart","deregisterAllCharts","filterAll","charts","refocusAll","focus","renderAll","render","redrawAll","redraw","transition","selection","duration","delay","name","s","undefined","optionalTransition","enable","afterTransition","_transition","callback","empty","n","each","on","renderlet","_","instanceOfChart","o","Object","__dcFlag__","events","current","trigger","closure","setTimeout","filters","RangedFilter","low","high","range","Array","isFiltered","value","filterType","TwoDimensionalFilter","filter","f","RangedTwoDimensionalFilter","fromBottomLeft","Math","min","max","Infinity","x","y","HierarchyFilter","path","slice","InvalidStateException","pluck","d","utils","printSingleValue","Date","isFloat","fformat","isInteger","round","d3Format","format","_toTimeFunc","t","mappings","d3Time","timeSecond","timeMinute","timeHour","timeDay","timeWeek","timeMonth","timeYear","add","l","r","replace","getTime","offset","percentage","subtract","isNumber","isNegligible","clamp","val","constant","_idCounter","uniqueId","nameToId","toLowerCase","appendOrSelect","parent","selector","tag","element","select","append","safeNumber","arraysEqual","a1","a2","every","elem","valueOf","allChildren","node","paths","children","concat","toHierarchy","accessor","root","data","parts","currentNode","j","currentPath","nodeName","childNode","findChild","k","getAncestors","unshift","arraysIdentical","printers","map","join","units","integers","start","end","abs","ordinal","fp","precision","_f","resolution","floor","ceil","_defaultFilterHandler","dimension","filterExact","filterRange","filterFunction","_defaultHasFilterHandler","some","_defaultRemoveFilterHandler","_defaultAddFilterHandler","_defaultResetFilterHandler","BaseMixin","_svgDescription","_keyboardAccessible","_dimension","_group","_anchor","_root","_svg","_isChild","_minWidth","_defaultWidthCalc","width","getBoundingClientRect","_widthCalc","_minHeight","_defaultHeightCalc","height","_heightCalc","_width","_height","_useViewBoxResizing","_keyAccessor","_valueAccessor","_label","_ordering","_renderLabel","_title","keyAccessor","valueAccessor","_renderTitle","_controlsUseVisibility","_transitionDuration","_transitionDelay","_filterPrinter","_mandatoryAttributesList","_chartGroup","_listeners","d3Dispatch","dispatch","_legend","_commitHandler","_defaultData","all","_data","_filters","_filterHandler","_hasFilterHandler","_removeFilterHandler","_addFilterHandler","_resetFilterHandler","minWidth","minHeight","useViewBoxResizing","expireCache","_groupName","ordering","orderFunction","_computeOrderedGroups","from","sort","d3Array","ascending","sel","selectAll","anchor","chartGroup","classed","d3Selection","id","chartID","rootElement","svg","svgElement","resetSvg","remove","generateSvg","sizeSvg","attr","html","svgDescription","description","keyboardAccessible","filterPrinter","filterPrinterFunction","controlsUseVisibility","turnOnControls","attribute","style","text","turnOffControls","transitionDuration","transitionDelay","_mandatoryAttributes","checkForMandatoryAttributes","forEach","result","_doRender","_activateRenderlets","_makeKeyboardAccessible","onClickFunction","_len","onClickArgs","_key","tabElements","event","keyCode","preventDefault","_doRedraw","commitHandler","redrawGroup","error","renderGroup","_invokeFilteredListener","_invokeZoomedListener","hasFilterHandler","hasFilter","removeFilterHandler","addFilterHandler","resetFilterHandler","applyFilters","fs","replaceFilter","highlightSelected","fadeDeselected","resetHighlight","onClick","datum","filterHandler","legendables","legendHighlight","legendReset","legendToggle","isLegendableHidden","label","labelFunction","enableLabels","renderLabel","title","titleFunction","renderTitle","legend","options","opts","applyOptions","apply","listener","renderletFunction","baseMixin","ColorMixin","Base","_colors","d3Scale","scaleOrdinal","_colorAccessor","_colorCalculator","getColor","calculateColorDomain","newDomain","colorAccessor","domain","colorScale","scaleQuantize","ordinalColors","linearColors","scaleLinear","interpolate","d3Interpolate","interpolateHcl","colorDomain","colorCalculator","BubbleMixin","_maxBubbleRelativeSize","_minRadiusWithLabel","_sortBubbleSize","_elasticRadius","_excludeElasticZero","BUBBLE_NODE_CLASS","BUBBLE_CLASS","MIN_RADIUS","radiusAccessor","radiusValueAccessor","descending","_r","_rValueAccessor","bubbleRadiusScale","elasticRadius","calculateRadiusDomain","rMin","rMax","values","bubbleR","isNaN","_labelFunction","_shouldLabel","_labelOpacity","_labelPointerEvent","_doRenderLabel","bubbleGEnter","doUpdateLabels","labels","_titleFunction","_doRenderTitles","g","doUpdateTitles","sortBubbleSize","minRadius","radius","minRadiusWithLabel","maxBubbleRelativeSize","relativeSize","excludeElasticZero","excludeZero","fadeDeselectedArea","isSelectedNode","CapMixin","_cap","_takeFront","_othersLabel","_othersGrouper","topItems","restItems","restItemsSum","sum","restKeys","others","othersLabel","kv","items","rest","cappedKeyAccessor","cappedValueAccessor","cap","count","takeFront","othersGrouper","grouperFunction","MarginMixin","_margin","top","right","bottom","left","margins","effectiveWidth","effectiveHeight","GRID_LINE_CLASS","HORIZONTAL_CLASS","VERTICAL_CLASS","Y_AXIS_LABEL_CLASS","X_AXIS_LABEL_CLASS","CUSTOM_BRUSH_HANDLE_CLASS","DEFAULT_AXIS_LABEL_PADDING","CoordinateGridMixin","d3ScaleChromatic","schemeCategory10","_parent","_g","_chartBodyG","_x","_origX","_xOriginalDomain","_xAxis","_xUnits","_xAxisPadding","_xAxisPaddingUnit","_xElasticity","_xAxisLabel","_xAxisLabelPadding","_lastXDomain","_y","_yAxis","_yAxisPadding","_yElasticity","_yAxisLabel","_yAxisLabelPadding","_brush","d3Brush","brushX","_gBrush","_brushOn","_parentBrushOn","_round","_ignoreBrushEvents","_renderHorizontalGridLine","_renderVerticalGridLine","_resizing","_unitCount","_zoomScale","_zoomOutRestrict","_zoom","d3Zoom","zoom","evt","_onZoom","_nullZoom","_hasBeenMouseZoomable","_ignoreZoomEvents","_rangeChart","_focusChart","_mouseZoomable","_clipPadding","_fOuterRangeBandPadding","_fRangeBandPadding","_useRightYAxis","_useTopXAxis","rescale","resizing","rangeChart","focusChart","zoomScale","extent","zoomOutRestrict","_generateG","href","window","location","split","_getClipPathId","gElement","mouseZoomable","chartBodyG","xScale","xOriginalDomain","xUnits","xAxis","_createXAxis","elasticX","xAxisPadding","padding","xAxisPaddingUnit","unit","xUnitCount","isOrdinal","useRightYAxis","useTopXAxis","_useOuterPadding","_ordinalXDomain","groups","d3Axis","axisTop","axisBottom","_prepareXAxis","xAxisMin","xAxisMax","bandwidth","scaleBand","xdom","xAxisLength","paddingInner","paddingOuter","scale","_renderVerticalGridLines","renderXAxis","axisXG","_xAxisY","axisXLab","axisXLabY","xAxisLabel","gridLineG","insert","ticks","tickValues","tickArguments","lines","linesGEnter","enter","exit","labelText","_createYAxis","axisRight","axisLeft","_prepareYAxis","elasticY","_min","yAxisMin","_max","yAxisMax","rangeRound","yAxisHeight","_renderHorizontalGridLinesForAxis","renderYAxisLabel","axisClass","rotation","labelXPosition","axisYLab","labelYPosition","renderYAxisAt","axis","position","axisYG","renderYAxis","axisPosition","_yAxisX","labelPosition","yAxisLabel","yScale","yAxis","renderHorizontalGridLines","renderVerticalGridLines","m","yAxisPadding","_rangeBandPadding","_outerRangeBandPadding","redrawBrush","brush","renderBrush","doTransition","_brushing","setBrushExtents","createBrushHandlePaths","gBrush","brushHandles","type","merge","resizeHandlePath","extendBrush","brushSelection","brushIsEmpty","invert","rangedFilter","applyBrushSelection","_withoutBrushEvents","oldValue","move","scaledSelection","clipPadding","_generateClipPath","defs","chartBodyClip","_preprocessData","_drawChart","_configureMouseZoom","plotData","copy","_enableMouseZoom","_disableMouseZoom","scaleExtent","zoomScaleMin","translateExtent","_updateD3zoomTransform","_zoomHandler","noRaiseEvents","domFilter","_hasRangeSelected","_domainToZoomTransform","origDomain","xt","zoomIdentity","translate","_withoutZoomEvents","transform","rescaleX","_checkExtents","ext","outerLimits","refocused","c","brushOn","parentBrushOn","d3Box","Number","whiskers","boxWhiskers","quartiles","boxQuartiles","tickFormat","renderDataPoints","dataRadius","dataOpacity","dataWidthPortion","showOutliers","boldOutlier","box","index","quartileData","whiskerIndices","whiskerData","_i","outlierIndices","pointIndices","x1","x0","__chart__","center","_box","medianLine","whisker","outlierClass","outlierSize","outlierX","random","outlier","point","boxTick","whiskerTick","d3Timer","timerFlush","quantile","StackMixin","_stackLayout","d3Shape","stack","_stack","_titles","_hidableStacks","_evadeDomainFilter","layers","_visibility","_prepareValues","v4data","v","col","layer","keys","v4result","stackLayout","series","ys","y0","y1","layerIdx","valAccessor","String","allValues","hidden","domainValues","_domainFilter","evadeDomainFilter","xDomain","p","hidableStacks","_findLayerByName","hideStack","stackName","showStack","getValueAccessorByIndex","_flattenStack","titleAccessor","flat","ordered","color","MIN_BAR_WIDTH","DEFAULT_GAP_BETWEEN_BARS","LABEL_PADDING","BarChart","_gap","_centerBar","_alwaysUseRounding","_barWidth","outerPadding","_calculateBarWidth","last","size","_renderBars","_renderLabels","_barHeight","_labelXPos","_labelYPos","layerIndex","labelsEnterUpdate","_barXPos","bars","barsEnterUpdate","numberOfBars","barPadding","centerBar","gap","alwaysUseRounding","colorFilter","inv","item","match","res","barChart","defaultWhiskersIQR","q1","q3","iqr","BoxPlot","_whiskerIqrFactor","_whiskersIqr","_whiskers","_tickFormat","_renderDataPoints","_dataOpacity","_dataWidthPortion","_showOutliers","_boldOutlier","_yRangePadding","_boxWidth","innerChartWidth","boxPadding","boxWidth","_boxTransform","xOffset","_calculatedBoxWidth","boxesG","boxesGEnterUpdate","_renderBoxes","_updateBoxes","_removeBoxes","boxesGEnter","_minDataValue","_maxDataValue","_yAxisRangeRatio","yRangePadding","show","opacity","boxPlot","BubbleChart","_bubbleLocator","_bubbleX","_bubbleY","bubbleG","order","_removeNodes","_renderNodes","_updateNodes","isFinite","bubbleChart","BUBBLE_OVERLAY_CLASS","BubbleOverlay","_points","_initOverlayG","_initializeBubbles","_mapData","nodeG","_getNodeG","circle","bubbleNodeClass","_updateBubbles","flag","debugG","debugText","bubbleOverlay","GROUP_CSS_CLASS","ITEM_CSS_CLASS","CboxMenu","_cbox","_promptText","_multiple","_inputType","_promptValue","_uniqueId","_filterDisplayed","_order","_renderOptions","property","_onChange","li","target","checked","nodes","option","onChange","promptText","filterDisplayed","multiple","promptValue","cboxMenu","SUB_CHART_CLASS","DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING","CompositeChart","_children","_childOptions","_shareColors","_shareTitle","_alignYAxes","_rightYAxis","_rightYAxisLabel","_rightYAxisLabelPadding","_rightY","_rightAxisGridLines","child","_generateChildG","_leftYAxisChildren","_rightYAxisChildren","ranges","_calculateYAxisRanges","_prepareLeftYAxis","_prepareRightYAxis","rightYAxis","rightYAxisLabel","lyAxisMin","lyAxisMax","ryAxisMin","ryAxisMax","_yAxisMin","_yAxisMax","_rightYAxisMin","_rightYAxisMax","alignYAxes","_alignYAxisRanges","extentRatio","needDomain","rightY","needRange","useRightAxisGridLines","childOptions","compose","subChartArray","_setChildrenProperty","prop","shareColors","shareTitle","_getYAxisMin","_getYAxisMax","_getAllXAxisMinFromChildCharts","_getAllXAxisMaxFromChildCharts","reduce","compositeChart","DataCount","_formatNumber","_crossfilter","_groupAll","_html","formatNumber","formatter","tot","crossfilter","groupAll","selected","cf","dataCount","LABEL_CSS_CLASS","ITEM_CSS_CLASS$1","SECTION_CSS_CLASS","GRID_CSS_CLASS","DataGrid","_section","_size","JSON","stringify","_sortBy","_beginSlice","_endSlice","_htmlSection","_renderItems","_renderSections","sections","_nestEntries","itemSection","section","beginSlice","endSlice","htmlSection","htmlGroup","sortBy","sortByFunction","dataGrid","LABEL_CSS_CLASS$1","ROW_CSS_CLASS","COLUMN_CSS_CLASS","SECTION_CSS_CLASS$1","HEAD_CSS_CLASS","DataTable","_columns","_showSections","_renderRows","_doColumnValueFormat","_doColumnHeaderFormat","_doColumnHeaderFnToString","_doColumnHeaderCapitalize","charAt","toUpperCase","i1","i2","lastIndexOf","substring","i3","bAllFunctions","thead","headrow","headcols","rowSection","rows","rowEnter","columns","showSections","showGroups","dataTable","GeoChoroplethChart","_geoPath","d3Geo","geoPath","_projectionFlag","_projection","_geoJsons","states","regionG","_geoJson","_getGeoPath","_plotData","_generateLayeredData","_isDataLayer","_renderRegionG","_renderPaths","_renderTitles","_layerSelector","_isSelected","_isDeselected","layerNameClass","regionClass","baseClasses","_getKey","currentFill","selectedRegion","overlayGeoJson","json","projection","geoAlbersUsa","geoJsons","removeGeoJson","geoChoroplethChart","DEFAULT_BORDER_RADIUS","HeatMap","_chartBody","_cols","_rows","_colOrdering","_rowOrdering","_colScale","_rowScale","_xBorderRadius","_yBorderRadius","_colsLabel","_rowsLabel","_xAxisOnClick","_filterAxis","_yAxisOnClick","_boxOnClick","colsLabel","rowsLabel","cellsOnAxis","unfilteredCellsOnAxis","filtersList","nonstandardFilter","_filter","isArray","rowOrdering","cols","colOrdering","rowCount","colCount","boxHeight","boxes","gEnter","boxOnClick","gCols","gColsText","xAxisOnClick","gRows","gRowsText","yAxisOnClick","xBorderRadius","yBorderRadius","heatMap","HtmlLegend","_htmlLegendDivCssClass","_legendItemCssClassHorizontal","_legendItemCssClassVertical","_container","_legendText","_maxItems","_horizontal","_legendItemClass","_highlightSelected","_defaultLegendItemCssClass","container","legendItemClassName","itemEnter","_makeLegendKeyboardAccessible","legendItemClass","horizontal","legendText","maxItems","htmlLegend","LABEL_GAP","Legend","_itemHeight","_legendWidth","_itemWidth","_autoItemWidth","itemHeight","legendWidth","itemWidth","autoItemWidth","_legendItemHeight","self","clientHeight","cumulativeLegendTextWidth","row","getBBox","translateBy","DEFAULT_DOT_RADIUS","TOOLTIP_G_CLASS","DOT_CIRCLE_CLASS","Y_AXIS_REF_LINE_CLASS","X_AXIS_REF_LINE_CLASS","DEFAULT_DOT_OPACITY","LABEL_PADDING$1","LineChart","_renderArea","_dotRadius","_dataPointRadius","_dataPointFillOpacity","_dataPointStrokeOpacity","_curve","_interpolate","_tension","_defined","_dashStyle","_xyTipsOn","chartBody","layersList","layersEnter","_drawLine","_drawArea","_drawDots","_drawLabels","curve","tension","defined","dashStyle","renderArea","_getColor","_getCurveFactory","mapping","curveLinear","curveLinearClosed","curveStep","curveStepBefore","curveStepAfter","curveBasis","curveBasisOpen","curveBasisClosed","curveBundle","curveCardinal","curveCardinalOpen","curveCardinalClosed","curveMonotoneX","_line","line","_safeD","_area","area","xyTipsOn","tooltipListClass","tooltips","points","_createRefLines","dots","dotsEnterModify","_getDotRadius","dot","_showDot","_showRefLines","_hideDot","_hideRefLines","_doRenderTitle","labelsEnterModify","yRefLine","xRefLine","yAxisX","yAxisRefPathD","xAxisRefPathD","dotRadius","fillOpacity","strokeOpacity","_colorFilter","dashstyle","lineChart","SPAN_CLASS","NumberDisplay","one","none","_lastValue","_ariaLiveRegion","valObj","_maxBin","sorted","newValue","span","ease","d3Ease","easeQuad","tween","interpStart","interp","interpolateNumber","num","innerHTML","ariaLiveRegion","numberDisplay","DEFAULT_MIN_ANGLE_FOR_LABEL","PieChart","_sliceCssClass","_labelCssClass","_sliceGroupCssClass","_labelGroupCssClass","_emptyCssClass","_emptyTitle","_radius","_givenRadius","_innerRadius","_externalRadiusPadding","_cx","_cy","_minAngleForLabel","_externalLabelRadius","_drawPaths","slicesCap","cx","cy","maxRadius","arcs","_buildArcs","pieLayout","_pieLayout","pieData","slices","_removeElements","_createElements","_updateElements","_highlightFilter","slicesEnter","_createSliceNodes","_createSlicePath","_createTitles","_createLabels","slicePath","_fill","_onClick","_safeArc","tranNodes","attrTween","_tweenPie","_applyLabelText","_sliceHasNoData","_sliceTooSmall","_isSelectedSlice","_positionLabels","_labelPosition","_highlightSlice","whether","labelsEnter","classes","_updateLabelPaths","polyline","arc2","arc","outerRadius","innerRadius","_current","startAngle","endAngle","d2","centroid","_updateSlicePaths","_updateLabels","_updateTitles","slicePaths","externalRadiusPadding","minAngleForLabel","pie","angle","_isOffCanvas","_arc","emptyTitle","externalLabels","externalLabelRadius","drawPaths","legendable","_highlightSliceFromLegendable","highlighted","pieChart","RowChart","_labelOffsetX","_labelOffsetY","_hasLabelOffsetY","_dyOffset","_titleLabelOffsetX","_fixedBarHeight","_rowCssClass","_titleRowCssClass","_renderTitleLabel","_elasticX","_rowData","rowsCap","_calculateAxisScale","_extent","_drawAxis","axisG","_drawGridLines","_rootValue","rect","_isSelectedRow","_translateX","renderTitleLabel","lab","titlelab","fixedBarHeight","labelOffsetX","labelOffsetY","labelOffsety","titleLabelOffsetX","rowChart","ScatterPlot","_symbol","symbol","_existenceAccessor","originalKeyAccessor","existenceAccessor","_highlightedSize","_symbolSize","_excludedSize","_excludedColor","_excludedOpacity","_emptySize","_emptyOpacity","_nonemptyOpacity","_emptyColor","_filtered","_canvas","_context","_useCanvas","_elementSize","_canvasElementSize","sqrt","PI","pow","_locator","svgSel","rootSel","svgLeft","parseInt","svgTop","devicePixelRatio","getContext","clip","imageSmoothingQuality","_resizeCanvas","useCanvas","canvas","canvasElement","context","_plotOnCanvas","legendHighlightDatum","clearRect","cOpacity","excludedOpacity","cColor","excludedColor","cSize","isHighlighted","fadeOutOpacity","save","globalAlpha","beginPath","fillStyle","fill","restore","_plotOnSVG","symbols","_d","customSymbol","symbolSize","highlightedSize","excludedSize","emptySize","hiddenSize","emptyColor","emptyOpacity","nonemptyOpacity","_resizeSymbolsWhere","condition","oldSize","coord","ranged2DFilter","scatterPlot","SELECT_CSS_CLASS","OPTION_CSS_CLASS","SelectMenu","_select","_numberVisible","_setAttributes","selectedOptions","prototype","numberVisible","selectMenu","SeriesChart","_keySort","_charts","_chartFunction","_seriesAccessor","_seriesSort","_valueSort","_compose","keep","childrenChanged","nesting","sub","subChart","_clearChart","_resetChildren","bind","chartFunction","seriesAccessor","seriesSort","sortFunction","valueSort","seriesChart","DEFAULT_MIN_ANGLE_FOR_LABEL$1","SunburstChart","_ringSizes","_extendedValueAccessor","_scaleRadius","ringIndex","customRelativeRadius","ringSizes","relativeRingSizes","scaleFactor","standardRadius","rootOffset","partitionedNodes","cdata","_partitionNodes","shift","sunburstData","depth","_tweenSlice","defaultRingSizes","partitionDy","scaleInnerRadius","scaleOuterRadius","relativeRingSizesFunction","equalRingSizes","ringCount","assertPortionsArray","relativeSizes","numberOfRings","portionsSum","_isPathFiltered","currentFilter","_filtersForPath","pathFilter","getSortable","_hierarchy","d3Hierarchy","hierarchy","_partition","partition","descendants","exactMatch","tweenTarget","assign","sunburstChart","INPUT_CSS_CLASS","TextFilterWidget","_normalize","_filterFunctionFactory","query","_placeHolder","_input","normalize","placeHolder","filterFunctionFactory","textFilterWidget","majorVer","d3","version","callHandler","that","_ref2","d3Collection","nest","mouse","majorVer$1","_ref3","out"],"sources":["/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/core/bad-argument-exception.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/core/constants.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/core/logger.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/core/config.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/core/chart-registry.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/core/core.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/core/events.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/core/filters.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/core/invalid-state-exception.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/core/utils.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/core/printers.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/core/units.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/base/base-mixin.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/base/color-mixin.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/base/bubble-mixin.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/base/cap-mixin.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/base/margin-mixin.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/base/coordinate-grid-mixin.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/base/d3.box.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/base/stack-mixin.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/bar-chart.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/box-plot.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/bubble-chart.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/bubble-overlay.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/cbox-menu.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/composite-chart.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/data-count.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/data-grid.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/data-table.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/geo-choropleth-chart.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/heatmap.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/html-legend.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/legend.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/line-chart.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/number-display.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/pie-chart.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/row-chart.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/scatter-plot.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/select-menu.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/series-chart.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/sunburst-chart.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/charts/text-filter-widget.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/compat/d3v5.js","/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/dc/src/compat/d3v6.js"],"sourcesContent":["\nexport class BadArgumentException extends Error { }\n","export const constants = {\n    CHART_CLASS: 'dc-chart',\n    DEBUG_GROUP_CLASS: 'debug',\n    STACK_CLASS: 'stack',\n    DESELECTED_CLASS: 'deselected',\n    SELECTED_CLASS: 'selected',\n    NODE_INDEX_NAME: '__index__',\n    GROUP_INDEX_NAME: '__group_index__',\n    DEFAULT_CHART_GROUP: '__default_chart_group__',\n    EVENT_DELAY: 40,\n    NEGLIGIBLE_NUMBER: 1e-10\n};\n","/**\n * Provides basis logging and deprecation utilities\n */\nexport class Logger {\n\n    constructor () {\n        /**\n         * Enable debug level logging. Set to `false` by default.\n         * @name enableDebugLog\n         * @memberof Logger\n         * @instance\n         */\n        this.enableDebugLog = false;\n\n        this._alreadyWarned = {};\n    }\n\n    /**\n     * Put a warning message to console\n     * @example\n     * logger.warn('Invalid use of .tension on CurveLinear');\n     * @param {String} [msg]\n     * @returns {Logger}\n     */\n    warn (msg) {\n        if (console) {\n            if (console.warn) {\n                console.warn(msg);\n            } else if (console.log) {\n                console.log(msg);\n            }\n        }\n\n        return this;\n    }\n\n    /**\n     * Put a warning message to console. It will warn only on unique messages.\n     * @example\n     * logger.warnOnce('Invalid use of .tension on CurveLinear');\n     * @param {String} [msg]\n     * @returns {Logger}\n     */\n    warnOnce (msg) {\n        if (!this._alreadyWarned[msg]) {\n            this._alreadyWarned[msg] = true;\n\n            logger.warn(msg);\n        }\n\n        return this;\n    }\n\n    /**\n     * Put a debug message to console. It is controlled by `logger.enableDebugLog`\n     * @example\n     * logger.debug('Total number of slices: ' + numSlices);\n     * @param {String} [msg]\n     * @returns {Logger}\n     */\n    debug (msg) {\n        if (this.enableDebugLog && console) {\n            if (console.debug) {\n                console.debug(msg);\n            } else if (console.log) {\n                console.log(msg);\n            }\n        }\n\n        return this;\n    }\n}\n\nexport const logger = new Logger();\n","import {timeFormat} from 'd3-time-format';\n\nimport {logger} from './logger';\n\n/**\n * General configuration\n */\nexport class Config {\n    constructor () {\n        this._defaultColors = Config._schemeCategory20c;\n\n        /**\n         * The default date format for dc.js\n         * @type {Function}\n         * @default d3.timeFormat('%m/%d/%Y')\n         */\n        this.dateFormat = timeFormat('%m/%d/%Y');\n\n        this._renderlet = null;\n\n        /**\n         * If this boolean is set truthy, all transitions will be disabled, and changes to the charts will happen\n         * immediately.\n         * @type {Boolean}\n         * @default false\n         */\n        this.disableTransitions = false;\n    }\n\n    /**\n     * Set the default color scheme for ordinal charts. Changing it will impact all ordinal charts.\n     *\n     * By default it is set to a copy of\n     * `d3.schemeCategory20c` for backward compatibility. This color scheme has been\n     * [removed from D3v5](https://github.com/d3/d3/blob/master/CHANGES.md#changes-in-d3-50).\n     * In DC 3.1 release it will change to a more appropriate default.\n     *\n     * @example\n     * config.defaultColors(d3.schemeSet1)\n     * @param {Array} [colors]\n     * @returns {Array|config}\n     */\n    defaultColors (colors) {\n        if (!arguments.length) {\n            // Issue warning if it uses _schemeCategory20c\n            if (this._defaultColors === Config._schemeCategory20c) {\n                logger.warnOnce('You are using d3.schemeCategory20c, which has been removed in D3v5. ' +\n                    'See the explanation at https://github.com/d3/d3/blob/master/CHANGES.md#changes-in-d3-50. ' +\n                    'DC is using it for backward compatibility, however it will be changed in DCv3.1. ' +\n                    'You can change it by calling dc.config.defaultColors(newScheme). ' +\n                    'See https://github.com/d3/d3-scale-chromatic for some alternatives.');\n            }\n            return this._defaultColors;\n        }\n        this._defaultColors = colors;\n        return this;\n    }\n\n}\n\n// D3v5 has removed schemeCategory20c, copied here for backward compatibility\nConfig._schemeCategory20c = [\n    '#3182bd', '#6baed6', '#9ecae1', '#c6dbef', '#e6550d',\n    '#fd8d3c', '#fdae6b', '#fdd0a2', '#31a354', '#74c476',\n    '#a1d99b', '#c7e9c0', '#756bb1', '#9e9ac8', '#bcbddc',\n    '#dadaeb', '#636363', '#969696', '#bdbdbd', '#d9d9d9'];\n\n/**\n * General configuration object; see {@link Config} for members.\n */\nexport const config = new Config();\n\n/**\n * d3.js compatiblity layer\n */\nexport const d3compat = {\n    eventHandler: handler => function eventHandler (a, b) {\n        console.warn('No d3.js compatbility event handler registered, defaulting to v6 behavior.');\n        handler.call(this, b, a);\n    },\n    nester: ({key, sortKeys, sortValues, entries}) => {\n        throw new Error('No d3.js compatbility nester registered, load v5 or v6 compability layer.');\n    },\n    pointer: () => { throw new Error('No d3.js compatbility pointer registered, load v5 or v6 compability layer.'); }\n};\n","import {constants} from './constants';\nimport {config} from './config';\n\n/**\n * The ChartRegistry maintains sets of all instantiated dc.js charts under named groups\n * and the default group. There is a single global ChartRegistry object named `chartRegistry`\n *\n * A chart group often corresponds to a crossfilter instance. It specifies\n * the set of charts which should be updated when a filter changes on one of the charts or when the\n * global functions {@link filterAll filterAll}, {@link refocusAll refocusAll},\n * {@link renderAll renderAll}, {@link redrawAll redrawAll}, or chart functions\n * {@link baseMixin#renderGroup baseMixin.renderGroup},\n * {@link baseMixin#redrawGroup baseMixin.redrawGroup} are called.\n */\nclass ChartRegistry {\n    constructor () {\n        // chartGroup:string => charts:array\n        this._chartMap = {};\n    }\n\n    _initializeChartGroup (group) {\n        if (!group) {\n            group = constants.DEFAULT_CHART_GROUP;\n        }\n\n        if (!(this._chartMap)[group]) {\n            (this._chartMap)[group] = [];\n        }\n\n        return group;\n    }\n\n    /**\n     * Determine if a given chart instance resides in any group in the registry.\n     * @param {Object} chart dc.js chart instance\n     * @returns {Boolean}\n     */\n    has (chart) {\n        for (const e in this._chartMap) {\n            if ((this._chartMap)[e].indexOf(chart) >= 0) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Add given chart instance to the given group, creating the group if necessary.\n     * If no group is provided, the default group `constants.DEFAULT_CHART_GROUP` will be used.\n     * @param {Object} chart dc.js chart instance\n     * @param {String} [group] Group name\n     * @return {undefined}\n     */\n    register (chart, group) {\n        const _chartMap = this._chartMap;\n        group = this._initializeChartGroup(group);\n        _chartMap[group].push(chart);\n    }\n\n    /**\n     * Remove given chart instance from the given group, creating the group if necessary.\n     * If no group is provided, the default group `constants.DEFAULT_CHART_GROUP` will be used.\n     * @param {Object} chart dc.js chart instance\n     * @param {String} [group] Group name\n     * @return {undefined}\n     */\n    deregister (chart, group) {\n        group = this._initializeChartGroup(group);\n        for (let i = 0; i < (this._chartMap)[group].length; i++) {\n            if ((this._chartMap)[group][i].anchorName() === chart.anchorName()) {\n                (this._chartMap)[group].splice(i, 1);\n                break;\n            }\n        }\n    }\n\n    /**\n     * Clear given group if one is provided, otherwise clears all groups.\n     * @param {String} group Group name\n     * @return {undefined}\n     */\n    clear (group) {\n        if (group) {\n            delete (this._chartMap)[group];\n        } else {\n            this._chartMap = {};\n        }\n    }\n\n    /**\n     * Get an array of each chart instance in the given group.\n     * If no group is provided, the charts in the default group are returned.\n     * @param {String} [group] Group name\n     * @returns {Array<Object>}\n     */\n    list (group) {\n        group = this._initializeChartGroup(group);\n        return (this._chartMap)[group];\n    }\n}\n\n/**\n * The chartRegistry object maintains sets of all instantiated dc.js charts under named groups\n * and the default group. See {@link ChartRegistry ChartRegistry} for its methods.\n */\nexport const chartRegistry = new ChartRegistry();\n\n/**\n * Add given chart instance to the given group, creating the group if necessary.\n * If no group is provided, the default group `constants.DEFAULT_CHART_GROUP` will be used.\n * @function registerChart\n * @param {Object} chart dc.js chart instance\n * @param {String} [group] Group name\n * @return {undefined}\n */\nexport const registerChart = function (chart, group) {\n    chartRegistry.register(chart, group);\n};\n\n/**\n * Remove given chart instance from the given group, creating the group if necessary.\n * If no group is provided, the default group `constants.DEFAULT_CHART_GROUP` will be used.\n * @function deregisterChart\n * @param {Object} chart dc.js chart instance\n * @param {String} [group] Group name\n * @return {undefined}\n */\nexport const deregisterChart = function (chart, group) {\n    chartRegistry.deregister(chart, group);\n};\n\n/**\n * Determine if a given chart instance resides in any group in the registry.\n * @function hasChart\n * @param {Object} chart dc.js chart instance\n * @returns {Boolean}\n */\nexport const hasChart = function (chart) {\n    return chartRegistry.has(chart);\n};\n\n/**\n * Clear given group if one is provided, otherwise clears all groups.\n * @function deregisterAllCharts\n * @param {String} group Group name\n * @return {undefined}\n */\nexport const deregisterAllCharts = function (group) {\n    chartRegistry.clear(group);\n};\n\n/**\n * Clear all filters on all charts within the given chart group. If the chart group is not given then\n * only charts that belong to the default chart group will be reset.\n * @function filterAll\n * @param {String} [group]\n * @return {undefined}\n */\nexport const filterAll = function (group) {\n    const charts = chartRegistry.list(group);\n    for (let i = 0; i < charts.length; ++i) {\n        charts[i].filterAll();\n    }\n};\n\n/**\n * Reset zoom level / focus on all charts that belong to the given chart group. If the chart group is\n * not given then only charts that belong to the default chart group will be reset.\n * @function refocusAll\n * @param {String} [group]\n * @return {undefined}\n */\nexport const refocusAll = function (group) {\n    const charts = chartRegistry.list(group);\n    for (let i = 0; i < charts.length; ++i) {\n        if (charts[i].focus) {\n            charts[i].focus();\n        }\n    }\n};\n\n/**\n * Re-render all charts belong to the given chart group. If the chart group is not given then only\n * charts that belong to the default chart group will be re-rendered.\n * @function renderAll\n * @param {String} [group]\n * @return {undefined}\n */\nexport const renderAll = function (group) {\n    const charts = chartRegistry.list(group);\n    for (let i = 0; i < charts.length; ++i) {\n        charts[i].render();\n    }\n\n    if (config._renderlet !== null) {\n        config._renderlet(group);\n    }\n};\n\n/**\n * Redraw all charts belong to the given chart group. If the chart group is not given then only charts\n * that belong to the default chart group will be re-drawn. Redraw is different from re-render since\n * when redrawing dc tries to update the graphic incrementally, using transitions, instead of starting\n * from scratch.\n * @function redrawAll\n * @param {String} [group]\n * @return {undefined}\n */\nexport const redrawAll = function (group) {\n    const charts = chartRegistry.list(group);\n    for (let i = 0; i < charts.length; ++i) {\n        charts[i].redraw();\n    }\n\n    if (config._renderlet !== null) {\n        config._renderlet(group);\n    }\n};\n","import {config} from './config';\n\n/**\n * Start a transition on a selection if transitions are globally enabled\n * ({@link disableTransitions} is false) and the duration is greater than zero; otherwise return\n * the selection. Since most operations are the same on a d3 selection and a d3 transition, this\n * allows a common code path for both cases.\n * @function transition\n * @param {d3.selection} selection - the selection to be transitioned\n * @param {Number|Function} [duration=250] - the duration of the transition in milliseconds, a\n * function returning the duration, or 0 for no transition\n * @param {Number|Function} [delay] - the delay of the transition in milliseconds, or a function\n * returning the delay, or 0 for no delay\n * @param {String} [name] - the name of the transition (if concurrent transitions on the same\n * elements are needed)\n * @returns {d3.transition|d3.selection}\n */\nexport const transition = function (selection, duration, delay, name) {\n    if (config.disableTransitions || duration <= 0) {\n        return selection;\n    }\n\n    let s = selection.transition(name);\n\n    if (duration >= 0 || duration !== undefined) {\n        s = s.duration(duration);\n    }\n    if (delay >= 0 || delay !== undefined) {\n        s = s.delay(delay);\n    }\n\n    return s;\n};\n\n/* somewhat silly, but to avoid duplicating logic */\nexport const optionalTransition = function (enable, duration, delay, name) {\n    if (enable) {\n        return function (selection) {\n            return transition(selection, duration, delay, name);\n        };\n    } else {\n        return function (selection) {\n            return selection;\n        };\n    }\n};\n\n// See http://stackoverflow.com/a/20773846\nexport const afterTransition = function (_transition, callback) {\n    if (_transition.empty() || !_transition.duration) {\n        callback.call(_transition);\n    } else {\n        let n = 0;\n        _transition\n            .each(() => { ++n; })\n            .on('end', () => {\n                if (!--n) {\n                    callback.call(_transition);\n                }\n            });\n    }\n};\n\nexport const renderlet = function (_) {\n    if (!arguments.length) {\n        return config._renderlet;\n    }\n    config._renderlet = _;\n    return null;\n};\n\nexport const instanceOfChart = function (o) {\n    return o instanceof Object && o.__dcFlag__ && true;\n};\n","export const events = {\n    current: null\n};\n\n/**\n * This function triggers a throttled event function with a specified delay (in milli-seconds).  Events\n * that are triggered repetitively due to user interaction such brush dragging might flood the library\n * and invoke more renders than can be executed in time. Using this function to wrap your event\n * function allows the library to smooth out the rendering by throttling events and only responding to\n * the most recent event.\n * @name events.trigger\n * @example\n * chart.on('renderlet', function(chart) {\n *     // smooth the rendering through event throttling\n *     events.trigger(function(){\n *         // focus some other chart to the range selected by user on this chart\n *         someOtherChart.focus(chart.filter());\n *     });\n * })\n * @param {Function} closure\n * @param {Number} [delay]\n * @return {undefined}\n */\nevents.trigger = function (closure, delay) {\n    if (!delay) {\n        closure();\n        return;\n    }\n\n    events.current = closure;\n\n    setTimeout(() => {\n        if (closure === events.current) {\n            closure();\n        }\n    }, delay);\n};\n","/**\n * The dc.js filters are functions which are passed into crossfilter to chose which records will be\n * accumulated to produce values for the charts.  In the crossfilter model, any filters applied on one\n * dimension will affect all the other dimensions but not that one.  dc always applies a filter\n * function to the dimension; the function combines multiple filters and if any of them accept a\n * record, it is filtered in.\n *\n * These filter constructors are used as appropriate by the various charts to implement brushing.  We\n * mention below which chart uses which filter.  In some cases, many instances of a filter will be added.\n *\n * Each of the dc.js filters is an object with the following properties:\n * * `isFiltered` - a function that returns true if a value is within the filter\n * * `filterType` - a string identifying the filter, here the name of the constructor\n *\n * Currently these filter objects are also arrays, but this is not a requirement. Custom filters\n * can be used as long as they have the properties above.\n * @namespace filters\n * @type {{}}\n */\nexport const filters = {};\n\n/**\n * RangedFilter is a filter which accepts keys between `low` and `high`.  It is used to implement X\n * axis brushing for the {@link CoordinateGridMixin coordinate grid charts}.\n *\n * Its `filterType` is 'RangedFilter'\n * @name RangedFilter\n * @memberof filters\n * @param {Number} low\n * @param {Number} high\n * @returns {Array<Number>}\n * @constructor\n */\nfilters.RangedFilter = function (low, high) {\n    const range = new Array(low, high);\n    range.isFiltered = function (value) {\n        return value >= this[0] && value < this[1];\n    };\n    range.filterType = 'RangedFilter';\n\n    return range;\n};\n\n/**\n * TwoDimensionalFilter is a filter which accepts a single two-dimensional value.  It is used by the\n * {@link HeatMap heat map chart} to include particular cells as they are clicked.  (Rows and columns are\n * filtered by filtering all the cells in the row or column.)\n *\n * Its `filterType` is 'TwoDimensionalFilter'\n * @name TwoDimensionalFilter\n * @memberof filters\n * @param {Array<Number>} filter\n * @returns {Array<Number>}\n * @constructor\n */\nfilters.TwoDimensionalFilter = function (filter) {\n    if (filter === null) { return null; }\n\n    const f = filter;\n    f.isFiltered = function (value) {\n        return value.length && value.length === f.length &&\n               value[0] === f[0] && value[1] === f[1];\n    };\n    f.filterType = 'TwoDimensionalFilter';\n\n    return f;\n};\n\n/**\n * The RangedTwoDimensionalFilter allows filtering all values which fit within a rectangular\n * region. It is used by the {@link ScatterPlot scatter plot} to implement rectangular brushing.\n *\n * It takes two two-dimensional points in the form `[[x1,y1],[x2,y2]]`, and normalizes them so that\n * `x1 <= x2` and `y1 <= y2`. It then returns a filter which accepts any points which are in the\n * rectangular range including the lower values but excluding the higher values.\n *\n * If an array of two values are given to the RangedTwoDimensionalFilter, it interprets the values as\n * two x coordinates `x1` and `x2` and returns a filter which accepts any points for which `x1 <= x <\n * x2`.\n *\n * Its `filterType` is 'RangedTwoDimensionalFilter'\n * @name RangedTwoDimensionalFilter\n * @memberof filters\n * @param {Array<Array<Number>>} filter\n * @returns {Array<Array<Number>>}\n * @constructor\n */\nfilters.RangedTwoDimensionalFilter = function (filter) {\n    if (filter === null) { return null; }\n\n    const f = filter;\n    let fromBottomLeft;\n\n    if (f[0] instanceof Array) {\n        fromBottomLeft = [\n            [Math.min(filter[0][0], filter[1][0]), Math.min(filter[0][1], filter[1][1])],\n            [Math.max(filter[0][0], filter[1][0]), Math.max(filter[0][1], filter[1][1])]\n        ];\n    } else {\n        fromBottomLeft = [[filter[0], -Infinity], [filter[1], Infinity]];\n    }\n\n    f.isFiltered = function (value) {\n        let x, y;\n\n        if (value instanceof Array) {\n            x = value[0];\n            y = value[1];\n        } else {\n            x = value;\n            y = fromBottomLeft[0][1];\n        }\n\n        return x >= fromBottomLeft[0][0] && x < fromBottomLeft[1][0] &&\n               y >= fromBottomLeft[0][1] && y < fromBottomLeft[1][1];\n    };\n    f.filterType = 'RangedTwoDimensionalFilter';\n\n    return f;\n};\n\n// ******** Sunburst Chart ********\n\n/**\n * HierarchyFilter is a filter which accepts a key path as an array. It matches any node at, or\n * child of, the given path. It is used by the {@link SunburstChart sunburst chart} to include particular cells and all\n * their children as they are clicked.\n *\n * @name HierarchyFilter\n * @memberof filters\n * @param {String} path\n * @returns {Array<String>}\n * @constructor\n */\nfilters.HierarchyFilter = function (path) {\n    if (path === null) {\n        return null;\n    }\n\n    const filter = path.slice(0);\n    filter.isFiltered = function (value) {\n        if (!(filter.length && value && value.length && value.length >= filter.length)) {\n            return false;\n        }\n\n        for (let i = 0; i < filter.length; i++) {\n            if (value[i] !== filter[i]) {\n                return false;\n            }\n        }\n\n        return true;\n    };\n    return filter;\n};\n","\nexport class InvalidStateException extends Error { }\n","import {timeDay, timeHour, timeMinute, timeMonth, timeSecond, timeWeek, timeYear} from 'd3-time';\nimport {format} from 'd3-format';\n\nimport {constants} from './constants';\nimport {config} from './config';\n\n/**\n * Returns a function that given a string property name, can be used to pluck the property off an object.  A function\n * can be passed as the second argument to also alter the data being returned.\n *\n * This can be a useful shorthand method to create accessor functions.\n * @example\n * var xPluck = pluck('x');\n * var objA = {x: 1};\n * xPluck(objA) // 1\n * @example\n * var xPosition = pluck('x', function (x, i) {\n *     // `this` is the original datum,\n *     // `x` is the x property of the datum,\n *     // `i` is the position in the array\n *     return this.radius + x;\n * });\n * selectAll('.circle').data(...).x(xPosition);\n * @function pluck\n * @param {String} n\n * @param {Function} [f]\n * @returns {Function}\n */\nexport const pluck = function (n, f) {\n    if (!f) {\n        return function (d) { return d[n]; };\n    }\n    return function (d, i) { return f.call(d, d[n], i); };\n};\n\n/**\n * @namespace utils\n * @type {{}}\n */\nexport const utils = {};\n\n/**\n * Print a single value filter.\n * @method printSingleValue\n * @memberof utils\n * @param {any} filter\n * @returns {String}\n */\nutils.printSingleValue = function (filter) {\n    let s = `${filter}`;\n\n    if (filter instanceof Date) {\n        s = config.dateFormat(filter);\n    } else if (typeof (filter) === 'string') {\n        s = filter;\n    } else if (utils.isFloat(filter)) {\n        s = utils.printSingleValue.fformat(filter);\n    } else if (utils.isInteger(filter)) {\n        s = Math.round(filter);\n    }\n\n    return s;\n};\nutils.printSingleValue.fformat = format('.2f');\n\n// convert 'day' to d3.timeDay and similar\nutils._toTimeFunc = function (t) {\n    const mappings = {\n        'second': timeSecond,\n        'minute': timeMinute,\n        'hour': timeHour,\n        'day': timeDay,\n        'week': timeWeek,\n        'month': timeMonth,\n        'year': timeYear\n    };\n    return mappings[t];\n};\n\n/**\n * Arbitrary add one value to another.\n *\n * If the value l is of type Date, adds r units to it. t becomes the unit.\n * For example utils.add(dt, 3, 'week') will add 3 (r = 3) weeks (t= 'week') to dt.\n *\n * If l is of type numeric, t is ignored. In this case if r is of type string,\n * it is assumed to be percentage (whether or not it includes %). For example\n * utils.add(30, 10) will give 40 and utils.add(30, '10') will give 33.\n *\n * They also generate strange results if l is a string.\n * @method add\n * @memberof utils\n * @param {Date|Number} l the value to modify\n * @param {String|Number} r the amount by which to modify the value\n * @param {Function|String} [t=d3.timeDay] if `l` is a `Date`, then this should be a\n * [d3 time interval](https://github.com/d3/d3-time/blob/master/README.md#_interval).\n * For backward compatibility with dc.js 2.0, it can also be the name of an interval, i.e.\n * 'millis', 'second', 'minute', 'hour', 'day', 'week', 'month', or 'year'\n * @returns {Date|Number}\n */\nutils.add = function (l, r, t) {\n    if (typeof r === 'string') {\n        r = r.replace('%', '');\n    }\n\n    if (l instanceof Date) {\n        if (typeof r === 'string') {\n            r = +r;\n        }\n        if (t === 'millis') {\n            return new Date(l.getTime() + r);\n        }\n        t = t || timeDay;\n        if (typeof t !== 'function') {\n            t = utils._toTimeFunc(t);\n        }\n        return t.offset(l, r);\n    } else if (typeof r === 'string') {\n        const percentage = (+r / 100);\n        return l > 0 ? l * (1 + percentage) : l * (1 - percentage);\n    } else {\n        return l + r;\n    }\n};\n\n/**\n * Arbitrary subtract one value from another.\n *\n * If the value l is of type Date, subtracts r units from it. t becomes the unit.\n * For example utils.subtract(dt, 3, 'week') will subtract 3 (r = 3) weeks (t= 'week') from dt.\n *\n * If l is of type numeric, t is ignored. In this case if r is of type string,\n * it is assumed to be percentage (whether or not it includes %). For example\n * utils.subtract(30, 10) will give 20 and utils.subtract(30, '10') will give 27.\n *\n * They also generate strange results if l is a string.\n * @method subtract\n * @memberof utils\n * @param {Date|Number} l the value to modify\n * @param {String|Number} r the amount by which to modify the value\n * @param {Function|String} [t=d3.timeDay] if `l` is a `Date`, then this should be a\n * [d3 time interval](https://github.com/d3/d3-time/blob/master/README.md#_interval).\n * For backward compatibility with dc.js 2.0, it can also be the name of an interval, i.e.\n * 'millis', 'second', 'minute', 'hour', 'day', 'week', 'month', or 'year'\n * @returns {Date|Number}\n */\nutils.subtract = function (l, r, t) {\n    if (typeof r === 'string') {\n        r = r.replace('%', '');\n    }\n\n    if (l instanceof Date) {\n        if (typeof r === 'string') {\n            r = +r;\n        }\n        if (t === 'millis') {\n            return new Date(l.getTime() - r);\n        }\n        t = t || timeDay;\n        if (typeof t !== 'function') {\n            t = utils._toTimeFunc(t);\n        }\n        return t.offset(l, -r);\n    } else if (typeof r === 'string') {\n        const percentage = (+r / 100);\n        return l < 0 ? l * (1 + percentage) : l * (1 - percentage);\n    } else {\n        return l - r;\n    }\n};\n\n/**\n * Is the value a number?\n * @method isNumber\n * @memberof utils\n * @param {any} n\n * @returns {Boolean}\n */\nutils.isNumber = function (n) {\n    return n === +n;\n};\n\n/**\n * Is the value a float?\n * @method isFloat\n * @memberof utils\n * @param {any} n\n * @returns {Boolean}\n */\nutils.isFloat = function (n) {\n    return n === +n && n !== (n | 0);\n};\n\n/**\n * Is the value an integer?\n * @method isInteger\n * @memberof utils\n * @param {any} n\n * @returns {Boolean}\n */\nutils.isInteger = function (n) {\n    return n === +n && n === (n | 0);\n};\n\n/**\n * Is the value very close to zero?\n * @method isNegligible\n * @memberof utils\n * @param {any} n\n * @returns {Boolean}\n */\nutils.isNegligible = function (n) {\n    return !utils.isNumber(n) || (n < constants.NEGLIGIBLE_NUMBER && n > -constants.NEGLIGIBLE_NUMBER);\n};\n\n/**\n * Ensure the value is no greater or less than the min/max values.  If it is return the boundary value.\n * @method clamp\n * @memberof utils\n * @param {any} val\n * @param {any} min\n * @param {any} max\n * @returns {any}\n */\nutils.clamp = function (val, min, max) {\n    return val < min ? min : (val > max ? max : val);\n};\n\n/**\n * Given `x`, return a function that always returns `x`.\n *\n * {@link https://github.com/d3/d3/blob/master/CHANGES.md#internals `d3.functor` was removed in d3 version 4}.\n * This function helps to implement the replacement,\n * `typeof x === \"function\" ? x : utils.constant(x)`\n * @method constant\n * @memberof utils\n * @param {any} x\n * @returns {Function}\n */\nutils.constant = function (x) {\n    return function () {\n        return x;\n    };\n};\n\n/**\n * Using a simple static counter, provide a unique integer id.\n * @method uniqueId\n * @memberof utils\n * @returns {Number}\n */\nlet _idCounter = 0;\nutils.uniqueId = function () {\n    return ++_idCounter;\n};\n\n/**\n * Convert a name to an ID.\n * @method nameToId\n * @memberof utils\n * @param {String} name\n * @returns {String}\n */\nutils.nameToId = function (name) {\n    return name.toLowerCase().replace(/[\\s]/g, '_').replace(/[\\.']/g, '');\n};\n\n/**\n * Append or select an item on a parent element.\n * @method appendOrSelect\n * @memberof utils\n * @param {d3.selection} parent\n * @param {String} selector\n * @param {String} tag\n * @returns {d3.selection}\n */\nutils.appendOrSelect = function (parent, selector, tag) {\n    tag = tag || selector;\n    let element = parent.select(selector);\n    if (element.empty()) {\n        element = parent.append(tag);\n    }\n    return element;\n};\n\n/**\n * Return the number if the value is a number; else 0.\n * @method safeNumber\n * @memberof utils\n * @param {Number|any} n\n * @returns {Number}\n */\nutils.safeNumber = function (n) { return utils.isNumber(+n) ? +n : 0;};\n\n/**\n * Return true if both arrays are equal, if both array are null these are considered equal\n * @method arraysEqual\n * @memberof utils\n * @param {Array|null} a1\n * @param {Array|null} a2\n * @returns {Boolean}\n */\nutils.arraysEqual = function (a1, a2) {\n    if (!a1 && !a2) {\n        return true;\n    }\n\n    if (!a1 || !a2) {\n        return false;\n    }\n\n    return a1.length === a2.length &&\n        // If elements are not integers/strings, we hope that it will match because of toString\n        // Test cases cover dates as well.\n        a1.every((elem, i) => elem.valueOf() === a2[i].valueOf());\n};\n\n// ******** Sunburst Chart ********\nutils.allChildren = function (node) {\n    let paths = [];\n    paths.push(node.path);\n    console.log('currentNode', node);\n    if (node.children) {\n        for (let i = 0; i < node.children.length; i++) {\n            paths = paths.concat(utils.allChildren(node.children[i]));\n        }\n    }\n    return paths;\n};\n\n// builds a d3 Hierarchy from a collection\n// TODO: turn this monster method something better.\nutils.toHierarchy = function (list, accessor) {\n    const root = {'key': 'root', 'children': []};\n    for (let i = 0; i < list.length; i++) {\n        const data = list[i];\n        const parts = data.key;\n        const value = accessor(data);\n        let currentNode = root;\n        for (let j = 0; j < parts.length; j++) {\n            const currentPath = parts.slice(0, j + 1);\n            const children = currentNode.children;\n            const nodeName = parts[j];\n            let childNode;\n            if (j + 1 < parts.length) {\n                // Not yet at the end of the sequence; move down the tree.\n                childNode = findChild(children, nodeName);\n\n                // If we don't already have a child node for this branch, create it.\n                if (childNode === void 0) {\n                    childNode = {'key': nodeName, 'children': [], 'path': currentPath};\n                    children.push(childNode);\n                }\n                currentNode = childNode;\n            } else {\n                // Reached the end of the sequence; create a leaf node.\n                childNode = {'key': nodeName, 'value': value, 'data': data, 'path': currentPath};\n                children.push(childNode);\n            }\n        }\n    }\n    return root;\n};\n\nfunction findChild (children, nodeName) {\n    for (let k = 0; k < children.length; k++) {\n        if (children[k].key === nodeName) {\n            return children[k];\n        }\n    }\n}\n\nutils.getAncestors = function (node) {\n    const path = [];\n    let current = node;\n    while (current.parent) {\n        path.unshift(current.name);\n        current = current.parent;\n    }\n    return path;\n};\n\nutils.arraysIdentical = function (a, b) {\n    let i = a.length;\n    if (i !== b.length) {\n        return false;\n    }\n    while (i--) {\n        if (a[i] !== b[i]) {\n            return false;\n        }\n    }\n    return true;\n};\n","import {utils} from './utils';\n\n/**\n * @namespace printers\n * @type {{}}\n */\nexport const printers = {};\n\n/**\n * Converts a list of filters into a readable string.\n * @method filters\n * @memberof printers\n * @param {Array<filters>} filters\n * @returns {String}\n */\nprinters.filters = function (filters) {\n    let s = '';\n\n    for (let i = 0; i < filters.length; ++i) {\n        if (i > 0) {\n            s += ', ';\n        }\n        s += printers.filter(filters[i]);\n    }\n\n    return s;\n};\n\n/**\n * Converts a filter into a readable string.\n * @method filter\n * @memberof printers\n * @param {filters|any|Array<any>} filter\n * @returns {String}\n */\nprinters.filter = function (filter) {\n    let s = '';\n\n    if (typeof filter !== 'undefined' && filter !== null) {\n        if (filter instanceof Array) {\n            if (filter.length >= 2) {\n                s = `[${filter.map(e => utils.printSingleValue(e)).join(' -> ')}]`;\n            } else if (filter.length >= 1) {\n                s = utils.printSingleValue(filter[0]);\n            }\n        } else {\n            s = utils.printSingleValue(filter);\n        }\n    }\n\n    return s;\n};\n","import {utils} from './utils';\n\n/**\n * @namespace units\n * @type {{}}\n */\nexport const units = {};\n\n/**\n * The default value for {@link CoordinateGridMixin#xUnits .xUnits} for the\n * {@link CoordinateGridMixin Coordinate Grid Chart} and should\n * be used when the x values are a sequence of integers.\n * It is a function that counts the number of integers in the range supplied in its start and end parameters.\n * @method integers\n * @memberof units\n * @see {@link CoordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @example\n * chart.xUnits(units.integers) // already the default\n * @param {Number} start\n * @param {Number} end\n * @returns {Number}\n */\nunits.integers = function (start, end) {\n    return Math.abs(end - start);\n};\n\n/**\n * This argument can be passed to the {@link CoordinateGridMixin#xUnits .xUnits} function of a\n * coordinate grid chart to specify ordinal units for the x axis. Usually this parameter is used in\n * combination with passing\n * {@link https://github.com/d3/d3-scale/blob/master/README.md#ordinal-scales d3.scaleOrdinal}\n * to {@link CoordinateGridMixin#x .x}.\n *\n * As of dc.js 3.0, this is purely a placeholder or magic value which causes the chart to go into ordinal mode; the\n * function is not called.\n * @method ordinal\n * @memberof units\n * @return {uncallable}\n * @see {@link https://github.com/d3/d3-scale/blob/master/README.md#ordinal-scales d3.scaleOrdinal}\n * @see {@link CoordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @see {@link CoordinateGridMixin#x coordinateGridMixin.x}\n * @example\n * chart.xUnits(units.ordinal)\n *      .x(d3.scaleOrdinal())\n */\nunits.ordinal = function () {\n    throw new Error('dc.units.ordinal should not be called - it is a placeholder');\n};\n\n/**\n * @namespace fp\n * @memberof units\n * @type {{}}\n */\nunits.fp = {};\n/**\n * This function generates an argument for the {@link CoordinateGridMixin Coordinate Grid Chart}\n * {@link CoordinateGridMixin#xUnits .xUnits} function specifying that the x values are floating-point\n * numbers with the given precision.\n * The returned function determines how many values at the given precision will fit into the range\n * supplied in its start and end parameters.\n * @method precision\n * @memberof units.fp\n * @see {@link CoordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @example\n * // specify values (and ticks) every 0.1 units\n * chart.xUnits(units.fp.precision(0.1)\n * // there are 500 units between 0.5 and 1 if the precision is 0.001\n * var thousandths = units.fp.precision(0.001);\n * thousandths(0.5, 1.0) // returns 500\n * @param {Number} precision\n * @returns {Function} start-end unit function\n */\nunits.fp.precision = function (precision) {\n    const _f = function (s, e) {\n        const d = Math.abs((e - s) / _f.resolution);\n        if (utils.isNegligible(d - Math.floor(d))) {\n            return Math.floor(d);\n        } else {\n            return Math.ceil(d);\n        }\n    };\n    _f.resolution = precision;\n    return _f;\n};\n","import {select} from 'd3-selection';\nimport {dispatch} from 'd3-dispatch';\nimport {ascending} from 'd3-array';\n\nimport {pluck, utils} from '../core/utils';\nimport {instanceOfChart} from '../core/core';\nimport {deregisterChart, redrawAll, registerChart, renderAll} from '../core/chart-registry';\nimport {constants} from '../core/constants';\nimport {events} from '../core/events';\nimport {logger} from '../core/logger';\nimport {printers} from '../core/printers';\nimport {InvalidStateException} from '../core/invalid-state-exception';\nimport {BadArgumentException} from '../core/bad-argument-exception';\nimport {d3compat} from '../core/config';\n\nconst _defaultFilterHandler = (dimension, filters) => {\n    if (filters.length === 0) {\n        dimension.filter(null);\n    } else if (filters.length === 1 && !filters[0].isFiltered) {\n        // single value and not a function-based filter\n        dimension.filterExact(filters[0]);\n    } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n        // single range-based filter\n        dimension.filterRange(filters[0]);\n    } else {\n        dimension.filterFunction(d => {\n            for (let i = 0; i < filters.length; i++) {\n                const filter = filters[i];\n                if (filter.isFiltered) {\n                    if(filter.isFiltered(d)) {\n                        return true;\n                    }\n                } else if (filter <= d && filter >= d) {\n                    return true;\n                }\n            }\n            return false;\n        });\n    }\n    return filters;\n};\n\nconst _defaultHasFilterHandler = (filters, filter) => {\n    if (filter === null || typeof (filter) === 'undefined') {\n        return filters.length > 0;\n    }\n    return filters.some(f => filter <= f && filter >= f);\n};\n\nconst _defaultRemoveFilterHandler = (filters, filter) => {\n    for (let i = 0; i < filters.length; i++) {\n        if (filters[i] <= filter && filters[i] >= filter) {\n            filters.splice(i, 1);\n            break;\n        }\n    }\n    return filters;\n};\n\nconst _defaultAddFilterHandler = (filters, filter) => {\n    filters.push(filter);\n    return filters;\n};\n\nconst _defaultResetFilterHandler = filters => [];\n\n/**\n * `BaseMixin` is an abstract functional object representing a basic `dc` chart object\n * for all chart and widget implementations. Methods from the {@link #BaseMixin BaseMixin} are inherited\n * and available on all chart implementations in the `dc` library.\n * @mixin BaseMixin\n */\nexport class BaseMixin {\n    constructor () {\n        this.__dcFlag__ = utils.uniqueId();\n        this._svgDescription = null\n        this._keyboardAccessible = false;\n\n        this._dimension = undefined;\n        this._group = undefined;\n\n        this._anchor = undefined;\n        this._root = undefined;\n        this._svg = undefined;\n        this._isChild = undefined;\n\n        this._minWidth = 200;\n        this._defaultWidthCalc = element => {\n            const width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n            return (width && width > this._minWidth) ? width : this._minWidth;\n        };\n        this._widthCalc = this._defaultWidthCalc;\n\n        this._minHeight = 200;\n        this._defaultHeightCalc = element => {\n            const height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n            return (height && height > this._minHeight) ? height : this._minHeight;\n        };\n        this._heightCalc = this._defaultHeightCalc;\n        this._width = undefined;\n        this._height = undefined;\n        this._useViewBoxResizing = false;\n\n        this._keyAccessor = pluck('key');\n        this._valueAccessor = pluck('value');\n        this._label = pluck('key');\n\n        this._ordering = pluck('key');\n\n        this._renderLabel = false;\n\n        this._title = d => `${this.keyAccessor()(d)}: ${this.valueAccessor()(d)}`;\n        this._renderTitle = true;\n        this._controlsUseVisibility = false;\n\n        this._transitionDuration = 750;\n\n        this._transitionDelay = 0;\n\n        this._filterPrinter = printers.filters;\n\n        this._mandatoryAttributesList = ['dimension', 'group'];\n\n        this._chartGroup = constants.DEFAULT_CHART_GROUP;\n\n        this._listeners = dispatch(\n            'preRender',\n            'postRender',\n            'preRedraw',\n            'postRedraw',\n            'filtered',\n            'zoomed',\n            'renderlet',\n            'pretransition');\n\n        this._legend = undefined;\n        this._commitHandler = undefined;\n\n        this._defaultData = group => group.all();\n        this._data = this._defaultData;\n\n        this._filters = [];\n\n        this._filterHandler = _defaultFilterHandler;\n        this._hasFilterHandler = _defaultHasFilterHandler;\n        this._removeFilterHandler = _defaultRemoveFilterHandler;\n        this._addFilterHandler = _defaultAddFilterHandler;\n        this._resetFilterHandler = _defaultResetFilterHandler;\n    }\n\n    /**\n     * Set or get the height attribute of a chart. The height is applied to the SVGElement generated by\n     * the chart when rendered (or re-rendered). If a value is given, then it will be used to calculate\n     * the new height and the chart returned for method chaining.  The value can either be a numeric, a\n     * function, or falsy. If no value is specified then the value of the current height attribute will\n     * be returned.\n     *\n     * By default, without an explicit height being given, the chart will select the width of its\n     * anchor element. If that isn't possible it defaults to 200 (provided by the\n     * {@link BaseMixin#minHeight minHeight} property). Setting the value falsy will return\n     * the chart to the default behavior.\n     * @see {@link BaseMixin#minHeight minHeight}\n     * @example\n     * // Default height\n     * chart.height(function (element) {\n     *     var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n     *     return (height && height > chart.minHeight()) ? height : chart.minHeight();\n     * });\n     *\n     * chart.height(250); // Set the chart's height to 250px;\n     * chart.height(function(anchor) { return doSomethingWith(anchor); }); // set the chart's height with a function\n     * chart.height(null); // reset the height to the default auto calculation\n     * @param {Number|Function} [height]\n     * @returns {Number|BaseMixin}\n     */\n    height (height) {\n        if (!arguments.length) {\n            if (!utils.isNumber(this._height)) {\n                // only calculate once\n                this._height = this._heightCalc(this._root.node());\n            }\n            return this._height;\n        }\n        this._heightCalc = height ? (typeof height === 'function' ? height : utils.constant(height)) : this._defaultHeightCalc;\n        this._height = undefined;\n        return this;\n    }\n\n    /**\n     * Set or get the width attribute of a chart.\n     * @see {@link BaseMixin#height height}\n     * @see {@link BaseMixin#minWidth minWidth}\n     * @example\n     * // Default width\n     * chart.width(function (element) {\n     *     var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n     *     return (width && width > chart.minWidth()) ? width : chart.minWidth();\n     * });\n     * @param {Number|Function} [width]\n     * @returns {Number|BaseMixin}\n     */\n    width (width) {\n        if (!arguments.length) {\n            if (!utils.isNumber(this._width)) {\n                // only calculate once\n                this._width = this._widthCalc(this._root.node());\n            }\n            return this._width;\n        }\n        this._widthCalc = width ? (typeof width === 'function' ? width : utils.constant(width)) : this._defaultWidthCalc;\n        this._width = undefined;\n        return this;\n    }\n\n    /**\n     * Set or get the minimum width attribute of a chart. This only has effect when used with the default\n     * {@link BaseMixin#width width} function.\n     * @see {@link BaseMixin#width width}\n     * @param {Number} [minWidth=200]\n     * @returns {Number|BaseMixin}\n     */\n    minWidth (minWidth) {\n        if (!arguments.length) {\n            return this._minWidth;\n        }\n        this._minWidth = minWidth;\n        return this;\n    }\n\n    /**\n     * Set or get the minimum height attribute of a chart. This only has effect when used with the default\n     * {@link BaseMixin#height height} function.\n     * @see {@link BaseMixin#height height}\n     * @param {Number} [minHeight=200]\n     * @returns {Number|BaseMixin}\n     */\n    minHeight (minHeight) {\n        if (!arguments.length) {\n            return this._minHeight;\n        }\n        this._minHeight = minHeight;\n        return this;\n    }\n\n    /**\n     * Turn on/off using the SVG\n     * {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox `viewBox` attribute}.\n     * When enabled, `viewBox` will be set on the svg root element instead of `width` and `height`.\n     * Requires that the chart aspect ratio be defined using chart.width(w) and chart.height(h).\n     *\n     * This will maintain the aspect ratio while enabling the chart to resize responsively to the\n     * space given to the chart using CSS. For example, the chart can use `width: 100%; height:\n     * 100%` or absolute positioning to resize to its parent div.\n     *\n     * Since the text will be sized as if the chart is drawn according to the width and height, and\n     * will be resized if the chart is any other size, you need to set the chart width and height so\n     * that the text looks good. In practice, 600x400 seems to work pretty well for most charts.\n     *\n     * You can see examples of this resizing strategy in the [Chart Resizing\n     * Examples](http://dc-js.github.io/dc.js/resizing/); just add `?resize=viewbox` to any of the\n     * one-chart examples to enable `useViewBoxResizing`.\n     * @param {Boolean} [useViewBoxResizing=false]\n     * @returns {Boolean|BaseMixin}\n     */\n    useViewBoxResizing (useViewBoxResizing) {\n        if (!arguments.length) {\n            return this._useViewBoxResizing;\n        }\n        this._useViewBoxResizing = useViewBoxResizing;\n        return this;\n    }\n\n    /**\n     * **mandatory**\n     *\n     * Set or get the dimension attribute of a chart. In `dc`, a dimension can be any valid\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter dimension}\n     *\n     * If a value is given, then it will be used as the new dimension. If no value is specified then\n     * the current dimension will be returned.\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter.dimension}\n     * @example\n     * var index = crossfilter([]);\n     * var dimension = index.dimension(pluck('key'));\n     * chart.dimension(dimension);\n     * @param {crossfilter.dimension} [dimension]\n     * @returns {crossfilter.dimension|BaseMixin}\n     */\n    dimension (dimension) {\n        if (!arguments.length) {\n            return this._dimension;\n        }\n        this._dimension = dimension;\n        this.expireCache();\n        return this;\n    }\n\n    /**\n     * Set the data callback or retrieve the chart's data set. The data callback is passed the chart's\n     * group and by default will return\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all}.\n     * This behavior may be modified to, for instance, return only the top 5 groups.\n     * @example\n     * // Default data function\n     * chart.data(function (group) { return group.all(); });\n     *\n     * chart.data(function (group) { return group.top(5); });\n     * @param {Function} [callback]\n     * @returns {*|BaseMixin}\n     */\n    data (callback) {\n        if (!arguments.length) {\n            return this._data(this._group);\n        }\n        this._data = typeof callback === 'function' ? callback : utils.constant(callback);\n        this.expireCache();\n        return this;\n    }\n\n    /**\n     * **mandatory**\n     *\n     * Set or get the group attribute of a chart. In `dc` a group is a\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter group}.\n     * Usually the group should be created from the particular dimension associated with the same chart. If a value is\n     * given, then it will be used as the new group.\n     *\n     * If no value specified then the current group will be returned.\n     * If `name` is specified then it will be used to generate legend label.\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n     * @example\n     * var index = crossfilter([]);\n     * var dimension = index.dimension(pluck('key'));\n     * chart.dimension(dimension);\n     * chart.group(dimension.group().reduceSum());\n     * @param {crossfilter.group} [group]\n     * @param {String} [name]\n     * @returns {crossfilter.group|BaseMixin}\n     */\n    group (group, name) {\n        if (!arguments.length) {\n            return this._group;\n        }\n        this._group = group;\n        this._groupName = name;\n        this.expireCache();\n        return this;\n    }\n\n    /**\n     * Get or set an accessor to order ordinal dimensions.  The chart uses\n     * {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort Array.sort}\n     * to sort elements; this accessor returns the value to order on.\n     * @example\n     * // Default ordering accessor\n     * _chart.ordering(pluck('key'));\n     * @param {Function} [orderFunction]\n     * @returns {Function|BaseMixin}\n     */\n    ordering (orderFunction) {\n        if (!arguments.length) {\n            return this._ordering;\n        }\n        this._ordering = orderFunction;\n        this.expireCache();\n        return this;\n    }\n\n    _computeOrderedGroups (data) {\n        // clone the array before sorting, otherwise Array.sort sorts in-place\n        return Array.from(data).sort((a, b) => ascending(this._ordering(a), this._ordering(b)));\n    }\n\n    /**\n     * Clear all filters associated with this chart. The same effect can be achieved by calling\n     * {@link BaseMixin#filter chart.filter(null)}.\n     * @returns {BaseMixin}\n     */\n    filterAll () {\n        return this.filter(null);\n    }\n\n    /**\n     * Execute d3 single selection in the chart's scope using the given selector and return the d3\n     * selection.\n     *\n     * This function is **not chainable** since it does not return a chart instance; however the d3\n     * selection result can be chained to d3 function calls.\n     * @see {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3.select}\n     * @example\n     * // Has the same effect as d3.select('#chart-id').select(selector)\n     * chart.select(selector)\n     * @param {String} sel CSS selector string\n     * @returns {d3.selection}\n     */\n    select (sel) {\n        return this._root.select(sel);\n    }\n\n    /**\n     * Execute in scope d3 selectAll using the given selector and return d3 selection result.\n     *\n     * This function is **not chainable** since it does not return a chart instance; however the d3\n     * selection result can be chained to d3 function calls.\n     * @see {@link https://github.com/d3/d3-selection/blob/master/README.md#selectAll d3.selectAll}\n     * @example\n     * // Has the same effect as d3.select('#chart-id').selectAll(selector)\n     * chart.selectAll(selector)\n     * @param {String} sel CSS selector string\n     * @returns {d3.selection}\n     */\n    selectAll (sel) {\n        return this._root ? this._root.selectAll(sel) : null;\n    }\n\n    /**\n     * Set the root SVGElement to either be an existing chart's root; or any valid [d3 single\n     * selector](https://github.com/d3/d3-selection/blob/master/README.md#selecting-elements) specifying a dom\n     * block element such as a div; or a dom element or d3 selection. Optionally registers the chart\n     * within the chartGroup. This class is called internally on chart initialization, but be called\n     * again to relocate the chart. However, it will orphan any previously created SVGElements.\n     * @param {anchorChart|anchorSelector|anchorNode} [parent]\n     * @param {String} [chartGroup]\n     * @returns {String|node|d3.selection|BaseMixin}\n     */\n    anchor (parent, chartGroup) {\n        if (!arguments.length) {\n            return this._anchor;\n        }\n        if (instanceOfChart(parent)) {\n            this._anchor = parent.anchor();\n            if (this._anchor.children) { // is _anchor a div?\n                this._anchor = `#${parent.anchorName()}`;\n            }\n            this._root = parent.root();\n            this._isChild = true;\n        } else if (parent) {\n            if (parent.select && parent.classed) { // detect d3 selection\n                this._anchor = parent.node();\n            } else {\n                this._anchor = parent;\n            }\n            this._root = select(this._anchor);\n            this._root.classed(constants.CHART_CLASS, true);\n            registerChart(this, chartGroup);\n            this._isChild = false;\n        } else {\n            throw new BadArgumentException('parent must be defined');\n        }\n        this._chartGroup = chartGroup;\n        return this;\n    }\n\n    /**\n     * Returns the DOM id for the chart's anchored location.\n     * @returns {String}\n     */\n    anchorName () {\n        const a = this.anchor();\n        if (a && a.id) {\n            return a.id;\n        }\n        if (a && a.replace) {\n            return a.replace('#', '');\n        }\n        return `dc-chart${this.chartID()}`;\n    }\n\n    /**\n     * Returns the root element where a chart resides. Usually it will be the parent div element where\n     * the SVGElement was created. You can also pass in a new root element however this is usually handled by\n     * dc internally. Resetting the root element on a chart outside of dc internals may have\n     * unexpected consequences.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement HTMLElement}\n     * @param {HTMLElement} [rootElement]\n     * @returns {HTMLElement|BaseMixin}\n     */\n    root (rootElement) {\n        if (!arguments.length) {\n            return this._root;\n        }\n        this._root = rootElement;\n        return this;\n    }\n\n    /**\n     * Returns the top SVGElement for this specific chart. You can also pass in a new SVGElement,\n     * however this is usually handled by dc internally. Resetting the SVGElement on a chart outside\n     * of dc internals may have unexpected consequences.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n     * @param {SVGElement|d3.selection} [svgElement]\n     * @returns {SVGElement|d3.selection|BaseMixin}\n     */\n    svg (svgElement) {\n        if (!arguments.length) {\n            return this._svg;\n        }\n        this._svg = svgElement;\n        return this;\n    }\n\n    /**\n     * Remove the chart's SVGElements from the dom and recreate the container SVGElement.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n     * @returns {SVGElement}\n     */\n    resetSvg () {\n        this.select('svg').remove();\n        return this.generateSvg();\n    }\n\n    sizeSvg () {\n        if (this._svg) {\n            if (!this._useViewBoxResizing) {\n                this._svg\n                    .attr('width', this.width())\n                    .attr('height', this.height());\n            } else if (!this._svg.attr('viewBox')) {\n                this._svg\n                    .attr('viewBox', `0 0 ${this.width()} ${this.height()}`);\n            }\n        }\n    }\n\n    generateSvg () {\n        this._svg = this.root().append('svg');\n    \n        if (this._svgDescription || this._keyboardAccessible) {\n\n            this._svg.append('desc')\n                .attr('id', `desc-id-${this.__dcFlag__}`)\n                .html(`${this.svgDescription()}`);\n\n            this._svg\n                .attr('tabindex', '0')\n                .attr('role', 'img')\n                .attr('aria-labelledby', `desc-id-${this.__dcFlag__}`);\n        }\n\n        this.sizeSvg();\n        return this._svg;\n    }\n\n    /**\n     * Set or get description text for the entire SVG graphic. If set, will create a `<desc>` element as the first\n     * child of the SVG with the description text and also make the SVG focusable from keyboard.\n     * @param {String} [description]\n     * @returns {String|BaseMixin}\n     */\n    svgDescription (description) {\n        if (!arguments.length) {\n            return this._svgDescription || this.constructor.name;\n        }\n\n        this._svgDescription = description;\n        return this;\n    }\n\n    /**\n     * If set, interactive chart elements like individual bars in a bar chart or symbols in a scatter plot\n     * will be focusable from keyboard and on pressing Enter or Space will behave as if clicked on.\n     * \n     * If `svgDescription` has not been explicitly set, will also set SVG description text to the class\n     * constructor name, like BarChart or HeatMap, and make the entire SVG focusable.\n     * @param {Boolean} [keyboardAccessible=false]\n     * @returns {Boolean|BarChart}\n     */\n    keyboardAccessible (keyboardAccessible) {\n        if (!arguments.length) {\n            return this._keyboardAccessible;\n        }\n        this._keyboardAccessible = keyboardAccessible;\n        return this;\n    }\n\n    /**\n     * Set or get the filter printer function. The filter printer function is used to generate human\n     * friendly text for filter value(s) associated with the chart instance. The text will get shown\n     * in the `.filter element; see {@link BaseMixin#turnOnControls turnOnControls}.\n     *\n     * By default dc charts use a default filter printer {@link printers.filters printers.filters}\n     * that provides simple printing support for both single value and ranged filters.\n     * @example\n     * // for a chart with an ordinal brush, print the filters in upper case\n     * chart.filterPrinter(function(filters) {\n     *   return filters.map(function(f) { return f.toUpperCase(); }).join(', ');\n     * });\n     * // for a chart with a range brush, print the filter as start and extent\n     * chart.filterPrinter(function(filters) {\n     *   return 'start ' + utils.printSingleValue(filters[0][0]) +\n     *     ' extent ' + utils.printSingleValue(filters[0][1] - filters[0][0]);\n     * });\n     * @param {Function} [filterPrinterFunction=printers.filters]\n     * @returns {Function|BaseMixin}\n     */\n    filterPrinter (filterPrinterFunction) {\n        if (!arguments.length) {\n            return this._filterPrinter;\n        }\n        this._filterPrinter = filterPrinterFunction;\n        return this;\n    }\n\n    /**\n     * If set, use the `visibility` attribute instead of the `display` attribute for showing/hiding\n     * chart reset and filter controls, for less disruption to the layout.\n     * @param {Boolean} [controlsUseVisibility=false]\n     * @returns {Boolean|BaseMixin}\n     */\n    controlsUseVisibility (controlsUseVisibility) {\n        if (!arguments.length) {\n            return this._controlsUseVisibility;\n        }\n        this._controlsUseVisibility = controlsUseVisibility;\n        return this;\n    }\n\n    /**\n     * Turn on optional control elements within the root element. dc currently supports the\n     * following html control elements.\n     * * root.selectAll('.reset') - elements are turned on if the chart has an active filter. This type\n     * of control element is usually used to store a reset link to allow user to reset filter on a\n     * certain chart. This element will be turned off automatically if the filter is cleared.\n     * * root.selectAll('.filter') elements are turned on if the chart has an active filter. The text\n     * content of this element is then replaced with the current filter value using the filter printer\n     * function. This type of element will be turned off automatically if the filter is cleared.\n     * @returns {BaseMixin}\n     */\n    turnOnControls () {\n        if (this._root) {\n            const attribute = this.controlsUseVisibility() ? 'visibility' : 'display';\n            this.selectAll('.reset').style(attribute, null);\n            this.selectAll('.filter').text(this._filterPrinter(this.filters())).style(attribute, null);\n        }\n        return this;\n    }\n\n    /**\n     * Turn off optional control elements within the root element.\n     * @see {@link BaseMixin#turnOnControls turnOnControls}\n     * @returns {BaseMixin}\n     */\n    turnOffControls () {\n        if (this._root) {\n            const attribute = this.controlsUseVisibility() ? 'visibility' : 'display';\n            const value = this.controlsUseVisibility() ? 'hidden' : 'none';\n            this.selectAll('.reset').style(attribute, value);\n            this.selectAll('.filter').style(attribute, value).text(this.filter());\n        }\n        return this;\n    }\n\n    /**\n     * Set or get the animation transition duration (in milliseconds) for this chart instance.\n     * @param {Number} [duration=750]\n     * @returns {Number|BaseMixin}\n     */\n    transitionDuration (duration) {\n        if (!arguments.length) {\n            return this._transitionDuration;\n        }\n        this._transitionDuration = duration;\n        return this;\n    }\n\n    /**\n     * Set or get the animation transition delay (in milliseconds) for this chart instance.\n     * @param {Number} [delay=0]\n     * @returns {Number|BaseMixin}\n     */\n    transitionDelay (delay) {\n        if (!arguments.length) {\n            return this._transitionDelay;\n        }\n        this._transitionDelay = delay;\n        return this;\n    }\n\n    _mandatoryAttributes (_) {\n        if (!arguments.length) {\n            return this._mandatoryAttributesList;\n        }\n        this._mandatoryAttributesList = _;\n        return this;\n    }\n\n    checkForMandatoryAttributes (a) {\n        if (!this[a] || !this[a]()) {\n            throw new InvalidStateException(`Mandatory attribute chart.${a} is missing on chart[#${this.anchorName()}]`);\n        }\n    }\n\n    /**\n     * Invoking this method will force the chart to re-render everything from scratch. Generally it\n     * should only be used to render the chart for the first time on the page or if you want to make\n     * sure everything is redrawn from scratch instead of relying on the default incremental redrawing\n     * behaviour.\n     * @returns {BaseMixin}\n     */\n    render () {\n        this._height = this._width = undefined; // force recalculate\n        this._listeners.call('preRender', this, this);\n\n        if (this._mandatoryAttributesList) {\n            this._mandatoryAttributesList.forEach(e => this.checkForMandatoryAttributes(e));\n        }\n\n        const result = this._doRender();\n\n        if (this._legend) {\n            this._legend.render();\n        }\n\n        this._activateRenderlets('postRender');\n\n        return result;\n    }\n\n    _makeKeyboardAccessible (onClickFunction, ...onClickArgs) {\n        // called from each chart module's render and redraw methods\n        const tabElements = this._svg\n            .selectAll('.dc-tabbable')\n            .attr('tabindex', 0);\n                \n        if (onClickFunction) {\n            tabElements.on('keydown', d3compat.eventHandler((d, event) => {\n                // trigger only if d is an object undestood by KeyAccessor()\n                if (event.keyCode === 13 && typeof d === 'object') {\n                    onClickFunction.call(this, d, ...onClickArgs)\n                } \n                // special case for space key press - prevent scrolling\n                if (event.keyCode === 32 && typeof d === 'object') {\n                    onClickFunction.call(this, d, ...onClickArgs)\n                    event.preventDefault();                \n                }\n            \n            }));\n        }\n    }\n\n    _activateRenderlets (event) {\n        this._listeners.call('pretransition', this, this);\n        if (this.transitionDuration() > 0 && this._svg) {\n            this._svg.transition().duration(this.transitionDuration()).delay(this.transitionDelay())\n                .on('end', () => {\n                    this._listeners.call('renderlet', this, this);\n                    if (event) {\n                        this._listeners.call(event, this, this);\n                    }\n                });\n        } else {\n            this._listeners.call('renderlet', this, this);\n            if (event) {\n                this._listeners.call(event, this, this);\n            }\n        }\n    }\n\n    /**\n     * Calling redraw will cause the chart to re-render data changes incrementally. If there is no\n     * change in the underlying data dimension then calling this method will have no effect on the\n     * chart. Most chart interaction in dc will automatically trigger this method through internal\n     * events (in particular {@link redrawAll redrawAll}); therefore, you only need to\n     * manually invoke this function if data is manipulated outside of dc's control (for example if\n     * data is loaded in the background using\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}).\n     * @returns {BaseMixin}\n     */\n    redraw () {\n        this.sizeSvg();\n        this._listeners.call('preRedraw', this, this);\n\n        const result = this._doRedraw();\n\n        if (this._legend) {\n            this._legend.render();\n        }\n\n        this._activateRenderlets('postRedraw');\n\n        return result;\n    }\n\n    /**\n     * Gets/sets the commit handler. If the chart has a commit handler, the handler will be called when\n     * the chart's filters have changed, in order to send the filter data asynchronously to a server.\n     *\n     * Unlike other functions in dc.js, the commit handler is asynchronous. It takes two arguments:\n     * a flag indicating whether this is a render (true) or a redraw (false), and a callback to be\n     * triggered once the commit is done. The callback has the standard node.js continuation signature\n     * with error first and result second.\n     * @param {Function} commitHandler\n     * @returns {BaseMixin}\n     */\n    commitHandler (commitHandler) {\n        if (!arguments.length) {\n            return this._commitHandler;\n        }\n        this._commitHandler = commitHandler;\n        return this;\n    }\n\n    /**\n     * Redraws all charts in the same group as this chart, typically in reaction to a filter\n     * change. If the chart has a {@link BaseMixin.commitFilter commitHandler}, it will\n     * be executed and waited for.\n     * @returns {BaseMixin}\n     */\n    redrawGroup () {\n        if (this._commitHandler) {\n            this._commitHandler(false, (error, result) => {\n                if (error) {\n                    console.log(error);\n                } else {\n                    redrawAll(this.chartGroup());\n                }\n            });\n        } else {\n            redrawAll(this.chartGroup());\n        }\n        return this;\n    }\n\n    /**\n     * Renders all charts in the same group as this chart. If the chart has a\n     * {@link BaseMixin.commitFilter commitHandler}, it will be executed and waited for\n     * @returns {BaseMixin}\n     */\n    renderGroup () {\n        if (this._commitHandler) {\n            this._commitHandler(false, (error, result) => {\n                if (error) {\n                    console.log(error);\n                } else {\n                    renderAll(this.chartGroup());\n                }\n            });\n        } else {\n            renderAll(this.chartGroup());\n        }\n        return this;\n    }\n\n    _invokeFilteredListener (f) {\n        if (f !== undefined) {\n            this._listeners.call('filtered', this, this, f);\n        }\n    }\n\n    _invokeZoomedListener () {\n        this._listeners.call('zoomed', this, this);\n    }\n\n    /**\n     * Set or get the has-filter handler. The has-filter handler is a function that checks to see if\n     * the chart's current filters (first argument) include a specific filter (second argument).  Using a custom has-filter handler allows\n     * you to change the way filters are checked for and replaced.\n     * @example\n     * // default has-filter handler\n     * chart.hasFilterHandler(function (filters, filter) {\n     *     if (filter === null || typeof(filter) === 'undefined') {\n     *         return filters.length > 0;\n     *     }\n     *     return filters.some(function (f) {\n     *         return filter <= f && filter >= f;\n     *     });\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.hasFilterHandler(function(filters, filter) {\n     *     return false;\n     * });\n     * @param {Function} [hasFilterHandler]\n     * @returns {Function|BaseMixin}\n     */\n    hasFilterHandler (hasFilterHandler) {\n        if (!arguments.length) {\n            return this._hasFilterHandler;\n        }\n        this._hasFilterHandler = hasFilterHandler;\n        return this;\n    }\n\n    /**\n     * Check whether any active filter or a specific filter is associated with particular chart instance.\n     * This function is **not chainable**.\n     * @see {@link BaseMixin#hasFilterHandler hasFilterHandler}\n     * @param {*} [filter]\n     * @returns {Boolean}\n     */\n    hasFilter (filter) {\n        return this._hasFilterHandler(this._filters, filter);\n    }\n\n    /**\n     * Set or get the remove filter handler. The remove filter handler is a function that removes a\n     * filter from the chart's current filters. Using a custom remove filter handler allows you to\n     * change how filters are removed or perform additional work when removing a filter, e.g. when\n     * using a filter server other than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @example\n     * // default remove filter handler\n     * chart.removeFilterHandler(function (filters, filter) {\n     *     for (var i = 0; i < filters.length; i++) {\n     *         if (filters[i] <= filter && filters[i] >= filter) {\n     *             filters.splice(i, 1);\n     *             break;\n     *         }\n     *     }\n     *     return filters;\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.removeFilterHandler(function(filters, filter) {\n     *     return filters;\n     * });\n     * @param {Function} [removeFilterHandler]\n     * @returns {Function|BaseMixin}\n     */\n    removeFilterHandler (removeFilterHandler) {\n        if (!arguments.length) {\n            return this._removeFilterHandler;\n        }\n        this._removeFilterHandler = removeFilterHandler;\n        return this;\n    }\n\n    /**\n     * Set or get the add filter handler. The add filter handler is a function that adds a filter to\n     * the chart's filter list. Using a custom add filter handler allows you to change the way filters\n     * are added or perform additional work when adding a filter, e.g. when using a filter server other\n     * than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @example\n     * // default add filter handler\n     * chart.addFilterHandler(function (filters, filter) {\n     *     filters.push(filter);\n     *     return filters;\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.addFilterHandler(function(filters, filter) {\n     *     return filters;\n     * });\n     * @param {Function} [addFilterHandler]\n     * @returns {Function|BaseMixin}\n     */\n    addFilterHandler (addFilterHandler) {\n        if (!arguments.length) {\n            return this._addFilterHandler;\n        }\n        this._addFilterHandler = addFilterHandler;\n        return this;\n    }\n\n    /**\n     * Set or get the reset filter handler. The reset filter handler is a function that resets the\n     * chart's filter list by returning a new list. Using a custom reset filter handler allows you to\n     * change the way filters are reset, or perform additional work when resetting the filters,\n     * e.g. when using a filter server other than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @example\n     * // default remove filter handler\n     * function (filters) {\n     *     return [];\n     * }\n     *\n     * // custom filter handler (no-op)\n     * chart.resetFilterHandler(function(filters) {\n     *     return filters;\n     * });\n     * @param {Function} [resetFilterHandler]\n     * @returns {BaseMixin}\n     */\n    resetFilterHandler (resetFilterHandler) {\n        if (!arguments.length) {\n            return this._resetFilterHandler;\n        }\n        this._resetFilterHandler = resetFilterHandler;\n        return this;\n    }\n\n    applyFilters (filters) {\n        if (this.dimension() && this.dimension().filter) {\n            const fs = this._filterHandler(this.dimension(), filters);\n            if (fs) {\n                filters = fs;\n            }\n        }\n        return filters;\n    }\n\n    /**\n     * Replace the chart filter. This is equivalent to calling `chart.filter(null).filter(filter)`\n     * but more efficient because the filter is only applied once.\n     *\n     * @param {*} [filter]\n     * @returns {BaseMixin}\n     */\n    replaceFilter (filter) {\n        this._filters = this._resetFilterHandler(this._filters);\n        this.filter(filter);\n        return this;\n    }\n\n    /**\n     * Filter the chart by the given parameter, or return the current filter if no input parameter\n     * is given.\n     *\n     * The filter parameter can take one of these forms:\n     * * A single value: the value will be toggled (added if it is not present in the current\n     * filters, removed if it is present)\n     * * An array containing a single array of values (`[[value,value,value]]`): each value is\n     * toggled\n     * * When appropriate for the chart, a {@link filters dc filter object} such as\n     *   * {@link filters.RangedFilter `filters.RangedFilter`} for the\n     * {@link CoordinateGridMixin CoordinateGridMixin} charts\n     *   * {@link filters.TwoDimensionalFilter `filters.TwoDimensionalFilter`} for the\n     * {@link HeatMap heat map}\n     *   * {@link filters.RangedTwoDimensionalFilter `filters.RangedTwoDimensionalFilter`}\n     * for the {@link ScatterPlot scatter plot}\n     * * `null`: the filter will be reset using the\n     * {@link BaseMixin#resetFilterHandler resetFilterHandler}\n     *\n     * Note that this is always a toggle (even when it doesn't make sense for the filter type). If\n     * you wish to replace the current filter, either call `chart.filter(null)` first - or it's more\n     * efficient to call {@link BaseMixin#replaceFilter `chart.replaceFilter(filter)`} instead.\n     *\n     * Each toggle is executed by checking if the value is already present using the\n     * {@link BaseMixin#hasFilterHandler hasFilterHandler}; if it is not present, it is added\n     * using the {@link BaseMixin#addFilterHandler addFilterHandler}; if it is already present,\n     * it is removed using the {@link BaseMixin#removeFilterHandler removeFilterHandler}.\n     *\n     * Once the filters array has been updated, the filters are applied to the\n     * crossfilter dimension, using the {@link BaseMixin#filterHandler filterHandler}.\n     *\n     * Once you have set the filters, call {@link BaseMixin#redrawGroup `chart.redrawGroup()`}\n     * (or {@link redrawAll `redrawAll()`}) to redraw the chart's group.\n     * @see {@link BaseMixin#addFilterHandler addFilterHandler}\n     * @see {@link BaseMixin#removeFilterHandler removeFilterHandler}\n     * @see {@link BaseMixin#resetFilterHandler resetFilterHandler}\n     * @see {@link BaseMixin#filterHandler filterHandler}\n     * @example\n     * // filter by a single string\n     * chart.filter('Sunday');\n     * // filter by a single age\n     * chart.filter(18);\n     * // filter by a set of states\n     * chart.filter([['MA', 'TX', 'ND', 'WA']]);\n     * // filter by range -- note the use of filters.RangedFilter, which is different\n     * // from the syntax for filtering a crossfilter dimension directly, dimension.filter([15,20])\n     * chart.filter(filters.RangedFilter(15,20));\n     * @param {*} [filter]\n     * @returns {BaseMixin}\n     */\n    filter (filter) {\n        if (!arguments.length) {\n            return this._filters.length > 0 ? this._filters[0] : null;\n        }\n        let filters = this._filters;\n        if (filter instanceof Array && filter[0] instanceof Array && !filter.isFiltered) {\n            // toggle each filter\n            filter[0].forEach(f => {\n                if (this._hasFilterHandler(filters, f)) {\n                    filters = this._removeFilterHandler(filters, f);\n                } else {\n                    filters = this._addFilterHandler(filters, f);\n                }\n            });\n        } else if (filter === null) {\n            filters = this._resetFilterHandler(filters);\n        } else {\n            if (this._hasFilterHandler(filters, filter)) {\n                filters = this._removeFilterHandler(filters, filter);\n            } else {\n                filters = this._addFilterHandler(filters, filter);\n            }\n        }\n        this._filters = this.applyFilters(filters);\n        this._invokeFilteredListener(filter);\n\n        if (this._root !== null && this.hasFilter()) {\n            this.turnOnControls();\n        } else {\n            this.turnOffControls();\n        }\n\n        return this;\n    }\n\n    /**\n     * Returns all current filters. This method does not perform defensive cloning of the internal\n     * filter array before returning, therefore any modification of the returned array will effect the\n     * chart's internal filter storage.\n     * @returns {Array<*>}\n     */\n    filters () {\n        return this._filters;\n    }\n\n    highlightSelected (e) {\n        select(e).classed(constants.SELECTED_CLASS, true);\n        select(e).classed(constants.DESELECTED_CLASS, false);\n    }\n\n    fadeDeselected (e) {\n        select(e).classed(constants.SELECTED_CLASS, false);\n        select(e).classed(constants.DESELECTED_CLASS, true);\n    }\n\n    resetHighlight (e) {\n        select(e).classed(constants.SELECTED_CLASS, false);\n        select(e).classed(constants.DESELECTED_CLASS, false);\n    }\n\n    /**\n     * This function is passed to d3 as the onClick handler for each chart. The default behavior is to\n     * filter on the clicked datum (passed to the callback) and redraw the chart group.\n     *\n     * This function can be replaced in order to change the click behavior (but first look at\n     * @example\n     * var oldHandler = chart.onClick;\n     * chart.onClick = function(datum) {\n     *   // use datum.\n     * @param {*} datum\n     * @return {undefined}\n     */\n    onClick (datum) {\n        const filter = this.keyAccessor()(datum);\n        events.trigger(() => {\n            this.filter(filter);\n            this.redrawGroup();\n        });\n    }\n\n    /**\n     * Set or get the filter handler. The filter handler is a function that performs the filter action\n     * on a specific dimension. Using a custom filter handler allows you to perform additional logic\n     * before or after filtering.\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter crossfilter.dimension.filter}\n     * @example\n     * // the default filter handler handles all possible cases for the charts in dc.js\n     * // you can replace it with something more specialized for your own chart\n     * chart.filterHandler(function (dimension, filters) {\n     *     if (filters.length === 0) {\n     *         // the empty case (no filtering)\n     *         dimension.filter(null);\n     *     } else if (filters.length === 1 && !filters[0].isFiltered) {\n     *         // single value and not a function-based filter\n     *         dimension.filterExact(filters[0]);\n     *     } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n     *         // single range-based filter\n     *         dimension.filterRange(filters[0]);\n     *     } else {\n     *         // an array of values, or an array of filter objects\n     *         dimension.filterFunction(function (d) {\n     *             for (var i = 0; i < filters.length; i++) {\n     *                 var filter = filters[i];\n     *                 if (filter.isFiltered && filter.isFiltered(d)) {\n     *                     return true;\n     *                 } else if (filter <= d && filter >= d) {\n     *                     return true;\n     *                 }\n     *             }\n     *             return false;\n     *         });\n     *     }\n     *     return filters;\n     * });\n     *\n     * // custom filter handler\n     * chart.filterHandler(function(dimension, filter){\n     *     var newFilter = filter + 10;\n     *     dimension.filter(newFilter);\n     *     return newFilter; // set the actual filter value to the new value\n     * });\n     * @param {Function} [filterHandler]\n     * @returns {Function|BaseMixin}\n     */\n    filterHandler (filterHandler) {\n        if (!arguments.length) {\n            return this._filterHandler;\n        }\n        this._filterHandler = filterHandler;\n        return this;\n    }\n\n    // abstract function stub\n    _doRender () {\n        // do nothing in base, should be overridden by sub-function\n        return this;\n    }\n\n    _doRedraw () {\n        // do nothing in base, should be overridden by sub-function\n        return this;\n    }\n\n    legendables () {\n        // do nothing in base, should be overridden by sub-function\n        return [];\n    }\n\n    legendHighlight () {\n        // do nothing in base, should be overridden by sub-function\n    }\n\n    legendReset () {\n        // do nothing in base, should be overridden by sub-function\n    }\n\n    legendToggle () {\n        // do nothing in base, should be overriden by sub-function\n    }\n\n    isLegendableHidden () {\n        // do nothing in base, should be overridden by sub-function\n        return false;\n    }\n\n    /**\n     * Set or get the key accessor function. The key accessor function is used to retrieve the key\n     * value from the crossfilter group. Key values are used differently in different charts, for\n     * example keys correspond to slices in a pie chart and x axis positions in a grid coordinate chart.\n     * @example\n     * // default key accessor\n     * chart.keyAccessor(function(d) { return d.key; });\n     * // custom key accessor for a multi-value crossfilter reduction\n     * chart.keyAccessor(function(p) { return p.value.absGain; });\n     * @param {Function} [keyAccessor]\n     * @returns {Function|BaseMixin}\n     */\n    keyAccessor (keyAccessor) {\n        if (!arguments.length) {\n            return this._keyAccessor;\n        }\n        this._keyAccessor = keyAccessor;\n        return this;\n    }\n\n    /**\n     * Set or get the value accessor function. The value accessor function is used to retrieve the\n     * value from the crossfilter group. Group values are used differently in different charts, for\n     * example values correspond to slice sizes in a pie chart and y axis positions in a grid\n     * coordinate chart.\n     * @example\n     * // default value accessor\n     * chart.valueAccessor(function(d) { return d.value; });\n     * // custom value accessor for a multi-value crossfilter reduction\n     * chart.valueAccessor(function(p) { return p.value.percentageGain; });\n     * @param {Function} [valueAccessor]\n     * @returns {Function|BaseMixin}\n     */\n    valueAccessor (valueAccessor) {\n        if (!arguments.length) {\n            return this._valueAccessor;\n        }\n        this._valueAccessor = valueAccessor;\n        return this;\n    }\n\n    /**\n     * Set or get the label function. The chart class will use this function to render labels for each\n     * child element in the chart, e.g. slices in a pie chart or bubbles in a bubble chart. Not every\n     * chart supports the label function, for example line chart does not use this function\n     * at all. By default, enables labels; pass false for the second parameter if this is not desired.\n     * @example\n     * // default label function just return the key\n     * chart.label(function(d) { return d.key; });\n     * // label function has access to the standard d3 data binding and can get quite complicated\n     * chart.label(function(d) { return d.data.key + '(' + Math.floor(d.data.value / all.value() * 100) + '%)'; });\n     * @param {Function} [labelFunction]\n     * @param {Boolean} [enableLabels=true]\n     * @returns {Function|BaseMixin}\n     */\n    label (labelFunction, enableLabels) {\n        if (!arguments.length) {\n            return this._label;\n        }\n        this._label = labelFunction;\n        if ((enableLabels === undefined) || enableLabels) {\n            this._renderLabel = true;\n        }\n        return this;\n    }\n\n    /**\n     * Turn on/off label rendering\n     * @param {Boolean} [renderLabel=false]\n     * @returns {Boolean|BaseMixin}\n     */\n    renderLabel (renderLabel) {\n        if (!arguments.length) {\n            return this._renderLabel;\n        }\n        this._renderLabel = renderLabel;\n        return this;\n    }\n\n    /**\n     * Set or get the title function. The chart class will use this function to render the SVGElement title\n     * (usually interpreted by browser as tooltips) for each child element in the chart, e.g. a slice\n     * in a pie chart or a bubble in a bubble chart. Almost every chart supports the title function;\n     * however in grid coordinate charts you need to turn off the brush in order to see titles, because\n     * otherwise the brush layer will block tooltip triggering.\n     * @example\n     * // default title function shows \"key: value\"\n     * chart.title(function(d) { return d.key + ': ' + d.value; });\n     * // title function has access to the standard d3 data binding and can get quite complicated\n     * chart.title(function(p) {\n     *    return p.key.getFullYear()\n     *        + '\\n'\n     *        + 'Index Gain: ' + numberFormat(p.value.absGain) + '\\n'\n     *        + 'Index Gain in Percentage: ' + numberFormat(p.value.percentageGain) + '%\\n'\n     *        + 'Fluctuation / Index Ratio: ' + numberFormat(p.value.fluctuationPercentage) + '%';\n     * });\n     * @param {Function} [titleFunction]\n     * @returns {Function|BaseMixin}\n     */\n    title (titleFunction) {\n        if (!arguments.length) {\n            return this._title;\n        }\n        this._title = titleFunction;\n        return this;\n    }\n\n    /**\n     * Turn on/off title rendering, or return the state of the render title flag if no arguments are\n     * given.\n     * @param {Boolean} [renderTitle=true]\n     * @returns {Boolean|BaseMixin}\n     */\n    renderTitle (renderTitle) {\n        if (!arguments.length) {\n            return this._renderTitle;\n        }\n        this._renderTitle = renderTitle;\n        return this;\n    }\n\n    /**\n     * Get or set the chart group to which this chart belongs. Chart groups are rendered or redrawn\n     * together since it is expected they share the same underlying crossfilter data set.\n     * @param {String} [chartGroup]\n     * @returns {String|BaseMixin}\n     */\n    chartGroup (chartGroup) {\n        if (!arguments.length) {\n            return this._chartGroup;\n        }\n        if (!this._isChild) {\n            deregisterChart(this, this._chartGroup);\n        }\n        this._chartGroup = chartGroup;\n        if (!this._isChild) {\n            registerChart(this, this._chartGroup);\n        }\n        return this;\n    }\n\n    /**\n     * Expire the internal chart cache. dc charts cache some data internally on a per chart basis to\n     * speed up rendering and avoid unnecessary calculation; however it might be useful to clear the\n     * cache if you have changed state which will affect rendering.  For example, if you invoke\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}\n     * function or reset group or dimension after rendering, it is a good idea to\n     * clear the cache to make sure charts are rendered properly.\n     * @returns {BaseMixin}\n     */\n    expireCache () {\n        // do nothing in base, should be overridden by sub-function\n        return this;\n    }\n\n    /**\n     * Attach a Legend widget to this chart. The legend widget will automatically draw legend labels\n     * based on the color setting and names associated with each group.\n     * @example\n     * chart.legend(new Legend().x(400).y(10).itemHeight(13).gap(5))\n     * @param {Legend} [legend]\n     * @returns {Legend|BaseMixin}\n     */\n    legend (legend) {\n        if (!arguments.length) {\n            return this._legend;\n        }\n        this._legend = legend;\n        this._legend.parent(this);\n        return this;\n    }\n\n    /**\n     * Returns the internal numeric ID of the chart.\n     * @returns {String}\n     */\n    chartID () {\n        return this.__dcFlag__;\n    }\n\n    /**\n     * Set chart options using a configuration object. Each key in the object will cause the method of\n     * the same name to be called with the value to set that attribute for the chart.\n     * @example\n     * chart.options({dimension: myDimension, group: myGroup});\n     * @param {{}} opts\n     * @returns {BaseMixin}\n     */\n    options (opts) {\n        const applyOptions = [\n            'anchor',\n            'group',\n            'xAxisLabel',\n            'yAxisLabel',\n            'stack',\n            'title',\n            'point',\n            'getColor',\n            'overlayGeoJson'\n        ];\n\n        for (const o in opts) {\n            if (typeof (this[o]) === 'function') {\n                if (opts[o] instanceof Array && applyOptions.indexOf(o) !== -1) {\n                    this[o].apply(this, opts[o]);\n                } else {\n                    this[o].call(this, opts[o]);\n                }\n            } else {\n                logger.debug(`Not a valid option setter name: ${o}`);\n            }\n        }\n        return this;\n    }\n\n    /**\n     * All dc chart instance supports the following listeners.\n     * Supports the following events:\n     * * `renderlet` - This listener function will be invoked after transitions after redraw and render. Replaces the\n     * deprecated {@link BaseMixin#renderlet renderlet} method.\n     * * `pretransition` - Like `.on('renderlet', ...)` but the event is fired before transitions start.\n     * * `preRender` - This listener function will be invoked before chart rendering.\n     * * `postRender` - This listener function will be invoked after chart finish rendering including\n     * all renderlets' logic.\n     * * `preRedraw` - This listener function will be invoked before chart redrawing.\n     * * `postRedraw` - This listener function will be invoked after chart finish redrawing\n     * including all renderlets' logic.\n     * * `filtered` - This listener function will be invoked after a filter is applied, added or removed.\n     * * `zoomed` - This listener function will be invoked after a zoom is triggered.\n     * @see {@link https://github.com/d3/d3-dispatch/blob/master/README.md#dispatch_on d3.dispatch.on}\n     * @example\n     * .on('renderlet', function(chart, filter){...})\n     * .on('pretransition', function(chart, filter){...})\n     * .on('preRender', function(chart){...})\n     * .on('postRender', function(chart){...})\n     * .on('preRedraw', function(chart){...})\n     * .on('postRedraw', function(chart){...})\n     * .on('filtered', function(chart, filter){...})\n     * .on('zoomed', function(chart, filter){...})\n     * @param {String} event\n     * @param {Function} listener\n     * @returns {BaseMixin}\n     */\n    on (event, listener) {\n        this._listeners.on(event, listener);\n        return this;\n    }\n\n    /**\n     * A renderlet is similar to an event listener on rendering event. Multiple renderlets can be added\n     * to an individual chart.  Each time a chart is rerendered or redrawn the renderlets are invoked\n     * right after the chart finishes its transitions, giving you a way to modify the SVGElements.\n     * Renderlet functions take the chart instance as the only input parameter and you can\n     * use the dc API or use raw d3 to achieve pretty much any effect.\n     *\n     * Use {@link BaseMixin#on on} with a 'renderlet' prefix.\n     * Generates a random key for the renderlet, which makes it hard to remove.\n     * @deprecated chart.renderlet has been deprecated. Please use chart.on(\"renderlet.<renderletKey>\", renderletFunction)\n     * @example\n     * // do this instead of .renderlet(function(chart) { ... })\n     * chart.on(\"renderlet\", function(chart){\n     *     // mix of dc API and d3 manipulation\n     *     chart.select('g.y').style('display', 'none');\n     *     // its a closure so you can also access other chart variable available in the closure scope\n     *     moveChart.filter(chart.filter());\n     * });\n     * @param {Function} renderletFunction\n     * @returns {BaseMixin}\n     */\n    renderlet (renderletFunction) {\n        logger.warnOnce('chart.renderlet has been deprecated. Please use chart.on(\"renderlet.<renderletKey>\", renderletFunction)');\n        this.on(`renderlet.${utils.uniqueId()}`, renderletFunction);\n        return this;\n    }\n}\n\nexport const baseMixin = () => new BaseMixin();\n","import {scaleLinear, scaleOrdinal, scaleQuantize} from 'd3-scale';\nimport {interpolateHcl} from 'd3-interpolate';\nimport {max, min} from 'd3-array';\n\nimport {config} from '../core/config';\nimport {utils} from '../core/utils';\n\n/**\n * The Color Mixin is an abstract chart functional class providing universal coloring support\n * as a mix-in for any concrete chart implementation.\n * @mixin ColorMixin\n * @param {Object} Base\n * @returns {ColorMixin}\n */\nexport const ColorMixin = Base => class extends Base {\n    constructor () {\n        super();\n\n        this._colors = scaleOrdinal(config.defaultColors());\n\n        this._colorAccessor = d => this.keyAccessor()(d);\n        this._colorCalculator = undefined;\n\n        {\n            const chart = this;\n            // ES6: this method is called very differently from stack-mixin and derived charts\n            // Removing and placing it as a member method is tricky\n\n            /**\n                 * Get the color for the datum d and counter i. This is used internally by charts to retrieve a color.\n                 * @method getColor\n                 * @memberof ColorMixin\n                 * @instance\n                 * @param {*} d\n                 * @param {Number} [i]\n                 * @returns {String}\n                 */\n            chart.getColor = function (d, i) {\n                return chart._colorCalculator ?\n                    chart._colorCalculator.call(this, d, i) :\n                    chart._colors(chart._colorAccessor.call(this, d, i));\n            };\n        }\n    }\n\n    /**\n         * Set the domain by determining the min and max values as retrieved by\n         * {@link ColorMixin#colorAccessor .colorAccessor} over the chart's dataset.\n         * @memberof ColorMixin\n         * @instance\n         * @returns {ColorMixin}\n         */\n    calculateColorDomain () {\n        const newDomain = [min(this.data(), this.colorAccessor()),\n                           max(this.data(), this.colorAccessor())];\n        this._colors.domain(newDomain);\n        return this;\n    }\n\n    /**\n         * Retrieve current color scale or set a new color scale. This methods accepts any function that\n         * operates like a d3 scale.\n         * @memberof ColorMixin\n         * @instance\n         * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\n         * @example\n         * // alternate categorical scale\n         * chart.colors(d3.scale.category20b());\n         * // ordinal scale\n         * chart.colors(d3.scaleOrdinal().range(['red','green','blue']));\n         * // convenience method, the same as above\n         * chart.ordinalColors(['red','green','blue']);\n         * // set a linear scale\n         * chart.linearColors([\"#4575b4\", \"#ffffbf\", \"#a50026\"]);\n         * @param {d3.scale} [colorScale=d3.scaleOrdinal(d3.schemeCategory20c)]\n         * @returns {d3.scale|ColorMixin}\n         */\n    colors (colorScale) {\n        if (!arguments.length) {\n            return this._colors;\n        }\n        if (colorScale instanceof Array) {\n            this._colors = scaleQuantize().range(colorScale); // deprecated legacy support, note: this fails for ordinal domains\n        } else {\n            this._colors = typeof colorScale === 'function' ? colorScale : utils.constant(colorScale);\n        }\n        return this;\n    }\n\n    /**\n         * Convenience method to set the color scale to\n         * {@link https://github.com/d3/d3-scale/blob/master/README.md#ordinal-scales d3.scaleOrdinal} with\n         * range `r`.\n         * @memberof ColorMixin\n         * @instance\n         * @param {Array<String>} r\n         * @returns {ColorMixin}\n         */\n    ordinalColors (r) {\n        return this.colors(scaleOrdinal().range(r));\n    }\n\n    /**\n         * Convenience method to set the color scale to an Hcl interpolated linear scale with range `r`.\n         * @memberof ColorMixin\n         * @instance\n         * @param {Array<Number>} r\n         * @returns {ColorMixin}\n         */\n    linearColors (r) {\n        return this.colors(scaleLinear()\n                .range(r)\n                .interpolate(interpolateHcl));\n    }\n\n    /**\n         * Set or the get color accessor function. This function will be used to map a data point in a\n         * crossfilter group to a color value on the color scale. The default function uses the key\n         * accessor.\n         * @memberof ColorMixin\n         * @instance\n         * @example\n         * // default index based color accessor\n         * .colorAccessor(function (d, i){return i;})\n         * // color accessor for a multi-value crossfilter reduction\n         * .colorAccessor(function (d){return d.value.absGain;})\n         * @param {Function} [colorAccessor]\n         * @returns {Function|ColorMixin}\n         */\n    colorAccessor (colorAccessor) {\n        if (!arguments.length) {\n            return this._colorAccessor;\n        }\n        this._colorAccessor = colorAccessor;\n        return this;\n    }\n\n    /**\n         * Set or get the current domain for the color mapping function. The domain must be supplied as an\n         * array.\n         *\n         * Note: previously this method accepted a callback function. Instead you may use a custom scale\n         * set by {@link ColorMixin#colors .colors}.\n         * @memberof ColorMixin\n         * @instance\n         * @param {Array<String>} [domain]\n         * @returns {Array<String>|ColorMixin}\n         */\n    colorDomain (domain) {\n        if (!arguments.length) {\n            return this._colors.domain();\n        }\n        this._colors.domain(domain);\n        return this;\n    }\n\n    /**\n         * Overrides the color selection algorithm, replacing it with a simple function.\n         *\n         * Normally colors will be determined by calling the `colorAccessor` to get a value, and then passing that\n         * value through the `colorScale`.\n         *\n         * But sometimes it is difficult to get a color scale to produce the desired effect. The `colorCalculator`\n         * takes the datum and index and returns a color directly.\n         * @memberof ColorMixin\n         * @instance\n         * @param {*} [colorCalculator]\n         * @returns {Function|ColorMixin}\n         */\n    colorCalculator (colorCalculator) {\n        if (!arguments.length) {\n            return this._colorCalculator || this.getColor;\n        }\n        this._colorCalculator = colorCalculator;\n        return this;\n    }\n};\n","import { ascending, descending, min, max } from 'd3-array';\nimport { scaleLinear } from 'd3-scale';\n\nimport {ColorMixin} from './color-mixin';\nimport {transition} from '../core/core';\nimport {events} from '../core/events';\nimport {d3compat} from '../core/config';\n\n/**\n * This Mixin provides reusable functionalities for any chart that needs to visualize data using bubbles.\n * @mixin BubbleMixin\n * @mixes ColorMixin\n * @param {Object} Base\n * @returns {BubbleMixin}\n */\nexport const BubbleMixin = Base => class extends ColorMixin(Base) {\n    constructor () {\n        super();\n\n        this._maxBubbleRelativeSize = 0.3;\n        this._minRadiusWithLabel = 10;\n        this._sortBubbleSize = false;\n        this._elasticRadius = false;\n        this._excludeElasticZero = true;\n\n        // These cane be used by derived classes as well, so member status\n        this.BUBBLE_NODE_CLASS = 'node';\n        this.BUBBLE_CLASS = 'bubble';\n        this.MIN_RADIUS = 10;\n\n        this.renderLabel(true);\n\n        this.data(group => {\n            const data = group.all();\n\n            if (this._keyboardAccessible) {\n                // sort based on the x value (key)\n                data.sort((a, b) => ascending(this.keyAccessor()(a), this.keyAccessor()(b)));\n            }\n\n            if (this._sortBubbleSize) {\n                // sort descending so smaller bubbles are on top\n                const radiusAccessor = this.radiusValueAccessor();\n                data.sort((a, b) => descending(radiusAccessor(a), radiusAccessor(b)));\n            }\n            return data;\n        });\n\n        this._r = scaleLinear().domain([0, 100]);\n    }\n\n    _rValueAccessor (d) {\n        return d.r;\n    }\n\n    /**\n         * Get or set the bubble radius scale. By default the bubble chart uses\n         * {@link https://github.com/d3/d3-scale/blob/master/README.md#scaleLinear d3.scaleLinear().domain([0, 100])}\n         * as its radius scale.\n         * @memberof BubbleMixin\n         * @instance\n         * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\n         * @param {d3.scale} [bubbleRadiusScale=d3.scaleLinear().domain([0, 100])]\n         * @returns {d3.scale|BubbleMixin}\n         */\n    r (bubbleRadiusScale) {\n        if (!arguments.length) {\n            return this._r;\n        }\n        this._r = bubbleRadiusScale;\n        return this;\n    }\n\n    /**\n         * Turn on or off the elastic bubble radius feature, or return the value of the flag. If this\n         * feature is turned on, then bubble radii will be automatically rescaled to fit the chart better.\n         * @memberof BubbleMixin\n         * @instance\n         * @param {Boolean} [elasticRadius=false]\n         * @returns {Boolean|BubbleChart}\n         */\n    elasticRadius (elasticRadius) {\n        if (!arguments.length) {\n            return this._elasticRadius;\n        }\n        this._elasticRadius = elasticRadius;\n        return this;\n    }\n\n    calculateRadiusDomain () {\n        if (this._elasticRadius) {\n            this.r().domain([this.rMin(), this.rMax()]);\n        }\n    }\n\n    /**\n         * Get or set the radius value accessor function. If set, the radius value accessor function will\n         * be used to retrieve a data value for each bubble. The data retrieved then will be mapped using\n         * the r scale to the actual bubble radius. This allows you to encode a data dimension using bubble\n         * size.\n         * @memberof BubbleMixin\n         * @instance\n         * @param {Function} [radiusValueAccessor]\n         * @returns {Function|BubbleMixin}\n         */\n    radiusValueAccessor (radiusValueAccessor) {\n        if (!arguments.length) {\n            return this._rValueAccessor;\n        }\n        this._rValueAccessor = radiusValueAccessor;\n        return this;\n    }\n\n    rMin () {\n        let values = this.data().map(this.radiusValueAccessor());\n        if(this._excludeElasticZero) {\n            values = values.filter(value => value > 0);\n        }\n        return min(values);\n    }\n\n    rMax () {\n        return max(this.data(), e => this.radiusValueAccessor()(e));\n    }\n\n    bubbleR (d) {\n        const value = this.radiusValueAccessor()(d);\n        let r = this.r()(value);\n        if (isNaN(r) || value <= 0) {\n            r = 0;\n        }\n        return r;\n    }\n\n    _labelFunction (d) {\n        return this.label()(d);\n    }\n\n    _shouldLabel (d) {\n        return (this.bubbleR(d) > this._minRadiusWithLabel);\n    }\n\n    _labelOpacity (d) {\n        return this._shouldLabel(d) ? 1 : 0;\n    }\n\n    _labelPointerEvent (d) {\n        return this._shouldLabel(d) ? 'all' : 'none';\n    }\n\n    _doRenderLabel (bubbleGEnter) {\n        if (this.renderLabel()) {\n            let label = bubbleGEnter.select('text');\n\n            if (label.empty()) {\n                label = bubbleGEnter.append('text')\n                        .attr('text-anchor', 'middle')\n                        .attr('dy', '.3em')\n                        .on('click', d3compat.eventHandler(d => this.onClick(d)));\n            }\n\n            label\n                    .attr('opacity', 0)\n                    .attr('pointer-events', d => this._labelPointerEvent(d))\n                    .text(d => this._labelFunction(d));\n            transition(label, this.transitionDuration(), this.transitionDelay())\n                    .attr('opacity', d => this._labelOpacity(d));\n        }\n    }\n\n    doUpdateLabels (bubbleGEnter) {\n        if (this.renderLabel()) {\n            const labels = bubbleGEnter.select('text')\n                    .attr('pointer-events', d => this._labelPointerEvent(d))\n                    .text(d => this._labelFunction(d));\n            transition(labels, this.transitionDuration(), this.transitionDelay())\n                    .attr('opacity', d => this._labelOpacity(d));\n        }\n    }\n\n    _titleFunction (d) {\n        return this.title()(d);\n    }\n\n    _doRenderTitles (g) {\n        if (this.renderTitle()) {\n            const title = g.select('title');\n\n            if (title.empty()) {\n                g.append('title').text(d => this._titleFunction(d));\n            }\n        }\n    }\n\n    doUpdateTitles (g) {\n        if (this.renderTitle()) {\n            g.select('title').text(d => this._titleFunction(d));\n        }\n    }\n\n    /**\n         * Turn on or off the bubble sorting feature, or return the value of the flag. If enabled,\n         * bubbles will be sorted by their radius, with smaller bubbles in front.\n         * @memberof BubbleChart\n         * @instance\n         * @param {Boolean} [sortBubbleSize=false]\n         * @returns {Boolean|BubbleChart}\n         */\n    sortBubbleSize (sortBubbleSize) {\n        if (!arguments.length) {\n            return this._sortBubbleSize;\n        }\n        this._sortBubbleSize = sortBubbleSize;\n        return this;\n    }\n\n    /**\n         * Get or set the minimum radius. This will be used to initialize the radius scale's range.\n         * @memberof BubbleMixin\n         * @instance\n         * @param {Number} [radius=10]\n         * @returns {Number|BubbleMixin}\n         */\n    minRadius (radius) {\n        if (!arguments.length) {\n            return this.MIN_RADIUS;\n        }\n        this.MIN_RADIUS = radius;\n        return this;\n    }\n\n    /**\n         * Get or set the minimum radius for label rendering. If a bubble's radius is less than this value\n         * then no label will be rendered.\n         * @memberof BubbleMixin\n         * @instance\n         * @param {Number} [radius=10]\n         * @returns {Number|BubbleMixin}\n         */\n\n    minRadiusWithLabel (radius) {\n        if (!arguments.length) {\n            return this._minRadiusWithLabel;\n        }\n        this._minRadiusWithLabel = radius;\n        return this;\n    }\n\n    /**\n         * Get or set the maximum relative size of a bubble to the length of x axis. This value is useful\n         * when the difference in radius between bubbles is too great.\n         * @memberof BubbleMixin\n         * @instance\n         * @param {Number} [relativeSize=0.3]\n         * @returns {Number|BubbleMixin}\n         */\n    maxBubbleRelativeSize (relativeSize) {\n        if (!arguments.length) {\n            return this._maxBubbleRelativeSize;\n        }\n        this._maxBubbleRelativeSize = relativeSize;\n        return this;\n    }\n\n    /**\n     * Should the chart exclude zero when calculating elastic bubble radius?\n     * @memberof BubbleMixin\n     * @instance\n     * @param  {Boolean} [excludeZero=true]\n     * @returns {Boolean|BubbleMixin}\n     */\n    excludeElasticZero (excludeZero) {\n        if (!arguments.length) {\n            return this._excludeElasticZero;\n        }\n        this._excludeElasticZero = excludeZero;\n        return this;\n    }\n\n    fadeDeselectedArea (selection) {\n        if (this.hasFilter()) {\n            const chart = this;\n            this.selectAll(`g.${chart.BUBBLE_NODE_CLASS}`).each(function (d) {\n                if (chart.isSelectedNode(d)) {\n                    chart.highlightSelected(this);\n                } else {\n                    chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            const chart = this;\n            this.selectAll(`g.${chart.BUBBLE_NODE_CLASS}`).each(function () {\n                chart.resetHighlight(this);\n            });\n        }\n    }\n\n    isSelectedNode (d) {\n        return this.hasFilter(d.key);\n    }\n\n    onClick (d) {\n        const filter = d.key;\n        events.trigger(() => {\n            this.filter(filter);\n            this.redrawGroup();\n        });\n    }\n};\n","import {sum} from 'd3-array';\n\n/**\n * Cap is a mixin that groups small data elements below a _cap_ into an *others* grouping for both the\n * Row and Pie Charts.\n *\n * The top ordered elements in the group up to the cap amount will be kept in the chart, and the rest\n * will be replaced with an *others* element, with value equal to the sum of the replaced values. The\n * keys of the elements below the cap limit are recorded in order to filter by those keys when the\n * others* element is clicked.\n * @mixin CapMixin\n * @param {Object} Base\n * @returns {CapMixin}\n */\nexport const CapMixin = Base => class extends Base {\n    constructor () {\n        super();\n\n        this._cap = Infinity;\n        this._takeFront = true;\n        this._othersLabel = 'Others';\n\n        this._othersGrouper = (topItems, restItems) => {\n            const restItemsSum = sum(restItems, this.valueAccessor()),\n                restKeys = restItems.map(this.keyAccessor());\n            if (restItemsSum > 0) {\n                return topItems.concat([{\n                    others: restKeys,\n                    key: this.othersLabel(),\n                    value: restItemsSum\n                }]);\n            }\n            return topItems;\n        };\n\n        // emulate old group.top(N) ordering\n        this.ordering(kv => -kv.value);\n\n        // return N \"top\" groups, where N is the cap, sorted by baseMixin.ordering\n        // whether top means front or back depends on takeFront\n        this.data(group => {\n            if (this._cap === Infinity) {\n                return this._computeOrderedGroups(group.all());\n            } else {\n                let items = group.all(), rest;\n                items = this._computeOrderedGroups(items); // sort by baseMixin.ordering\n\n                if (this._cap) {\n                    if (this._takeFront) {\n                        rest = items.slice(this._cap);\n                        items = items.slice(0, this._cap);\n                    } else {\n                        const start = Math.max(0, items.length - this._cap);\n                        rest = items.slice(0, start);\n                        items = items.slice(start);\n                    }\n                }\n\n                if (this._othersGrouper) {\n                    return this._othersGrouper(items, rest);\n                }\n                return items;\n            }\n        });\n    }\n\n    cappedKeyAccessor (d, i) {\n        if (d.others) {\n            return d.key;\n        }\n        return this.keyAccessor()(d, i);\n    }\n\n    cappedValueAccessor (d, i) {\n        if (d.others) {\n            return d.value;\n        }\n        return this.valueAccessor()(d, i);\n    }\n\n    /**\n         * Get or set the count of elements to that will be included in the cap. If there is an\n         * {@link CapMixin#othersGrouper othersGrouper}, any further elements will be combined in an\n         * extra element with its name determined by {@link CapMixin#othersLabel othersLabel}.\n         *\n         * As of dc.js 2.1 and onward, the capped charts use\n         * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all()}\n         * and {@link BaseMixin#ordering BaseMixin.ordering()} to determine the order of\n         * elements. Then `cap` and {@link CapMixin#takeFront takeFront} determine how many elements\n         * to keep, from which end of the resulting array.\n         *\n         * **Migration note:** Up through dc.js 2.0.*, capping used\n         * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_top group.top(N)},\n         * which selects the largest items according to\n         * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_order group.order()}.\n         * The chart then sorted the items according to {@link BaseMixin#ordering baseMixin.ordering()}.\n         * So the two values essentially had to agree, but if the `group.order()` was incorrect (it's\n         * easy to forget about), the wrong rows or slices would be displayed, in the correct order.\n         *\n         * If your chart previously relied on `group.order()`, use `chart.ordering()` instead. As of\n         * 2.1.5, the ordering defaults to sorting from greatest to least like `group.top(N)` did.\n         *\n         * If you want to cap by one ordering but sort by another, you can still do this by\n         * specifying your own {@link BaseMixin#data `.data()`} callback. For details, see the example\n         * {@link https://dc-js.github.io/dc.js/examples/cap-and-sort-differently.html Cap and Sort Differently}.\n         * @memberof CapMixin\n         * @instance\n         * @param {Number} [count=Infinity]\n         * @returns {Number|CapMixin}\n         */\n    cap (count) {\n        if (!arguments.length) {\n            return this._cap;\n        }\n        this._cap = count;\n        return this;\n    }\n\n    /**\n         * Get or set the direction of capping. If set, the chart takes the first\n         * {@link CapMixin#cap cap} elements from the sorted array of elements; otherwise\n         * it takes the last `cap` elements.\n         * @memberof CapMixin\n         * @instance\n         * @param {Boolean} [takeFront=true]\n         * @returns {Boolean|CapMixin}\n         */\n    takeFront (takeFront) {\n        if (!arguments.length) {\n            return this._takeFront;\n        }\n        this._takeFront = takeFront;\n        return this;\n    }\n\n    /**\n         * Get or set the label for *Others* slice when slices cap is specified.\n         * @memberof CapMixin\n         * @instance\n         * @param {String} [label=\"Others\"]\n         * @returns {String|CapMixin}\n         */\n    othersLabel (label) {\n        if (!arguments.length) {\n            return this._othersLabel;\n        }\n        this._othersLabel = label;\n        return this;\n    }\n\n    /**\n         * Get or set the grouper function that will perform the insertion of data for the *Others* slice\n         * if the slices cap is specified. If set to a falsy value, no others will be added.\n         *\n         * The grouper function takes an array of included (\"top\") items, and an array of the rest of\n         * the items. By default the grouper function computes the sum of the rest.\n         * @memberof CapMixin\n         * @instance\n         * @example\n         * // Do not show others\n         * chart.othersGrouper(null);\n         * // Default others grouper\n         * chart.othersGrouper(function (topItems, restItems) {\n         *     var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\n         *         restKeys = restItems.map(_chart.keyAccessor());\n         *     if (restItemsSum > 0) {\n         *         return topItems.concat([{\n         *             others: restKeys,\n         *             key: _chart.othersLabel(),\n         *             value: restItemsSum\n         *         }]);\n         *     }\n         *     return topItems;\n         * });\n         * @param {Function} [grouperFunction]\n         * @returns {Function|CapMixin}\n         */\n    othersGrouper (grouperFunction) {\n        if (!arguments.length) {\n            return this._othersGrouper;\n        }\n        this._othersGrouper = grouperFunction;\n        return this;\n    }\n\n    onClick (d) {\n        if (d.others) {\n            this.filter([d.others]);\n        }\n        super.onClick(d);\n    }\n};\n","import {BaseMixin} from './base-mixin';\n\n/**\n * Margin is a mixin that provides margin utility functions for both the Row Chart and Coordinate Grid\n * Charts.\n * @mixin MarginMixin\n * @param {Object} Base\n * @returns {MarginMixin}\n */\nexport class MarginMixin extends BaseMixin {\n    constructor () {\n        super();\n\n        this._margin = {top: 10, right: 50, bottom: 30, left: 30};\n    }\n\n    /**\n     * Get or set the margins for a particular coordinate grid chart instance. The margins is stored as\n     * an associative Javascript array.\n     * @memberof MarginMixin\n     * @instance\n     * @example\n     * var leftMargin = chart.margins().left; // 30 by default\n     * chart.margins().left = 50;\n     * leftMargin = chart.margins().left; // now 50\n     * @param {{top: Number, right: Number, left: Number, bottom: Number}} [margins={top: 10, right: 50, bottom: 30, left: 30}]\n     * @returns {{top: Number, right: Number, left: Number, bottom: Number}|MarginMixin}\n     */\n    margins (margins) {\n        if (!arguments.length) {\n            return this._margin;\n        }\n        this._margin = margins;\n        return this;\n    }\n\n    /**\n     * Effective width of the chart excluding margins (in pixels).\n     *\n     * @returns {number}\n     */\n    effectiveWidth () {\n        return this.width() - this.margins().left - this.margins().right;\n    }\n\n    /**\n     * Effective height of the chart excluding margins (in pixels).\n     *\n     * @returns {number}\n     */\n    effectiveHeight () {\n        return this.height() - this.margins().top - this.margins().bottom;\n    }\n}\n","import {schemeCategory10} from 'd3-scale-chromatic';\nimport {timeDay} from 'd3-time';\nimport {max, min} from 'd3-array';\nimport {scaleBand, scaleLinear, scaleOrdinal} from 'd3-scale';\nimport {axisTop, axisBottom, axisLeft, axisRight} from 'd3-axis';\nimport {zoom, zoomIdentity} from 'd3-zoom';\nimport {brushX} from 'd3-brush';\n\nimport {ColorMixin} from './color-mixin';\nimport {MarginMixin} from './margin-mixin';\nimport {optionalTransition, transition} from '../core/core';\nimport {units} from '../core/units';\nimport {constants} from '../core/constants';\nimport {utils} from '../core/utils';\nimport {d3compat} from '../core/config';\nimport {logger} from '../core/logger';\nimport {filters} from '../core/filters';\nimport {events} from '../core/events';\n\nconst GRID_LINE_CLASS = 'grid-line';\nconst HORIZONTAL_CLASS = 'horizontal';\nconst VERTICAL_CLASS = 'vertical';\nconst Y_AXIS_LABEL_CLASS = 'y-axis-label';\nconst X_AXIS_LABEL_CLASS = 'x-axis-label';\nconst CUSTOM_BRUSH_HANDLE_CLASS = 'custom-brush-handle';\nconst DEFAULT_AXIS_LABEL_PADDING = 12;\n\n/**\n * Coordinate Grid is an abstract base chart designed to support a number of coordinate grid based\n * concrete chart types, e.g. bar chart, line chart, and bubble chart.\n * @mixin CoordinateGridMixin\n * @mixes ColorMixin\n * @mixes MarginMixin\n */\nexport class CoordinateGridMixin extends ColorMixin(MarginMixin) {\n    constructor () {\n        super();\n\n        this.colors(scaleOrdinal(schemeCategory10));\n        this._mandatoryAttributes().push('x');\n        this._parent = undefined;\n        this._g = undefined;\n        this._chartBodyG = undefined;\n\n        this._x = undefined;\n        this._origX = undefined; // Will hold original scale in case of zoom\n        this._xOriginalDomain = undefined;\n        this._xAxis = null;\n        this._xUnits = units.integers;\n        this._xAxisPadding = 0;\n        this._xAxisPaddingUnit = timeDay;\n        this._xElasticity = false;\n        this._xAxisLabel = undefined;\n        this._xAxisLabelPadding = 0;\n        this._lastXDomain = undefined;\n\n        this._y = undefined;\n        this._yAxis = null;\n        this._yAxisPadding = 0;\n        this._yElasticity = false;\n        this._yAxisLabel = undefined;\n        this._yAxisLabelPadding = 0;\n\n        this._brush = brushX();\n\n        this._gBrush = undefined;\n        this._brushOn = true;\n        this._parentBrushOn = false;\n        this._round = undefined;\n        this._ignoreBrushEvents = false; // ignore when carrying out programmatic brush operations\n\n        this._renderHorizontalGridLine = false;\n        this._renderVerticalGridLine = false;\n\n        this._resizing = false;\n        this._unitCount = undefined;\n\n        this._zoomScale = [1, Infinity];\n        this._zoomOutRestrict = true;\n\n        this._zoom = zoom().on('zoom', d3compat.eventHandler((d, evt) => this._onZoom(evt)));\n        this._nullZoom = zoom().on('zoom', null);\n        this._hasBeenMouseZoomable = false;\n        this._ignoreZoomEvents = false; // ignore when carrying out programmatic zoom operations\n\n        this._rangeChart = undefined;\n        this._focusChart = undefined;\n\n        this._mouseZoomable = false;\n        this._clipPadding = 0;\n\n        this._fOuterRangeBandPadding = 0.5;\n        this._fRangeBandPadding = 0;\n\n        this._useRightYAxis = false;\n        this._useTopXAxis = false;\n    }\n\n    /**\n     * When changing the domain of the x or y scale, it is necessary to tell the chart to recalculate\n     * and redraw the axes. (`.rescale()` is called automatically when the x or y scale is replaced\n     * with {@link CoordinateGridMixin+x .x()} or {@link CoordinateGridMixin#y .y()}, and has\n     * no effect on elastic scales.)\n     * @returns {CoordinateGridMixin}\n     */\n    rescale () {\n        this._unitCount = undefined;\n        this._resizing = true;\n        return this;\n    }\n\n    resizing (resizing) {\n        if (!arguments.length) {\n            return this._resizing;\n        }\n        this._resizing = resizing;\n        return this;\n    }\n\n    /**\n     * Get or set the range selection chart associated with this instance. Setting the range selection\n     * chart using this function will automatically update its selection brush when the current chart\n     * zooms in. In return the given range chart will also automatically attach this chart as its focus\n     * chart hence zoom in when range brush updates.\n     *\n     * Usually the range and focus charts will share a dimension. The range chart will set the zoom\n     * boundaries for the focus chart, so its dimension values must be compatible with the domain of\n     * the focus chart.\n     *\n     * See the [Nasdaq 100 Index](http://dc-js.github.com/dc.js/) example for this effect in action.\n     * @param {CoordinateGridMixin} [rangeChart]\n     * @returns {CoordinateGridMixin}\n     */\n    rangeChart (rangeChart) {\n        if (!arguments.length) {\n            return this._rangeChart;\n        }\n        this._rangeChart = rangeChart;\n        this._rangeChart.focusChart(this);\n        return this;\n    }\n\n    /**\n     * Get or set the scale extent for mouse zooms.\n     * @param {Array<Number|Date>} [extent=[1, Infinity]]\n     * @returns {Array<Number|Date>|CoordinateGridMixin}\n     */\n    zoomScale (extent) {\n        if (!arguments.length) {\n            return this._zoomScale;\n        }\n        this._zoomScale = extent;\n        return this;\n    }\n\n    /**\n     * Get or set the zoom restriction for the chart. If true limits the zoom to origional domain of the chart.\n     * @param {Boolean} [zoomOutRestrict=true]\n     * @returns {Boolean|CoordinateGridMixin}\n     */\n    zoomOutRestrict (zoomOutRestrict) {\n        if (!arguments.length) {\n            return this._zoomOutRestrict;\n        }\n        this._zoomOutRestrict = zoomOutRestrict;\n        return this;\n    }\n\n    _generateG (parent) {\n        if (parent === undefined) {\n            this._parent = this.svg();\n        } else {\n            this._parent = parent;\n        }\n\n        const href = window.location.href.split('#')[0];\n\n        this._g = this._parent.append('g');\n\n        this._chartBodyG = this._g.append('g').attr('class', 'chart-body')\n            .attr('transform', `translate(${this.margins().left}, ${this.margins().top})`)\n            .attr('clip-path', `url(${href}#${this._getClipPathId()})`);\n\n        return this._g;\n    }\n\n    /**\n     * Get or set the root g element. This method is usually used to retrieve the g element in order to\n     * overlay custom svg drawing programatically. **Caution**: The root g element is usually generated\n     * by dc.js internals, and resetting it might produce unpredictable result.\n     * @param {SVGElement} [gElement]\n     * @returns {SVGElement|CoordinateGridMixin}\n     */\n    g (gElement) {\n        if (!arguments.length) {\n            return this._g;\n        }\n        this._g = gElement;\n        return this;\n    }\n\n    /**\n     * Set or get mouse zoom capability flag (default: false). When turned on the chart will be\n     * zoomable using the mouse wheel. If the range selector chart is attached zooming will also update\n     * the range selection brush on the associated range selector chart.\n     * @param {Boolean} [mouseZoomable=false]\n     * @returns {Boolean|CoordinateGridMixin}\n     */\n    mouseZoomable (mouseZoomable) {\n        if (!arguments.length) {\n            return this._mouseZoomable;\n        }\n        this._mouseZoomable = mouseZoomable;\n        return this;\n    }\n\n    /**\n     * Retrieve the svg group for the chart body.\n     * @param {SVGElement} [chartBodyG]\n     * @returns {SVGElement}\n     */\n    chartBodyG (chartBodyG) {\n        if (!arguments.length) {\n            return this._chartBodyG;\n        }\n        this._chartBodyG = chartBodyG;\n        return this;\n    }\n\n    /**\n     * **mandatory**\n     *\n     * Get or set the x scale. The x scale can be any d3\n     * {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale} or\n     * {@link https://github.com/d3/d3-scale/blob/master/README.md#ordinal-scales ordinal scale}\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\n     * @example\n     * // set x to a linear scale\n     * chart.x(d3.scaleLinear().domain([-2500, 2500]))\n     * // set x to a time scale to generate histogram\n     * chart.x(d3.scaleTime().domain([new Date(1985, 0, 1), new Date(2012, 11, 31)]))\n     * @param {d3.scale} [xScale]\n     * @returns {d3.scale|CoordinateGridMixin}\n     */\n    x (xScale) {\n        if (!arguments.length) {\n            return this._x;\n        }\n        this._x = xScale;\n        this._xOriginalDomain = this._x.domain();\n        this.rescale();\n        return this;\n    }\n\n    xOriginalDomain () {\n        return this._xOriginalDomain;\n    }\n\n    /**\n     * Set or get the xUnits function. The coordinate grid chart uses the xUnits function to calculate\n     * the number of data projections on the x axis such as the number of bars for a bar chart or the\n     * number of dots for a line chart.\n     *\n     * This function is expected to return a Javascript array of all data points on the x axis, or\n     * the number of points on the axis. d3 time range functions [d3.timeDays, d3.timeMonths, and\n     * d3.timeYears](https://github.com/d3/d3-time/blob/master/README.md#intervals) are all valid\n     * xUnits functions.\n     *\n     * dc.js also provides a few units function, see the {@link units Units Namespace} for\n     * a list of built-in units functions.\n     *\n     * Note that as of dc.js 3.0, `units.ordinal` is not a real function, because it is not\n     * possible to define this function compliant with the d3 range functions. It was already a\n     * magic value which caused charts to behave differently, and now it is completely so.\n     * @example\n     * // set x units to count days\n     * chart.xUnits(d3.timeDays);\n     * // set x units to count months\n     * chart.xUnits(d3.timeMonths);\n     *\n     * // A custom xUnits function can be used as long as it follows the following interface:\n     * // units in integer\n     * function(start, end) {\n     *      // simply calculates how many integers in the domain\n     *      return Math.abs(end - start);\n     * }\n     *\n     * // fixed units\n     * function(start, end) {\n     *      // be aware using fixed units will disable the focus/zoom ability on the chart\n     *      return 1000;\n     * }\n     * @param {Function} [xUnits=units.integers]\n     * @returns {Function|CoordinateGridMixin}\n     */\n    xUnits (xUnits) {\n        if (!arguments.length) {\n            return this._xUnits;\n        }\n        this._xUnits = xUnits;\n        return this;\n    }\n\n    /**\n     * Set or get the x axis used by a particular coordinate grid chart instance. This function is most\n     * useful when x axis customization is required. The x axis in dc.js is an instance of a\n     * {@link https://github.com/d3/d3-axis/blob/master/README.md#axisBottom d3 bottom axis object};\n     * therefore it supports any valid d3 axisBottom manipulation.\n     *\n     * **Caution**: The x axis is usually generated internally by dc; resetting it may cause\n     * unexpected results. Note also that when used as a getter, this function is not chainable:\n     * it returns the axis, not the chart,\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n         * so attempting to call chart functions after calling `.xAxis()` will fail}.\n     * @see {@link https://github.com/d3/d3-axis/blob/master/README.md#axisBottom d3.axisBottom}\n     * @example\n     * // customize x axis tick format\n     * chart.xAxis().tickFormat(function(v) {return v + '%';});\n     * // customize x axis tick values\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.axis} [xAxis=d3.axisBottom()]\n     * @returns {d3.axis|CoordinateGridMixin}\n     */\n    xAxis (xAxis) {\n        if (!arguments.length) {\n            if (!this._xAxis) {\n                this._xAxis = this._createXAxis();\n            }\n            return this._xAxis;\n        }\n        this._xAxis = xAxis;\n        return this;\n    }\n\n    /**\n     * Turn on/off elastic x axis behavior. If x axis elasticity is turned on, then the grid chart will\n     * attempt to recalculate the x axis range whenever a redraw event is triggered.\n     * @param {Boolean} [elasticX=false]\n     * @returns {Boolean|CoordinateGridMixin}\n     */\n    elasticX (elasticX) {\n        if (!arguments.length) {\n            return this._xElasticity;\n        }\n        this._xElasticity = elasticX;\n        return this;\n    }\n\n    /**\n     * Set or get x axis padding for the elastic x axis. The padding will be added to both end of the x\n     * axis if elasticX is turned on; otherwise it is ignored.\n     *\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n     * number or date x axes.  When padding a date axis, an integer represents number of units being padded\n     * and a percentage string will be treated the same as an integer. The unit will be determined by the\n     * xAxisPaddingUnit variable.\n     * @param {Number|String} [padding=0]\n     * @returns {Number|String|CoordinateGridMixin}\n     */\n    xAxisPadding (padding) {\n        if (!arguments.length) {\n            return this._xAxisPadding;\n        }\n        this._xAxisPadding = padding;\n        return this;\n    }\n\n    /**\n     * Set or get x axis padding unit for the elastic x axis. The padding unit will determine which unit to\n     * use when applying xAxis padding if elasticX is turned on and if x-axis uses a time dimension;\n     * otherwise it is ignored.\n     *\n     * The padding unit should be a\n     * [d3 time interval](https://github.com/d3/d3-time/blob/master/README.md#self._interval).\n     * For backward compatibility with dc.js 2.0, it can also be the name of a d3 time interval\n     * ('day', 'hour', etc). Available arguments are the\n     * [d3 time intervals](https://github.com/d3/d3-time/blob/master/README.md#intervals d3.timeInterval).\n     * @param {String} [unit=d3.timeDay]\n     * @returns {String|CoordinateGridMixin}\n     */\n    xAxisPaddingUnit (unit) {\n        if (!arguments.length) {\n            return this._xAxisPaddingUnit;\n        }\n        this._xAxisPaddingUnit = unit;\n        return this;\n    }\n\n    /**\n     * Returns the number of units displayed on the x axis. If the x axis is ordinal (`xUnits` is\n     * `units.ordinal`), this is the number of items in the domain of the x scale. Otherwise, the\n     * x unit count is calculated using the {@link CoordinateGridMixin#xUnits xUnits} function.\n     * @returns {Number}\n     */\n    xUnitCount () {\n        if (this._unitCount === undefined) {\n            if (this.isOrdinal()) {\n                // In this case it number of items in domain\n                this._unitCount = this.x().domain().length;\n            } else {\n                this._unitCount = this.xUnits()(this.x().domain()[0], this.x().domain()[1]);\n\n                // Sometimes xUnits() may return an array while sometimes directly the count\n                if (this._unitCount instanceof Array) {\n                    this._unitCount = this._unitCount.length;\n                }\n            }\n        }\n\n        return this._unitCount;\n    }\n\n    /**\n     * Gets or sets whether the chart should be drawn with a right axis instead of a left axis. When\n     * used with a chart in a composite chart, allows both left and right Y axes to be shown on a\n     * chart.\n     * @param {Boolean} [useRightYAxis=false]\n     * @returns {Boolean|CoordinateGridMixin}\n     */\n    useRightYAxis (useRightYAxis) {\n        if (!arguments.length) {\n            return this._useRightYAxis;\n        }\n\n        // We need to warn if value is changing after self._yAxis was created\n        if (this._useRightYAxis !== useRightYAxis && this._yAxis) {\n            logger.warn('Value of useRightYAxis has been altered, after yAxis was created. ' +\n                'You might get unexpected yAxis behavior. ' +\n                'Make calls to useRightYAxis sooner in your chart creation process.');\n        }\n\n        this._useRightYAxis = useRightYAxis;\n        return this;\n    }\n\n    /**\n     * Gets or sets whether the chart should be drawn with a top axis instead of a bottom axis. When\n     * used with a chart in a composite chart, allows both top and bottom X axes to be shown on a\n     * chart.\n     * @param {Boolean} [useTopXAxis=false]\n     * @returns {Boolean|CoordinateGridMixin}\n     */\n    useTopXAxis (useTopXAxis) {\n        if (!arguments.length) {\n            return this._useTopXAxis;\n        }\n\n        // We need to warn if value is changing after self._yAxis was created\n        if (this._useTopXAxis !== useTopXAxis && this._xAxis) {\n            logger.warn('Value of useTopXAxis has been altered, after xAxis was created. ' +\n                'You might get unexpected yAxis behavior. ' +\n                'Make calls to useTopXAxis sooner in your chart creation process.');\n        }\n\n        this._useTopXAxis = useTopXAxis;\n        return this;\n    }\n\n    /**\n     * Returns true if the chart is using ordinal xUnits ({@link units.ordinal units.ordinal}, or false\n     * otherwise. Most charts behave differently with ordinal data and use the result of this method to\n     * trigger the appropriate logic.\n     * @returns {Boolean}\n     */\n    isOrdinal () {\n        return this.xUnits() === units.ordinal;\n    }\n\n    _useOuterPadding () {\n        return true;\n    }\n\n    _ordinalXDomain () {\n        const groups = this._computeOrderedGroups(this.data());\n        return groups.map(this.keyAccessor());\n    }\n\n    _createXAxis () {\n        return this._useTopXAxis ? axisTop() : axisBottom();\n    }\n\n    // eslint-disable-next-line complexity\n    _prepareXAxis (g, render) {\n        if (!this.isOrdinal()) {\n            if (this.elasticX()) {\n                this._x.domain([this.xAxisMin(), this.xAxisMax()]);\n            }\n        } else { // self._chart.isOrdinal()\n            // D3v4 - Ordinal charts would need scaleBand\n            // bandwidth is a method in scaleBand\n            // (https://github.com/d3/d3-scale/blob/master/README.md#scaleBand)\n            if (!this._x.bandwidth) {\n                // If self._x is not a scaleBand create a new scale and\n                // copy the original domain to the new scale\n                logger.warn('For compatibility with d3v4+, dc.js d3.0 ordinal bar/line/bubble charts need ' +\n                    'd3.scaleBand() for the x scale, instead of d3.scaleOrdinal(). ' +\n                    'Replacing .x() with a d3.scaleBand with the same domain - ' +\n                    'make the same change in your code to avoid this warning!');\n                this._x = scaleBand().domain(this._x.domain());\n            }\n\n            if (this.elasticX() || this._x.domain().length === 0) {\n                this._x.domain(this._ordinalXDomain());\n            }\n        }\n\n        // has the domain changed?\n        const xdom = this._x.domain();\n        if (render || !utils.arraysEqual(this._lastXDomain, xdom)) {\n            this.rescale();\n        }\n        this._lastXDomain = xdom;\n\n        // please can't we always use rangeBands for bar charts?\n        if (this.isOrdinal()) {\n            this._x.range([0, this.xAxisLength()])\n                .paddingInner(this._fRangeBandPadding)\n                .paddingOuter(this._useOuterPadding() ? this._fOuterRangeBandPadding : 0);\n        } else {\n            this._x.range([0, this.xAxisLength()]);\n        }\n\n        if (!this._xAxis) {\n            this._xAxis = this._createXAxis()\n        }\n\n        this._xAxis = this._xAxis.scale(this.x());\n\n        this._renderVerticalGridLines(g);\n    }\n\n    renderXAxis (g) {\n        let axisXG = g.select('g.x');\n\n        if (axisXG.empty()) {\n            axisXG = g.append('g')\n                .attr('class', 'axis x')\n                .attr('transform', `translate(${this.margins().left},${this._xAxisY()})`);\n        }\n\n        let axisXLab = g.select(`text.${X_AXIS_LABEL_CLASS}`);\n        const axisXLabY = this._useTopXAxis ? this._xAxisLabelPadding : (this.height() - this._xAxisLabelPadding);\n        if (axisXLab.empty() && this.xAxisLabel()) {\n            axisXLab = g.append('text')\n                .attr('class', X_AXIS_LABEL_CLASS)\n                .attr('transform', `translate(${this.margins().left + this.xAxisLength() / 2},${axisXLabY})`)\n                .attr('text-anchor', 'middle');\n        }\n        if (this.xAxisLabel() && axisXLab.text() !== this.xAxisLabel()) {\n            axisXLab.text(this.xAxisLabel());\n        }\n\n        transition(axisXG, this.transitionDuration(), this.transitionDelay())\n            .attr('transform', `translate(${this.margins().left},${this._xAxisY()})`)\n            .call(this._xAxis);\n        transition(axisXLab, this.transitionDuration(), this.transitionDelay())\n            .attr('transform', `translate(${this.margins().left + this.xAxisLength() / 2},${axisXLabY})`);\n    }\n\n    _renderVerticalGridLines (g) {\n        let gridLineG = g.select(`g.${VERTICAL_CLASS}`);\n\n        if (this._renderVerticalGridLine) {\n            if (gridLineG.empty()) {\n                gridLineG = g.insert('g', ':first-child')\n                    .attr('class', `${GRID_LINE_CLASS} ${VERTICAL_CLASS}`)\n                    .attr('transform', `translate(${this.margins().left},${this.margins().top})`);\n            }\n\n            const ticks = this._xAxis.tickValues() ? this._xAxis.tickValues() :\n                (typeof this._x.ticks === 'function' ? this._x.ticks.apply(this._x, this._xAxis.tickArguments()) : this._x.domain());\n\n            const lines = gridLineG.selectAll('line')\n                .data(ticks);\n\n            // enter\n            const linesGEnter = lines.enter()\n                .append('line')\n                .attr('x1', d => this._x(d))\n                .attr('y1', this._xAxisY() - this.margins().top)\n                .attr('x2', d => this._x(d))\n                .attr('y2', 0)\n                .attr('opacity', 0);\n            transition(linesGEnter, this.transitionDuration(), this.transitionDelay())\n                .attr('opacity', 0.5);\n\n            // update\n            transition(lines, this.transitionDuration(), this.transitionDelay())\n                .attr('x1', d => this._x(d))\n                .attr('y1', this._xAxisY() - this.margins().top)\n                .attr('x2', d => this._x(d))\n                .attr('y2', 0);\n\n            // exit\n            lines.exit().remove();\n        } else {\n            gridLineG.selectAll('line').remove();\n        }\n    }\n\n    _xAxisY () {\n        return this._useTopXAxis ? this.margins().top : this.height() - this.margins().bottom;\n    }\n\n    xAxisLength () {\n        return this.effectiveWidth();\n    }\n\n    /**\n     * Set or get the x axis label. If setting the label, you may optionally include additional padding to\n     * the margin to make room for the label. By default the padded is set to 12 to accomodate the text height.\n     * @param {String} [labelText]\n     * @param {Number} [padding=12]\n     * @returns {String}\n     */\n    xAxisLabel (labelText, padding) {\n        if (!arguments.length) {\n            return this._xAxisLabel;\n        }\n        this._xAxisLabel = labelText;\n        this.margins().bottom -= this._xAxisLabelPadding;\n        this._xAxisLabelPadding = (padding === undefined) ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        this.margins().bottom += this._xAxisLabelPadding;\n        return this;\n    }\n\n    _createYAxis () {\n        return this._useRightYAxis ? axisRight() : axisLeft();\n    }\n\n    _prepareYAxis (g) {\n        if (this._y === undefined || this.elasticY()) {\n            if (this._y === undefined) {\n                this._y = scaleLinear();\n            }\n            const _min = this.yAxisMin() || 0;\n            const _max = this.yAxisMax() || 0;\n            this._y.domain([_min, _max]).rangeRound([this.yAxisHeight(), 0]);\n        }\n\n        this._y.range([this.yAxisHeight(), 0]);\n\n        if (!this._yAxis) {\n            this._yAxis = this._createYAxis();\n        }\n\n        this._yAxis.scale(this._y);\n\n        this._renderHorizontalGridLinesForAxis(g, this._y, this._yAxis);\n    }\n\n    renderYAxisLabel (axisClass, text, rotation, labelXPosition) {\n        labelXPosition = labelXPosition || this._yAxisLabelPadding;\n\n        let axisYLab = this.g().select(`text.${Y_AXIS_LABEL_CLASS}.${axisClass}-label`);\n        const labelYPosition = (this.margins().top + this.yAxisHeight() / 2);\n        if (axisYLab.empty() && text) {\n            axisYLab = this.g().append('text')\n                .attr('transform', `translate(${labelXPosition},${labelYPosition}),rotate(${rotation})`)\n                .attr('class', `${Y_AXIS_LABEL_CLASS} ${axisClass}-label`)\n                .attr('text-anchor', 'middle')\n                .text(text);\n        }\n        if (text && axisYLab.text() !== text) {\n            axisYLab.text(text);\n        }\n        transition(axisYLab, this.transitionDuration(), this.transitionDelay())\n            .attr('transform', `translate(${labelXPosition},${labelYPosition}),rotate(${rotation})`);\n    }\n\n    renderYAxisAt (axisClass, axis, position) {\n        let axisYG = this.g().select(`g.${axisClass}`);\n        if (axisYG.empty()) {\n            axisYG = this.g().append('g')\n                .attr('class', `axis ${axisClass}`)\n                .attr('transform', `translate(${position},${this.margins().top})`);\n        }\n\n        transition(axisYG, this.transitionDuration(), this.transitionDelay())\n            .attr('transform', `translate(${position},${this.margins().top})`)\n            .call(axis);\n    }\n\n    renderYAxis () {\n        const axisPosition = this._useRightYAxis ? (this.width() - this.margins().right) : this._yAxisX();\n        this.renderYAxisAt('y', this._yAxis, axisPosition);\n        const labelPosition = this._useRightYAxis ? (this.width() - this._yAxisLabelPadding) : this._yAxisLabelPadding;\n        const rotation = this._useRightYAxis ? 90 : -90;\n        this.renderYAxisLabel('y', this.yAxisLabel(), rotation, labelPosition);\n    }\n\n    _renderHorizontalGridLinesForAxis (g, scale, axis) {\n        let gridLineG = g.select(`g.${HORIZONTAL_CLASS}`);\n\n        if (this._renderHorizontalGridLine) {\n            // see https://github.com/d3/d3-axis/blob/master/src/axis.js#L48\n            const ticks = axis.tickValues() ? axis.tickValues() :\n                (scale.ticks ? scale.ticks.apply(scale, axis.tickArguments()) : scale.domain());\n\n            if (gridLineG.empty()) {\n                gridLineG = g.insert('g', ':first-child')\n                    .attr('class', `${GRID_LINE_CLASS} ${HORIZONTAL_CLASS}`)\n                    .attr('transform', `translate(${this.margins().left},${this.margins().top})`);\n            }\n\n            const lines = gridLineG.selectAll('line')\n                .data(ticks);\n\n            // enter\n            const linesGEnter = lines.enter()\n                .append('line')\n                .attr('x1', 1)\n                .attr('y1', d => scale(d))\n                .attr('x2', this.xAxisLength())\n                .attr('y2', d => scale(d))\n                .attr('opacity', 0);\n            transition(linesGEnter, this.transitionDuration(), this.transitionDelay())\n                .attr('opacity', 0.5);\n\n            // update\n            transition(lines, this.transitionDuration(), this.transitionDelay())\n                .attr('x1', 1)\n                .attr('y1', d => scale(d))\n                .attr('x2', this.xAxisLength())\n                .attr('y2', d => scale(d));\n\n            // exit\n            lines.exit().remove();\n        } else {\n            gridLineG.selectAll('line').remove();\n        }\n    }\n\n    _yAxisX () {\n        return this.useRightYAxis() ? this.width() - this.margins().right : this.margins().left;\n    }\n\n    /**\n     * Set or get the y axis label. If setting the label, you may optionally include additional padding\n     * to the margin to make room for the label. By default the padding is set to 12 to accommodate the\n     * text height.\n     * @param {String} [labelText]\n     * @param {Number} [padding=12]\n     * @returns {String|CoordinateGridMixin}\n     */\n    yAxisLabel (labelText, padding) {\n        if (!arguments.length) {\n            return this._yAxisLabel;\n        }\n        this._yAxisLabel = labelText;\n        this.margins().left -= this._yAxisLabelPadding;\n        this._yAxisLabelPadding = (padding === undefined) ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        this.margins().left += this._yAxisLabelPadding;\n        return this;\n    }\n\n    /**\n     * Get or set the y scale. The y scale is typically automatically determined by the chart implementation.\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\n     * @param {d3.scale} [yScale]\n     * @returns {d3.scale|CoordinateGridMixin}\n     */\n    y (yScale) {\n        if (!arguments.length) {\n            return this._y;\n        }\n        this._y = yScale;\n        this.rescale();\n        return this;\n    }\n\n    /**\n     * Set or get the y axis used by the coordinate grid chart instance. This function is most useful\n     * when y axis customization is required. Depending on `useRightYAxis` the y axis in dc.js is an instance of\n     * either [d3.axisLeft](https://github.com/d3/d3-axis/blob/master/README.md#axisLeft) or\n     * [d3.axisRight](https://github.com/d3/d3-axis/blob/master/README.md#axisRight); therefore it supports any\n     * valid d3 axis manipulation.\n     *\n     * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\n     * unexpected results.  Note also that when used as a getter, this function is not chainable: it\n     * returns the axis, not the chart,\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n         * so attempting to call chart functions after calling `.yAxis()` will fail}.\n     * In addition, depending on whether you are going to use the axis on left or right\n     * you need to appropriately pass [d3.axisLeft](https://github.com/d3/d3-axis/blob/master/README.md#axisLeft)\n     * or [d3.axisRight](https://github.com/d3/d3-axis/blob/master/README.md#axisRight)\n     * @see {@link https://github.com/d3/d3-axis/blob/master/README.md d3.axis}\n     * @example\n     * // customize y axis tick format\n     * chart.yAxis().tickFormat(function(v) {return v + '%';});\n     * // customize y axis tick values\n     * chart.yAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.axisLeft|d3.axisRight} [yAxis]\n     * @returns {d3.axisLeft|d3.axisRight|CoordinateGridMixin}\n     */\n    yAxis (yAxis) {\n        if (!arguments.length) {\n            if (!this._yAxis) {\n                this._yAxis = this._createYAxis();\n            }\n            return this._yAxis;\n        }\n        this._yAxis = yAxis;\n        return this;\n    }\n\n    /**\n     * Turn on/off elastic y axis behavior. If y axis elasticity is turned on, then the grid chart will\n     * attempt to recalculate the y axis range whenever a redraw event is triggered.\n     * @param {Boolean} [elasticY=false]\n     * @returns {Boolean|CoordinateGridMixin}\n     */\n    elasticY (elasticY) {\n        if (!arguments.length) {\n            return this._yElasticity;\n        }\n        this._yElasticity = elasticY;\n        return this;\n    }\n\n    /**\n     * Turn on/off horizontal grid lines.\n     * @param {Boolean} [renderHorizontalGridLines=false]\n     * @returns {Boolean|CoordinateGridMixin}\n     */\n    renderHorizontalGridLines (renderHorizontalGridLines) {\n        if (!arguments.length) {\n            return this._renderHorizontalGridLine;\n        }\n        this._renderHorizontalGridLine = renderHorizontalGridLines;\n        return this;\n    }\n\n    /**\n     * Turn on/off vertical grid lines.\n     * @param {Boolean} [renderVerticalGridLines=false]\n     * @returns {Boolean|CoordinateGridMixin}\n     */\n    renderVerticalGridLines (renderVerticalGridLines) {\n        if (!arguments.length) {\n            return this._renderVerticalGridLine;\n        }\n        this._renderVerticalGridLine = renderVerticalGridLines;\n        return this;\n    }\n\n    /**\n     * Calculates the minimum x value to display in the chart. Includes xAxisPadding if set.\n     * @returns {*}\n     */\n    xAxisMin () {\n        const m = min(this.data(), e => this.keyAccessor()(e));\n        return utils.subtract(m, this._xAxisPadding, this._xAxisPaddingUnit);\n    }\n\n    /**\n     * Calculates the maximum x value to display in the chart. Includes xAxisPadding if set.\n     * @returns {*}\n     */\n    xAxisMax () {\n        const m = max(this.data(), e => this.keyAccessor()(e));\n        return utils.add(m, this._xAxisPadding, this._xAxisPaddingUnit);\n    }\n\n    /**\n     * Calculates the minimum y value to display in the chart. Includes yAxisPadding if set.\n     * @returns {*}\n     */\n    yAxisMin () {\n        const m = min(this.data(), e => this.valueAccessor()(e));\n        return utils.subtract(m, this._yAxisPadding);\n    }\n\n    /**\n     * Calculates the maximum y value to display in the chart. Includes yAxisPadding if set.\n     * @returns {*}\n     */\n    yAxisMax () {\n        const m = max(this.data(), e => this.valueAccessor()(e));\n        return utils.add(m, this._yAxisPadding);\n    }\n\n    /**\n     * Set or get y axis padding for the elastic y axis. The padding will be added to the top and\n     * bottom of the y axis if elasticY is turned on; otherwise it is ignored.\n     *\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n     * number or date axes. When padding a date axis, an integer represents number of days being padded\n     * and a percentage string will be treated the same as an integer.\n     * @param {Number|String} [padding=0]\n     * @returns {Number|CoordinateGridMixin}\n     */\n    yAxisPadding (padding) {\n        if (!arguments.length) {\n            return this._yAxisPadding;\n        }\n        this._yAxisPadding = padding;\n        return this;\n    }\n\n    yAxisHeight () {\n        return this.effectiveHeight();\n    }\n\n    /**\n     * Set or get the rounding function used to quantize the selection when brushing is enabled.\n     * @example\n     * // set x unit round to by month, this will make sure range selection brush will\n     * // select whole months\n     * chart.round(d3.timeMonth.round);\n     * @param {Function} [round]\n     * @returns {Function|CoordinateGridMixin}\n     */\n    round (round) {\n        if (!arguments.length) {\n            return this._round;\n        }\n        this._round = round;\n        return this;\n    }\n\n    _rangeBandPadding (_) {\n        if (!arguments.length) {\n            return this._fRangeBandPadding;\n        }\n        this._fRangeBandPadding = _;\n        return this;\n    }\n\n    _outerRangeBandPadding (_) {\n        if (!arguments.length) {\n            return this._fOuterRangeBandPadding;\n        }\n        this._fOuterRangeBandPadding = _;\n        return this;\n    }\n\n    filter (_) {\n        if (!arguments.length) {\n            return super.filter();\n        }\n\n        super.filter(_);\n\n        this.redrawBrush(_, false);\n\n        return this;\n    }\n\n    /**\n     * Get or set the brush. Brush must be an instance of d3 brushes\n     * https://github.com/d3/d3-brush/blob/master/README.md\n     * You will use this only if you are writing a new chart type that supports brushing.\n     *\n     * **Caution**: dc creates and manages brushes internally. Go through and understand the source code\n     * if you want to pass a new brush object. Even if you are only using the getter,\n     * the brush object may not behave the way you expect.\n     *\n     * @param {d3.brush} [_]\n     * @returns {d3.brush|CoordinateGridMixin}\n     */\n    brush (_) {\n        if (!arguments.length) {\n            return this._brush;\n        }\n        this._brush = _;\n        return this;\n    }\n\n    renderBrush (g, doTransition) {\n        if (this._brushOn) {\n            this._brush.on('start brush end', d3compat.eventHandler((d, evt) => this._brushing(evt)));\n\n            // To retrieve selection we need self._gBrush\n            this._gBrush = g.append('g')\n                .attr('class', 'brush')\n                .attr('transform', `translate(${this.margins().left},${this.margins().top})`);\n\n            this.setBrushExtents();\n\n            this.createBrushHandlePaths(this._gBrush, doTransition);\n\n            this.redrawBrush(this.filter(), doTransition);\n        }\n    }\n\n    createBrushHandlePaths (gBrush) {\n        let brushHandles = gBrush.selectAll(`path.${CUSTOM_BRUSH_HANDLE_CLASS}`).data([{type: 'w'}, {type: 'e'}]);\n\n        brushHandles = brushHandles\n            .enter()\n            .append('path')\n            .attr('class', CUSTOM_BRUSH_HANDLE_CLASS)\n            .merge(brushHandles);\n\n        brushHandles\n            .attr('d', d => this.resizeHandlePath(d));\n    }\n\n    extendBrush (brushSelection) {\n        if (brushSelection && this.round()) {\n            brushSelection[0] = this.round()(brushSelection[0]);\n            brushSelection[1] = this.round()(brushSelection[1]);\n        }\n        return brushSelection;\n    }\n\n    brushIsEmpty (brushSelection) {\n        return !brushSelection || brushSelection[1] <= brushSelection[0];\n    }\n\n    _brushing (evt) {\n        if (this._ignoreBrushEvents) {\n            return;\n        }\n\n        let brushSelection = evt.selection;\n        if (brushSelection) {\n            brushSelection = brushSelection.map(this.x().invert);\n        }\n\n        brushSelection = this.extendBrush(brushSelection);\n\n        this.redrawBrush(brushSelection, false);\n\n        const rangedFilter = this.brushIsEmpty(brushSelection) ? null : filters.RangedFilter(brushSelection[0], brushSelection[1]);\n\n        events.trigger(() => {\n            this.applyBrushSelection(rangedFilter);\n        }, constants.EVENT_DELAY);\n    }\n\n    // This can be overridden in a derived chart. For example Composite chart overrides it\n    applyBrushSelection (rangedFilter) {\n        this.replaceFilter(rangedFilter);\n        this.redrawGroup();\n    }\n\n    _withoutBrushEvents (closure) {\n        const oldValue = this._ignoreBrushEvents;\n        this._ignoreBrushEvents = true;\n\n        try {\n            closure();\n        } finally {\n            this._ignoreBrushEvents = oldValue;\n        }\n    }\n\n    setBrushExtents (doTransition) {\n        this._withoutBrushEvents(() => {\n            // Set boundaries of the brush, must set it before applying to self._gBrush\n            this._brush.extent([[0, 0], [this.effectiveWidth(), this.effectiveHeight()]]);\n        });\n\n        this._gBrush\n            .call(this._brush);\n    }\n\n    redrawBrush (brushSelection, doTransition) {\n        if (this._brushOn && this._gBrush) {\n            if (this._resizing) {\n                this.setBrushExtents(doTransition);\n            }\n\n            if (!brushSelection) {\n                this._withoutBrushEvents(() => {\n                    this._gBrush\n                        .call(this._brush.move, null);\n                })\n\n                this._gBrush.selectAll(`path.${CUSTOM_BRUSH_HANDLE_CLASS}`)\n                    .attr('display', 'none');\n            } else {\n                const scaledSelection = [this._x(brushSelection[0]), this._x(brushSelection[1])];\n\n                const gBrush =\n                    optionalTransition(doTransition, this.transitionDuration(), this.transitionDelay())(this._gBrush);\n\n                this._withoutBrushEvents(() => {\n                    gBrush\n                        .call(this._brush.move, scaledSelection);\n                });\n\n                gBrush.selectAll(`path.${CUSTOM_BRUSH_HANDLE_CLASS}`)\n                    .attr('display', null)\n                    .attr('transform', (d, i) => `translate(${this._x(brushSelection[i])}, 0)`)\n                    .attr('d', d => this.resizeHandlePath(d));\n            }\n        }\n        this.fadeDeselectedArea(brushSelection);\n    }\n\n    fadeDeselectedArea (brushSelection) {\n        // do nothing, sub-chart should override this function\n    }\n\n    // borrowed from Crossfilter example\n    resizeHandlePath (d) {\n        d = d.type;\n        const e = +(d === 'e'), x = e ? 1 : -1, y = this.effectiveHeight() / 3;\n        return `M${0.5 * x},${y \n        }A6,6 0 0 ${e} ${6.5 * x},${y + 6 \n        }V${2 * y - 6 \n        }A6,6 0 0 ${e} ${0.5 * x},${2 * y \n        }Z` +\n            `M${2.5 * x},${y + 8 \n            }V${2 * y - 8 \n            }M${4.5 * x},${y + 8 \n            }V${2 * y - 8}`;\n    }\n\n    _getClipPathId () {\n        return `${this.anchorName().replace(/[ .#=\\[\\]\"]/g, '-')}-clip`;\n    }\n\n    /**\n     * Get or set the padding in pixels for the clip path. Once set padding will be applied evenly to\n     * the top, left, right, and bottom when the clip path is generated. If set to zero, the clip area\n     * will be exactly the chart body area minus the margins.\n     * @param {Number} [padding=5]\n     * @returns {Number|CoordinateGridMixin}\n     */\n    clipPadding (padding) {\n        if (!arguments.length) {\n            return this._clipPadding;\n        }\n        this._clipPadding = padding;\n        return this;\n    }\n\n    _generateClipPath () {\n        const defs = utils.appendOrSelect(this._parent, 'defs');\n        // cannot select <clippath> elements; bug in WebKit, must select by id\n        // https://groups.google.com/forum/#!topic/d3-js/6EpAzQ2gU9I\n        const id = this._getClipPathId();\n        const chartBodyClip = utils.appendOrSelect(defs, `#${id}`, 'clipPath').attr('id', id);\n\n        const padding = this._clipPadding * 2;\n\n        utils.appendOrSelect(chartBodyClip, 'rect')\n            .attr('width', this.xAxisLength() + padding)\n            .attr('height', this.yAxisHeight() + padding)\n            .attr('transform', `translate(-${this._clipPadding}, -${this._clipPadding})`);\n    }\n\n    _preprocessData () {\n    }\n\n    _doRender () {\n        this.resetSvg();\n\n        this._preprocessData();\n\n        this._generateG();\n        this._generateClipPath();\n\n        this._drawChart(true);\n\n        this._configureMouseZoom();\n\n        return this;\n    }\n\n    _doRedraw () {\n        this._preprocessData();\n\n        this._drawChart(false);\n        this._generateClipPath();\n\n        return this;\n    }\n\n    _drawChart (render) {\n        if (this.isOrdinal()) {\n            this._brushOn = false;\n        }\n\n        this._prepareXAxis(this.g(), render);\n        this._prepareYAxis(this.g());\n\n        this.plotData();\n\n        if (this.elasticX() || this._resizing || render) {\n            this.renderXAxis(this.g());\n        }\n\n        if (this.elasticY() || this._resizing || render) {\n            this.renderYAxis(this.g());\n        }\n\n        if (render) {\n            this.renderBrush(this.g(), false);\n        } else {\n            // Animate the brush only while resizing\n            this.redrawBrush(this.filter(), this._resizing);\n        }\n        this.fadeDeselectedArea(this.filter());\n        this.resizing(false);\n    }\n\n    _configureMouseZoom () {\n        // Save a copy of original x scale\n        this._origX = this._x.copy();\n\n        if (this._mouseZoomable) {\n            this._enableMouseZoom();\n        } else if (this._hasBeenMouseZoomable) {\n            this._disableMouseZoom();\n        }\n    }\n\n    _enableMouseZoom () {\n        this._hasBeenMouseZoomable = true;\n\n        const extent = [[0, 0], [this.effectiveWidth(), this.effectiveHeight()]];\n\n        this._zoom\n            .scaleExtent(this._zoomScale)\n            .extent(extent)\n            .duration(this.transitionDuration());\n\n        if (this._zoomOutRestrict) {\n            // Ensure minimum zoomScale is at least 1\n            const zoomScaleMin = Math.max(this._zoomScale[0], 1);\n            this._zoom\n                .translateExtent(extent)\n                .scaleExtent([zoomScaleMin, this._zoomScale[1]]);\n        }\n\n        this.root().call(this._zoom);\n\n        // Tell D3 zoom our current zoom/pan status\n        this._updateD3zoomTransform();\n    }\n\n    _disableMouseZoom () {\n        this.root().call(this._nullZoom);\n    }\n\n    _zoomHandler (newDomain, noRaiseEvents) {\n        let domFilter;\n\n        if (this._hasRangeSelected(newDomain)) {\n            this.x().domain(newDomain);\n            domFilter = filters.RangedFilter(newDomain[0], newDomain[1]);\n        } else {\n            this.x().domain(this._xOriginalDomain);\n            domFilter = null;\n        }\n\n        this.replaceFilter(domFilter);\n        this.rescale();\n        this.redraw();\n\n        if (!noRaiseEvents) {\n            if (this._rangeChart && !utils.arraysEqual(this.filter(), this._rangeChart.filter())) {\n                events.trigger(() => {\n                    this._rangeChart.replaceFilter(domFilter);\n                    this._rangeChart.redraw();\n                });\n            }\n\n            this._invokeZoomedListener();\n            events.trigger(() => {\n                this.redrawGroup();\n            }, constants.EVENT_DELAY);\n        }\n    }\n\n    // event.transform.rescaleX(self._origX).domain() should give back newDomain\n    _domainToZoomTransform (newDomain, origDomain, xScale) {\n        const k = (origDomain[1] - origDomain[0]) / (newDomain[1] - newDomain[0]);\n        const xt = -1 * xScale(newDomain[0]);\n\n        return zoomIdentity.scale(k).translate(xt, 0);\n    }\n\n    // If we changing zoom status (for example by calling focus), tell D3 zoom about it\n    _updateD3zoomTransform () {\n        if (this._zoom) {\n            this._withoutZoomEvents(() => {\n                this._zoom.transform(this.root(), this._domainToZoomTransform(this.x().domain(), this._xOriginalDomain, this._origX));\n            });\n        }\n    }\n\n    _withoutZoomEvents (closure) {\n        const oldValue = this._ignoreZoomEvents;\n        this._ignoreZoomEvents = true;\n\n        try {\n            closure();\n        } finally {\n            this._ignoreZoomEvents = oldValue;\n        }\n    }\n\n    _onZoom (evt) {\n        // ignore zoom events if it was caused by a programmatic change\n        if (this._ignoreZoomEvents) {\n            return;\n        }\n\n        const newDomain = evt.transform.rescaleX(this._origX).domain();\n        this.focus(newDomain, false);\n    }\n\n    _checkExtents (ext, outerLimits) {\n        if (!ext || ext.length !== 2 || !outerLimits || outerLimits.length !== 2) {\n            return ext;\n        }\n\n        if (ext[0] > outerLimits[1] || ext[1] < outerLimits[0]) {\n            console.warn('Could not intersect extents, will reset');\n        }\n        // Math.max does not work (as the values may be dates as well)\n        return [ext[0] > outerLimits[0] ? ext[0] : outerLimits[0], ext[1] < outerLimits[1] ? ext[1] : outerLimits[1]];\n    }\n\n    /**\n     * Zoom this chart to focus on the given range. The given range should be an array containing only\n     * 2 elements (`[start, end]`) defining a range in the x domain. If the range is not given or set\n     * to null, then the zoom will be reset. _For focus to work elasticX has to be turned off;\n     * otherwise focus will be ignored.\n     *\n     * To avoid ping-pong volley of events between a pair of range and focus charts please set\n     * `noRaiseEvents` to `true`. In that case it will update this chart but will not fire `zoom` event\n     * and not try to update back the associated range chart.\n     * If you are calling it manually - typically you will leave it to `false` (the default).\n     *\n     * @example\n     * chart.on('renderlet', function(chart) {\n     *     // smooth the rendering through event throttling\n     *     events.trigger(function(){\n     *          // focus some other chart to the range selected by user on this chart\n     *          someOtherChart.focus(chart.filter());\n     *     });\n     * })\n     * @param {Array<Number>} [range]\n     * @param {Boolean} [noRaiseEvents = false]\n     * @return {undefined}\n     */\n    focus (range, noRaiseEvents) {\n        if (this._zoomOutRestrict) {\n            // ensure range is within self._xOriginalDomain\n            range = this._checkExtents(range, this._xOriginalDomain);\n\n            // If it has an associated range chart ensure range is within domain of that rangeChart\n            if (this._rangeChart) {\n                range = this._checkExtents(range, this._rangeChart.x().domain());\n            }\n        }\n\n        this._zoomHandler(range, noRaiseEvents);\n        this._updateD3zoomTransform();\n    }\n\n    refocused () {\n        return !utils.arraysEqual(this.x().domain(), this._xOriginalDomain);\n    }\n\n    focusChart (c) {\n        if (!arguments.length) {\n            return this._focusChart;\n        }\n        this._focusChart = c;\n        this.on('filtered.dcjs-range-chart', chart => {\n            if (!chart.filter()) {\n                events.trigger(() => {\n                    this._focusChart.x().domain(this._focusChart.xOriginalDomain(), true);\n                });\n            } else if (!utils.arraysEqual(chart.filter(), this._focusChart.filter())) {\n                events.trigger(() => {\n                    this._focusChart.focus(chart.filter(), true);\n                });\n            }\n        });\n        return this;\n    }\n\n    /**\n     * Turn on/off the brush-based range filter. When brushing is on then user can drag the mouse\n     * across a chart with a quantitative scale to perform range filtering based on the extent of the\n     * brush, or click on the bars of an ordinal bar chart or slices of a pie chart to filter and\n     * un-filter them. However turning on the brush filter will disable other interactive elements on\n     * the chart such as highlighting, tool tips, and reference lines. Zooming will still be possible\n     * if enabled, but only via scrolling (panning will be disabled.)\n     * @param {Boolean} [brushOn=true]\n     * @returns {Boolean|CoordinateGridMixin}\n     */\n    brushOn (brushOn) {\n        if (!arguments.length) {\n            return this._brushOn;\n        }\n        this._brushOn = brushOn;\n        return this;\n    }\n\n    /**\n     * This will be internally used by composite chart onto children. Please go not invoke directly.\n     *\n     * @protected\n     * @param {Boolean} [brushOn=false]\n     * @returns {Boolean|CoordinateGridMixin}\n     */\n    parentBrushOn (brushOn) {\n        if (!arguments.length) {\n            return this._parentBrushOn;\n        }\n        this._parentBrushOn = brushOn;\n        return this;\n    }\n\n    // Get the SVG rendered brush\n    gBrush () {\n        return this._gBrush;\n    }\n\n    _hasRangeSelected (range) {\n        return range instanceof Array && range.length > 1;\n    }\n}\n","// https://github.com/d3/d3-plugins/blob/master/box/box.js\n// * Original source March 22, 2013\n// * Enhancements integrated on May 13, 2018 for dc.js library only\n\n// https://github.com/d3/d3-plugins/blob/master/LICENSE\n// Copyright (c) 2012-2015, Michael Bostock\n// All rights reserved.\n\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n// * Redistributions of source code must retain the above copyright notice, this\n//   list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright notice,\n//   this list of conditions and the following disclaimer in the documentation\n//   and/or other materials provided with the distribution.\n//\n// * The name Michael Bostock may not be used to endorse or promote products\n//   derived from this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL MICHAEL BOSTOCK BE LIABLE FOR ANY DIRECT,\n// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n/*eslint complexity: 0*/\n\n// Inspired by http://informationandvisualization.de/blog/box-plot\n\nimport {ascending, quantile, range} from 'd3-array';\nimport {select} from 'd3-selection';\nimport {scaleLinear} from 'd3-scale';\nimport {timerFlush} from 'd3-timer';\n\nimport {utils} from '../core/utils';\n\nexport const d3Box = function () {\n    let width = 1;\n    let height = 1;\n    let duration = 0;\n    const delay = 0;\n    let domain = null;\n    let value = Number;\n    let whiskers = boxWhiskers;\n    let quartiles = boxQuartiles;\n    let tickFormat = null;\n\n    // Enhanced attributes\n    let renderDataPoints = false;\n    const dataRadius = 3;\n    let dataOpacity = 0.3;\n    let dataWidthPortion = 0.8;\n    let renderTitle = false;\n    let showOutliers = true;\n    let boldOutlier = false;\n\n\n    // For each small multiple…\n    function box (g) {\n        g.each(function (data, index) {\n            data = data.map(value).sort(ascending);\n            const _g = select(this);\n            const n = data.length;\n            let min;\n            let max;\n\n            // Leave if there are no items.\n            if (n === 0) {return;}\n\n            // Compute quartiles. Must return exactly 3 elements.\n            const quartileData = data.quartiles = quartiles(data);\n\n            // Compute whiskers. Must return exactly 2 elements, or null.\n            const whiskerIndices = whiskers && whiskers.call(this, data, index),\n                whiskerData = whiskerIndices && whiskerIndices.map(_i => data[_i]);\n\n            // Compute outliers. If no whiskers are specified, all data are 'outliers'.\n            // We compute the outliers as indices, so that we can join across transitions!\n            const outlierIndices = whiskerIndices ?\n                range(0, whiskerIndices[0]).concat(range(whiskerIndices[1] + 1, n)) : range(n);\n\n            // Determine the maximum value based on if outliers are shown\n            if (showOutliers) {\n                min = data[0];\n                max = data[n - 1];\n            } else {\n                min = data[whiskerIndices[0]];\n                max = data[whiskerIndices[1]];\n            }\n            const pointIndices = range(whiskerIndices[0], whiskerIndices[1] + 1);\n\n            // Compute the new x-scale.\n            const x1 = scaleLinear()\n                .domain(domain && domain.call(this, data, index) || [min, max])\n                .range([height, 0]);\n\n            // Retrieve the old x-scale, if this is an update.\n            const x0 = this.__chart__ || scaleLinear()\n                .domain([0, Infinity])\n                .range(x1.range());\n\n            // Stash the new scale.\n            this.__chart__ = x1;\n\n            // Note: the box, median, and box tick elements are fixed in number,\n            // so we only have to handle enter and update. In contrast, the outliers\n            // and other elements are variable, so we need to exit them! Variable\n            // elements also fade in and out.\n\n            // Update center line: the vertical line spanning the whiskers.\n            const center = _g.selectAll('line.center')\n                .data(whiskerData ? [whiskerData] : []);\n\n            center.enter().insert('line', 'rect')\n                .attr('class', 'center')\n                .attr('x1', width / 2)\n                .attr('y1', d => x0(d[0]))\n                .attr('x2', width / 2)\n                .attr('y2', d => x0(d[1]))\n                .style('opacity', 1e-6)\n                .transition()\n                .duration(duration)\n                .delay(delay)\n                .style('opacity', 1)\n                .attr('y1', d => x1(d[0]))\n                .attr('y2', d => x1(d[1]));\n\n            center.transition()\n                .duration(duration)\n                .delay(delay)\n                .style('opacity', 1)\n                .attr('x1', width / 2)\n                .attr('x2', width / 2)\n                .attr('y1', d => x1(d[0]))\n                .attr('y2', d => x1(d[1]));\n\n            center.exit().transition()\n                .duration(duration)\n                .delay(delay)\n                .style('opacity', 1e-6)\n                .attr('y1', d => x1(d[0]))\n                .attr('y2', d => x1(d[1]))\n                .remove();\n\n            // Update innerquartile box.\n            const _box = _g.selectAll('rect.box')\n                .data([quartileData]);\n\n            _box.enter().append('rect')\n                .attr('class', 'box')\n                .attr('x', 0)\n                .attr('y', d => x0(d[2]))\n                .attr('width', width)\n                .attr('height', d => x0(d[0]) - x0(d[2]))\n                .style('fill-opacity', (renderDataPoints) ? 0.1 : 1)\n                .transition()\n                .duration(duration)\n                .delay(delay)\n                .attr('y', d => x1(d[2]))\n                .attr('height', d => x1(d[0]) - x1(d[2]));\n\n            _box.transition()\n                .duration(duration)\n                .delay(delay)\n                .attr('width', width)\n                .attr('y', d => x1(d[2]))\n                .attr('height', d => x1(d[0]) - x1(d[2]));\n\n            // Update median line.\n            const medianLine = _g.selectAll('line.median')\n                .data([quartileData[1]]);\n\n            medianLine.enter().append('line')\n                .attr('class', 'median')\n                .attr('x1', 0)\n                .attr('y1', x0)\n                .attr('x2', width)\n                .attr('y2', x0)\n                .transition()\n                .duration(duration)\n                .delay(delay)\n                .attr('y1', x1)\n                .attr('y2', x1);\n\n            medianLine.transition()\n                .duration(duration)\n                .delay(delay)\n                .attr('x1', 0)\n                .attr('x2', width)\n                .attr('y1', x1)\n                .attr('y2', x1);\n\n            // Update whiskers.\n            const whisker = _g.selectAll('line.whisker')\n                .data(whiskerData || []);\n\n            whisker.enter().insert('line', 'circle, text')\n                .attr('class', 'whisker')\n                .attr('x1', 0)\n                .attr('y1', x0)\n                .attr('x2', width)\n                .attr('y2', x0)\n                .style('opacity', 1e-6)\n                .transition()\n                .duration(duration)\n                .delay(delay)\n                .attr('y1', x1)\n                .attr('y2', x1)\n                .style('opacity', 1);\n\n            whisker.transition()\n                .duration(duration)\n                .delay(delay)\n                .attr('x1', 0)\n                .attr('x2', width)\n                .attr('y1', x1)\n                .attr('y2', x1)\n                .style('opacity', 1);\n\n            whisker.exit().transition()\n                .duration(duration)\n                .delay(delay)\n                .attr('y1', x1)\n                .attr('y2', x1)\n                .style('opacity', 1e-6)\n                .remove();\n\n            // Update outliers.\n            if (showOutliers) {\n                const outlierClass = boldOutlier ? 'outlierBold' : 'outlier';\n                const outlierSize = boldOutlier ? 3 : 5;\n                const outlierX = boldOutlier ?\n                    function () {\n                        return Math.floor(Math.random() *\n                            (width * dataWidthPortion) +\n                            1 + ((width - (width * dataWidthPortion)) / 2));\n                    } :\n                    function () {\n                        return width / 2;\n                    };\n\n                const outlier = _g.selectAll(`circle.${outlierClass}`)\n                    .data(outlierIndices, Number);\n\n                outlier.enter().insert('circle', 'text')\n                    .attr('class', outlierClass)\n                    .attr('r', outlierSize)\n                    .attr('cx', outlierX)\n                    .attr('cy', i => x0(data[i]))\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cy', i => x1(data[i]))\n                    .style('opacity', 0.6);\n\n                if (renderTitle) {\n                    outlier.selectAll('title').remove();\n                    outlier.append('title').text(i => data[i]);\n                }\n\n                outlier.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cx', outlierX)\n                    .attr('cy', i => x1(data[i]))\n                    .style('opacity', 0.6);\n\n                outlier.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cy', 0) //function (i) { return x1(d[i]); })\n                    .style('opacity', 1e-6)\n                    .remove();\n            }\n\n            // Update Values\n            if (renderDataPoints) {\n                const point = _g.selectAll('circle.data')\n                    .data(pointIndices);\n\n                point.enter().insert('circle', 'text')\n                    .attr('class', 'data')\n                    .attr('r', dataRadius)\n                    .attr('cx', () => Math.floor(Math.random() *\n                            (width * dataWidthPortion) +\n                            1 + ((width - (width * dataWidthPortion)) / 2)))\n                    .attr('cy', i => x0(data[i]))\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cy', i => x1(data[i]))\n                    .style('opacity', dataOpacity);\n\n                if (renderTitle) {\n                    point.selectAll('title').remove();\n                    point.append('title').text(i => data[i]);\n                }\n\n                point.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cx', () => Math.floor(Math.random() *\n                            (width * dataWidthPortion) +\n                            1 + ((width - (width * dataWidthPortion)) / 2)))\n                    .attr('cy', i => x1(data[i]))\n                    .style('opacity', dataOpacity);\n\n                point.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('cy', 0)\n                    .style('opacity', 1e-6)\n                    .remove();\n            }\n\n            // Compute the tick format.\n            const format = tickFormat || x1.tickFormat(8);\n\n            // Update box ticks.\n            const boxTick = _g.selectAll('text.box')\n                .data(quartileData);\n\n            boxTick.enter().append('text')\n                .attr('class', 'box')\n                .attr('dy', '.3em')\n                .attr('dx', (d, i) => i & 1 ? 6 : -6)\n                .attr('x', (d, i) => i & 1 ? width : 0)\n                .attr('y', x0)\n                .attr('text-anchor', (d, i) => i & 1 ? 'start' : 'end')\n                .text(format)\n                .transition()\n                .duration(duration)\n                .delay(delay)\n                .attr('y', x1);\n\n            boxTick.transition()\n                .duration(duration)\n                .delay(delay)\n                .text(format)\n                .attr('x', (d, i) => i & 1 ? width : 0)\n                .attr('y', x1);\n\n            // Update whisker ticks. These are handled separately from the box\n            // ticks because they may or may not exist, and we want don't want\n            // to join box ticks pre-transition with whisker ticks post-.\n            const whiskerTick = _g.selectAll('text.whisker')\n                .data(whiskerData || []);\n\n            whiskerTick.enter().append('text')\n                .attr('class', 'whisker')\n                .attr('dy', '.3em')\n                .attr('dx', 6)\n                .attr('x', width)\n                .attr('y', x0)\n                .text(format)\n                .style('opacity', 1e-6)\n                .transition()\n                .duration(duration)\n                .delay(delay)\n                .attr('y', x1)\n                .style('opacity', 1);\n\n            whiskerTick.transition()\n                .duration(duration)\n                .delay(delay)\n                .text(format)\n                .attr('x', width)\n                .attr('y', x1)\n                .style('opacity', 1);\n\n            whiskerTick.exit().transition()\n                .duration(duration)\n                .delay(delay)\n                .attr('y', x1)\n                .style('opacity', 1e-6)\n                .remove();\n\n            // Remove temporary quartiles element from within data array.\n            delete data.quartiles;\n        });\n        timerFlush();\n    }\n\n    box.width = function (x) {\n        if (!arguments.length) {\n            return width;\n        }\n        width = x;\n        return box;\n    };\n\n    box.height = function (x) {\n        if (!arguments.length) {\n            return height;\n        }\n        height = x;\n        return box;\n    };\n\n    box.tickFormat = function (x) {\n        if (!arguments.length) {\n            return tickFormat;\n        }\n        tickFormat = x;\n        return box;\n    };\n\n    box.showOutliers = function (x) {\n        if (!arguments.length) {\n            return showOutliers;\n        }\n        showOutliers = x;\n        return box;\n    };\n\n    box.boldOutlier = function (x) {\n        if (!arguments.length) {\n            return boldOutlier;\n        }\n        boldOutlier = x;\n        return box;\n    };\n\n    box.renderDataPoints = function (x) {\n        if (!arguments.length) {\n            return renderDataPoints;\n        }\n        renderDataPoints = x;\n        return box;\n    };\n\n    box.renderTitle = function (x) {\n        if (!arguments.length) {\n            return renderTitle;\n        }\n        renderTitle = x;\n        return box;\n    };\n\n    box.dataOpacity = function (x) {\n        if (!arguments.length) {\n            return dataOpacity;\n        }\n        dataOpacity = x;\n        return box;\n    };\n\n    box.dataWidthPortion = function (x) {\n        if (!arguments.length) {\n            return dataWidthPortion;\n        }\n        dataWidthPortion = x;\n        return box;\n    };\n\n    box.duration = function (x) {\n        if (!arguments.length) {\n            return duration;\n        }\n        duration = x;\n        return box;\n    };\n\n    box.domain = function (x) {\n        if (!arguments.length) {\n            return domain;\n        }\n        domain = x === null ? x : typeof x === 'function' ? x : utils.constant(x);\n        return box;\n    };\n\n    box.value = function (x) {\n        if (!arguments.length) {\n            return value;\n        }\n        value = x;\n        return box;\n    };\n\n    box.whiskers = function (x) {\n        if (!arguments.length) {\n            return whiskers;\n        }\n        whiskers = x;\n        return box;\n    };\n\n    box.quartiles = function (x) {\n        if (!arguments.length) {\n            return quartiles;\n        }\n        quartiles = x;\n        return box;\n    };\n\n    return box;\n};\n\nfunction boxWhiskers (d) {\n    return [0, d.length - 1];\n}\n\nfunction boxQuartiles (d) {\n    return [\n        quantile(d, 0.25),\n        quantile(d, 0.5),\n        quantile(d, 0.75)\n    ];\n}\n","import {stack} from 'd3-shape';\nimport {max, min} from 'd3-array';\n\nimport {pluck, utils} from '../core/utils';\nimport {CoordinateGridMixin} from './coordinate-grid-mixin';\n\n/**\n * Stack Mixin is an mixin that provides cross-chart support of stackability using d3.stack.\n * @mixin StackMixin\n * @mixes CoordinateGridMixin\n */\nexport class StackMixin extends CoordinateGridMixin {\n    constructor () {\n        super();\n\n        this._stackLayout = stack();\n\n        this._stack = [];\n        this._titles = {};\n\n        this._hidableStacks = false;\n        this._evadeDomainFilter = false;\n\n        this.data(() => {\n            const layers = this._stack.filter(this._visibility);\n            if (!layers.length) {\n                return [];\n            }\n            layers.forEach((l, i) => this._prepareValues(l, i));\n            const v4data = layers[0].values.map((v, i) => {\n                const col = {x: v.x};\n                layers.forEach(layer => {\n                    col[layer.name] = layer.values[i].y;\n                });\n                return col;\n            });\n            const keys = layers.map(layer => layer.name);\n            const v4result = this.stackLayout().keys(keys)(v4data);\n            v4result.forEach((series, i) => {\n                series.forEach((ys, j) => {\n                    layers[i].values[j].y0 = ys[0];\n                    layers[i].values[j].y1 = ys[1];\n                });\n            });\n            return layers;\n        });\n\n        this.colorAccessor(function (d) {\n            return this.layer || this.name || d.name || d.layer;\n        });\n    }\n\n    _prepareValues (layer, layerIdx) {\n        const valAccessor = layer.accessor || this.valueAccessor();\n        layer.name = String(layer.name || layerIdx);\n        const allValues = layer.group.all().map((d, i) => ({\n            x: this.keyAccessor()(d, i),\n            y: layer.hidden ? null : valAccessor(d, i),\n            data: d,\n            layer: layer.name,\n            hidden: layer.hidden\n        }));\n\n        layer.domainValues = allValues.filter(l => this._domainFilter()(l));\n        layer.values = this.evadeDomainFilter() ? allValues : layer.domainValues;\n    }\n\n    _domainFilter () {\n        if (!this.x()) {\n            return utils.constant(true);\n        }\n        const xDomain = this.x().domain();\n        if (this.isOrdinal()) {\n            // TODO #416\n            //var domainSet = d3.set(xDomain);\n            return () => true //domainSet.has(p.x);\n            ;\n        }\n        if (this.elasticX()) {\n            return () => true;\n        }\n        return p => p.x >= xDomain[0] && p.x <= xDomain[xDomain.length - 1];\n    }\n\n    /**\n     * Stack a new crossfilter group onto this chart with an optional custom value accessor. All stacks\n     * in the same chart will share the same key accessor and therefore the same set of keys.\n     *\n     * For example, in a stacked bar chart, the bars of each stack will be positioned using the same set\n     * of keys on the x axis, while stacked vertically. If name is specified then it will be used to\n     * generate the legend label.\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n     * @example\n     * // stack group using default accessor\n     * chart.stack(valueSumGroup)\n     * // stack group using custom accessor\n     * .stack(avgByDayGroup, function(d){return d.value.avgByDay;});\n     * @param {crossfilter.group} group\n     * @param {String} [name]\n     * @param {Function} [accessor]\n     * @returns {Array<{group: crossfilter.group, name: String, accessor: Function}>|StackMixin}\n     */\n    stack (group, name, accessor) {\n        if (!arguments.length) {\n            return this._stack;\n        }\n\n        if (arguments.length <= 2) {\n            accessor = name;\n        }\n\n        const layer = {group: group};\n        if (typeof name === 'string') {\n            layer.name = name;\n        }\n        if (typeof accessor === 'function') {\n            layer.accessor = accessor;\n        }\n        this._stack.push(layer);\n\n        return this;\n    }\n\n    group (g, n, f) {\n        if (!arguments.length) {\n            return super.group();\n        }\n        this._stack = [];\n        this._titles = {};\n        this.stack(g, n);\n        if (f) {\n            this.valueAccessor(f);\n        }\n        return super.group(g, n);\n    }\n\n    /**\n     * Allow named stacks to be hidden or shown by clicking on legend items.\n     * This does not affect the behavior of hideStack or showStack.\n     * @param {Boolean} [hidableStacks=false]\n     * @returns {Boolean|StackMixin}\n     */\n    hidableStacks (hidableStacks) {\n        if (!arguments.length) {\n            return this._hidableStacks;\n        }\n        this._hidableStacks = hidableStacks;\n        return this;\n    }\n\n    _findLayerByName (n) {\n        const i = this._stack.map(pluck('name')).indexOf(n);\n        return this._stack[i];\n    }\n\n    /**\n     * Hide all stacks on the chart with the given name.\n     * The chart must be re-rendered for this change to appear.\n     * @param {String} stackName\n     * @returns {StackMixin}\n     */\n    hideStack (stackName) {\n        const layer = this._findLayerByName(stackName);\n        if (layer) {\n            layer.hidden = true;\n        }\n        return this;\n    }\n\n    /**\n     * Show all stacks on the chart with the given name.\n     * The chart must be re-rendered for this change to appear.\n     * @param {String} stackName\n     * @returns {StackMixin}\n     */\n    showStack (stackName) {\n        const layer = this._findLayerByName(stackName);\n        if (layer) {\n            layer.hidden = false;\n        }\n        return this;\n    }\n\n    getValueAccessorByIndex (index) {\n        return this._stack[index].accessor || this.valueAccessor();\n    }\n\n    yAxisMin () {\n        const m = min(this._flattenStack(), p => (p.y < 0) ? (p.y + p.y0) : p.y0);\n        return utils.subtract(m, this.yAxisPadding());\n    }\n\n    yAxisMax () {\n        const m = max(this._flattenStack(), p => (p.y > 0) ? (p.y + p.y0) : p.y0);\n        return utils.add(m, this.yAxisPadding());\n    }\n\n    _flattenStack () {\n        // A round about way to achieve flatMap\n        // When target browsers support flatMap, just replace map -> flatMap, no concat needed\n        const values = this.data().map(layer => layer.domainValues);\n        return [].concat(...values);\n    }\n\n    xAxisMin () {\n        const m = min(this._flattenStack(), pluck('x'));\n        return utils.subtract(m, this.xAxisPadding(), this.xAxisPaddingUnit());\n    }\n\n    xAxisMax () {\n        const m = max(this._flattenStack(), pluck('x'));\n        return utils.add(m, this.xAxisPadding(), this.xAxisPaddingUnit());\n    }\n\n    /**\n     * Set or get the title function. Chart class will use this function to render svg title (usually interpreted by\n     * browser as tooltips) for each child element in the chart, i.e. a slice in a pie chart or a bubble in a bubble chart.\n     * Almost every chart supports title function however in grid coordinate chart you need to turn off brush in order to\n     * use title otherwise the brush layer will block tooltip trigger.\n     *\n     * If the first argument is a stack name, the title function will get or set the title for that stack. If stackName\n     * is not provided, the first stack is implied.\n     * @example\n     * // set a title function on 'first stack'\n     * chart.title('first stack', function(d) { return d.key + ': ' + d.value; });\n     * // get a title function from 'second stack'\n     * var secondTitleFunction = chart.title('second stack');\n     * @param {String} [stackName]\n     * @param {Function} [titleAccessor]\n     * @returns {String|StackMixin}\n     */\n    title (stackName, titleAccessor) {\n        if (!stackName) {\n            return super.title();\n        }\n\n        if (typeof stackName === 'function') {\n            return super.title(stackName);\n        }\n        if (stackName === this._groupName && typeof titleAccessor === 'function') {\n            return super.title(titleAccessor);\n        }\n\n        if (typeof titleAccessor !== 'function') {\n            return this._titles[stackName] || super.title();\n        }\n\n        this._titles[stackName] = titleAccessor;\n\n        return this;\n    }\n\n    /**\n     * Gets or sets the stack layout algorithm, which computes a baseline for each stack and\n     * propagates it to the next.\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Stack-Layout.md d3.stackD3v3}\n     * @param {Function} [_stack=d3.stackD3v3]\n     * @returns {Function|StackMixin}\n     */\n    stackLayout (_stack) {\n        if (!arguments.length) {\n            return this._stackLayout;\n        }\n        this._stackLayout = _stack;\n        return this;\n    }\n\n    /**\n     * Since dc.js 2.0, there has been {@link https://github.com/dc-js/dc.js/issues/949 an issue}\n     * where points are filtered to the current domain. While this is a useful optimization, it is\n     * incorrectly implemented: the next point outside the domain is required in order to draw lines\n     * that are clipped to the bounds, as well as bars that are partly clipped.\n     *\n     * A fix will be included in dc.js 2.1.x, but a workaround is needed for dc.js 2.0 and until\n     * that fix is published, so set this flag to skip any filtering of points.\n     *\n     * Once the bug is fixed, this flag will have no effect, and it will be deprecated.\n     * @param {Boolean} [evadeDomainFilter=false]\n     * @returns {Boolean|StackMixin}\n     */\n    evadeDomainFilter (evadeDomainFilter) {\n        if (!arguments.length) {\n            return this._evadeDomainFilter;\n        }\n        this._evadeDomainFilter = evadeDomainFilter;\n        return this;\n    }\n\n    _visibility (l) {\n        return !l.hidden;\n    }\n\n    _ordinalXDomain () {\n        const flat = this._flattenStack().map(pluck('data'));\n        const ordered = this._computeOrderedGroups(flat);\n        return ordered.map(this.keyAccessor());\n    }\n\n    legendables () {\n        return this._stack.map((layer, i) => ({\n            chart: this,\n            name: layer.name,\n            hidden: layer.hidden || false,\n            color: this.getColor.call(layer, layer.values, i)\n        }));\n    }\n\n    isLegendableHidden (d) {\n        const layer = this._findLayerByName(d.name);\n        return layer ? layer.hidden : false;\n    }\n\n    legendToggle (d) {\n        if (this._hidableStacks) {\n            if (this.isLegendableHidden(d)) {\n                this.showStack(d.name);\n            } else {\n                this.hideStack(d.name);\n            }\n            //_chart.redraw();\n            this.renderGroup();\n        }\n    }\n}\n","import {select} from 'd3-selection';\n\nimport {StackMixin} from '../base/stack-mixin';\nimport {transition} from '../core/core';\nimport {constants} from '../core/constants';\nimport {logger} from '../core/logger';\nimport {pluck, utils} from '../core/utils';\nimport {d3compat} from '../core/config';\n\nconst MIN_BAR_WIDTH = 1;\nconst DEFAULT_GAP_BETWEEN_BARS = 2;\nconst LABEL_PADDING = 3;\n\n/**\n * Concrete bar chart/histogram implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @mixes StackMixin\n */\nexport class BarChart extends StackMixin {\n    /**\n     * Create a Bar Chart\n     * @example\n     * // create a bar chart under #chart-container1 element using the default global chart group\n     * var chart1 = new BarChart('#chart-container1');\n     * // create a bar chart under #chart-container2 element using chart group A\n     * var chart2 = new BarChart('#chart-container2', 'chartGroupA');\n     * // create a sub-chart under a composite parent chart\n     * var chart3 = new BarChart(compositeChart);\n     * @param {String|node|d3.selection|CompositeChart} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector}\n     * specifying a dom block element such as a div; or a dom element or d3 selection.  If the bar\n     * chart is a sub-chart in a {@link CompositeChart Composite Chart} then pass in the parent\n     * composite chart instance instead.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor (parent, chartGroup) {\n        super();\n\n        this._gap = DEFAULT_GAP_BETWEEN_BARS;\n        this._centerBar = false;\n        this._alwaysUseRounding = false;\n\n        this._barWidth = undefined;\n\n        this.label(d => utils.printSingleValue(d.y0 + d.y), false);\n\n        this.anchor(parent, chartGroup);\n    }\n\n    /**\n     * Get or set the outer padding on an ordinal bar chart. This setting has no effect on non-ordinal charts.\n     * Will pad the width by `padding * barWidth` on each side of the chart.\n     * @param {Number} [padding=0.5]\n     * @returns {Number|BarChart}\n     */\n    outerPadding (padding) {\n        if (!arguments.length) {\n            return this._outerRangeBandPadding();\n        }\n        return this._outerRangeBandPadding(padding);\n    }\n\n    rescale () {\n        super.rescale();\n        this._barWidth = undefined;\n        return this;\n    }\n\n    render () {\n        if (this.round() && this._centerBar && !this._alwaysUseRounding) {\n            logger.warn('By default, brush rounding is disabled if bars are centered. ' +\n                'See dc.js bar chart API documentation for details.');\n        }\n\n        return super.render();\n    }\n\n    plotData () {\n        let layers = this.chartBodyG().selectAll('g.stack')\n            .data(this.data());\n\n        this._calculateBarWidth();\n\n        layers = layers\n            .enter()\n            .append('g')\n            .attr('class', (d, i) => `stack _${i}`)\n            .merge(layers);\n\n        const last = layers.size() - 1;\n        {\n            const chart = this;\n            layers.each(function (d, i) {\n                const layer = select(this);\n\n                chart._renderBars(layer, i, d);\n\n                if (chart.renderLabel() && last === i) {\n                    chart._renderLabels(layer, i, d);\n                }\n            });\n        }\n    }\n\n    _barHeight (d) {\n        return utils.safeNumber(Math.abs(this.y()(d.y + d.y0) - this.y()(d.y0)));\n    }\n\n    _labelXPos (d) {\n        let x = this.x()(d.x);\n        if (!this._centerBar) {\n            x += this._barWidth / 2;\n        }\n        if (this.isOrdinal() && this._gap !== undefined) {\n            x += this._gap / 2;\n        }\n        return utils.safeNumber(x);\n    }\n\n    _labelYPos (d) {\n        let y = this.y()(d.y + d.y0);\n\n        if (d.y < 0) {\n            y -= this._barHeight(d);\n        }\n\n        return utils.safeNumber(y - LABEL_PADDING);\n    }\n\n    _renderLabels (layer, layerIndex, data) {\n        const labels = layer.selectAll('text.barLabel')\n            .data(data.values, pluck('x'));\n\n        const labelsEnterUpdate = labels\n            .enter()\n            .append('text')\n            .attr('class', 'barLabel')\n            .attr('text-anchor', 'middle')\n            .attr('x', d => this._labelXPos(d))\n            .attr('y', d => this._labelYPos(d))\n            .merge(labels);\n\n        if (this.isOrdinal()) {\n            labelsEnterUpdate.on('click', d3compat.eventHandler(d => this.onClick(d)));\n            labelsEnterUpdate.attr('cursor', 'pointer');\n        }\n\n        transition(labelsEnterUpdate, this.transitionDuration(), this.transitionDelay())\n            .attr('x', d => this._labelXPos(d))\n            .attr('y', d => this._labelYPos(d))\n            .text(d => this.label()(d));\n\n        transition(labels.exit(), this.transitionDuration(), this.transitionDelay())\n            .attr('height', 0)\n            .remove();\n    }\n\n    _barXPos (d) {\n        let x = this.x()(d.x);\n        if (this._centerBar) {\n            x -= this._barWidth / 2;\n        }\n        if (this.isOrdinal() && this._gap !== undefined) {\n            x += this._gap / 2;\n        }\n        return utils.safeNumber(x);\n    }\n\n    _renderBars (layer, layerIndex, data) {\n        const bars = layer.selectAll('rect.bar')\n            .data(data.values, pluck('x'));\n\n        const enter = bars.enter()\n            .append('rect')\n            .attr('class', 'bar')\n            .classed('dc-tabbable', this._keyboardAccessible)\n            .attr('fill', pluck('data', this.getColor))\n            .attr('x', d => this._barXPos(d))\n            .attr('y', this.yAxisHeight())\n            .attr('height', 0);\n\n        const barsEnterUpdate = enter.merge(bars);\n\n        if (this.renderTitle()) {\n            enter.append('title').text(pluck('data', this.title(data.name)));\n        }\n\n        if (this.isOrdinal()) {\n            barsEnterUpdate.on('click', d3compat.eventHandler(d => this.onClick(d)));\n        }\n\n        if (this._keyboardAccessible) {\n            this._makeKeyboardAccessible(this.onClick);\n        }\n\n        transition(barsEnterUpdate, this.transitionDuration(), this.transitionDelay())\n            .attr('x', d => this._barXPos(d))\n            .attr('y', d => {\n                let y = this.y()(d.y + d.y0);\n\n                if (d.y < 0) {\n                    y -= this._barHeight(d);\n                }\n\n                return utils.safeNumber(y);\n            })\n            .attr('width', this._barWidth)\n            .attr('height', d => this._barHeight(d))\n            .attr('fill', pluck('data', this.getColor))\n            .select('title').text(pluck('data', this.title(data.name)));\n\n        transition(bars.exit(), this.transitionDuration(), this.transitionDelay())\n            .attr('x', d => this.x()(d.x))\n            .attr('width', this._barWidth * 0.9)\n            .remove();\n    }\n\n    _calculateBarWidth () {\n        if (this._barWidth === undefined) {\n            const numberOfBars = this.xUnitCount();\n\n            // please can't we always use rangeBands for bar charts?\n            if (this.isOrdinal() && this._gap === undefined) {\n                this._barWidth = Math.floor(this.x().bandwidth());\n            } else if (this._gap) {\n                this._barWidth = Math.floor((this.xAxisLength() - (numberOfBars - 1) * this._gap) / numberOfBars);\n            } else {\n                this._barWidth = Math.floor(this.xAxisLength() / (1 + this.barPadding()) / numberOfBars);\n            }\n\n            if (this._barWidth === Infinity || isNaN(this._barWidth) || this._barWidth < MIN_BAR_WIDTH) {\n                this._barWidth = MIN_BAR_WIDTH;\n            }\n        }\n    }\n\n    fadeDeselectedArea (brushSelection) {\n        const bars = this.chartBodyG().selectAll('rect.bar');\n\n        if (this.isOrdinal()) {\n            if (this.hasFilter()) {\n                bars.classed(constants.SELECTED_CLASS, d => this.hasFilter(d.x));\n                bars.classed(constants.DESELECTED_CLASS, d => !this.hasFilter(d.x));\n            } else {\n                bars.classed(constants.SELECTED_CLASS, false);\n                bars.classed(constants.DESELECTED_CLASS, false);\n            }\n        } else if (this.brushOn() || this.parentBrushOn()) {\n            if (!this.brushIsEmpty(brushSelection)) {\n                const start = brushSelection[0];\n                const end = brushSelection[1];\n\n                bars.classed(constants.DESELECTED_CLASS, d => d.x < start || d.x >= end);\n            } else {\n                bars.classed(constants.DESELECTED_CLASS, false);\n            }\n        }\n    }\n\n    /**\n     * Whether the bar chart will render each bar centered around the data position on the x-axis.\n     * @param {Boolean} [centerBar=false]\n     * @returns {Boolean|BarChart}\n     */\n    centerBar (centerBar) {\n        if (!arguments.length) {\n            return this._centerBar;\n        }\n        this._centerBar = centerBar;\n        return this;\n    }\n\n    onClick (d) {\n        super.onClick(d.data);\n    }\n\n    /**\n     * Get or set the spacing between bars as a fraction of bar size. Valid values are between 0-1.\n     * Setting this value will also remove any previously set {@link BarChart#gap gap}. See the\n     * {@link https://github.com/d3/d3-scale/blob/master/README.md#scaleBand d3 docs}\n     * for a visual description of how the padding is applied.\n     * @param {Number} [barPadding=0]\n     * @returns {Number|BarChart}\n     */\n    barPadding (barPadding) {\n        if (!arguments.length) {\n            return this._rangeBandPadding();\n        }\n        this._rangeBandPadding(barPadding);\n        this._gap = undefined;\n        return this;\n    }\n\n    _useOuterPadding () {\n        return this._gap === undefined;\n    }\n\n    /**\n     * Manually set fixed gap (in px) between bars instead of relying on the default auto-generated\n     * gap.  By default the bar chart implementation will calculate and set the gap automatically\n     * based on the number of data points and the length of the x axis.\n     * @param {Number} [gap=2]\n     * @returns {Number|BarChart}\n     */\n    gap (gap) {\n        if (!arguments.length) {\n            return this._gap;\n        }\n        this._gap = gap;\n        return this;\n    }\n\n    extendBrush (brushSelection) {\n        if (brushSelection && this.round() && (!this._centerBar || this._alwaysUseRounding)) {\n            brushSelection[0] = this.round()(brushSelection[0]);\n            brushSelection[1] = this.round()(brushSelection[1]);\n        }\n        return brushSelection;\n    }\n\n    /**\n     * Set or get whether rounding is enabled when bars are centered. If false, using\n     * rounding with centered bars will result in a warning and rounding will be ignored.  This flag\n     * has no effect if bars are not {@link BarChart#centerBar centered}.\n     * When using standard d3.js rounding methods, the brush often doesn't align correctly with\n     * centered bars since the bars are offset.  The rounding function must add an offset to\n     * compensate, such as in the following example.\n     * @example\n     * chart.round(function(n) { return Math.floor(n) + 0.5; });\n     * @param {Boolean} [alwaysUseRounding=false]\n     * @returns {Boolean|BarChart}\n     */\n    alwaysUseRounding (alwaysUseRounding) {\n        if (!arguments.length) {\n            return this._alwaysUseRounding;\n        }\n        this._alwaysUseRounding = alwaysUseRounding;\n        return this;\n    }\n\n    legendHighlight (d) {\n        const colorFilter = (color, inv) => function () {\n            const item = select(this);\n            const match = item.attr('fill') === color;\n            return inv ? !match : match;\n        };\n\n        if (!this.isLegendableHidden(d)) {\n            this.g().selectAll('rect.bar')\n                .classed('highlight', colorFilter(d.color))\n                .classed('fadeout', colorFilter(d.color, true));\n        }\n    }\n\n    legendReset () {\n        this.g().selectAll('rect.bar')\n            .classed('highlight', false)\n            .classed('fadeout', false);\n    }\n\n    xAxisMax () {\n        let max = super.xAxisMax();\n        if ('resolution' in this.xUnits()) {\n            const res = this.xUnits().resolution;\n            max += res;\n        }\n        return max;\n    }\n}\n\nexport const barChart = (parent, chartGroup) => new BarChart(parent, chartGroup);\n","import {scaleBand} from 'd3-scale';\nimport {select} from 'd3-selection';\nimport {min, max} from 'd3-array';\n\nimport {d3Box} from '../base/d3.box'\nimport {CoordinateGridMixin} from '../base/coordinate-grid-mixin';\nimport {transition} from '../core/core';\nimport {units} from '../core/units';\nimport {utils} from '../core/utils';\nimport {d3compat} from '../core/config';\n\n// Returns a function to compute the interquartile range.\nfunction defaultWhiskersIQR (k) {\n    return d => {\n        const q1 = d.quartiles[0];\n        const q3 = d.quartiles[2];\n        const iqr = (q3 - q1) * k;\n\n        let i = -1;\n        let j = d.length;\n\n        do {\n            ++i;\n        } while (d[i] < q1 - iqr);\n\n        do {\n            --j;\n        } while (d[j] > q3 + iqr);\n\n        return [i, j];\n    };\n}\n\n/**\n * A box plot is a chart that depicts numerical data via their quartile ranges.\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/boxplot-basic.html Boxplot Basic example}\n * - {@link http://dc-js.github.io/dc.js/examples/boxplot-enhanced.html Boxplot Enhanced example}\n * - {@link http://dc-js.github.io/dc.js/examples/boxplot-render-data.html Boxplot Render Data example}\n * - {@link http://dc-js.github.io/dc.js/examples/boxplot-time.html Boxplot time example}\n * @mixes CoordinateGridMixin\n */\nexport class BoxPlot extends CoordinateGridMixin {\n    /**\n     * Create a Box Plot.\n     *\n     * @example\n     * // create a box plot under #chart-container1 element using the default global chart group\n     * var boxPlot1 = new BoxPlot('#chart-container1');\n     * // create a box plot under #chart-container2 element using chart group A\n     * var boxPlot2 = new BoxPlot('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor (parent, chartGroup) {\n        super();\n\n        this._whiskerIqrFactor = 1.5;\n        this._whiskersIqr = defaultWhiskersIQR;\n        this._whiskers = this._whiskersIqr(this._whiskerIqrFactor);\n\n        this._box = d3Box();\n        this._tickFormat = null;\n        this._renderDataPoints = false;\n        this._dataOpacity = 0.3;\n        this._dataWidthPortion = 0.8;\n        this._showOutliers = true;\n        this._boldOutlier = false;\n\n        // Used in yAxisMin and yAxisMax to add padding in pixel coordinates\n        // so the min and max data points/whiskers are within the chart\n        this._yRangePadding = 8;\n\n        this._boxWidth = (innerChartWidth, xUnits) => {\n            if (this.isOrdinal()) {\n                return this.x().bandwidth();\n            } else {\n                return innerChartWidth / (1 + this.boxPadding()) / xUnits;\n            }\n        };\n\n        // default to ordinal\n        this.x(scaleBand());\n        this.xUnits(units.ordinal);\n\n        // valueAccessor should return an array of values that can be coerced into numbers\n        // or if data is overloaded for a static array of arrays, it should be `Number`.\n        // Empty arrays are not included.\n        this.data(group => group.all().map(d => {\n            d.map = accessor => accessor.call(d, d);\n            return d;\n        }).filter(d => {\n            const values = this.valueAccessor()(d);\n            return values.length !== 0;\n        }));\n\n        this.boxPadding(0.8);\n        this.outerPadding(0.5);\n\n        this.anchor(parent, chartGroup);\n    }\n\n    /**\n     * Get or set the spacing between boxes as a fraction of box size. Valid values are within 0-1.\n     * See the {@link https://github.com/d3/d3-scale/blob/master/README.md#scaleBand d3 docs}\n     * for a visual description of how the padding is applied.\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md#scaleBand d3.scaleBand}\n     * @param {Number} [padding=0.8]\n     * @returns {Number|BoxPlot}\n     */\n    boxPadding (padding) {\n        if (!arguments.length) {\n            return this._rangeBandPadding();\n        }\n        return this._rangeBandPadding(padding);\n    }\n\n    /**\n     * Get or set the outer padding on an ordinal box chart. This setting has no effect on non-ordinal charts\n     * or on charts with a custom {@link BoxPlot#boxWidth .boxWidth}. Will pad the width by\n     * `padding * barWidth` on each side of the chart.\n     * @param {Number} [padding=0.5]\n     * @returns {Number|BoxPlot}\n     */\n    outerPadding (padding) {\n        if (!arguments.length) {\n            return this._outerRangeBandPadding();\n        }\n        return this._outerRangeBandPadding(padding);\n    }\n\n    /**\n     * Get or set the numerical width of the boxplot box. The width may also be a function taking as\n     * parameters the chart width excluding the right and left margins, as well as the number of x\n     * units.\n     * @example\n     * // Using numerical parameter\n     * chart.boxWidth(10);\n     * // Using function\n     * chart.boxWidth((innerChartWidth, xUnits) { ... });\n     * @param {Number|Function} [boxWidth=0.5]\n     * @returns {Number|Function|BoxPlot}\n     */\n    boxWidth (boxWidth) {\n        if (!arguments.length) {\n            return this._boxWidth;\n        }\n        this._boxWidth = typeof boxWidth === 'function' ? boxWidth : utils.constant(boxWidth);\n        return this;\n    }\n\n    _boxTransform (d, i) {\n        const xOffset = this.x()(this.keyAccessor()(d, i));\n        return `translate(${xOffset}, 0)`;\n    }\n\n    _preprocessData () {\n        if (this.elasticX()) {\n            this.x().domain([]);\n        }\n    }\n\n    plotData () {\n        this._calculatedBoxWidth = this._boxWidth(this.effectiveWidth(), this.xUnitCount());\n\n        this._box.whiskers(this._whiskers)\n            .width(this._calculatedBoxWidth)\n            .height(this.effectiveHeight())\n            .value(this.valueAccessor())\n            .domain(this.y().domain())\n            .duration(this.transitionDuration())\n            .tickFormat(this._tickFormat)\n            .renderDataPoints(this._renderDataPoints)\n            .dataOpacity(this._dataOpacity)\n            .dataWidthPortion(this._dataWidthPortion)\n            .renderTitle(this.renderTitle())\n            .showOutliers(this._showOutliers)\n            .boldOutlier(this._boldOutlier);\n\n        const boxesG = this.chartBodyG().selectAll('g.box').data(this.data(), this.keyAccessor());\n\n        const boxesGEnterUpdate = this._renderBoxes(boxesG);\n        this._updateBoxes(boxesGEnterUpdate);\n        this._removeBoxes(boxesG);\n\n        this.fadeDeselectedArea(this.filter());\n    }\n\n    _renderBoxes (boxesG) {\n        const boxesGEnter = boxesG.enter().append('g');\n\n        boxesGEnter\n            .attr('class', 'box')\n            .classed('dc-tabbable', this._keyboardAccessible)\n            .attr('transform', (d, i) => this._boxTransform(d, i))\n            .call(this._box)\n            .on('click', d3compat.eventHandler(d => {\n                this.filter(this.keyAccessor()(d));\n                this.redrawGroup();\n            }))\n            .selectAll('circle')\n            .classed('dc-tabbable', this._keyboardAccessible);\n\n        if (this._keyboardAccessible) {\n            this._makeKeyboardAccessible(this.onClick);\n        }\n\n        return boxesGEnter.merge(boxesG);\n    }\n\n    _updateBoxes (boxesG) {\n        const chart = this;\n        transition(boxesG, this.transitionDuration(), this.transitionDelay())\n            .attr('transform', (d, i) => this._boxTransform(d, i))\n            .call(this._box)\n            .each(function (d) {\n                const color = chart.getColor(d, 0);\n                select(this).select('rect.box').attr('fill', color);\n                select(this).selectAll('circle.data').attr('fill', color);\n            });\n    }\n\n    _removeBoxes (boxesG) {\n        boxesG.exit().remove().call(this._box);\n    }\n\n    _minDataValue () {\n        return min(this.data(), e => min(this.valueAccessor()(e)));\n    }\n\n    _maxDataValue () {\n        return max(this.data(), e => max(this.valueAccessor()(e)));\n    }\n\n    _yAxisRangeRatio () {\n        return ((this._maxDataValue() - this._minDataValue()) / this.effectiveHeight());\n    }\n\n    onClick (d) {\n        this.filter(this.keyAccessor()(d));\n        this.redrawGroup();\n    }\n\n    fadeDeselectedArea (brushSelection) {\n        const chart = this;\n        if (this.hasFilter()) {\n            if (this.isOrdinal()) {\n                this.g().selectAll('g.box').each(function (d) {\n                    if (chart.isSelectedNode(d)) {\n                        chart.highlightSelected(this);\n                    } else {\n                        chart.fadeDeselected(this);\n                    }\n                });\n            } else {\n                if (!(this.brushOn() || this.parentBrushOn())) {\n                    return;\n                }\n                const start = brushSelection[0];\n                const end = brushSelection[1];\n                this.g().selectAll('g.box').each(function (d) {\n                    const key = chart.keyAccessor()(d);\n                    if (key < start || key >= end) {\n                        chart.fadeDeselected(this);\n                    } else {\n                        chart.highlightSelected(this);\n                    }\n                });\n            }\n        } else {\n            this.g().selectAll('g.box').each(function () {\n                chart.resetHighlight(this);\n            });\n        }\n    }\n\n    isSelectedNode (d) {\n        return this.hasFilter(this.keyAccessor()(d));\n    }\n\n    yAxisMin () {\n        const padding = this._yRangePadding * this._yAxisRangeRatio();\n        return utils.subtract(this._minDataValue() - padding, this.yAxisPadding());\n    }\n\n    yAxisMax () {\n        const padding = this._yRangePadding * this._yAxisRangeRatio();\n        return utils.add(this._maxDataValue() + padding, this.yAxisPadding());\n    }\n\n    /**\n     * Get or set the numerical format of the boxplot median, whiskers and quartile labels. Defaults\n     * to integer formatting.\n     * @example\n     * // format ticks to 2 decimal places\n     * chart.tickFormat(d3.format('.2f'));\n     * @param {Function} [tickFormat]\n     * @returns {Number|Function|BoxPlot}\n     */\n    tickFormat (tickFormat) {\n        if (!arguments.length) {\n            return this._tickFormat;\n        }\n        this._tickFormat = tickFormat;\n        return this;\n    }\n\n    /**\n     * Get or set the amount of padding to add, in pixel coordinates, to the top and\n     * bottom of the chart to accommodate box/whisker labels.\n     * @example\n     * // allow more space for a bigger whisker font\n     * chart.yRangePadding(12);\n     * @param {Function} [yRangePadding = 8]\n     * @returns {Number|Function|BoxPlot}\n     */\n    yRangePadding (yRangePadding) {\n        if (!arguments.length) {\n            return this._yRangePadding;\n        }\n        this._yRangePadding = yRangePadding;\n        return this;\n    }\n\n    /**\n     * Get or set whether individual data points will be rendered.\n     * @example\n     * // Enable rendering of individual data points\n     * chart.renderDataPoints(true);\n     * @param {Boolean} [show=false]\n     * @returns {Boolean|BoxPlot}\n     */\n    renderDataPoints (show) {\n        if (!arguments.length) {\n            return this._renderDataPoints;\n        }\n        this._renderDataPoints = show;\n        return this;\n    }\n\n    /**\n     * Get or set the opacity when rendering data.\n     * @example\n     * // If individual data points are rendered increase the opacity.\n     * chart.dataOpacity(0.7);\n     * @param {Number} [opacity=0.3]\n     * @returns {Number|BoxPlot}\n     */\n    dataOpacity (opacity) {\n        if (!arguments.length) {\n            return this._dataOpacity;\n        }\n        this._dataOpacity = opacity;\n        return this;\n    }\n\n    /**\n     * Get or set the portion of the width of the box to show data points.\n     * @example\n     * // If individual data points are rendered increase the data box.\n     * chart.dataWidthPortion(0.9);\n     * @param {Number} [percentage=0.8]\n     * @returns {Number|BoxPlot}\n     */\n    dataWidthPortion (percentage) {\n        if (!arguments.length) {\n            return this._dataWidthPortion;\n        }\n        this._dataWidthPortion = percentage;\n        return this;\n    }\n\n    /**\n     * Get or set whether outliers will be rendered.\n     * @example\n     * // Disable rendering of outliers\n     * chart.showOutliers(false);\n     * @param {Boolean} [show=true]\n     * @returns {Boolean|BoxPlot}\n     */\n    showOutliers (show) {\n        if (!arguments.length) {\n            return this._showOutliers;\n        }\n        this._showOutliers = show;\n        return this;\n    }\n\n    /**\n     * Get or set whether outliers will be drawn bold.\n     * @example\n     * // If outliers are rendered display as bold\n     * chart.boldOutlier(true);\n     * @param {Boolean} [show=false]\n     * @returns {Boolean|BoxPlot}\n     */\n    boldOutlier (show) {\n        if (!arguments.length) {\n            return this._boldOutlier;\n        }\n        this._boldOutlier = show;\n        return this;\n    }\n}\n\nexport const boxPlot = (parent, chartGroup) => new BoxPlot(parent, chartGroup);\n","import {BubbleMixin} from '../base/bubble-mixin';\nimport {CoordinateGridMixin} from '../base/coordinate-grid-mixin';\nimport {transition} from '../core/core';\nimport {d3compat} from '../core/config';\n\n/**\n * A concrete implementation of a general purpose bubble chart that allows data visualization using the\n * following dimensions:\n * - x axis position\n * - y axis position\n * - bubble radius\n * - color\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n * @mixes BubbleMixin\n * @mixes CoordinateGridMixin\n */\nexport class BubbleChart extends BubbleMixin(CoordinateGridMixin) {\n    /**\n     * Create a Bubble Chart.\n     *\n     * @example\n     * // create a bubble chart under #chart-container1 element using the default global chart group\n     * var bubbleChart1 = new BubbleChart('#chart-container1');\n     * // create a bubble chart under #chart-container2 element using chart group A\n     * var bubbleChart2 = new BubbleChart('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor (parent, chartGroup) {\n        super();\n\n        this.transitionDuration(750);\n\n        this.transitionDelay(0);\n\n        this.anchor(parent, chartGroup);\n    }\n\n    _bubbleLocator (d) {\n        return `translate(${this._bubbleX(d)},${this._bubbleY(d)})`;\n    }\n\n    plotData () {\n        this.calculateRadiusDomain();\n        this.r().range([this.MIN_RADIUS, this.xAxisLength() * this.maxBubbleRelativeSize()]);\n\n        const data = this.data();\n        let bubbleG = this.chartBodyG().selectAll(`g.${this.BUBBLE_NODE_CLASS}`)\n            .data(data, d => d.key);\n        if (this.sortBubbleSize() || this.keyboardAccessible()) {\n            // update dom order based on sort\n            bubbleG.order();\n        }\n\n        this._removeNodes(bubbleG);\n\n        bubbleG = this._renderNodes(bubbleG);\n\n        this._updateNodes(bubbleG);\n\n        this.fadeDeselectedArea(this.filter());\n    }\n\n    _renderNodes (bubbleG) {\n        const bubbleGEnter = bubbleG.enter().append('g');\n\n        bubbleGEnter\n            .attr('class', this.BUBBLE_NODE_CLASS)\n            .attr('transform', d => this._bubbleLocator(d))\n            .append('circle').attr('class', (d, i) => `${this.BUBBLE_CLASS} _${i}`)\n            .on('click', d3compat.eventHandler(d => this.onClick(d)))\n            .classed('dc-tabbable', this._keyboardAccessible)\n            .attr('fill', this.getColor)\n            .attr('r', 0);\n\n        bubbleG = bubbleGEnter.merge(bubbleG);\n\n        transition(bubbleG, this.transitionDuration(), this.transitionDelay())\n            .select(`circle.${this.BUBBLE_CLASS}`)\n            .attr('r', d => this.bubbleR(d))\n            .attr('opacity', d => (this.bubbleR(d) > 0) ? 1 : 0);\n\n        if (this._keyboardAccessible) {\n            this._makeKeyboardAccessible(this.onClick);\n        }\n\n        this._doRenderLabel(bubbleGEnter);\n\n        this._doRenderTitles(bubbleGEnter);\n\n        return bubbleG;\n    }\n\n    _updateNodes (bubbleG) {\n        transition(bubbleG, this.transitionDuration(), this.transitionDelay())\n            .attr('transform', d => this._bubbleLocator(d))\n            .select(`circle.${this.BUBBLE_CLASS}`)\n            .attr('fill', this.getColor)\n            .attr('r', d => this.bubbleR(d))\n            .attr('opacity', d => (this.bubbleR(d) > 0) ? 1 : 0);\n\n        this.doUpdateLabels(bubbleG);\n        this.doUpdateTitles(bubbleG);\n    }\n\n    _removeNodes (bubbleG) {\n        bubbleG.exit().remove();\n    }\n\n    _bubbleX (d) {\n        let x = this.x()(this.keyAccessor()(d));\n        if (isNaN(x) || !isFinite(x)) {\n            x = 0;\n        }\n        return x;\n    }\n\n    _bubbleY (d) {\n        let y = this.y()(this.valueAccessor()(d));\n        if (isNaN(y) || !isFinite(y)) {\n            y = 0;\n        }\n        return y;\n    }\n\n    renderBrush () {\n        // override default x axis brush from parent chart\n    }\n\n    redrawBrush (brushSelection, doTransition) {\n        // override default x axis brush from parent chart\n        this.fadeDeselectedArea(brushSelection);\n    }\n}\n\nexport const bubbleChart = (parent, chartGroup) => new BubbleChart(parent, chartGroup);\n","import {BaseMixin} from '../base/base-mixin';\nimport {BubbleMixin} from '../base/bubble-mixin';\nimport {transition} from '../core/core';\nimport {constants} from '../core/constants';\nimport {utils} from '../core/utils';\nimport {d3compat} from '../core/config';\n\nconst BUBBLE_OVERLAY_CLASS = 'bubble-overlay';\nconst BUBBLE_NODE_CLASS = 'node';\nconst BUBBLE_CLASS = 'bubble';\n\n/**\n * The bubble overlay chart is quite different from the typical bubble chart. With the bubble overlay\n * chart you can arbitrarily place bubbles on an existing svg or bitmap image, thus changing the\n * typical x and y positioning while retaining the capability to visualize data using bubble radius\n * and coloring.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @mixes BubbleMixin\n * @mixes BaseMixin\n */\nexport class BubbleOverlay extends BubbleMixin(BaseMixin) {\n    /**\n     * Create a Bubble Overlay.\n     *\n     * @example\n     * // create a bubble overlay chart on top of the '#chart-container1 svg' element using the default global chart group\n     * var bubbleChart1 = BubbleOverlayChart('#chart-container1').svg(d3.select('#chart-container1 svg'));\n     * // create a bubble overlay chart on top of the '#chart-container2 svg' element using chart group A\n     * var bubbleChart2 = new CompositeChart('#chart-container2', 'chartGroupA').svg(d3.select('#chart-container2 svg'));\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor (parent, chartGroup) {\n        super();\n\n        /**\n         * **mandatory**\n         *\n         * Set the underlying svg image element. Unlike other dc charts this chart will not generate a svg\n         * element; therefore the bubble overlay chart will not work if this function is not invoked. If the\n         * underlying image is a bitmap, then an empty svg will need to be created on top of the image.\n         * @example\n         * // set up underlying svg element\n         * chart.svg(d3.select('#chart svg'));\n         * @param {SVGElement|d3.selection} [imageElement]\n         * @returns {BubbleOverlay}\n         */\n        this._g = undefined;\n        this._points = [];\n        this._keyboardAccessible = false;\n\n        this.transitionDuration(750);\n\n        this.transitionDelay(0);\n\n        this.radiusValueAccessor(d => d.value);\n\n        this.anchor(parent, chartGroup);\n    }\n\n    /**\n     * **mandatory**\n     *\n     * Set up a data point on the overlay. The name of a data point should match a specific 'key' among\n     * data groups generated using keyAccessor.  If a match is found (point name <-> data group key)\n     * then a bubble will be generated at the position specified by the function. x and y\n     * value specified here are relative to the underlying svg.\n     * @param {String} name\n     * @param {Number} x\n     * @param {Number} y\n     * @returns {BubbleOverlay}\n     */\n    point (name, x, y) {\n        this._points.push({name: name, x: x, y: y});\n        return this;\n    }\n\n    _doRender () {\n        this._g = this._initOverlayG();\n\n        this.r().range([this.MIN_RADIUS, this.width() * this.maxBubbleRelativeSize()]);\n\n        this._initializeBubbles();\n\n        this.fadeDeselectedArea(this.filter());\n\n        return this;\n    }\n\n    _initOverlayG () {\n        this._g = this.select(`g.${BUBBLE_OVERLAY_CLASS}`);\n        if (this._g.empty()) {\n            this._g = this.svg().append('g').attr('class', BUBBLE_OVERLAY_CLASS);\n        }\n        return this._g;\n    }\n\n    _initializeBubbles () {\n        const data = this._mapData();\n        this.calculateRadiusDomain();\n\n        this._points.forEach(point => {\n            const nodeG = this._getNodeG(point, data);\n\n            let circle = nodeG.select(`circle.${BUBBLE_CLASS}`);\n\n            if (circle.empty()) {\n                circle = nodeG.append('circle')\n                    .attr('class', BUBBLE_CLASS)\n                    .classed('dc-tabbable', this._keyboardAccessible)\n                    .attr('r', 0)\n                    .attr('fill', this.getColor)\n                    .on('click', d3compat.eventHandler(d => this.onClick(d)));\n            }\n\n            if (this._keyboardAccessible) {\n                this._makeKeyboardAccessible(this.onClick);\n            }\n\n            transition(circle, this.transitionDuration(), this.transitionDelay())\n                .attr('r', d => this.bubbleR(d));\n\n            this._doRenderLabel(nodeG);\n\n            this._doRenderTitles(nodeG);\n        });\n    }\n\n    _mapData () {\n        const data = {};\n        this.data().forEach(datum => {\n            data[this.keyAccessor()(datum)] = datum;\n        });\n        return data;\n    }\n\n    _getNodeG (point, data) {\n        const bubbleNodeClass = `${BUBBLE_NODE_CLASS} ${utils.nameToId(point.name)}`;\n\n        let nodeG = this._g.select(`g.${utils.nameToId(point.name)}`);\n\n        if (nodeG.empty()) {\n            nodeG = this._g.append('g')\n                .attr('class', bubbleNodeClass)\n                .attr('transform', `translate(${point.x},${point.y})`);\n        }\n\n        nodeG.datum(data[point.name]);\n\n        return nodeG;\n    }\n\n    _doRedraw () {\n        this._updateBubbles();\n\n        this.fadeDeselectedArea(this.filter());\n\n        return this;\n    }\n\n    _updateBubbles () {\n        const data = this._mapData();\n        this.calculateRadiusDomain();\n\n        this._points.forEach(point => {\n            const nodeG = this._getNodeG(point, data);\n\n            const circle = nodeG.select(`circle.${BUBBLE_CLASS}`);\n\n            transition(circle, this.transitionDuration(), this.transitionDelay())\n                .attr('r', d => this.bubbleR(d))\n                .attr('fill', this.getColor);\n\n            this.doUpdateLabels(nodeG);\n\n            this.doUpdateTitles(nodeG);\n        });\n    }\n\n    debug (flag) {\n        if (flag) {\n            let debugG = this.select(`g.${constants.DEBUG_GROUP_CLASS}`);\n\n            if (debugG.empty()) {\n                debugG = this.svg()\n                    .append('g')\n                    .attr('class', constants.DEBUG_GROUP_CLASS);\n            }\n\n            const debugText = debugG.append('text')\n                .attr('x', 10)\n                .attr('y', 20);\n\n            debugG\n                .append('rect')\n                .attr('width', this.width())\n                .attr('height', this.height())\n                .on('mousemove', d3compat.eventHandler((d, evt) => {\n                    const position = d3compat.pointer(evt, debugG.node());\n                    const msg = `${position[0]}, ${position[1]}`;\n                    debugText.text(msg);\n                }));\n        } else {\n            this.selectAll('.debug').remove();\n        }\n\n        return this;\n    }\n\n}\n\nexport const bubbleOverlay = (parent, chartGroup) => new BubbleOverlay(parent, chartGroup);\n","import {select} from 'd3-selection';\n\nimport {events} from '../core/events';\nimport {BaseMixin} from '../base/base-mixin';\nimport {utils} from '../core/utils'\nimport {d3compat} from '../core/config';\n\nconst GROUP_CSS_CLASS = 'dc-cbox-group';\nconst ITEM_CSS_CLASS = 'dc-cbox-item';\n\n/**\n * The CboxMenu is a simple widget designed to filter a dimension by\n * selecting option(s) from a set of HTML `<input />` elements. The menu can be\n * made into a set of radio buttons (single select) or checkboxes (multiple).\n * @mixes BaseMixin\n */\nexport class CboxMenu extends BaseMixin {\n    /**\n     * Create a Cbox Menu.\n     *\n     * @example\n     * // create a cboxMenu under #cbox-container using the default global chart group\n     * var cbox = new CboxMenu('#cbox-container')\n     *                .dimension(states)\n     *                .group(stateGroup);\n     * // the option text can be set via the title() function\n     * // by default the option text is '`key`: `value`'\n     * cbox.title(function (d){\n     *     return 'STATE: ' + d.key;\n     * })\n     * @param {String|node|d3.selection|CompositeChart} parent - Any valid\n     * [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this widget should be placed in.\n     * Interaction with the widget will only trigger events and redraws within its group.\n     */\n    constructor (parent, chartGroup) {\n        super();\n\n        this._cbox = undefined;\n        this._promptText = 'Select all';\n        this._multiple = false;\n        this._inputType = 'radio';\n        this._promptValue = null;\n\n        this._uniqueId = utils.uniqueId();\n\n        this.data(group => group.all().filter(this._filterDisplayed));\n\n        // There is an accessor for this attribute, initialized with default value\n        this._filterDisplayed = d => this.valueAccessor()(d) > 0;\n\n        this._order = (a, b) => {\n            if (this.keyAccessor()(a) > this.keyAccessor()(b)) {\n                return 1;\n            }\n            if (this.keyAccessor()(a) < this.keyAccessor()(b)) {\n                return -1;\n            }\n            return 0;\n        };\n\n        this.anchor(parent, chartGroup);\n    }\n\n    _doRender () {\n        return this._doRedraw();\n    }\n\n    _doRedraw () {\n        this.select('ul').remove();\n        this._cbox = this.root()\n            .append('ul')\n            .classed(GROUP_CSS_CLASS, true);\n        this._renderOptions();\n\n        if (this.hasFilter() && this._multiple) {\n            this._cbox.selectAll('input')\n            // adding `false` avoids failing test cases in phantomjs\n                .property('checked', d => d && this.filters().indexOf(String(this.keyAccessor()(d))) >= 0 || false);\n        } else if (this.hasFilter()) {\n            this._cbox.selectAll('input')\n                .property('checked', d => {\n                    if (!d) {\n                        return false;\n                    }\n                    return this.keyAccessor()(d) === this.filter();\n                });\n        }\n        return this;\n    }\n\n    _renderOptions () {\n        let options = this._cbox\n            .selectAll(`li.${ITEM_CSS_CLASS}`)\n            .data(this.data(), d => this.keyAccessor()(d));\n\n        options.exit().remove();\n\n        options = options.enter()\n            .append('li')\n            .classed(ITEM_CSS_CLASS, true)\n            .merge(options);\n\n        options\n            .append('input')\n            .attr('type', this._inputType)\n            .attr('value', d => this.keyAccessor()(d))\n            .attr('name', `domain_${this._uniqueId}`)\n            .attr('id', (d, i) => `input_${this._uniqueId}_${i}`);\n        options\n            .append('label')\n            .attr('for', (d, i) => `input_${this._uniqueId}_${i}`)\n            .text(this.title());\n\n        const chart = this;\n        // 'all' option\n        if (this._multiple) {\n            this._cbox\n                .append('li')\n                .append('input')\n                .attr('type', 'reset')\n                .text(this._promptText)\n                .on('click', d3compat.eventHandler(function (d, evt) {\n                    return chart._onChange(d, evt, this);\n                }));\n        } else {\n            const li = this._cbox.append('li');\n            li.append('input')\n                .attr('type', this._inputType)\n                .attr('value', this._promptValue)\n                .attr('name', `domain_${this._uniqueId}`)\n                .attr('id', (d, i) => `input_${this._uniqueId}_all`)\n                .property('checked', true);\n            li.append('label')\n                .attr('for', (d, i) => `input_${this._uniqueId}_all`)\n                .text(this._promptText);\n        }\n\n        this._cbox\n            .selectAll(`li.${ITEM_CSS_CLASS}`)\n            .sort(this._order);\n\n        this._cbox.on('change', d3compat.eventHandler(function (d, evt) {\n            return chart._onChange(d, evt, this);\n        }));\n        return options;\n    }\n\n    _onChange (d, evt, element) {\n        let values;\n\n        const target = select(evt.target);\n        let options;\n\n        if (!target.datum()) {\n            values = this._promptValue || null;\n        } else {\n            options = select(element).selectAll('input')\n                .filter(function (o) {\n                    if (o) {\n                        return this.checked;\n                    }\n                });\n            values = options.nodes().map(option => option.value);\n            // check if only prompt option is selected\n            if (!this._multiple && values.length === 1) {\n                values = values[0];\n            }\n        }\n        this.onChange(values);\n    }\n\n    onChange (val) {\n        if (val && this._multiple) {\n            this.replaceFilter([val]);\n        } else if (val) {\n            this.replaceFilter(val);\n        } else {\n            this.filterAll();\n        }\n        events.trigger(() => {\n            this.redrawGroup();\n        });\n    }\n\n    /**\n     * Get or set the function that controls the ordering of option tags in the\n     * cbox menu. By default options are ordered by the group key in ascending\n     * order.\n     * @param {Function} [order]\n     * @returns {Function|CboxMenu}\n     * @example\n     * // order by the group's value\n     * chart.order(function (a,b) {\n     *     return a.value > b.value ? 1 : b.value > a.value ? -1 : 0;\n     * });\n     */\n    order (order) {\n        if (!arguments.length) {\n            return this._order;\n        }\n        this._order = order;\n        return this;\n    }\n\n    /**\n     * Get or set the text displayed in the options used to prompt selection.\n     * @param {String} [promptText='Select all']\n     * @returns {String|CboxMenu}\n     * @example\n     * chart.promptText('All states');\n     */\n    promptText (promptText) {\n        if (!arguments.length) {\n            return this._promptText;\n        }\n        this._promptText = promptText;\n        return this;\n    }\n\n    /**\n     * Get or set the function that filters options prior to display. By default options\n     * with a value of < 1 are not displayed.\n     * @param {function} [filterDisplayed]\n     * @returns {Function|CboxMenu}\n     * @example\n     * // display all options override the `filterDisplayed` function:\n     * chart.filterDisplayed(function () {\n     *     return true;\n     * });\n     */\n    filterDisplayed (filterDisplayed) {\n        if (!arguments.length) {\n            return this._filterDisplayed;\n        }\n        this._filterDisplayed = filterDisplayed;\n        return this;\n    }\n\n    /**\n     * Controls the type of input element. Setting it to true converts\n     * the HTML `input` tags from radio buttons to checkboxes.\n     * @param {boolean} [multiple=false]\n     * @returns {Boolean|CboxMenu}\n     * @example\n     * chart.multiple(true);\n     */\n    multiple (multiple) {\n        if (!arguments.length) {\n            return this._multiple;\n        }\n        this._multiple = multiple;\n        if (this._multiple) {\n            this._inputType = 'checkbox';\n        } else {\n            this._inputType = 'radio';\n        }\n        return this;\n    }\n\n    /**\n     * Controls the default value to be used for\n     * [dimension.filter](https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter)\n     * when only the prompt value is selected. If `null` (the default), no filtering will occur when\n     * just the prompt is selected.\n     * @param {?*} [promptValue=null]\n     * @returns {*|CboxMenu}\n     */\n    promptValue (promptValue) {\n        if (!arguments.length) {\n            return this._promptValue;\n        }\n        this._promptValue = promptValue;\n\n        return this;\n    }\n}\n\nexport const cboxMenu = (parent, chartGroup) => new CboxMenu(parent, chartGroup);\n","import {min, max} from 'd3-array';\nimport {scaleLinear} from 'd3-scale';\nimport {axisRight} from 'd3-axis';\n\nimport {utils} from '../core/utils';\nimport {CoordinateGridMixin} from '../base/coordinate-grid-mixin';\n\nconst SUB_CHART_CLASS = 'sub';\nconst DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING = 12;\n\n/**\n * Composite charts are a special kind of chart that render multiple charts on the same Coordinate\n * Grid. You can overlay (compose) different bar/line/area charts in a single composite chart to\n * achieve some quite flexible charting effects.\n * @mixes CoordinateGridMixin\n */\nexport class CompositeChart extends CoordinateGridMixin {\n    /**\n     * Create a Composite Chart.\n     * @example\n     * // create a composite chart under #chart-container1 element using the default global chart group\n     * var compositeChart1 = new CompositeChart('#chart-container1');\n     * // create a composite chart under #chart-container2 element using chart group A\n     * var compositeChart2 = new CompositeChart('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor (parent, chartGroup) {\n        super();\n\n        this._children = [];\n\n        this._childOptions = {};\n\n        this._shareColors = false;\n        this._shareTitle = true;\n        this._alignYAxes = false;\n\n        this._rightYAxis = axisRight();\n        this._rightYAxisLabel = 0;\n        this._rightYAxisLabelPadding = DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING;\n        this._rightY = undefined;\n        this._rightAxisGridLines = false;\n\n        this._mandatoryAttributes([]);\n        this.transitionDuration(500);\n        this.transitionDelay(0);\n\n        this.on('filtered.dcjs-composite-chart', chart => {\n            // Propagate the filters onto the children\n            // Notice that on children the call is .replaceFilter and not .filter\n            //   the reason is that _chart.filter() returns the entire current set of filters not just the last added one\n            for (let i = 0; i < this._children.length; ++i) {\n                this._children[i].replaceFilter(this.filter());\n            }\n        });\n\n        this.anchor(parent, chartGroup);\n    }\n\n    _generateG () {\n        const g = super._generateG();\n\n        for (let i = 0; i < this._children.length; ++i) {\n            const child = this._children[i];\n\n            this._generateChildG(child, i);\n\n            if (!child.dimension()) {\n                child.dimension(this.dimension());\n            }\n            if (!child.group()) {\n                child.group(this.group());\n            }\n\n            child.chartGroup(this.chartGroup());\n            child.svg(this.svg());\n            child.xUnits(this.xUnits());\n            child.transitionDuration(this.transitionDuration(), this.transitionDelay());\n            child.parentBrushOn(this.brushOn());\n            child.brushOn(false);\n            child.renderTitle(this.renderTitle());\n            child.elasticX(this.elasticX());\n        }\n\n        return g;\n    }\n\n    rescale () {\n        super.rescale();\n\n        this._children.forEach(child => {\n            child.rescale();\n        });\n\n        return this;\n    }\n\n    resizing (resizing) {\n        if (!arguments.length) {\n            return super.resizing();\n        }\n        super.resizing(resizing);\n\n        this._children.forEach(child => {\n            child.resizing(resizing);\n        });\n\n        return this;\n    }\n\n    _prepareYAxis () {\n        const left = (this._leftYAxisChildren().length !== 0);\n        const right = (this._rightYAxisChildren().length !== 0);\n        const ranges = this._calculateYAxisRanges(left, right);\n\n        if (left) {\n            this._prepareLeftYAxis(ranges);\n        }\n        if (right) {\n            this._prepareRightYAxis(ranges);\n        }\n\n        if (this._leftYAxisChildren().length > 0 && !this._rightAxisGridLines) {\n            this._renderHorizontalGridLinesForAxis(this.g(), this.y(), this.yAxis());\n        } else if (this._rightYAxisChildren().length > 0) {\n            this._renderHorizontalGridLinesForAxis(this.g(), this._rightY, this._rightYAxis);\n        }\n    }\n\n    renderYAxis () {\n        if (this._leftYAxisChildren().length !== 0) {\n            this.renderYAxisAt('y', this.yAxis(), this.margins().left);\n            this.renderYAxisLabel('y', this.yAxisLabel(), -90);\n        }\n\n        if (this._rightYAxisChildren().length !== 0) {\n            this.renderYAxisAt('yr', this.rightYAxis(), this.width() - this.margins().right);\n            this.renderYAxisLabel('yr', this.rightYAxisLabel(), 90, this.width() - this._rightYAxisLabelPadding);\n        }\n    }\n\n    _calculateYAxisRanges (left, right) {\n        let lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax;\n        let ranges;\n\n        if (left) {\n            lyAxisMin = this._yAxisMin();\n            lyAxisMax = this._yAxisMax();\n        }\n\n        if (right) {\n            ryAxisMin = this._rightYAxisMin();\n            ryAxisMax = this._rightYAxisMax();\n        }\n\n        if (this.alignYAxes() && left && right) {\n            ranges = this._alignYAxisRanges(lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax);\n        }\n\n        return ranges || {\n            lyAxisMin: lyAxisMin,\n            lyAxisMax: lyAxisMax,\n            ryAxisMin: ryAxisMin,\n            ryAxisMax: ryAxisMax\n        };\n    }\n\n    _alignYAxisRanges (lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax) {\n        // since the two series will share a zero, each Y is just a multiple\n        // of the other. and the ratio should be the ratio of the ranges of the\n        // input data, so that they come out the same height. so we just min/max\n\n        // note: both ranges already include zero due to the stack mixin (#667)\n        // if #667 changes, we can reconsider whether we want data height or\n        // height from zero to be equal. and it will be possible for the axes\n        // to be aligned but not visible.\n        const extentRatio = (ryAxisMax - ryAxisMin) / (lyAxisMax - lyAxisMin);\n\n        return {\n            lyAxisMin: Math.min(lyAxisMin, ryAxisMin / extentRatio),\n            lyAxisMax: Math.max(lyAxisMax, ryAxisMax / extentRatio),\n            ryAxisMin: Math.min(ryAxisMin, lyAxisMin * extentRatio),\n            ryAxisMax: Math.max(ryAxisMax, lyAxisMax * extentRatio)\n        };\n    }\n\n    _prepareRightYAxis (ranges) {\n        const needDomain = this.rightY() === undefined || this.elasticY(),\n            needRange = needDomain || this.resizing();\n        if (this.rightY() === undefined) {\n            this.rightY(scaleLinear());\n        }\n        if (needDomain) {\n            this.rightY().domain([ranges.ryAxisMin, ranges.ryAxisMax]);\n        }\n        if (needRange) {\n            this.rightY().rangeRound([this.yAxisHeight(), 0]);\n        }\n\n        this.rightY().range([this.yAxisHeight(), 0]);\n        this.rightYAxis(this.rightYAxis().scale(this.rightY()));\n\n        // In D3v4 create a RightAxis\n        // _chart.rightYAxis().orient('right');\n    }\n\n    _prepareLeftYAxis (ranges) {\n        const needDomain = this.y() === undefined || this.elasticY(),\n            needRange = needDomain || this.resizing();\n        if (this.y() === undefined) {\n            this.y(scaleLinear());\n        }\n        if (needDomain) {\n            this.y().domain([ranges.lyAxisMin, ranges.lyAxisMax]);\n        }\n        if (needRange) {\n            this.y().rangeRound([this.yAxisHeight(), 0]);\n        }\n\n        this.y().range([this.yAxisHeight(), 0]);\n        this.yAxis(this.yAxis().scale(this.y()));\n\n        // In D3v4 create a LeftAxis\n        // _chart.yAxis().orient('left');\n    }\n\n    _generateChildG (child, i) {\n        child._generateG(this.g());\n        child.g().attr('class', `${SUB_CHART_CLASS} _${i}`);\n    }\n\n    plotData () {\n        for (let i = 0; i < this._children.length; ++i) {\n            const child = this._children[i];\n\n            if (!child.g()) {\n                this._generateChildG(child, i);\n            }\n\n            if (this._shareColors) {\n                child.colors(this.colors());\n            }\n\n            child.x(this.x());\n\n            child.xAxis(this.xAxis());\n\n            if (child.useRightYAxis()) {\n                child.y(this.rightY());\n                child.yAxis(this.rightYAxis());\n            } else {\n                child.y(this.y());\n                child.yAxis(this.yAxis());\n            }\n\n            child.plotData();\n\n            child._activateRenderlets();\n        }\n    }\n\n    /**\n     * Get or set whether to draw gridlines from the right y axis.  Drawing from the left y axis is the\n     * default behavior. This option is only respected when subcharts with both left and right y-axes\n     * are present.\n     * @param {Boolean} [useRightAxisGridLines=false]\n     * @returns {Boolean|CompositeChart}\n     */\n    useRightAxisGridLines (useRightAxisGridLines) {\n        if (!arguments) {\n            return this._rightAxisGridLines;\n        }\n\n        this._rightAxisGridLines = useRightAxisGridLines;\n        return this;\n    }\n\n    /**\n     * Get or set chart-specific options for all child charts. This is equivalent to calling\n     * {@link BaseMixin#options .options} on each child chart.\n     * @param {Object} [childOptions]\n     * @returns {Object|CompositeChart}\n     */\n    childOptions (childOptions) {\n        if (!arguments.length) {\n            return this._childOptions;\n        }\n        this._childOptions = childOptions;\n        this._children.forEach(child => {\n            child.options(this._childOptions);\n        });\n        return this;\n    }\n\n    fadeDeselectedArea (brushSelection) {\n        if (this.brushOn()) {\n            for (let i = 0; i < this._children.length; ++i) {\n                const child = this._children[i];\n                child.fadeDeselectedArea(brushSelection);\n            }\n        }\n    }\n\n    /**\n     * Set or get the right y axis label.\n     * @param {String} [rightYAxisLabel]\n     * @param {Number} [padding]\n     * @returns {String|CompositeChart}\n     */\n    rightYAxisLabel (rightYAxisLabel, padding) {\n        if (!arguments.length) {\n            return this._rightYAxisLabel;\n        }\n        this._rightYAxisLabel = rightYAxisLabel;\n        this.margins().right -= this._rightYAxisLabelPadding;\n        this._rightYAxisLabelPadding = (padding === undefined) ? DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING : padding;\n        this.margins().right += this._rightYAxisLabelPadding;\n        return this;\n    }\n\n    /**\n     * Combine the given charts into one single composite coordinate grid chart.\n     * @example\n     * moveChart.compose([\n     *     // when creating sub-chart you need to pass in the parent chart\n     *     new LineChart(moveChart)\n     *         .group(indexAvgByMonthGroup) // if group is missing then parent's group will be used\n     *         .valueAccessor(function (d){return d.value.avg;})\n     *         // most of the normal functions will continue to work in a composed chart\n     *         .renderArea(true)\n     *         .stack(monthlyMoveGroup, function (d){return d.value;})\n     *         .title(function (d){\n     *             var value = d.value.avg?d.value.avg:d.value;\n     *             if(isNaN(value)) value = 0;\n     *             return dateFormat(d.key) + '\\n' + numberFormat(value);\n     *         }),\n     *     new BarChart(moveChart)\n     *         .group(volumeByMonthGroup)\n     *         .centerBar(true)\n     * ]);\n     * @param {Array<Chart>} [subChartArray]\n     * @returns {CompositeChart}\n     */\n    compose (subChartArray) {\n        this._children = subChartArray;\n        this._children.forEach(child => {\n            child.height(this.height());\n            child.width(this.width());\n            child.margins(this.margins());\n\n            if (this._shareTitle) {\n                child.title(this.title());\n            }\n\n            child.options(this._childOptions);\n        });\n        this.rescale();\n        return this;\n    }\n\n    _setChildrenProperty (prop, value) {\n        this._children.forEach(child => {\n            child[prop](value);\n        });\n    }\n\n    // properties passed through in compose()\n    height (height) {\n        if(!arguments.length) {\n            return super.height();\n        }\n        super.height(height);\n        this._setChildrenProperty('height', height);\n        return this;\n    }\n\n    width (width) {\n        if(!arguments.length) {\n            return super.width();\n        }\n        super.width(width);\n        this._setChildrenProperty('width', width);\n        return this;\n    }\n\n    margins (margins) {\n        if(!arguments.length) {\n            return super.margins();\n        }\n        super.margins(margins);\n        this._setChildrenProperty('margins', margins);\n        return this;\n    }\n\n    /**\n     * Returns the child charts which are composed into the composite chart.\n     * @returns {Array<BaseMixin>}\n     */\n    children () {\n        return this._children;\n    }\n\n    /**\n     * Get or set color sharing for the chart. If set, the {@link ColorMixin#colors .colors()} value from this chart\n     * will be shared with composed children. Additionally if the child chart implements\n     * Stackable and has not set a custom .colorAccessor, then it will generate a color\n     * specific to its order in the composition.\n     * @param {Boolean} [shareColors=false]\n     * @returns {Boolean|CompositeChart}\n     */\n    shareColors (shareColors) {\n        if (!arguments.length) {\n            return this._shareColors;\n        }\n        this._shareColors = shareColors;\n        return this;\n    }\n\n    /**\n     * Get or set title sharing for the chart. If set, the {@link BaseMixin#title .title()} value from\n     * this chart will be shared with composed children.\n     *\n     * Note: currently you must call this before `compose` or the child will still get the parent's\n     * `title` function!\n     * @param {Boolean} [shareTitle=true]\n     * @returns {Boolean|CompositeChart}\n     */\n    shareTitle (shareTitle) {\n        if (!arguments.length) {\n            return this._shareTitle;\n        }\n        this._shareTitle = shareTitle;\n        return this;\n    }\n\n    /**\n     * Get or set the y scale for the right axis. The right y scale is typically automatically\n     * generated by the chart implementation.\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\n     * @param {d3.scale} [yScale]\n     * @returns {d3.scale|CompositeChart}\n     */\n    rightY (yScale) {\n        if (!arguments.length) {\n            return this._rightY;\n        }\n        this._rightY = yScale;\n        this.rescale();\n        return this;\n    }\n\n    /**\n     * Get or set alignment between left and right y axes. A line connecting '0' on both y axis\n     * will be parallel to x axis. This only has effect when {@link CoordinateGridMixin#elasticY elasticY} is true.\n     * @param {Boolean} [alignYAxes=false]\n     * @returns {Chart}\n     */\n    alignYAxes (alignYAxes) {\n        if (!arguments.length) {\n            return this._alignYAxes;\n        }\n        this._alignYAxes = alignYAxes;\n        this.rescale();\n        return this;\n    }\n\n    _leftYAxisChildren () {\n        return this._children.filter(child => !child.useRightYAxis());\n    }\n\n    _rightYAxisChildren () {\n        return this._children.filter(child => child.useRightYAxis());\n    }\n\n    _getYAxisMin (charts) {\n        return charts.map(c => c.yAxisMin());\n    }\n\n    _yAxisMin () {\n        return min(this._getYAxisMin(this._leftYAxisChildren()));\n    }\n\n    _rightYAxisMin () {\n        return min(this._getYAxisMin(this._rightYAxisChildren()));\n    }\n\n    _getYAxisMax (charts) {\n        return charts.map(c => c.yAxisMax());\n    }\n\n    _yAxisMax () {\n        return utils.add(max(this._getYAxisMax(this._leftYAxisChildren())), this.yAxisPadding());\n    }\n\n    _rightYAxisMax () {\n        return utils.add(max(this._getYAxisMax(this._rightYAxisChildren())), this.yAxisPadding());\n    }\n\n    _getAllXAxisMinFromChildCharts () {\n        return this._children.map(c => c.xAxisMin());\n    }\n\n    xAxisMin () {\n        return utils.subtract(min(this._getAllXAxisMinFromChildCharts()), this.xAxisPadding(), this.xAxisPaddingUnit());\n    }\n\n    _getAllXAxisMaxFromChildCharts () {\n        return this._children.map(c => c.xAxisMax());\n    }\n\n    xAxisMax () {\n        return utils.add(max(this._getAllXAxisMaxFromChildCharts()), this.xAxisPadding(), this.xAxisPaddingUnit());\n    }\n\n    legendables () {\n        return this._children.reduce((items, child) => {\n            if (this._shareColors) {\n                child.colors(this.colors());\n            }\n            items.push.apply(items, child.legendables());\n            return items;\n        }, []);\n    }\n\n    legendHighlight (d) {\n        for (let j = 0; j < this._children.length; ++j) {\n            const child = this._children[j];\n            child.legendHighlight(d);\n        }\n    }\n\n    legendReset (d) {\n        for (let j = 0; j < this._children.length; ++j) {\n            const child = this._children[j];\n            child.legendReset(d);\n        }\n    }\n\n    legendToggle () {\n        console.log('composite should not be getting legendToggle itself');\n    }\n\n    /**\n     * Set or get the right y axis used by the composite chart. This function is most useful when y\n     * axis customization is required. The y axis in dc.js is an instance of a\n     * [d3.axisRight](https://github.com/d3/d3-axis/blob/master/README.md#axisRight) therefore it supports any valid\n     * d3 axis manipulation.\n     *\n     * **Caution**: The right y axis is usually generated internally by dc; resetting it may cause\n     * unexpected results.  Note also that when used as a getter, this function is not chainable: it\n     * returns the axis, not the chart,\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n     * so attempting to call chart functions after calling `.yAxis()` will fail}.\n     * @see {@link https://github.com/d3/d3-axis/blob/master/README.md#axisRight}\n     * @example\n     * // customize y axis tick format\n     * chart.rightYAxis().tickFormat(function (v) {return v + '%';});\n     * // customize y axis tick values\n     * chart.rightYAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.axisRight} [rightYAxis]\n     * @returns {d3.axisRight|CompositeChart}\n     */\n    rightYAxis (rightYAxis) {\n        if (!arguments.length) {\n            return this._rightYAxis;\n        }\n        this._rightYAxis = rightYAxis;\n        return this;\n    }\n\n    yAxisMin () {\n        throw new Error('Not supported for this chart type');\n    }\n\n    yAxisMax () {\n        throw new Error('Not supported for this chart type');\n    }\n}\n\nexport const compositeChart = (parent, chartGroup) => new CompositeChart(parent, chartGroup);\n","import {format} from 'd3-format';\n\nimport {logger} from '../core/logger';\nimport {BaseMixin} from '../base/base-mixin';\n\n/**\n * The data count widget is a simple widget designed to display the number of records selected by the\n * current filters out of the total number of records in the data set. Once created the data count widget\n * will automatically update the text content of child elements with the following classes:\n *\n * * `.total-count` - total number of records\n * * `.filter-count` - number of records matched by the current filters\n *\n * Note: this widget works best for the specific case of showing the number of records out of a\n * total. If you want a more general-purpose numeric display, please use the\n * {@link NumberDisplay} widget instead.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @mixes BaseMixin\n */\nexport class DataCount extends BaseMixin {\n    /**\n     * Create a Data Count widget.\n     * @example\n     * var ndx = crossfilter(data);\n     * var all = ndx.groupAll();\n     *\n     * new DataCount('.dc-data-count')\n     *     .crossfilter(ndx)\n     *     .groupAll(all);\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor (parent, chartGroup) {\n        super();\n\n        this._formatNumber = format(',d');\n        this._crossfilter = null;\n        this._groupAll = null;\n        this._html = {some: '', all: ''};\n\n        this._mandatoryAttributes(['crossfilter', 'groupAll']);\n\n        this.anchor(parent, chartGroup);\n    }\n\n    /**\n     * Gets or sets an optional object specifying HTML templates to use depending how many items are\n     * selected. The text `%total-count` will replaced with the total number of records, and the text\n     * `%filter-count` will be replaced with the number of selected records.\n     * - all: HTML template to use if all items are selected\n     * - some: HTML template to use if not all items are selected\n     * @example\n     * counter.html({\n     *      some: '%filter-count out of %total-count records selected',\n     *      all: 'All records selected. Click on charts to apply filters'\n     * })\n     * @param {{some:String, all: String}} [options]\n     * @returns {{some:String, all: String}|DataCount}\n     */\n    html (options) {\n        if (!arguments.length) {\n            return this._html;\n        }\n        if (options.all) {\n            this._html.all = options.all;\n        }\n        if (options.some) {\n            this._html.some = options.some;\n        }\n        return this;\n    }\n\n    /**\n     * Gets or sets an optional function to format the filter count and total count.\n     * @see {@link https://github.com/d3/d3-format/blob/master/README.md#format d3.format}\n     * @example\n     * counter.formatNumber(d3.format('.2g'))\n     * @param {Function} [formatter=d3.format('.2g')]\n     * @returns {Function|DataCount}\n     */\n    formatNumber (formatter) {\n        if (!arguments.length) {\n            return this._formatNumber;\n        }\n        this._formatNumber = formatter;\n        return this;\n    }\n\n    _doRender () {\n        const tot = this.crossfilter().size(),\n            val = this.groupAll().value();\n        const all = this._formatNumber(tot);\n        const selected = this._formatNumber(val);\n\n        if ((tot === val) && (this._html.all !== '')) {\n            this.root().html(this._html.all.replace('%total-count', all).replace('%filter-count', selected));\n        } else if (this._html.some !== '') {\n            this.root().html(this._html.some.replace('%total-count', all).replace('%filter-count', selected));\n        } else {\n            this.selectAll('.total-count').text(all);\n            this.selectAll('.filter-count').text(selected);\n        }\n        return this;\n    }\n\n    _doRedraw () {\n        return this._doRender();\n    }\n\n    crossfilter (cf) {\n        if (!arguments.length) {\n            return this._crossfilter;\n        }\n        this._crossfilter = cf;\n        return this;\n    }\n\n    dimension (cf) {\n        logger.warnOnce('consider using dataCount.crossfilter instead of dataCount.dimension for clarity');\n        if (!arguments.length) {\n            return this.crossfilter();\n        }\n        return this.crossfilter(cf);\n    }\n\n    groupAll (groupAll) {\n        if (!arguments.length) {\n            return this._groupAll;\n        }\n        this._groupAll = groupAll;\n        return this;\n    }\n\n    group (groupAll) {\n        logger.warnOnce('consider using dataCount.groupAll instead of dataCount.group for clarity');\n        if (!arguments.length) {\n            return this.groupAll();\n        }\n        return this.groupAll(groupAll);\n    }\n}\n\nexport const dataCount = (parent, chartGroup) => new DataCount(parent, chartGroup);\n","import {ascending} from 'd3-array';\n\nimport {logger} from '../core/logger';\nimport {BaseMixin} from '../base/base-mixin';\nimport {d3compat} from '../core/config';\n\nconst LABEL_CSS_CLASS = 'dc-grid-label';\nconst ITEM_CSS_CLASS = 'dc-grid-item';\nconst SECTION_CSS_CLASS = 'dc-grid-section dc-grid-group';\nconst GRID_CSS_CLASS = 'dc-grid-top';\n\n/**\n * Data grid is a simple widget designed to list the filtered records, providing\n * a simple way to define how the items are displayed.\n *\n * Note: Formerly the data grid chart (and data table) used the {@link DataGrid#group group} attribute as a\n * keying function for {@link https://github.com/d3/d3-collection/blob/master/README.md#nest nesting} the data\n * together in sections.  This was confusing so it has been renamed to `section`, although `group` still works.\n *\n * Examples:\n * - {@link https://dc-js.github.io/dc.js/ep/ List of members of the european parliament}\n * @mixes BaseMixin\n */\nexport class DataGrid extends BaseMixin {\n    /**\n     * Create a Data Grid.\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor (parent, chartGroup) {\n        super();\n\n        this._section = null;\n        this._size = 999; // shouldn't be needed, but you might\n        this._html = function (d) {\n            return `you need to provide an html() handling param:  ${JSON.stringify(d)}`;\n        };\n        this._sortBy = function (d) {\n            return d;\n        };\n        this._order = ascending;\n        this._beginSlice = 0;\n        this._endSlice = undefined;\n\n        this._htmlSection = d => `<div class='${SECTION_CSS_CLASS}'><h1 class='${LABEL_CSS_CLASS}'>${ \n            this.keyAccessor()(d)}</h1></div>`;\n\n        this._mandatoryAttributes(['dimension', 'section']);\n\n        this.anchor(parent, chartGroup);\n    }\n\n    _doRender () {\n        this.selectAll(`div.${GRID_CSS_CLASS}`).remove();\n\n        this._renderItems(this._renderSections());\n\n        return this;\n    }\n\n    _renderSections () {\n        const sections = this.root().selectAll(`div.${GRID_CSS_CLASS}`)\n            .data(this._nestEntries(), d => this.keyAccessor()(d));\n\n        const itemSection = sections\n            .enter()\n            .append('div')\n            .attr('class', GRID_CSS_CLASS);\n\n        if (this._htmlSection) {\n            itemSection\n                .html(d => this._htmlSection(d));\n        }\n\n        sections.exit().remove();\n        return itemSection;\n    }\n\n    _nestEntries () {\n        let entries = this.dimension().top(this._size);\n\n        entries = entries\n            .sort((a, b) => this._order(this._sortBy(a), this._sortBy(b)))\n            .slice(this._beginSlice, this._endSlice)\n\n        return d3compat.nester({\n            key: this.section(),\n            sortKeys: this._order,\n            entries\n        });\n    }\n\n    _renderItems (sections) {\n        let items = sections.order()\n            .selectAll(`div.${ITEM_CSS_CLASS}`)\n            .data(d => d.values);\n\n        items.exit().remove();\n\n        items = items\n            .enter()\n            .append('div')\n            .attr('class', ITEM_CSS_CLASS)\n            .html(d => this._html(d))\n            .merge(items);\n\n        return items;\n    }\n\n    _doRedraw () {\n        return this._doRender();\n    }\n\n    /**\n     * Get or set the section function for the data grid. The section function takes a data row and\n     * returns the key to specify to {@link https://github.com/d3/d3-collection/blob/master/README.md#nest d3.nest}\n     * to split rows into sections.\n     *\n     * Do not pass in a crossfilter section as this will not work.\n     * @example\n     * // section rows by the value of their field\n     * chart\n     *     .section(function(d) { return d.field; })\n     * @param {Function} section Function taking a row of data and returning the nest key.\n     * @returns {Function|DataGrid}\n     */\n    section (section) {\n        if (!arguments.length) {\n            return this._section;\n        }\n        this._section = section;\n        return this;\n    }\n\n    /**\n     * Backward-compatible synonym for {@link DataGrid#section section}.\n     *\n     * @param {Function} section Function taking a row of data and returning the nest key.\n     * @returns {Function|DataGrid}\n     */\n    group (section) {\n        logger.warnOnce('consider using dataGrid.section instead of dataGrid.group for clarity');\n        if (!arguments.length) {\n            return this.section();\n        }\n        return this.section(section);\n    }\n\n    /**\n     * Get or set the index of the beginning slice which determines which entries get displayed by the widget.\n     * Useful when implementing pagination.\n     * @param {Number} [beginSlice=0]\n     * @returns {Number|DataGrid}\n     */\n    beginSlice (beginSlice) {\n        if (!arguments.length) {\n            return this._beginSlice;\n        }\n        this._beginSlice = beginSlice;\n        return this;\n    }\n\n    /**\n     * Get or set the index of the end slice which determines which entries get displayed by the widget.\n     * Useful when implementing pagination.\n     * @param {Number} [endSlice]\n     * @returns {Number|DataGrid}\n     */\n    endSlice (endSlice) {\n        if (!arguments.length) {\n            return this._endSlice;\n        }\n        this._endSlice = endSlice;\n        return this;\n    }\n\n    /**\n     * Get or set the grid size which determines the number of items displayed by the widget.\n     * @param {Number} [size=999]\n     * @returns {Number|DataGrid}\n     */\n    size (size) {\n        if (!arguments.length) {\n            return this._size;\n        }\n        this._size = size;\n        return this;\n    }\n\n    /**\n     * Get or set the function that formats an item. The data grid widget uses a\n     * function to generate dynamic html. Use your favourite templating engine or\n     * generate the string directly.\n     * @example\n     * chart.html(function (d) { return '<div class='item '+data.exampleCategory+''>'+data.exampleString+'</div>';});\n     * @param {Function} [html]\n     * @returns {Function|DataGrid}\n     */\n    html (html) {\n        if (!arguments.length) {\n            return this._html;\n        }\n        this._html = html;\n        return this;\n    }\n\n    /**\n     * Get or set the function that formats a section label.\n     * @example\n     * chart.htmlSection (function (d) { return '<h2>'.d.key . 'with ' . d.values.length .' items</h2>'});\n     * @param {Function} [htmlSection]\n     * @returns {Function|DataGrid}\n     */\n    htmlSection (htmlSection) {\n        if (!arguments.length) {\n            return this._htmlSection;\n        }\n        this._htmlSection = htmlSection;\n        return this;\n    }\n\n    /**\n     * Backward-compatible synonym for {@link DataGrid#htmlSection htmlSection}.\n     * @param {Function} [htmlSection]\n     * @returns {Function|DataGrid}\n     */\n    htmlGroup (htmlSection) {\n        logger.warnOnce('consider using dataGrid.htmlSection instead of dataGrid.htmlGroup for clarity');\n        if (!arguments.length) {\n            return this.htmlSection();\n        }\n        return this.htmlSection(htmlSection);\n    }\n\n    /**\n     * Get or set sort-by function. This function works as a value accessor at the item\n     * level and returns a particular field to be sorted.\n     * @example\n     * chart.sortBy(function(d) {\n     *     return d.date;\n     * });\n     * @param {Function} [sortByFunction]\n     * @returns {Function|DataGrid}\n     */\n    sortBy (sortByFunction) {\n        if (!arguments.length) {\n            return this._sortBy;\n        }\n        this._sortBy = sortByFunction;\n        return this;\n    }\n\n    /**\n     * Get or set sort the order function.\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#descending d3.descending}\n     * @example\n     * chart.order(d3.descending);\n     * @param {Function} [order=d3.ascending]\n     * @returns {Function|DataGrid}\n     */\n    order (order) {\n        if (!arguments.length) {\n            return this._order;\n        }\n        this._order = order;\n        return this;\n    }\n}\n\nexport const dataGrid = (parent, chartGroup) => new DataGrid(parent, chartGroup);\n","import {ascending} from 'd3-array';\n\nimport {logger} from '../core/logger';\nimport {BaseMixin} from '../base/base-mixin';\nimport {d3compat} from '../core/config';\n\nconst LABEL_CSS_CLASS = 'dc-table-label';\nconst ROW_CSS_CLASS = 'dc-table-row';\nconst COLUMN_CSS_CLASS = 'dc-table-column';\nconst SECTION_CSS_CLASS = 'dc-table-section dc-table-group';\nconst HEAD_CSS_CLASS = 'dc-table-head';\n\n/**\n * The data table is a simple widget designed to list crossfilter focused data set (rows being\n * filtered) in a good old tabular fashion.\n *\n * An interesting feature of the data table is that you can pass a crossfilter group to the\n * `dimension`, if you want to show aggregated data instead of raw data rows. This requires no\n * special code as long as you specify the {@link DataTable#order order} as `d3.descending`,\n * since the data table will use `dimension.top()` to fetch the data in that case, and the method is\n * equally supported on the crossfilter group as the crossfilter dimension.\n *\n * If you want to display aggregated data in ascending order, you will need to wrap the group\n * in a [fake dimension](https://github.com/dc-js/dc.js/wiki/FAQ#fake-dimensions) to support the\n * `.bottom()` method. See the example linked below for more details.\n *\n * Note: Formerly the data table (and data grid chart) used the {@link DataTable#group group} attribute as a\n * keying function for {@link https://github.com/d3/d3-collection/blob/master/README.md#nest nesting} the data\n * together in sections.  This was confusing so it has been renamed to `section`, although `group` still works.\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.io/dc.js/examples/table-on-aggregated-data.html dataTable on a crossfilter group}\n * ({@link https://github.com/dc-js/dc.js/blob/master/web-src/examples/table-on-aggregated-data.html source})\n *\n * @mixes BaseMixin\n */\nexport class DataTable extends BaseMixin {\n    /**\n     * Create a Data Table.\n     *\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor (parent, chartGroup) {\n        super();\n\n        this._size = 25;\n        this._columns = [];\n        this._sortBy = d => d;\n        this._order = ascending;\n        this._beginSlice = 0;\n        this._endSlice = undefined;\n        this._showSections = true;\n        this._section = () => ''; // all in one section\n\n        this._mandatoryAttributes(['dimension']);\n\n        this.anchor(parent, chartGroup);\n    }\n\n    _doRender () {\n        this.selectAll('tbody').remove();\n\n        this._renderRows(this._renderSections());\n\n        return this;\n    }\n\n    _doColumnValueFormat (v, d) {\n        return (typeof v === 'function') ? v(d) :  // v as function\n            (typeof v === 'string') ? d[v] :       // v is field name string\n            v.format(d);                           // v is Object, use fn (element 2)\n    }\n\n    _doColumnHeaderFormat (d) {\n        // if 'function', convert to string representation\n        // show a string capitalized\n        // if an object then display its label string as-is.\n        return (typeof d === 'function') ? this._doColumnHeaderFnToString(d) :\n            (typeof d === 'string') ? this._doColumnHeaderCapitalize(d) :\n            String(d.label);\n    }\n\n    _doColumnHeaderCapitalize (s) {\n        // capitalize\n        return s.charAt(0).toUpperCase() + s.slice(1);\n    }\n\n    _doColumnHeaderFnToString (f) {\n        // columnString(f) {\n        let s = String(f);\n        const i1 = s.indexOf('return ');\n        if (i1 >= 0) {\n            const i2 = s.lastIndexOf(';');\n            if (i2 >= 0) {\n                s = s.substring(i1 + 7, i2);\n                const i3 = s.indexOf('numberFormat');\n                if (i3 >= 0) {\n                    s = s.replace('numberFormat', '');\n                }\n            }\n        }\n        return s;\n    }\n\n    _renderSections () {\n        // The 'original' example uses all 'functions'.\n        // If all 'functions' are used, then don't remove/add a header, and leave\n        // the html alone. This preserves the functionality of earlier releases.\n        // A 2nd option is a string representing a field in the data.\n        // A third option is to supply an Object such as an array of 'information', and\n        // supply your own _doColumnHeaderFormat and _doColumnValueFormat functions to\n        // create what you need.\n        let bAllFunctions = true;\n        this._columns.forEach(f => {\n            bAllFunctions = bAllFunctions & (typeof f === 'function');\n        });\n\n        if (!bAllFunctions) {\n            // ensure one thead\n            let thead = this.selectAll('thead').data([0]);\n            thead.exit().remove();\n            thead = thead.enter()\n                .append('thead')\n                .merge(thead);\n\n            // with one tr\n            let headrow = thead.selectAll('tr').data([0]);\n            headrow.exit().remove();\n            headrow = headrow.enter()\n                .append('tr')\n                .merge(headrow);\n\n            // with a th for each column\n            const headcols = headrow.selectAll('th')\n                .data(this._columns);\n            headcols.exit().remove();\n            headcols.enter().append('th')\n                .merge(headcols)\n                .attr('class', HEAD_CSS_CLASS)\n                .html(d => (this._doColumnHeaderFormat(d)));\n        }\n\n        const sections = this.root().selectAll('tbody')\n            .data(this._nestEntries(), d => this.keyAccessor()(d));\n\n        const rowSection = sections\n            .enter()\n            .append('tbody');\n\n        if (this._showSections === true) {\n            rowSection\n                .append('tr')\n                .attr('class', SECTION_CSS_CLASS)\n                .append('td')\n                .attr('class', LABEL_CSS_CLASS)\n                .attr('colspan', this._columns.length)\n                .html(d => this.keyAccessor()(d));\n        }\n\n        sections.exit().remove();\n\n        return rowSection;\n    }\n\n    _nestEntries () {\n        let entries;\n        if (this._order === ascending) {\n            entries = this.dimension().bottom(this._size);\n        } else {\n            entries = this.dimension().top(this._size);\n        }\n\n        entries = entries.sort((a, b) => this._order(this._sortBy(a), this._sortBy(b))).slice(this._beginSlice, this._endSlice)\n\n        return d3compat.nester({\n            key: this.section(),\n            sortKeys: this._order,\n            entries\n        });\n    }\n\n    _renderRows (sections) {\n        const rows = sections.order()\n            .selectAll(`tr.${ROW_CSS_CLASS}`)\n            .data(d => d.values);\n\n        const rowEnter = rows.enter()\n            .append('tr')\n            .attr('class', ROW_CSS_CLASS);\n\n        this._columns.forEach((v, i) => {\n            rowEnter.append('td')\n                .attr('class', `${COLUMN_CSS_CLASS} _${i}`)\n                .html(d => this._doColumnValueFormat(v, d));\n        });\n\n        rows.exit().remove();\n\n        return rows;\n    }\n\n    _doRedraw () {\n        return this._doRender();\n    }\n\n    /**\n     * Get or set the section function for the data table. The section function takes a data row and\n     * returns the key to specify to {@link https://github.com/d3/d3-collection/blob/master/README.md#nest d3.nest}\n     * to split rows into sections. By default there will be only one section with no name.\n     *\n     * Set {@link DataTable#showSections showSections} to false to hide the section headers\n     *\n     * @example\n     * // section rows by the value of their field\n     * chart\n     *     .section(function(d) { return d.field; })\n     * @param {Function} section Function taking a row of data and returning the nest key.\n     * @returns {Function|DataTable}\n     */\n    section (section) {\n        if (!arguments.length) {\n            return this._section;\n        }\n        this._section = section;\n        return this;\n    }\n\n    /**\n     * Backward-compatible synonym for {@link DataTable#section section}.\n     *\n     * @param {Function} section Function taking a row of data and returning the nest key.\n     * @returns {Function|DataTable}\n     */\n    group (section) {\n        logger.warnOnce('consider using dataTable.section instead of dataTable.group for clarity');\n        if (!arguments.length) {\n            return this.section();\n        }\n        return this.section(section);\n    }\n\n    /**\n     * Get or set the table size which determines the number of rows displayed by the widget.\n     * @param {Number} [size=25]\n     * @returns {Number|DataTable}\n     */\n    size (size) {\n        if (!arguments.length) {\n            return this._size;\n        }\n        this._size = size;\n        return this;\n    }\n\n    /**\n     * Get or set the index of the beginning slice which determines which entries get displayed\n     * by the widget. Useful when implementing pagination.\n     *\n     * Note: the sortBy function will determine how the rows are ordered for pagination purposes.\n\n     * See the {@link http://dc-js.github.io/dc.js/examples/table-pagination.html table pagination example}\n     * to see how to implement the pagination user interface using `beginSlice` and `endSlice`.\n     * @param {Number} [beginSlice=0]\n     * @returns {Number|DataTable}\n     */\n    beginSlice (beginSlice) {\n        if (!arguments.length) {\n            return this._beginSlice;\n        }\n        this._beginSlice = beginSlice;\n        return this;\n    }\n\n    /**\n     * Get or set the index of the end slice which determines which entries get displayed by the\n     * widget. Useful when implementing pagination. See {@link DataTable#beginSlice `beginSlice`} for more information.\n     * @param {Number|undefined} [endSlice=undefined]\n     * @returns {Number|DataTable}\n     */\n    endSlice (endSlice) {\n        if (!arguments.length) {\n            return this._endSlice;\n        }\n        this._endSlice = endSlice;\n        return this;\n    }\n\n    /**\n     * Get or set column functions. The data table widget supports several methods of specifying the\n     * columns to display.\n     *\n     * The original method uses an array of functions to generate dynamic columns. Column functions\n     * are simple javascript functions with only one input argument `d` which represents a row in\n     * the data set. The return value of these functions will be used to generate the content for\n     * each cell. However, this method requires the HTML for the table to have a fixed set of column\n     * headers.\n     *\n     * <pre><code>chart.columns([\n     *     function(d) { return d.date; },\n     *     function(d) { return d.open; },\n     *     function(d) { return d.close; },\n     *     function(d) { return numberFormat(d.close - d.open); },\n     *     function(d) { return d.volume; }\n     * ]);\n     * </code></pre>\n     *\n     * In the second method, you can list the columns to read from the data without specifying it as\n     * a function, except where necessary (ie, computed columns).  Note the data element name is\n     * capitalized when displayed in the table header. You can also mix in functions as necessary,\n     * using the third `{label, format}` form, as shown below.\n     *\n     * <pre><code>chart.columns([\n     *     \"date\",    // d[\"date\"], ie, a field accessor; capitalized automatically\n     *     \"open\",    // ...\n     *     \"close\",   // ...\n     *     {\n     *         label: \"Change\",\n     *         format: function (d) {\n     *             return numberFormat(d.close - d.open);\n     *         }\n     *     },\n     *     \"volume\"   // d[\"volume\"], ie, a field accessor; capitalized automatically\n     * ]);\n     * </code></pre>\n     *\n     * In the third example, we specify all fields using the `{label, format}` method:\n     * <pre><code>chart.columns([\n     *     {\n     *         label: \"Date\",\n     *         format: function (d) { return d.date; }\n     *     },\n     *     {\n     *         label: \"Open\",\n     *         format: function (d) { return numberFormat(d.open); }\n     *     },\n     *     {\n     *         label: \"Close\",\n     *         format: function (d) { return numberFormat(d.close); }\n     *     },\n     *     {\n     *         label: \"Change\",\n     *         format: function (d) { return numberFormat(d.close - d.open); }\n     *     },\n     *     {\n     *         label: \"Volume\",\n     *         format: function (d) { return d.volume; }\n     *     }\n     * ]);\n     * </code></pre>\n     *\n     * You may wish to override the dataTable functions `_doColumnHeaderCapitalize` and\n     * `_doColumnHeaderFnToString`, which are used internally to translate the column information or\n     * function into a displayed header. The first one is used on the \"string\" column specifier; the\n     * second is used to transform a stringified function into something displayable. For the Stock\n     * example, the function for Change becomes the table header **d.close - d.open**.\n     *\n     * Finally, you can even specify a completely different form of column definition. To do this,\n     * override `_chart._doColumnHeaderFormat` and `_chart._doColumnValueFormat` Be aware that\n     * fields without numberFormat specification will be displayed just as they are stored in the\n     * data, unformatted.\n     * @param {Array<Function>} [columns=[]]\n     * @returns {Array<Function>}|DataTable}\n     */\n    columns (columns) {\n        if (!arguments.length) {\n            return this._columns;\n        }\n        this._columns = columns;\n        return this;\n    }\n\n    /**\n     * Get or set sort-by function. This function works as a value accessor at row level and returns a\n     * particular field to be sorted by.\n     * @example\n     * chart.sortBy(function(d) {\n     *     return d.date;\n     * });\n     * @param {Function} [sortBy=identity function]\n     * @returns {Function|DataTable}\n     */\n    sortBy (sortBy) {\n        if (!arguments.length) {\n            return this._sortBy;\n        }\n        this._sortBy = sortBy;\n        return this;\n    }\n\n    /**\n     * Get or set sort order. If the order is `d3.ascending`, the data table will use\n     * `dimension().bottom()` to fetch the data; otherwise it will use `dimension().top()`\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#descending d3.descending}\n     * @example\n     * chart.order(d3.descending);\n     * @param {Function} [order=d3.ascending]\n     * @returns {Function|DataTable}\n     */\n    order (order) {\n        if (!arguments.length) {\n            return this._order;\n        }\n        this._order = order;\n        return this;\n    }\n\n    /**\n     * Get or set if section header rows will be shown.\n     * @example\n     * chart\n     *     .section([value], [name])\n     *     .showSections(true|false);\n     * @param {Boolean} [showSections=true]\n     * @returns {Boolean|DataTable}\n     */\n    showSections (showSections) {\n        if (!arguments.length) {\n            return this._showSections;\n        }\n        this._showSections = showSections;\n        return this;\n    }\n\n    /**\n     * Backward-compatible synonym for {@link DataTable#showSections showSections}.\n     * @param {Boolean} [showSections=true]\n     * @returns {Boolean|DataTable}\n     */\n    showGroups (showSections) {\n        logger.warnOnce('consider using dataTable.showSections instead of dataTable.showGroups for clarity');\n        if (!arguments.length) {\n            return this.showSections();\n        }\n        return this.showSections(showSections);\n    }\n}\n\nexport const dataTable = (parent, chartGroup) => new DataTable(parent, chartGroup);\n","import {geoPath, geoAlbersUsa} from 'd3-geo';\nimport {select} from 'd3-selection';\n\nimport {BaseMixin} from '../base/base-mixin';\nimport {ColorMixin} from '../base/color-mixin';\nimport {transition} from '../core/core';\nimport {logger} from '../core/logger';\nimport {events} from '../core/events';\nimport {utils} from '../core/utils';\nimport {d3compat} from '../core/config';\n\n/**\n * The geo choropleth chart is designed as an easy way to create a crossfilter driven choropleth map\n * from GeoJson data. This chart implementation was inspired by\n * {@link http://bl.ocks.org/4060606 the great d3 choropleth example}.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n * @mixes ColorMixin\n * @mixes BaseMixin\n */\nexport class GeoChoroplethChart extends ColorMixin(BaseMixin) {\n    /**\n     * Create a Geo Choropleth Chart.\n     * @example\n     * // create a choropleth chart under '#us-chart' element using the default global chart group\n     * var chart1 = new GeoChoroplethChart('#us-chart');\n     * // create a choropleth chart under '#us-chart2' element using chart group A\n     * var chart2 = new CompositeChart('#us-chart2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor (parent, chartGroup) {\n        super();\n\n        this.colorAccessor(d => d || 0);\n\n        this._geoPath = geoPath();\n        this._projectionFlag = undefined;\n        this._projection = undefined;\n\n        this._geoJsons = [];\n\n        this.anchor(parent, chartGroup);\n    }\n\n    _doRender () {\n        this.resetSvg();\n        for (let layerIndex = 0; layerIndex < this._geoJsons.length; ++layerIndex) {\n            const states = this.svg().append('g')\n                .attr('class', `layer${layerIndex}`);\n\n            let regionG = states.selectAll(`g.${this._geoJson(layerIndex).name}`)\n                .data(this._geoJson(layerIndex).data);\n\n            regionG = regionG.enter()\n                .append('g')\n                .attr('class', this._geoJson(layerIndex).name)\n                .merge(regionG);\n\n            regionG\n                .append('path')\n                .classed('dc-tabbable', this._keyboardAccessible)\n                .attr('fill', 'white')\n                .attr('d', this._getGeoPath());\n\n            regionG.append('title');\n\n            this._plotData(layerIndex);\n        }\n        this._projectionFlag = false;\n    }\n\n    _plotData (layerIndex) {\n        const data = this._generateLayeredData();\n\n        if (this._isDataLayer(layerIndex)) {\n            const regionG = this._renderRegionG(layerIndex);\n\n            this._renderPaths(regionG, layerIndex, data);\n\n            this._renderTitles(regionG, layerIndex, data);\n        }\n    }\n\n    _generateLayeredData () {\n        const data = {};\n        const groupAll = this.data();\n        for (let i = 0; i < groupAll.length; ++i) {\n            data[this.keyAccessor()(groupAll[i])] = this.valueAccessor()(groupAll[i]);\n        }\n        return data;\n    }\n\n    _isDataLayer (layerIndex) {\n        return this._geoJson(layerIndex).keyAccessor;\n    }\n\n    _renderRegionG (layerIndex) {\n        const regionG = this.svg()\n            .selectAll(this._layerSelector(layerIndex))\n            .classed('selected', d => this._isSelected(layerIndex, d))\n            .classed('deselected', d => this._isDeselected(layerIndex, d))\n            .attr('class', d => {\n                const layerNameClass = this._geoJson(layerIndex).name;\n                const regionClass = utils.nameToId(this._geoJson(layerIndex).keyAccessor(d));\n                let baseClasses = `${layerNameClass} ${regionClass}`;\n                if (this._isSelected(layerIndex, d)) {\n                    baseClasses += ' selected';\n                }\n                if (this._isDeselected(layerIndex, d)) {\n                    baseClasses += ' deselected';\n                }\n                return baseClasses;\n            });\n        return regionG;\n    }\n\n    _layerSelector (layerIndex) {\n        return `g.layer${layerIndex} g.${this._geoJson(layerIndex).name}`;\n    }\n\n    _isSelected (layerIndex, d) {\n        return this.hasFilter() && this.hasFilter(this._getKey(layerIndex, d));\n    }\n\n    _isDeselected (layerIndex, d) {\n        return this.hasFilter() && !this.hasFilter(this._getKey(layerIndex, d));\n    }\n\n    _getKey (layerIndex, d) {\n        return this._geoJson(layerIndex).keyAccessor(d);\n    }\n\n    _geoJson (index) {\n        return this._geoJsons[index];\n    }\n\n    _renderPaths (regionG, layerIndex, data) {\n        const paths = regionG\n            .select('path')\n            .attr('fill', function () {\n                const currentFill = select(this).attr('fill');\n                if (currentFill) {\n                    return currentFill;\n                }\n                return 'none';\n            })\n            .on('click', d3compat.eventHandler(d => this.onClick(d, layerIndex)));\n\n        if (this._keyboardAccessible) {\n            this._makeKeyboardAccessible(this.onClick, layerIndex);\n        }\n\n        transition(paths, this.transitionDuration(),\n                   this.transitionDelay()).attr('fill', (d, i) => this.getColor(data[this._geoJson(layerIndex).keyAccessor(d)], i));\n    }\n\n    onClick (d, layerIndex) {\n        const selectedRegion = this._geoJson(layerIndex).keyAccessor(d);\n        events.trigger(() => {\n            this.filter(selectedRegion);\n            this.redrawGroup();\n        });\n    }\n\n    _renderTitles (regionG, layerIndex, data) {\n        if (this.renderTitle()) {\n            regionG.selectAll('title').text(d => {\n                const key = this._getKey(layerIndex, d);\n                const value = data[key];\n                return this.title()({key: key, value: value});\n            });\n        }\n    }\n\n    _doRedraw () {\n        for (let layerIndex = 0; layerIndex < this._geoJsons.length; ++layerIndex) {\n            this._plotData(layerIndex);\n            if (this._projectionFlag) {\n                this.svg().selectAll(`g.${this._geoJson(layerIndex).name} path`).attr('d', this._getGeoPath());\n            }\n        }\n        this._projectionFlag = false;\n    }\n\n    /**\n     * **mandatory**\n     *\n     * Use this function to insert a new GeoJson map layer. This function can be invoked multiple times\n     * if you have multiple GeoJson data layers to render on top of each other. If you overlay multiple\n     * layers with the same name the new overlay will override the existing one.\n     * @see {@link http://geojson.org/ GeoJSON}\n     * @see {@link https://github.com/topojson/topojson/wiki TopoJSON}\n     * @see {@link https://github.com/topojson/topojson-1.x-api-reference/blob/master/API-Reference.md#wiki-feature topojson.feature}\n     * @example\n     * // insert a layer for rendering US states\n     * chart.overlayGeoJson(statesJson.features, 'state', function(d) {\n     *      return d.properties.name;\n     * });\n     * @param {_geoJson} json - a geojson feed\n     * @param {String} name - name of the layer\n     * @param {Function} keyAccessor - accessor function used to extract 'key' from the GeoJson data. The key extracted by\n     * this function should match the keys returned by the crossfilter groups.\n     * @returns {GeoChoroplethChart}\n     */\n    overlayGeoJson (json, name, keyAccessor) {\n        for (let i = 0; i < this._geoJsons.length; ++i) {\n            if (this._geoJsons[i].name === name) {\n                this._geoJsons[i].data = json;\n                this._geoJsons[i].keyAccessor = keyAccessor;\n                return this;\n            }\n        }\n        this._geoJsons.push({name: name, data: json, keyAccessor: keyAccessor});\n        return this;\n    }\n\n    /**\n     * Gets or sets a custom geo projection function. See the available\n     * {@link https://github.com/d3/d3-geo/blob/master/README.md#projections d3 geo projection functions}.\n     *\n     * Starting version 3.0 it has been deprecated to rely on the default projection being\n     * {@link https://github.com/d3/d3-geo/blob/master/README.md#geoAlbersUsa d3.geoAlbersUsa()}. Please\n     * set it explicitly. {@link https://bl.ocks.org/mbostock/5557726\n     * Considering that `null` is also a valid value for projection}, if you need\n     * projection to be `null` please set it explicitly to `null`.\n     * @see {@link https://github.com/d3/d3-geo/blob/master/README.md#projections d3.projection}\n     * @see {@link https://github.com/d3/d3-geo-projection d3-geo-projection}\n     * @param {d3.projection} [projection=d3.geoAlbersUsa()]\n     * @returns {d3.projection|GeoChoroplethChart}\n     */\n    projection (projection) {\n        if (!arguments.length) {\n            return this._projection;\n        }\n\n        this._projection = projection;\n        this._projectionFlag = true;\n        return this;\n    }\n\n    _getGeoPath () {\n        if (this._projection === undefined) {\n            logger.warn('choropleth projection default of geoAlbers is deprecated,' +\n                ' in next version projection will need to be set explicitly');\n            return this._geoPath.projection(geoAlbersUsa());\n        }\n\n        return this._geoPath.projection(this._projection);\n    }\n\n    /**\n     * Returns all GeoJson layers currently registered with this chart. The returned array is a\n     * reference to this chart's internal data structure, so any modification to this array will also\n     * modify this chart's internal registration.\n     * @returns {Array<{name:String, data: Object, accessor: Function}>}\n     */\n    geoJsons () {\n        return this._geoJsons;\n    }\n\n    /**\n     * Returns the {@link https://github.com/d3/d3-geo/blob/master/README.md#paths d3.geoPath} object used to\n     * render the projection and features.  Can be useful for figuring out the bounding box of the\n     * feature set and thus a way to calculate scale and translation for the projection.\n     * @see {@link https://github.com/d3/d3-geo/blob/master/README.md#paths d3.geoPath}\n     * @returns {d3.geoPath}\n     */\n    geoPath () {\n        return this._geoPath;\n    }\n\n    /**\n     * Remove a GeoJson layer from this chart by name\n     * @param {String} name\n     * @returns {GeoChoroplethChart}\n     */\n    removeGeoJson (name) {\n        const geoJsons = [];\n\n        for (let i = 0; i < this._geoJsons.length; ++i) {\n            const layer = this._geoJsons[i];\n            if (layer.name !== name) {\n                geoJsons.push(layer);\n            }\n        }\n\n        this._geoJsons = geoJsons;\n\n        return this;\n    }\n}\n\nexport const geoChoroplethChart = (parent, chartGroup) => new GeoChoroplethChart(parent, chartGroup);\n","import {ascending} from 'd3-array';\nimport {scaleBand} from 'd3-scale';\n\nimport {transition} from '../core/core';\nimport {logger} from '../core/logger';\nimport {filters} from '../core/filters';\nimport {events} from '../core/events';\nimport {ColorMixin} from '../base/color-mixin';\nimport {MarginMixin} from '../base/margin-mixin';\nimport {d3compat} from '../core/config';\n\nconst DEFAULT_BORDER_RADIUS = 6.75;\n\n/**\n * A heat map is matrix that represents the values of two dimensions of data using colors.\n * @mixes ColorMixin\n * @mixes MarginMixin\n * @mixes BaseMixin\n */\nexport class HeatMap extends ColorMixin(MarginMixin) {\n    /**\n     * Create a Heat Map\n     * @example\n     * // create a heat map under #chart-container1 element using the default global chart group\n     * var heatMap1 = new HeatMap('#chart-container1');\n     * // create a heat map under #chart-container2 element using chart group A\n     * var heatMap2 = new HeatMap('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor (parent, chartGroup) {\n        super();\n\n        this._chartBody = undefined;\n\n        this._cols = undefined;\n        this._rows = undefined;\n        this._colOrdering = ascending;\n        this._rowOrdering = ascending;\n        this._colScale = scaleBand();\n        this._rowScale = scaleBand();\n\n        this._xBorderRadius = DEFAULT_BORDER_RADIUS;\n        this._yBorderRadius = DEFAULT_BORDER_RADIUS;\n\n        this._mandatoryAttributes(['group']);\n        this.title(this.colorAccessor());\n\n        this._colsLabel = d => d;\n        this._rowsLabel = d => d;\n\n        this._xAxisOnClick = d => {\n            this._filterAxis(0, d);\n        };\n        this._yAxisOnClick = d => {\n            this._filterAxis(1, d);\n        };\n        this._boxOnClick = d => {\n            const filter = d.key;\n            events.trigger(() => {\n                this.filter(filters.TwoDimensionalFilter(filter));\n                this.redrawGroup();\n            });\n        };\n\n        this.anchor(parent, chartGroup);\n    }\n\n    /**\n     * Set or get the column label function. The chart class uses this function to render\n     * column labels on the X axis. It is passed the column name.\n     * @example\n     * // the default label function just returns the name\n     * chart.colsLabel(function(d) { return d; });\n     * @param  {Function} [labelFunction=function(d) { return d; }]\n     * @returns {Function|HeatMap}\n     */\n    colsLabel (labelFunction) {\n        if (!arguments.length) {\n            return this._colsLabel;\n        }\n        this._colsLabel = labelFunction;\n        return this;\n    }\n\n    /**\n     * Set or get the row label function. The chart class uses this function to render\n     * row labels on the Y axis. It is passed the row name.\n     * @example\n     * // the default label function just returns the name\n     * chart.rowsLabel(function(d) { return d; });\n     * @param  {Function} [labelFunction=function(d) { return d; }]\n     * @returns {Function|HeatMap}\n     */\n    rowsLabel (labelFunction) {\n        if (!arguments.length) {\n            return this._rowsLabel;\n        }\n        this._rowsLabel = labelFunction;\n        return this;\n    }\n\n    _filterAxis (axis, value) {\n        const cellsOnAxis = this.selectAll('.box-group').filter(d => d.key[axis] === value);\n        const unfilteredCellsOnAxis = cellsOnAxis.filter(d => !this.hasFilter(d.key));\n        events.trigger(() => {\n            const selection = unfilteredCellsOnAxis.empty() ? cellsOnAxis : unfilteredCellsOnAxis;\n            const filtersList = selection.data().map(kv => filters.TwoDimensionalFilter(kv.key));\n            this.filter([filtersList]);\n            this.redrawGroup();\n        });\n    }\n\n    filter (filter) {\n        const nonstandardFilter = f => {\n            logger.warnOnce('heatmap.filter taking a coordinate is deprecated - please pass dc.filters.TwoDimensionalFilter instead');\n            return this._filter(filters.TwoDimensionalFilter(f));\n        };\n\n        if (!arguments.length) {\n            return super.filter();\n        }\n        if (filter !== null && filter.filterType !== 'TwoDimensionalFilter' &&\n            !(Array.isArray(filter) && Array.isArray(filter[0]) && filter[0][0].filterType === 'TwoDimensionalFilter')) {\n            return nonstandardFilter(filter);\n        }\n        return super.filter(filter);\n    }\n\n    /**\n     * Gets or sets the values used to create the rows of the heatmap, as an array. By default, all\n     * the values will be fetched from the data using the value accessor.\n     * @param  {Array<String|Number>} [rows]\n     * @returns {Array<String|Number>|HeatMap}\n     */\n\n    rows (rows) {\n        if (!arguments.length) {\n            return this._rows;\n        }\n        this._rows = rows;\n        return this;\n    }\n\n    /**\n     * Get or set a comparator to order the rows.\n     * Default is {@link https://github.com/d3/d3-array#ascending d3.ascending}.\n     * @param  {Function} [rowOrdering]\n     * @returns {Function|HeatMap}\n     */\n    rowOrdering (rowOrdering) {\n        if (!arguments.length) {\n            return this._rowOrdering;\n        }\n        this._rowOrdering = rowOrdering;\n        return this;\n    }\n\n    /**\n     * Gets or sets the keys used to create the columns of the heatmap, as an array. By default, all\n     * the values will be fetched from the data using the key accessor.\n     * @param  {Array<String|Number>} [cols]\n     * @returns {Array<String|Number>|HeatMap}\n     */\n    cols (cols) {\n        if (!arguments.length) {\n            return this._cols;\n        }\n        this._cols = cols;\n        return this;\n    }\n\n    /**\n     * Get or set a comparator to order the columns.\n     * Default is  {@link https://github.com/d3/d3-array#ascending d3.ascending}.\n     * @param  {Function} [colOrdering]\n     * @returns {Function|HeatMap}\n     */\n    colOrdering (colOrdering) {\n        if (!arguments.length) {\n            return this._colOrdering;\n        }\n        this._colOrdering = colOrdering;\n        return this;\n    }\n\n    _doRender () {\n        this.resetSvg();\n\n        this._chartBody = this.svg()\n            .append('g')\n            .attr('class', 'heatmap')\n            .attr('transform', `translate(${this.margins().left},${this.margins().top})`);\n\n        return this._doRedraw();\n    }\n\n    _doRedraw () {\n        const data = this.data();\n        let rows = this.rows() || data.map(this.valueAccessor()),\n            cols = this.cols() || data.map(this.keyAccessor());\n        if (this._rowOrdering) {\n            rows = rows.sort(this._rowOrdering);\n        }\n        if (this._colOrdering) {\n            cols = cols.sort(this._colOrdering);\n        }\n        rows = this._rowScale.domain(rows);\n        cols = this._colScale.domain(cols);\n\n        const rowCount = rows.domain().length,\n            colCount = cols.domain().length,\n            boxWidth = Math.floor(this.effectiveWidth() / colCount),\n            boxHeight = Math.floor(this.effectiveHeight() / rowCount);\n\n        cols.rangeRound([0, this.effectiveWidth()]);\n        rows.rangeRound([this.effectiveHeight(), 0]);\n\n        let boxes = this._chartBody.selectAll('g.box-group').data(this.data(),\n                                                                  (d, i) => `${this.keyAccessor()(d, i)}\\0${this.valueAccessor()(d, i)}`);\n\n        boxes.exit().remove();\n\n        const gEnter = boxes.enter().append('g')\n            .attr('class', 'box-group');\n\n        gEnter.append('rect')\n            .attr('class', 'heat-box')\n            .classed('dc-tabbable', this._keyboardAccessible)\n            .attr('fill', 'white')\n            .attr('x', (d, i) => cols(this.keyAccessor()(d, i)))\n            .attr('y', (d, i) => rows(this.valueAccessor()(d, i)))\n            .on('click', d3compat.eventHandler(this.boxOnClick()));\n\n        if (this._keyboardAccessible) {\n            this._makeKeyboardAccessible(this.boxOnClick);\n        }\n\n        boxes = gEnter.merge(boxes);\n\n        if (this.renderTitle()) {\n            gEnter.append('title');\n            boxes.select('title').text(this.title());\n        }\n\n        transition(boxes.select('rect'), this.transitionDuration(), this.transitionDelay())\n            .attr('x', (d, i) => cols(this.keyAccessor()(d, i)))\n            .attr('y', (d, i) => rows(this.valueAccessor()(d, i)))\n            .attr('rx', this._xBorderRadius)\n            .attr('ry', this._yBorderRadius)\n            .attr('fill', this.getColor)\n            .attr('width', boxWidth)\n            .attr('height', boxHeight);\n\n        let gCols = this._chartBody.select('g.cols');\n        if (gCols.empty()) {\n            gCols = this._chartBody.append('g').attr('class', 'cols axis');\n        }\n        let gColsText = gCols.selectAll('text').data(cols.domain());\n\n        gColsText.exit().remove();\n\n        gColsText = gColsText\n            .enter()\n            .append('text')\n            .attr('x', d => cols(d) + boxWidth / 2)\n            .style('text-anchor', 'middle')\n            .attr('y', this.effectiveHeight())\n            .attr('dy', 12)\n            .on('click', d3compat.eventHandler(this.xAxisOnClick()))\n            .text(this.colsLabel())\n            .merge(gColsText);\n\n        transition(gColsText, this.transitionDuration(), this.transitionDelay())\n            .text(this.colsLabel())\n            .attr('x', d => cols(d) + boxWidth / 2)\n            .attr('y', this.effectiveHeight());\n\n        let gRows = this._chartBody.select('g.rows');\n        if (gRows.empty()) {\n            gRows = this._chartBody.append('g').attr('class', 'rows axis');\n        }\n\n        let gRowsText = gRows.selectAll('text').data(rows.domain());\n\n        gRowsText.exit().remove();\n\n        gRowsText = gRowsText\n            .enter()\n            .append('text')\n            .style('text-anchor', 'end')\n            .attr('x', 0)\n            .attr('dx', -2)\n            .attr('y', d => rows(d) + boxHeight / 2)\n            .attr('dy', 6)\n            .on('click', d3compat.eventHandler(this.yAxisOnClick()))\n            .text(this.rowsLabel())\n            .merge(gRowsText);\n\n        transition(gRowsText, this.transitionDuration(), this.transitionDelay())\n            .text(this.rowsLabel())\n            .attr('y', d => rows(d) + boxHeight / 2);\n\n        if (this.hasFilter()) {\n            const chart = this;\n            this.selectAll('g.box-group').each(function (d) {\n                if (chart.isSelectedNode(d)) {\n                    chart.highlightSelected(this);\n                } else {\n                    chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            const chart = this;\n            this.selectAll('g.box-group').each(function () {\n                chart.resetHighlight(this);\n            });\n        }\n        return this;\n    }\n\n    /**\n     * Gets or sets the handler that fires when an individual cell is clicked in the heatmap.\n     * By default, filtering of the cell will be toggled.\n     * @example\n     * // default box on click handler\n     * chart.boxOnClick(function (d) {\n     *     var filter = d.key;\n     *     events.trigger(function () {\n     *         _chart.filter(filter);\n     *         _chart.redrawGroup();\n     *     });\n     * });\n     * @param  {Function} [handler]\n     * @returns {Function|HeatMap}\n     */\n    boxOnClick (handler) {\n        if (!arguments.length) {\n            return this._boxOnClick;\n        }\n        this._boxOnClick = handler;\n        return this;\n    }\n\n    /**\n     * Gets or sets the handler that fires when a column tick is clicked in the x axis.\n     * By default, if any cells in the column are unselected, the whole column will be selected,\n     * otherwise the whole column will be unselected.\n     * @param  {Function} [handler]\n     * @returns {Function|HeatMap}\n     */\n    xAxisOnClick (handler) {\n        if (!arguments.length) {\n            return this._xAxisOnClick;\n        }\n        this._xAxisOnClick = handler;\n        return this;\n    }\n\n    /**\n     * Gets or sets the handler that fires when a row tick is clicked in the y axis.\n     * By default, if any cells in the row are unselected, the whole row will be selected,\n     * otherwise the whole row will be unselected.\n     * @param  {Function} [handler]\n     * @returns {Function|HeatMap}\n     */\n    yAxisOnClick (handler) {\n        if (!arguments.length) {\n            return this._yAxisOnClick;\n        }\n        this._yAxisOnClick = handler;\n        return this;\n    }\n\n    /**\n     * Gets or sets the X border radius.  Set to 0 to get full rectangles.\n     * @param  {Number} [xBorderRadius=6.75]\n     * @returns {Number|HeatMap}\n     */\n    xBorderRadius (xBorderRadius) {\n        if (!arguments.length) {\n            return this._xBorderRadius;\n        }\n        this._xBorderRadius = xBorderRadius;\n        return this;\n    }\n\n    /**\n     * Gets or sets the Y border radius.  Set to 0 to get full rectangles.\n     * @param  {Number} [yBorderRadius=6.75]\n     * @returns {Number|HeatMap}\n     */\n    yBorderRadius (yBorderRadius) {\n        if (!arguments.length) {\n            return this._yBorderRadius;\n        }\n        this._yBorderRadius = yBorderRadius;\n        return this;\n    }\n\n    isSelectedNode (d) {\n        return this.hasFilter(d.key);\n    }\n}\n\nexport const heatMap = (parent, chartGroup) => new HeatMap(parent, chartGroup);\n","import {select} from 'd3-selection';\n\nimport {pluck, utils} from '../core/utils';\nimport {d3compat} from '../core/config';\nimport {constants} from '../core/constants';\n\n/**\n * htmlLegend is a attachable widget that can be added to other dc charts to render horizontal/vertical legend\n * labels.\n * @example\n * chart.legend(HtmlLegend().container(legendContainerElement).horizontal(false))\n * @returns {HtmlLegend}\n */\nexport class HtmlLegend {\n    constructor () {\n        this._htmlLegendDivCssClass = 'dc-html-legend';\n        this._legendItemCssClassHorizontal = 'dc-legend-item-horizontal';\n        this._legendItemCssClassVertical = 'dc-legend-item-vertical';\n        this._parent = undefined;\n        this._container = undefined;\n        this._legendText = pluck('name');\n        this._maxItems = undefined;\n        this._horizontal = false;\n        this._legendItemClass = undefined;\n        this._highlightSelected = false;\n        this._keyboardAccessible = false;\n    }\n\n    parent (p) {\n        if (!arguments.length) {\n            return this._parent;\n        }\n        this._parent = p;\n        return this;\n    }\n\n    render () {\n        this._defaultLegendItemCssClass = this._horizontal ? this._legendItemCssClassHorizontal : this._legendItemCssClassVertical;\n        this._container.select(`div.${this._htmlLegendDivCssClass}`).remove();\n\n        const container = this._container.append('div').attr('class', this._htmlLegendDivCssClass);\n        container.attr('style', `max-width:${this._container.nodes()[0].style.width}`);\n\n        let legendables = this._parent.legendables();\n        const filters = this._parent.filters();\n\n        if (this._maxItems !== undefined) {\n            legendables = legendables.slice(0, this._maxItems);\n        }\n\n        const legendItemClassName = this._legendItemClass ? this._legendItemClass : this._defaultLegendItemCssClass;\n\n        const itemEnter = container.selectAll(`div.${legendItemClassName}`)\n            .data(legendables).enter()\n            .append('div')\n            .classed(legendItemClassName, true)\n            .on('mouseover', d3compat.eventHandler(d => this._parent.legendHighlight(d)))\n            .on('mouseout', d3compat.eventHandler(d => this._parent.legendReset(d)))\n            .on('click', d3compat.eventHandler(d => this._parent.legendToggle(d)));\n\n        if (this._highlightSelected) {\n            itemEnter.classed(constants.SELECTED_CLASS, d => filters.indexOf(d.name) !== -1);\n        }\n\n        itemEnter.append('span')\n            .attr('class', 'dc-legend-item-color')\n            .style('background-color', pluck('color'));\n\n        itemEnter.append('span')\n            .attr('class', 'dc-legend-item-label')\n            .classed('dc-tabbable', this._keyboardAccessible)\n            .attr('title', this._legendText)\n            .text(this._legendText);\n\n        if (this._keyboardAccessible) {\n            this._makeLegendKeyboardAccessible();\n        }\n    }\n\n    /**\n     * Set the container selector for the legend widget. Required.\n     * @param {String} [container]\n     * @return {String|HtmlLegend}\n     */\n    container (container) {\n        if (!arguments.length) {\n            return this._container;\n        }\n        this._container = select(container);\n        return this;\n    }\n\n    /**\n     * This can be optionally used to override class for legenditem and just use this class style.\n     * This is helpful for overriding the style of a particular chart rather than overriding\n     * the style for all charts.\n     *\n     * Setting this will disable the highlighting of selected items also.\n     * @param {String} [legendItemClass]\n     * @return {String|HtmlLegend}\n     */\n    legendItemClass (legendItemClass) {\n        if (!arguments.length) {\n            return this._legendItemClass;\n        }\n        this._legendItemClass = legendItemClass;\n        return this;\n    }\n\n    /**\n     * This can be optionally used to enable highlighting legends for the selections/filters for the\n     * chart.\n     * @param {String} [highlightSelected]\n     * @return {String|HtmlLegend}\n     */\n    highlightSelected (highlightSelected) {\n        if (!arguments.length) {\n            return this._highlightSelected;\n        }\n        this._highlightSelected = highlightSelected;\n        return this;\n    }\n\n    /**\n     * Display the legend horizontally instead of vertically\n     * @param {String} [horizontal]\n     * @return {String|HtmlLegend}\n     */\n    horizontal (horizontal) {\n        if (!arguments.length) {\n            return this._horizontal;\n        }\n        this._horizontal = horizontal;\n        return this;\n    }\n\n    /**\n     * Set or get the legend text function. The legend widget uses this function to render the legend\n     * text for each item. If no function is specified the legend widget will display the names\n     * associated with each group.\n     * @param  {Function} [legendText]\n     * @returns {Function|HtmlLegend}\n     * @example\n     * // default legendText\n     * legend.legendText(pluck('name'))\n     *\n     * // create numbered legend items\n     * chart.legend(new HtmlLegend().legendText(function(d, i) { return i + '. ' + d.name; }))\n     *\n     * // create legend displaying group counts\n     * chart.legend(new HtmlLegend().legendText(function(d) { return d.name + ': ' d.data; }))\n     */\n    legendText (legendText) {\n        if (!arguments.length) {\n            return this._legendText;\n        }\n        this._legendText = legendText;\n        return this;\n    }\n\n    /**\n     * Maximum number of legend items to display\n     * @param  {Number} [maxItems]\n     * @return {HtmlLegend}\n     */\n    maxItems (maxItems) {\n        if (!arguments.length) {\n            return this._maxItems;\n        }\n        this._maxItems = utils.isNumber(maxItems) ? maxItems : undefined;\n        return this;\n    }\n\n    /**\n     * If set, individual legend items will be focusable from keyboard and on pressing Enter or Space\n     * will behave as if clicked on.\n     * \n     * If `svgDescription` on the parent chart has not been explicitly set, will also set the default \n     * SVG description text to the class constructor name, like BarChart or HeatMap, and make the entire\n     * SVG focusable.\n     * @param {Boolean} [keyboardAccessible=false]\n     * @returns {Boolean|HtmlLegend}\n     */\n    keyboardAccessible (keyboardAccessible) {\n        if (!arguments.length) {\n            return this._keyboardAccessible;\n        }\n        this._keyboardAccessible = keyboardAccessible;\n        return this;\n    }\n\n    _makeLegendKeyboardAccessible () {\n\n        if (!this._parent._svgDescription) {\n\n            this._parent.svg().append('desc')\n                .attr('id', `desc-id-${this._parent.__dcFlag__}`)\n                .html(`${this._parent.svgDescription()}`);\n\n            this._parent.svg()\n                .attr('tabindex', '0')\n                .attr('role', 'img')\n                .attr('aria-labelledby', `desc-id-${this._parent.__dcFlag__}`);\n        }\n\n        const tabElements = this.container()\n            .selectAll('.dc-legend-item-label.dc-tabbable')\n            .attr('tabindex', 0);\n\n        tabElements\n            .on('keydown', d3compat.eventHandler((d, event) => {\n                // trigger only if d is an object\n                if (event.keyCode === 13 && typeof d === 'object') {\n                    d.chart.legendToggle(d)\n                } \n                // special case for space key press - prevent scrolling\n                if (event.keyCode === 32 && typeof d === 'object') {\n                    d.chart.legendToggle(d)\n                    event.preventDefault();            \n                }\n            }))\n            .on('focus', d3compat.eventHandler(d => {\n                this._parent.legendHighlight(d);\n            }))\n            .on('blur', d3compat.eventHandler(d => {\n                this._parent.legendReset(d);\n            }));\n    }\n}\n\nexport const htmlLegend = () => new HtmlLegend();\n","import {pluck, utils} from '../core/utils';\nimport {d3compat} from '../core/config';\nimport {constants} from '../core/constants';\n\nconst LABEL_GAP = 2;\n\n/**\n * Legend is a attachable widget that can be added to other dc charts to render horizontal legend\n * labels.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @example\n * chart.legend(new Legend().x(400).y(10).itemHeight(13).gap(5))\n * @returns {Legend}\n */\nexport class Legend {\n    constructor () {\n        this._parent = undefined;\n        this._x = 0;\n        this._y = 0;\n        this._itemHeight = 12;\n        this._gap = 5;\n        this._horizontal = false;\n        this._legendWidth = 560;\n        this._itemWidth = 70;\n        this._autoItemWidth = false;\n        this._legendText = pluck('name');\n        this._maxItems = undefined;\n        this._highlightSelected = false;\n        this._keyboardAccessible = false;\n\n        this._g = undefined;\n    }\n\n    parent (p) {\n        if (!arguments.length) {\n            return this._parent;\n        }\n        this._parent = p;\n        return this;\n    }\n\n    /**\n     * Set or get x coordinate for legend widget.\n     * @param  {Number} [x=0]\n     * @returns {Number|Legend}\n     */\n    x (x) {\n        if (!arguments.length) {\n            return this._x;\n        }\n        this._x = x;\n        return this;\n    }\n\n    /**\n     * Set or get y coordinate for legend widget.\n     * @param  {Number} [y=0]\n     * @returns {Number|Legend}\n     */\n    y (y) {\n        if (!arguments.length) {\n            return this._y;\n        }\n        this._y = y;\n        return this;\n    }\n\n    /**\n     * Set or get gap between legend items.\n     * @param  {Number} [gap=5]\n     * @returns {Number|Legend}\n     */\n    gap (gap) {\n        if (!arguments.length) {\n            return this._gap;\n        }\n        this._gap = gap;\n        return this;\n    }\n\n    /**\n     * This can be optionally used to enable highlighting legends for the selections/filters for the\n     * chart.\n     * @param {String} [highlightSelected]\n     * @return {String|dc.legend}\n     **/\n    highlightSelected (highlightSelected) {\n        if (!arguments.length) {\n            return this._highlightSelected;\n        }\n        this._highlightSelected = highlightSelected;\n        return this;\n    }\n\n    /**\n     * Set or get legend item height.\n     * @param  {Number} [itemHeight=12]\n     * @returns {Number|Legend}\n     */\n    itemHeight (itemHeight) {\n        if (!arguments.length) {\n            return this._itemHeight;\n        }\n        this._itemHeight = itemHeight;\n        return this;\n    }\n\n    /**\n     * Position legend horizontally instead of vertically.\n     * @param  {Boolean} [horizontal=false]\n     * @returns {Boolean|Legend}\n     */\n    horizontal (horizontal) {\n        if (!arguments.length) {\n            return this._horizontal;\n        }\n        this._horizontal = horizontal;\n        return this;\n    }\n\n    /**\n     * Maximum width for horizontal legend.\n     * @param  {Number} [legendWidth=500]\n     * @returns {Number|Legend}\n     */\n    legendWidth (legendWidth) {\n        if (!arguments.length) {\n            return this._legendWidth;\n        }\n        this._legendWidth = legendWidth;\n        return this;\n    }\n\n    /**\n     * Legend item width for horizontal legend.\n     * @param  {Number} [itemWidth=70]\n     * @returns {Number|Legend}\n     */\n    itemWidth (itemWidth) {\n        if (!arguments.length) {\n            return this._itemWidth;\n        }\n        this._itemWidth = itemWidth;\n        return this;\n    }\n\n    /**\n     * Turn automatic width for legend items on or off. If true, {@link Legend#itemWidth itemWidth} is ignored.\n     * This setting takes into account the {@link Legend#gap gap}.\n     * @param  {Boolean} [autoItemWidth=false]\n     * @returns {Boolean|Legend}\n     */\n    autoItemWidth (autoItemWidth) {\n        if (!arguments.length) {\n            return this._autoItemWidth;\n        }\n        this._autoItemWidth = autoItemWidth;\n        return this;\n    }\n\n    /**\n     * Set or get the legend text function. The legend widget uses this function to render the legend\n     * text for each item. If no function is specified the legend widget will display the names\n     * associated with each group.\n     * @param  {Function} [legendText]\n     * @returns {Function|Legend}\n     * @example\n     * // default legendText\n     * legend.legendText(pluck('name'))\n     *\n     * // create numbered legend items\n     * chart.legend(new Legend().legendText(function(d, i) { return i + '. ' + d.name; }))\n     *\n     * // create legend displaying group counts\n     * chart.legend(new Legend().legendText(function(d) { return d.name + ': ' d.data; }))\n     */\n    legendText (legendText) {\n        if (!arguments.length) {\n            return this._legendText;\n        }\n        this._legendText = legendText;\n        return this;\n    }\n\n    /**\n     * Maximum number of legend items to display\n     * @param  {Number} [maxItems]\n     * @return {Legend}\n     */\n    maxItems (maxItems) {\n        if (!arguments.length) {\n            return this._maxItems;\n        }\n        this._maxItems = utils.isNumber(maxItems) ? maxItems : undefined;\n        return this;\n    }\n\n    /**\n     * If set, individual legend items will be focusable from keyboard and on pressing Enter or Space\n     * will behave as if clicked on.\n     * \n     * If `svgDescription` on the parent chart has not been explicitly set, will also set the default \n     * SVG description text to the class constructor name, like BarChart or HeatMap, and make the entire\n     * SVG focusable.\n     * @param {Boolean} [keyboardAccessible=false]\n     * @returns {Boolean|Legend}\n     */\n    keyboardAccessible (keyboardAccessible) {\n        if (!arguments.length) {\n            return this._keyboardAccessible;\n        }\n        this._keyboardAccessible = keyboardAccessible;\n        return this;\n    }\n\n    // Implementation methods\n\n    _legendItemHeight () {\n        return this._gap + this._itemHeight;\n    }\n\n    _makeLegendKeyboardAccessible () {\n\n        if (!this._parent._svgDescription) {\n\n            this._parent.svg().append('desc')\n                .attr('id', `desc-id-${this._parent.__dcFlag__}`)\n                .html(`${this._parent.svgDescription()}`);\n\n            this._parent.svg()\n                .attr('tabindex', '0')\n                .attr('role', 'img')\n                .attr('aria-labelledby', `desc-id-${this._parent.__dcFlag__}`);\n        }\n\n        const tabElements = this._parent.svg()\n            .selectAll('.dc-legend .dc-tabbable')\n            .attr('tabindex', 0);\n\n        tabElements\n            .on('keydown', d3compat.eventHandler((d, event) => {\n                // trigger only if d is an object\n                if (event.keyCode === 13 && typeof d === 'object') {\n                    d.chart.legendToggle(d)\n                } \n                // special case for space key press - prevent scrolling\n                if (event.keyCode === 32 && typeof d === 'object') {\n                    d.chart.legendToggle(d)\n                    event.preventDefault();            \n                }\n            }))\n            .on('focus', d3compat.eventHandler(d => {\n                this._parent.legendHighlight(d);\n            }))\n            .on('blur', d3compat.eventHandler(d => {\n                this._parent.legendReset(d);\n            }));\n    }\n\n    render () {\n        this._parent.svg().select('g.dc-legend').remove();\n        this._g = this._parent.svg().append('g')\n            .attr('class', 'dc-legend')\n            .attr('transform', `translate(${this._x},${this._y})`);\n        let legendables = this._parent.legendables();\n        const filters = this._parent.filters();\n\n        if (this._maxItems !== undefined) {\n            legendables = legendables.slice(0, this._maxItems);\n        }\n\n        const itemEnter = this._g.selectAll('g.dc-legend-item')\n            .data(legendables)\n            .enter()\n            .append('g')\n            .attr('class', 'dc-legend-item')\n            .on('mouseover', d3compat.eventHandler(d => {\n                this._parent.legendHighlight(d);\n            }))\n            .on('mouseout', d3compat.eventHandler(d => {\n                this._parent.legendReset(d);\n            }))\n            .on('click', d3compat.eventHandler(d => {\n                d.chart.legendToggle(d);\n            }));\n\n        if (this._highlightSelected) {\n            itemEnter.classed(constants.SELECTED_CLASS,\n                              d => filters.indexOf(d.name) !== -1);\n        }\n\n\n        this._g.selectAll('g.dc-legend-item')\n            .classed('fadeout', d => d.chart.isLegendableHidden(d));\n\n        if (legendables.some(pluck('dashstyle'))) {\n            itemEnter\n                .append('line')\n                .attr('x1', 0)\n                .attr('y1', this._itemHeight / 2)\n                .attr('x2', this._itemHeight)\n                .attr('y2', this._itemHeight / 2)\n                .attr('stroke-width', 2)\n                .attr('stroke-dasharray', pluck('dashstyle'))\n                .attr('stroke', pluck('color'));\n        } else {\n            itemEnter\n                .append('rect')\n                .attr('width', this._itemHeight)\n                .attr('height', this._itemHeight)\n                .attr('fill', d => d ? d.color : 'blue');\n        }\n\n        {\n            const self = this;\n\n            itemEnter.append('text')\n                .text(self._legendText)\n                .classed('dc-tabbable', this._keyboardAccessible)\n                .attr('x', self._itemHeight + LABEL_GAP)\n                .attr('y', function () {\n                    return self._itemHeight / 2 + (this.clientHeight ? this.clientHeight : 13) / 2 - 2;\n                });\n\n            if (this._keyboardAccessible) {\n                this._makeLegendKeyboardAccessible();\n            }\n        }\n\n        let cumulativeLegendTextWidth = 0;\n        let row = 0;\n\n        {\n            const self = this;\n\n            itemEnter.attr('transform', function (d, i) {\n                if (self._horizontal) {\n                    const itemWidth = self._autoItemWidth === true ? this.getBBox().width + self._gap : self._itemWidth;\n                    if ((cumulativeLegendTextWidth + itemWidth) > self._legendWidth && cumulativeLegendTextWidth > 0) {\n                        ++row;\n                        cumulativeLegendTextWidth = 0;\n                    }\n                    const translateBy = `translate(${cumulativeLegendTextWidth},${row * self._legendItemHeight()})`;\n                    cumulativeLegendTextWidth += itemWidth;\n                    return translateBy;\n                } else {\n                    return `translate(0,${i * self._legendItemHeight()})`;\n                }\n            });\n        }\n    }\n\n}\n\nexport const legend = () => new Legend();\n","import {\n    area,\n    curveBasis,\n    curveBasisClosed,\n    curveBasisOpen,\n    curveBundle,\n    curveCardinal,\n    curveCardinalClosed,\n    curveCardinalOpen,\n    curveLinear,\n    curveLinearClosed,\n    curveMonotoneX,\n    curveStep,\n    curveStepAfter,\n    curveStepBefore,\n    line\n} from 'd3-shape';\nimport {select} from 'd3-selection';\n\nimport {logger} from '../core/logger';\nimport {pluck, utils} from '../core/utils';\nimport {StackMixin} from '../base/stack-mixin';\nimport {transition} from '../core/core';\n\nconst DEFAULT_DOT_RADIUS = 5;\nconst TOOLTIP_G_CLASS = 'dc-tooltip';\nconst DOT_CIRCLE_CLASS = 'dot';\nconst Y_AXIS_REF_LINE_CLASS = 'yRef';\nconst X_AXIS_REF_LINE_CLASS = 'xRef';\nconst DEFAULT_DOT_OPACITY = 1e-6;\nconst LABEL_PADDING = 3;\n\n/**\n * Concrete line/area chart implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @mixes StackMixin\n * @mixes CoordinateGridMixin\n */\nexport class LineChart extends StackMixin {\n    /**\n     * Create a Line Chart.\n     * @example\n     * // create a line chart under #chart-container1 element using the default global chart group\n     * var chart1 = new LineChart('#chart-container1');\n     * // create a line chart under #chart-container2 element using chart group A\n     * var chart2 = new LineChart('#chart-container2', 'chartGroupA');\n     * // create a sub-chart under a composite parent chart\n     * var chart3 = new LineChart(compositeChart);\n     * @param {String|node|d3.selection|CompositeChart} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector}\n     * specifying a dom block element such as a div; or a dom element or d3 selection.  If the line\n     * chart is a sub-chart in a {@link CompositeChart Composite Chart} then pass in the parent\n     * composite chart instance instead.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor (parent, chartGroup) {\n        super();\n\n        this._renderArea = false;\n        this._dotRadius = DEFAULT_DOT_RADIUS;\n        this._dataPointRadius = null;\n        this._dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n        this._dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n        this._curve = null;\n        this._interpolate = null; // d3.curveLinear;  // deprecated in 3.0\n        this._tension = null;  // deprecated in 3.0\n        this._defined = undefined;\n        this._dashStyle = undefined;\n        this._xyTipsOn = true;\n\n        this.transitionDuration(500);\n        this.transitionDelay(0);\n        this._rangeBandPadding(1);\n\n        this.label(d => utils.printSingleValue(d.y0 + d.y), false);\n\n        this.anchor(parent, chartGroup);\n    }\n\n    plotData () {\n        const chartBody = this.chartBodyG();\n        let layersList = chartBody.select('g.stack-list');\n\n        if (layersList.empty()) {\n            layersList = chartBody.append('g').attr('class', 'stack-list');\n        }\n\n        let layers = layersList.selectAll('g.stack').data(this.data());\n\n        const layersEnter = layers\n            .enter()\n            .append('g')\n            .attr('class', (d, i) => `stack _${i}`);\n\n        layers = layersEnter.merge(layers);\n\n        this._drawLine(layersEnter, layers);\n\n        this._drawArea(layersEnter, layers);\n\n        this._drawDots(chartBody, layers);\n\n        if (this.renderLabel()) {\n            this._drawLabels(layers);\n        }\n    }\n\n    /**\n     * Gets or sets the curve factory to use for lines and areas drawn, allowing e.g. step\n     * functions, splines, and cubic interpolation. Typically you would use one of the interpolator functions\n     * provided by {@link https://github.com/d3/d3-shape/blob/master/README.md#curves d3 curves}.\n     *\n     * Replaces the use of {@link LineChart#interpolate} and {@link LineChart#tension}\n     * in dc.js < 3.0\n     *\n     * This is passed to\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#line_curve line.curve} and\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#area_curve area.curve}.\n     * @example\n     * // default\n     * chart\n     *     .curve(d3.curveLinear);\n     * // Add tension to curves that support it\n     * chart\n     *     .curve(d3.curveCardinal.tension(0.5));\n     * // You can use some specialized variation like\n     * // https://en.wikipedia.org/wiki/Centripetal_Catmull%E2%80%93Rom_spline\n     * chart\n     *     .curve(d3.curveCatmullRom.alpha(0.5));\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#line_curve line.curve}\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#area_curve area.curve}\n     * @param  {d3.curve} [curve=d3.curveLinear]\n     * @returns {d3.curve|LineChart}\n     */\n    curve (curve) {\n        if (!arguments.length) {\n            return this._curve;\n        }\n        this._curve = curve;\n        return this;\n    }\n\n    /**\n     * Gets or sets the interpolator to use for lines drawn, by string name, allowing e.g. step\n     * functions, splines, and cubic interpolation.\n     *\n     * Possible values are: 'linear', 'linear-closed', 'step', 'step-before', 'step-after', 'basis',\n     * 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', and\n     * 'monotone'.\n     *\n     * This function exists for backward compatibility. Use {@link LineChart#curve}\n     * which is generic and provides more options.\n     * Value set through `.curve` takes precedence over `.interpolate` and `.tension`.\n     * @deprecated since version 3.0 use {@link LineChart#curve} instead\n     * @see {@link LineChart#curve}\n     * @param  {d3.curve} [interpolate=d3.curveLinear]\n     * @returns {d3.curve|LineChart}\n     */\n    interpolate (interpolate) {\n        logger.warnOnce('dc.lineChart.interpolate has been deprecated since version 3.0 use dc.lineChart.curve instead');\n        if (!arguments.length) {\n            return this._interpolate;\n        }\n        this._interpolate = interpolate;\n        return this;\n    }\n\n    /**\n     * Gets or sets the tension to use for lines drawn, in the range 0 to 1.\n     *\n     * Passed to the {@link https://github.com/d3/d3-shape/blob/master/README.md#curves d3 curve function}\n     * if it provides a `.tension` function. Example:\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#curveCardinal_tension curveCardinal.tension}.\n     *\n     * This function exists for backward compatibility. Use {@link LineChart#curve}\n     * which is generic and provides more options.\n     * Value set through `.curve` takes precedence over `.interpolate` and `.tension`.\n     * @deprecated since version 3.0 use {@link LineChart#curve} instead\n     * @see {@link LineChart#curve}\n     * @param  {Number} [tension=0]\n     * @returns {Number|LineChart}\n     */\n    tension (tension) {\n        logger.warnOnce('dc.lineChart.tension has been deprecated since version 3.0 use dc.lineChart.curve instead');\n        if (!arguments.length) {\n            return this._tension;\n        }\n        this._tension = tension;\n        return this;\n    }\n\n    /**\n     * Gets or sets a function that will determine discontinuities in the line which should be\n     * skipped: the path will be broken into separate subpaths if some points are undefined.\n     * This function is passed to\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#line_defined line.defined}\n     *\n     * Note: crossfilter will sometimes coerce nulls to 0, so you may need to carefully write\n     * custom reduce functions to get this to work, depending on your data. See\n     * {@link https://github.com/dc-js/dc.js/issues/615#issuecomment-49089248 this GitHub comment}\n     * for more details and an example.\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#line_defined line.defined}\n     * @param  {Function} [defined]\n     * @returns {Function|LineChart}\n     */\n    defined (defined) {\n        if (!arguments.length) {\n            return this._defined;\n        }\n        this._defined = defined;\n        return this;\n    }\n\n    /**\n     * Set the line's d3 dashstyle. This value becomes the 'stroke-dasharray' of line. Defaults to empty\n     * array (solid line).\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray stroke-dasharray}\n     * @example\n     * // create a Dash Dot Dot Dot\n     * chart.dashStyle([3,1,1,1]);\n     * @param  {Array<Number>} [dashStyle=[]]\n     * @returns {Array<Number>|LineChart}\n     */\n    dashStyle (dashStyle) {\n        if (!arguments.length) {\n            return this._dashStyle;\n        }\n        this._dashStyle = dashStyle;\n        return this;\n    }\n\n    /**\n     * Get or set render area flag. If the flag is set to true then the chart will render the area\n     * beneath each line and the line chart effectively becomes an area chart.\n     * @param  {Boolean} [renderArea=false]\n     * @returns {Boolean|LineChart}\n     */\n    renderArea (renderArea) {\n        if (!arguments.length) {\n            return this._renderArea;\n        }\n        this._renderArea = renderArea;\n        return this;\n    }\n\n    _getColor (d, i) {\n        return this.getColor.call(d, d.values, i);\n    }\n\n    // To keep it backward compatible, this covers multiple cases\n    // See https://github.com/dc-js/dc.js/issues/1376\n    // It will be removed when interpolate and tension are removed.\n    _getCurveFactory () {\n        let curve = null;\n\n        // _curve takes precedence\n        if (this._curve) {\n            return this._curve;\n        }\n\n        // Approximate the D3v3 behavior\n        if (typeof this._interpolate === 'function') {\n            curve = this._interpolate;\n        } else {\n            // If _interpolate is string\n            const mapping = {\n                'linear': curveLinear,\n                'linear-closed': curveLinearClosed,\n                'step': curveStep,\n                'step-before': curveStepBefore,\n                'step-after': curveStepAfter,\n                'basis': curveBasis,\n                'basis-open': curveBasisOpen,\n                'basis-closed': curveBasisClosed,\n                'bundle': curveBundle,\n                'cardinal': curveCardinal,\n                'cardinal-open': curveCardinalOpen,\n                'cardinal-closed': curveCardinalClosed,\n                'monotone': curveMonotoneX\n            };\n            curve = mapping[this._interpolate];\n        }\n\n        // Default value\n        if (!curve) {\n            curve = curveLinear;\n        }\n\n        if (this._tension !== null) {\n            if (typeof curve.tension !== 'function') {\n                logger.warn('tension was specified but the curve/interpolate does not support it.');\n            } else {\n                curve = curve.tension(this._tension);\n            }\n        }\n        return curve;\n    }\n\n    _drawLine (layersEnter, layers) {\n        const _line = line()\n            .x(d => this.x()(d.x))\n            .y(d => this.y()(d.y + d.y0))\n            .curve(this._getCurveFactory());\n        if (this._defined) {\n            _line.defined(this._defined);\n        }\n\n        const path = layersEnter.append('path')\n            .attr('class', 'line')\n            .attr('stroke', (d, i) => this._getColor(d, i));\n        if (this._dashStyle) {\n            path.attr('stroke-dasharray', this._dashStyle);\n        }\n\n        transition(layers.select('path.line'), this.transitionDuration(), this.transitionDelay())\n        //.ease('linear')\n            .attr('stroke', (d, i) => this._getColor(d, i))\n            .attr('d', d => this._safeD(_line(d.values)));\n    }\n\n    _drawArea (layersEnter, layers) {\n        if (this._renderArea) {\n            const _area = area()\n                .x(d => this.x()(d.x))\n                .y1(d => this.y()(d.y + d.y0))\n                .y0(d => this.y()(d.y0))\n                .curve(this._getCurveFactory());\n            if (this._defined) {\n                _area.defined(this._defined);\n            }\n\n            layersEnter.append('path')\n                .attr('class', 'area')\n                .attr('fill', (d, i) => this._getColor(d, i))\n                .attr('d', d => this._safeD(_area(d.values)));\n\n            transition(layers.select('path.area'), this.transitionDuration(), this.transitionDelay())\n            //.ease('linear')\n                .attr('fill', (d, i) => this._getColor(d, i))\n                .attr('d', d => this._safeD(_area(d.values)));\n        }\n    }\n\n    _safeD (d) {\n        return (!d || d.indexOf('NaN') >= 0) ? 'M0,0' : d;\n    }\n\n    _drawDots (chartBody, layers) {\n        if (this.xyTipsOn() === 'always' || (!(this.brushOn() || this.parentBrushOn()) && this.xyTipsOn())) {\n            const tooltipListClass = `${TOOLTIP_G_CLASS}-list`;\n            let tooltips = chartBody.select(`g.${tooltipListClass}`);\n\n            if (tooltips.empty()) {\n                tooltips = chartBody.append('g').attr('class', tooltipListClass);\n            }\n\n            layers.each((data, layerIndex) => {\n                let points = data.values;\n                if (this._defined) {\n                    points = points.filter(this._defined);\n                }\n\n                let g = tooltips.select(`g.${TOOLTIP_G_CLASS}._${layerIndex}`);\n                if (g.empty()) {\n                    g = tooltips.append('g').attr('class', `${TOOLTIP_G_CLASS} _${layerIndex}`);\n                }\n\n                this._createRefLines(g);\n\n                const dots = g.selectAll(`circle.${DOT_CIRCLE_CLASS}`)\n                    .data(points, pluck('x'));\n\n                const chart = this;\n                const dotsEnterModify = dots\n                    .enter()\n                    .append('circle')\n                    .attr('class', DOT_CIRCLE_CLASS)\n                    .classed('dc-tabbable', this._keyboardAccessible)\n                    .attr('cx', d => utils.safeNumber(this.x()(d.x)))\n                    .attr('cy', d => utils.safeNumber(this.y()(d.y + d.y0)))\n                    .attr('r', this._getDotRadius())\n                    .style('fill-opacity', this._dataPointFillOpacity)\n                    .style('stroke-opacity', this._dataPointStrokeOpacity)\n                    .attr('fill', this.getColor)\n                    .attr('stroke', this.getColor)\n                    .on('mousemove', function () {\n                        const dot = select(this);\n                        chart._showDot(dot);\n                        chart._showRefLines(dot, g);\n                    })\n                    .on('mouseout', function () {\n                        const dot = select(this);\n                        chart._hideDot(dot);\n                        chart._hideRefLines(g);\n                    })\n                    .merge(dots);\n\n                // special case for on-focus for line chart and its dots\n                if (this._keyboardAccessible) {\n\n                    this._svg.selectAll('.dc-tabbable')\n                        .attr('tabindex', 0)\n                        .on('focus', function () {\n                            const dot = select(this);\n                            chart._showDot(dot);\n                            chart._showRefLines(dot, g);\n                        })\n                        .on('blur', function () {\n                            const dot = select(this);\n                            chart._hideDot(dot);\n                            chart._hideRefLines(g);\n                        });\n                }\n\n                dotsEnterModify.call(dot => this._doRenderTitle(dot, data));\n\n                transition(dotsEnterModify, this.transitionDuration())\n                    .attr('cx', d => utils.safeNumber(this.x()(d.x)))\n                    .attr('cy', d => utils.safeNumber(this.y()(d.y + d.y0)))\n                    .attr('fill', this.getColor);\n\n                dots.exit().remove();\n            });\n        }\n    }\n\n    _drawLabels (layers) {\n        const chart = this;\n        layers.each(function (data, layerIndex) {\n            const layer = select(this);\n            const labels = layer.selectAll('text.lineLabel')\n                .data(data.values, pluck('x'));\n\n            const labelsEnterModify = labels\n                .enter()\n                .append('text')\n                .attr('class', 'lineLabel')\n                .attr('text-anchor', 'middle')\n                .merge(labels);\n\n            transition(labelsEnterModify, chart.transitionDuration())\n                .attr('x', d => utils.safeNumber(chart.x()(d.x)))\n                .attr('y', d => {\n                    const y = chart.y()(d.y + d.y0) - LABEL_PADDING;\n                    return utils.safeNumber(y);\n                })\n                .text(d => chart.label()(d));\n\n            transition(labels.exit(), chart.transitionDuration())\n                .attr('height', 0)\n                .remove();\n        });\n    }\n\n    _createRefLines (g) {\n        const yRefLine = g.select(`path.${Y_AXIS_REF_LINE_CLASS}`).empty() ?\n            g.append('path').attr('class', Y_AXIS_REF_LINE_CLASS) : g.select(`path.${Y_AXIS_REF_LINE_CLASS}`);\n        yRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n\n        const xRefLine = g.select(`path.${X_AXIS_REF_LINE_CLASS}`).empty() ?\n            g.append('path').attr('class', X_AXIS_REF_LINE_CLASS) : g.select(`path.${X_AXIS_REF_LINE_CLASS}`);\n        xRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n    }\n\n    _showDot (dot) {\n        dot.style('fill-opacity', 0.8);\n        dot.style('stroke-opacity', 0.8);\n        dot.attr('r', this._dotRadius);\n        return dot;\n    }\n\n    _showRefLines (dot, g) {\n        const x = dot.attr('cx');\n        const y = dot.attr('cy');\n        const yAxisX = (this._yAxisX() - this.margins().left);\n        const yAxisRefPathD = `M${yAxisX} ${y}L${x} ${y}`;\n        const xAxisRefPathD = `M${x} ${this.yAxisHeight()}L${x} ${y}`;\n        g.select(`path.${Y_AXIS_REF_LINE_CLASS}`).style('display', '').attr('d', yAxisRefPathD);\n        g.select(`path.${X_AXIS_REF_LINE_CLASS}`).style('display', '').attr('d', xAxisRefPathD);\n    }\n\n    _getDotRadius () {\n        return this._dataPointRadius || this._dotRadius;\n    }\n\n    _hideDot (dot) {\n        dot.style('fill-opacity', this._dataPointFillOpacity)\n            .style('stroke-opacity', this._dataPointStrokeOpacity)\n            .attr('r', this._getDotRadius());\n    }\n\n    _hideRefLines (g) {\n        g.select(`path.${Y_AXIS_REF_LINE_CLASS}`).style('display', 'none');\n        g.select(`path.${X_AXIS_REF_LINE_CLASS}`).style('display', 'none');\n    }\n\n    _doRenderTitle (dot, d) {\n        if (this.renderTitle()) {\n            dot.select('title').remove();\n            dot.append('title').text(pluck('data', this.title(d.name)));\n        }\n    }\n\n    /**\n     * Turn on/off the mouseover behavior of an individual data point which renders a circle and x/y axis\n     * dashed lines back to each respective axis.  This is ignored if the chart\n     * {@link CoordinateGridMixin#brushOn brush} is on\n     * @param  {Boolean} [xyTipsOn=false]\n     * @returns {Boolean|LineChart}\n     */\n    xyTipsOn (xyTipsOn) {\n        if (!arguments.length) {\n            return this._xyTipsOn;\n        }\n        this._xyTipsOn = xyTipsOn;\n        return this;\n    }\n\n    /**\n     * Get or set the radius (in px) for dots displayed on the data points.\n     * @param  {Number} [dotRadius=5]\n     * @returns {Number|LineChart}\n     */\n    dotRadius (dotRadius) {\n        if (!arguments.length) {\n            return this._dotRadius;\n        }\n        this._dotRadius = dotRadius;\n        return this;\n    }\n\n    /**\n     * Always show individual dots for each datapoint.\n     *\n     * If `options` is falsy, it disables data point rendering. If no `options` are provided, the\n     * current `options` values are instead returned.\n     * @example\n     * chart.renderDataPoints({radius: 2, fillOpacity: 0.8, strokeOpacity: 0.0})\n     * @param  {{fillOpacity: Number, strokeOpacity: Number, radius: Number}} [options={fillOpacity: 0.8, strokeOpacity: 0.0, radius: 2}]\n     * @returns {{fillOpacity: Number, strokeOpacity: Number, radius: Number}|LineChart}\n     */\n    renderDataPoints (options) {\n        if (!arguments.length) {\n            return {\n                fillOpacity: this._dataPointFillOpacity,\n                strokeOpacity: this._dataPointStrokeOpacity,\n                radius: this._dataPointRadius\n            };\n        } else if (!options) {\n            this._dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n            this._dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n            this._dataPointRadius = null;\n        } else {\n            this._dataPointFillOpacity = options.fillOpacity || 0.8;\n            this._dataPointStrokeOpacity = options.strokeOpacity || 0.0;\n            this._dataPointRadius = options.radius || 2;\n        }\n        return this;\n    }\n\n    _colorFilter (color, dashstyle, inv) {\n        return function () {\n            const item = select(this);\n            const match = (item.attr('stroke') === color &&\n                item.attr('stroke-dasharray') === ((dashstyle instanceof Array) ?\n                    dashstyle.join(',') : null)) || item.attr('fill') === color;\n            return inv ? !match : match;\n        };\n    }\n\n    legendHighlight (d) {\n        if (!this.isLegendableHidden(d)) {\n            this.g().selectAll('path.line, path.area')\n                .classed('highlight', this._colorFilter(d.color, d.dashstyle))\n                .classed('fadeout', this._colorFilter(d.color, d.dashstyle, true));\n        }\n    }\n\n    legendReset () {\n        this.g().selectAll('path.line, path.area')\n            .classed('highlight', false)\n            .classed('fadeout', false);\n    }\n\n    legendables () {\n        const legendables = super.legendables();\n        if (!this._dashStyle) {\n            return legendables;\n        }\n        return legendables.map(l => {\n            l.dashstyle = this._dashStyle;\n            return l;\n        });\n    }\n}\n\nexport const lineChart = (parent, chartGroup) => new LineChart(parent, chartGroup);\n","import {format} from 'd3-format';\nimport {easeQuad} from 'd3-ease';\nimport {interpolateNumber} from 'd3-interpolate';\n\nimport {BaseMixin} from '../base/base-mixin';\n\nconst SPAN_CLASS = 'number-display';\n\n/**\n * A display of a single numeric value.\n *\n * Unlike other charts, you do not need to set a dimension. Instead a group object must be provided and\n * a valueAccessor that returns a single value.\n *\n * If the group is a {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_groupAll groupAll}\n * then its `.value()` will be displayed. This is the recommended usage.\n *\n * However, if it is given an ordinary group, the `numberDisplay` will show the last bin's value, after\n * sorting with the {@link https://dc-js.github.io/dc.js/docs/html/dc.baseMixin.html#ordering__anchor ordering}\n * function. `numberDisplay` defaults the `ordering` function to sorting by value, so this will display\n * the largest value if the values are numeric.\n * @mixes BaseMixin\n */\nexport class NumberDisplay extends BaseMixin {\n    /**\n     * Create a Number Display widget.\n     *\n     * @example\n     * // create a number display under #chart-container1 element using the default global chart group\n     * var display1 = new NumberDisplay('#chart-container1');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor (parent, chartGroup) {\n        super();\n\n        this._formatNumber = format('.2s');\n        this._html = {one: '', some: '', none: ''};\n        this._lastValue = undefined;\n        this._ariaLiveRegion = false;\n\n        // dimension not required\n        this._mandatoryAttributes(['group']);\n\n        // default to ordering by value, to emulate old group.top(1) behavior when multiple groups\n        this.ordering(kv => kv.value);\n\n        this.data(group => {\n            const valObj = group.value ? group.value() : this._maxBin(group.all());\n            return this.valueAccessor()(valObj);\n        });\n\n        this.transitionDuration(250); // good default\n        this.transitionDelay(0);\n\n        this.anchor(parent, chartGroup);\n    }\n\n    /**\n     * Gets or sets an optional object specifying HTML templates to use depending on the number\n     * displayed.  The text `%number` will be replaced with the current value.\n     * - one: HTML template to use if the number is 1\n     * - zero: HTML template to use if the number is 0\n     * - some: HTML template to use otherwise\n     * @example\n     * numberWidget.html({\n     *      one:'%number record',\n     *      some:'%number records',\n     *      none:'no records'})\n     * @param {{one:String, some:String, none:String}} [html={one: '', some: '', none: ''}]\n     * @returns {{one:String, some:String, none:String}|NumberDisplay}\n     */\n    html (html) {\n        if (!arguments.length) {\n            return this._html;\n        }\n        if (html.none) {\n            this._html.none = html.none;//if none available\n        } else if (html.one) {\n            this._html.none = html.one;//if none not available use one\n        } else if (html.some) {\n            this._html.none = html.some;//if none and one not available use some\n        }\n        if (html.one) {\n            this._html.one = html.one;//if one available\n        } else if (html.some) {\n            this._html.one = html.some;//if one not available use some\n        }\n        if (html.some) {\n            this._html.some = html.some;//if some available\n        } else if (html.one) {\n            this._html.some = html.one;//if some not available use one\n        }\n        return this;\n    }\n\n    /**\n     * Calculate and return the underlying value of the display.\n     * @returns {Number}\n     */\n    value () {\n        return this.data();\n    }\n\n    _maxBin (all) {\n        if (!all.length) {\n            return null;\n        }\n        const sorted = this._computeOrderedGroups(all);\n        return sorted[sorted.length - 1];\n    }\n\n    _doRender () {\n        const newValue = this.value();\n        let span = this.selectAll(`.${SPAN_CLASS}`);\n\n        if (span.empty()) {\n            span = span.data([0])\n                .enter()\n                .append('span')\n                .attr('class', SPAN_CLASS)\n                .classed('dc-tabbable', this._keyboardAccessible)\n                .merge(span);\n\n            if (this._keyboardAccessible) {\n                span.attr('tabindex', '0');\n            }\n\n            if (this._ariaLiveRegion) {\n                this.transitionDuration(0);\n                span.attr('aria-live', 'polite');\n            }\n        }\n\n        {\n            const chart = this;\n            span.transition()\n                .duration(chart.transitionDuration())\n                .delay(chart.transitionDelay())\n                .ease(easeQuad)\n                .tween('text', function () {\n                    // [XA] don't try and interpolate from Infinity, else this breaks.\n                    const interpStart = isFinite(chart._lastValue) ? chart._lastValue : 0;\n                    const interp = interpolateNumber(interpStart || 0, newValue);\n                    chart._lastValue = newValue;\n\n                    // need to save it in D3v4\n                    const node = this;\n                    return t => {\n                        let html = null;\n                        const num = chart.formatNumber()(interp(t));\n                        if (newValue === 0 && (chart._html.none !== '')) {\n                            html = chart._html.none;\n                        } else if (newValue === 1 && (chart._html.one !== '')) {\n                            html = chart._html.one;\n                        } else if (chart._html.some !== '') {\n                            html = chart._html.some;\n                        }\n                        node.innerHTML = html ? html.replace('%number', num) : num;\n                    };\n                });\n        }\n    }\n\n    _doRedraw () {\n        return this._doRender();\n    }\n\n    /**\n     * Get or set a function to format the value for the display.\n     * @see {@link https://github.com/d3/d3-format/blob/master/README.md#format d3.format}\n     * @param {Function} [formatter=d3.format('.2s')]\n     * @returns {Function|NumberDisplay}\n     */\n    formatNumber (formatter) {\n        if (!arguments.length) {\n            return this._formatNumber;\n        }\n        this._formatNumber = formatter;\n        return this;\n    }\n\n    /**\n     * If set, the Number Display widget will have its aria-live attribute set to 'polite' which will\n     * notify screen readers when the widget changes its value. Note that setting this method will also\n     * disable the default transition between the old and the new values. This is to avoid change\n     * notifications spoken out before the new value finishes re-drawing. It is also advisable to check\n     * if the widget has appropriately set accessibility description or label. \n     * @param {Boolean} [ariaLiveRegion=false]\n     * @returns {Boolean|NumberDisplay}\n     */\n    ariaLiveRegion (ariaLiveRegion) {\n        if (!arguments.length) {\n            return this._ariaLiveRegion;\n        }\n        this._ariaLiveRegion = ariaLiveRegion;\n        return this;\n    }\n\n}\n\nexport const numberDisplay = (parent, chartGroup) => new NumberDisplay(parent, chartGroup);\n","import {min, sum} from 'd3-array';\nimport {arc, pie} from 'd3-shape';\nimport {select} from 'd3-selection';\nimport {interpolate} from 'd3-interpolate';\n\nimport {CapMixin} from '../base/cap-mixin';\nimport {ColorMixin} from '../base/color-mixin';\nimport {BaseMixin} from '../base/base-mixin';\nimport {transition} from '../core/core';\nimport {d3compat} from '../core/config';\n\nconst DEFAULT_MIN_ANGLE_FOR_LABEL = 0.5;\n\n/**\n * The pie chart implementation is usually used to visualize a small categorical distribution.  The pie\n * chart uses keyAccessor to determine the slices, and valueAccessor to calculate the size of each\n * slice relative to the sum of all values. Slices are ordered by {@link BaseMixin#ordering ordering}\n * which defaults to sorting by key.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @mixes CapMixin\n * @mixes ColorMixin\n * @mixes BaseMixin\n */\nexport class PieChart extends CapMixin(ColorMixin(BaseMixin)) {\n    /**\n     * Create a Pie Chart\n     *\n     * @example\n     * // create a pie chart under #chart-container1 element using the default global chart group\n     * var chart1 = new PieChart('#chart-container1');\n     * // create a pie chart under #chart-container2 element using chart group A\n     * var chart2 = new PieChart('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor (parent, chartGroup) {\n        super();\n\n        this._sliceCssClass = 'pie-slice';\n        this._labelCssClass = 'pie-label';\n        this._sliceGroupCssClass = 'pie-slice-group';\n        this._labelGroupCssClass = 'pie-label-group';\n        this._emptyCssClass = 'empty-chart';\n        this._emptyTitle = 'empty';\n\n        this._radius = undefined;\n        this._givenRadius = undefined; // specified radius, if any\n        this._innerRadius = 0;\n        this._externalRadiusPadding = 0;\n\n\n        this._g = undefined;\n        this._cx = undefined;\n        this._cy = undefined;\n        this._minAngleForLabel = DEFAULT_MIN_ANGLE_FOR_LABEL;\n        this._externalLabelRadius = undefined;\n        this._drawPaths = false;\n\n        this.colorAccessor(d => this.cappedKeyAccessor(d));\n\n        this.title(d => `${this.cappedKeyAccessor(d)}: ${this.cappedValueAccessor(d)}`);\n\n        this.label(d => this.cappedKeyAccessor(d));\n        this.renderLabel(true);\n\n        this.transitionDuration(350);\n        this.transitionDelay(0);\n\n        this.anchor(parent, chartGroup);\n    }\n\n    /**\n     * Get or set the maximum number of slices the pie chart will generate. The top slices are determined by\n     * value from high to low. Other slices exceeding the cap will be rolled up into one single *Others* slice.\n     * @param {Number} [cap]\n     * @returns {Number|PieChart}\n     */\n    slicesCap (cap) {\n        return this.cap(cap)\n    }\n\n    _doRender () {\n        this.resetSvg();\n\n        this._g = this.svg()\n            .append('g')\n            .attr('transform', `translate(${this.cx()},${this.cy()})`);\n\n        this._g.append('g').attr('class', this._sliceGroupCssClass);\n        this._g.append('g').attr('class', this._labelGroupCssClass);\n\n        this._drawChart();\n\n        return this;\n    }\n\n    _drawChart () {\n        // set radius from chart size if none given, or if given radius is too large\n        const maxRadius = min([this.width(), this.height()]) / 2;\n        this._radius = this._givenRadius && this._givenRadius < maxRadius ? this._givenRadius : maxRadius;\n\n        const arcs = this._buildArcs();\n\n        const pieLayout = this._pieLayout();\n        let pieData;\n        // if we have data...\n        if (sum(this.data(), d => this.cappedValueAccessor(d))) {\n            pieData = pieLayout(this.data());\n            this._g.classed(this._emptyCssClass, false);\n        } else {\n            // otherwise we'd be getting NaNs, so override\n            // note: abuse others for its ignoring the value accessor\n            pieData = pieLayout([{key: this._emptyTitle, value: 1, others: [this._emptyTitle]}]);\n            this._g.classed(this._emptyCssClass, true);\n        }\n\n        if (this._g) {\n            const slices = this._g.select(`g.${this._sliceGroupCssClass}`)\n                .selectAll(`g.${this._sliceCssClass}`)\n                .data(pieData);\n\n            const labels = this._g.select(`g.${this._labelGroupCssClass}`)\n                .selectAll(`text.${this._labelCssClass}`)\n                .data(pieData);\n\n            this._removeElements(slices, labels);\n\n            this._createElements(slices, labels, arcs, pieData);\n\n            this._updateElements(pieData, arcs);\n\n            this._highlightFilter();\n\n            transition(this._g, this.transitionDuration(), this.transitionDelay())\n                .attr('transform', `translate(${this.cx()},${this.cy()})`);\n        }\n    }\n\n    _createElements (slices, labels, arcs, pieData) {\n        const slicesEnter = this._createSliceNodes(slices);\n\n        this._createSlicePath(slicesEnter, arcs);\n\n        this._createTitles(slicesEnter);\n\n        this._createLabels(labels, pieData, arcs);\n    }\n\n    _createSliceNodes (slices) {\n        return slices\n            .enter()\n            .append('g')\n            .attr('class', (d, i) => `${this._sliceCssClass} _${i}`)\n            .classed('dc-tabbable', this._keyboardAccessible);\n    }\n\n    _createSlicePath (slicesEnter, arcs) {\n        const slicePath = slicesEnter.append('path')\n            .attr('fill', (d, i) => this._fill(d, i))\n            .on('click', d3compat.eventHandler(d => this._onClick(d)))\n            .attr('d', (d, i) => this._safeArc(d, i, arcs));\n\n        if (this._keyboardAccessible) {\n            this._makeKeyboardAccessible(this._onClick);\n        }\n\n        const tranNodes = transition(slicePath, this.transitionDuration(), this.transitionDelay());\n        if (tranNodes.attrTween) {\n            const chart = this;\n            tranNodes.attrTween('d', function (d) {\n                return chart._tweenPie(d, this);\n            });\n        }\n    }\n\n    _createTitles (slicesEnter) {\n        if (this.renderTitle()) {\n            slicesEnter.append('title').text(d => this.title()(d.data));\n        }\n    }\n\n    _applyLabelText (labels) {\n        labels\n            .text(d => {\n                const data = d.data;\n                if ((this._sliceHasNoData(data) || this._sliceTooSmall(d)) && !this._isSelectedSlice(d)) {\n                    return '';\n                }\n                return this.label()(d.data);\n            });\n    }\n\n    _positionLabels (labels, arcs) {\n        this._applyLabelText(labels);\n        transition(labels, this.transitionDuration(), this.transitionDelay())\n            .attr('transform', d => this._labelPosition(d, arcs))\n            .attr('text-anchor', 'middle');\n    }\n\n    _highlightSlice (i, whether) {\n        this.select(`g.pie-slice._${i}`)\n            .classed('highlight', whether);\n    }\n\n    _createLabels (labels, pieData, arcs) {\n        if (this.renderLabel()) {\n            const labelsEnter = labels\n                .enter()\n                .append('text')\n                .attr('class', (d, i) => {\n                    let classes = `${this._sliceCssClass} ${this._labelCssClass} _${i}`;\n                    if (this._externalLabelRadius) {\n                        classes += ' external';\n                    }\n                    return classes;\n                })\n                .on('click', d3compat.eventHandler(d => this._onClick(d)))\n                .on('mouseover', d3compat.eventHandler(d => {\n                    this._highlightSlice(d.index, true);\n                }))\n                .on('mouseout', d3compat.eventHandler(d => {\n                    this._highlightSlice(d.index, false);\n                }));\n            this._positionLabels(labelsEnter, arcs);\n            if (this._externalLabelRadius && this._drawPaths) {\n                this._updateLabelPaths(pieData, arcs);\n            }\n        }\n    }\n\n    _updateLabelPaths (pieData, arcs) {\n        let polyline = this._g.selectAll(`polyline.${this._sliceCssClass}`)\n            .data(pieData);\n\n        polyline.exit().remove();\n\n        polyline = polyline\n            .enter()\n            .append('polyline')\n            .attr('class', (d, i) => `pie-path _${i} ${this._sliceCssClass}`)\n            .on('click', d3compat.eventHandler(d => this._onClick(d)))\n            .on('mouseover', d3compat.eventHandler(d => {\n                this._highlightSlice(d.index, true);\n            }))\n            .on('mouseout', d3compat.eventHandler(d => {\n                this._highlightSlice(d.index, false);\n            }))\n            .merge(polyline);\n\n        const arc2 = arc()\n            .outerRadius(this._radius - this._externalRadiusPadding + this._externalLabelRadius)\n            .innerRadius(this._radius - this._externalRadiusPadding);\n        const tranNodes = transition(polyline, this.transitionDuration(), this.transitionDelay());\n        // this is one rare case where d3.selection differs from d3.transition\n        if (tranNodes.attrTween) {\n            tranNodes\n                .attrTween('points', function (d) {\n                    let current = this._current || d;\n                    current = {startAngle: current.startAngle, endAngle: current.endAngle};\n                    const _interpolate = interpolate(current, d);\n                    this._current = _interpolate(0);\n                    return t => {\n                        const d2 = _interpolate(t);\n                        return [arcs.centroid(d2), arc2.centroid(d2)];\n                    };\n                });\n        } else {\n            tranNodes.attr('points', d => [arcs.centroid(d), arc2.centroid(d)]);\n        }\n        tranNodes.style('visibility', d => d.endAngle - d.startAngle < 0.0001 ? 'hidden' : 'visible');\n\n    }\n\n    _updateElements (pieData, arcs) {\n        this._updateSlicePaths(pieData, arcs);\n        this._updateLabels(pieData, arcs);\n        this._updateTitles(pieData);\n    }\n\n    _updateSlicePaths (pieData, arcs) {\n        const slicePaths = this._g.selectAll(`g.${this._sliceCssClass}`)\n            .data(pieData)\n            .select('path')\n            .attr('d', (d, i) => this._safeArc(d, i, arcs));\n        const tranNodes = transition(slicePaths, this.transitionDuration(), this.transitionDelay());\n        if (tranNodes.attrTween) {\n            const chart = this;\n            tranNodes.attrTween('d', function (d) {\n                return chart._tweenPie(d, this);\n            });\n        }\n        tranNodes.attr('fill', (d, i) => this._fill(d, i));\n    }\n\n    _updateLabels (pieData, arcs) {\n        if (this.renderLabel()) {\n            const labels = this._g.selectAll(`text.${this._labelCssClass}`)\n                .data(pieData);\n            this._positionLabels(labels, arcs);\n            if (this._externalLabelRadius && this._drawPaths) {\n                this._updateLabelPaths(pieData, arcs);\n            }\n        }\n    }\n\n    _updateTitles (pieData) {\n        if (this.renderTitle()) {\n            this._g.selectAll(`g.${this._sliceCssClass}`)\n                .data(pieData)\n                .select('title')\n                .text(d => this.title()(d.data));\n        }\n    }\n\n    _removeElements (slices, labels) {\n        slices.exit().remove();\n        labels.exit().remove();\n    }\n\n    _highlightFilter () {\n        const chart = this;\n        if (this.hasFilter()) {\n            this.selectAll(`g.${this._sliceCssClass}`).each(function (d) {\n                if (chart._isSelectedSlice(d)) {\n                    chart.highlightSelected(this);\n                } else {\n                    chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            this.selectAll(`g.${this._sliceCssClass}`).each(function () {\n                chart.resetHighlight(this);\n            });\n        }\n    }\n\n    /**\n     * Get or set the external radius padding of the pie chart. This will force the radius of the\n     * pie chart to become smaller or larger depending on the value.\n     * @param {Number} [externalRadiusPadding=0]\n     * @returns {Number|PieChart}\n     */\n    externalRadiusPadding (externalRadiusPadding) {\n        if (!arguments.length) {\n            return this._externalRadiusPadding;\n        }\n        this._externalRadiusPadding = externalRadiusPadding;\n        return this;\n    }\n\n    /**\n     * Get or set the inner radius of the pie chart. If the inner radius is greater than 0px then the\n     * pie chart will be rendered as a doughnut chart.\n     * @param {Number} [innerRadius=0]\n     * @returns {Number|PieChart}\n     */\n    innerRadius (innerRadius) {\n        if (!arguments.length) {\n            return this._innerRadius;\n        }\n        this._innerRadius = innerRadius;\n        return this;\n    }\n\n    /**\n     * Get or set the outer radius. If the radius is not set, it will be half of the minimum of the\n     * chart width and height.\n     * @param {Number} [radius]\n     * @returns {Number|PieChart}\n     */\n    radius (radius) {\n        if (!arguments.length) {\n            return this._givenRadius;\n        }\n        this._givenRadius = radius;\n        return this;\n    }\n\n    /**\n     * Get or set center x coordinate position. Default is center of svg.\n     * @param {Number} [cx]\n     * @returns {Number|PieChart}\n     */\n    cx (cx) {\n        if (!arguments.length) {\n            return (this._cx || this.width() / 2);\n        }\n        this._cx = cx;\n        return this;\n    }\n\n    /**\n     * Get or set center y coordinate position. Default is center of svg.\n     * @param {Number} [cy]\n     * @returns {Number|PieChart}\n     */\n    cy (cy) {\n        if (!arguments.length) {\n            return (this._cy || this.height() / 2);\n        }\n        this._cy = cy;\n        return this;\n    }\n\n    _buildArcs () {\n        return arc()\n            .outerRadius(this._radius - this._externalRadiusPadding)\n            .innerRadius(this._innerRadius);\n    }\n\n    _isSelectedSlice (d) {\n        return this.hasFilter(this.cappedKeyAccessor(d.data));\n    }\n\n    _doRedraw () {\n        this._drawChart();\n        return this;\n    }\n\n    /**\n     * Get or set the minimal slice angle for label rendering. Any slice with a smaller angle will not\n     * display a slice label.\n     * @param {Number} [minAngleForLabel=0.5]\n     * @returns {Number|PieChart}\n     */\n    minAngleForLabel (minAngleForLabel) {\n        if (!arguments.length) {\n            return this._minAngleForLabel;\n        }\n        this._minAngleForLabel = minAngleForLabel;\n        return this;\n    }\n\n    _pieLayout () {\n        return pie().sort(null).value(d => this.cappedValueAccessor(d));\n    }\n\n    _sliceTooSmall (d) {\n        const angle = (d.endAngle - d.startAngle);\n        return isNaN(angle) || angle < this._minAngleForLabel;\n    }\n\n    _sliceHasNoData (d) {\n        return this.cappedValueAccessor(d) === 0;\n    }\n\n    _isOffCanvas (current) {\n        return !current || isNaN(current.startAngle) || isNaN(current.endAngle);\n    }\n\n    _fill (d, i) {\n        return this.getColor(d.data, i);\n    }\n\n    _onClick (d) {\n        if (this._g.attr('class') !== this._emptyCssClass) {\n            this.onClick(d.data);\n        }\n    }\n\n    _safeArc (d, i, _arc) {\n        let path = _arc(d, i);\n        if (path.indexOf('NaN') >= 0) {\n            path = 'M0,0';\n        }\n        return path;\n    }\n\n    /**\n     * Title to use for the only slice when there is no data.\n     * @param {String} [title]\n     * @returns {String|PieChart}\n     */\n    emptyTitle (title) {\n        if (arguments.length === 0) {\n            return this._emptyTitle;\n        }\n        this._emptyTitle = title;\n        return this;\n    }\n\n    /**\n     * Position slice labels offset from the outer edge of the chart.\n     *\n     * The argument specifies the extra radius to be added for slice labels.\n     * @param {Number} [externalLabelRadius]\n     * @returns {Number|PieChart}\n     */\n    externalLabels (externalLabelRadius) {\n        if (arguments.length === 0) {\n            return this._externalLabelRadius;\n        } else if (externalLabelRadius) {\n            this._externalLabelRadius = externalLabelRadius;\n        } else {\n            this._externalLabelRadius = undefined;\n        }\n\n        return this;\n    }\n\n    /**\n     * Get or set whether to draw lines from pie slices to their labels.\n     *\n     * @param {Boolean} [drawPaths]\n     * @returns {Boolean|PieChart}\n     */\n    drawPaths (drawPaths) {\n        if (arguments.length === 0) {\n            return this._drawPaths;\n        }\n        this._drawPaths = drawPaths;\n        return this;\n    }\n\n    _labelPosition (d, _arc) {\n        let centroid;\n        if (this._externalLabelRadius) {\n            centroid = arc()\n                .outerRadius(this._radius - this._externalRadiusPadding + this._externalLabelRadius)\n                .innerRadius(this._radius - this._externalRadiusPadding + this._externalLabelRadius)\n                .centroid(d);\n        } else {\n            centroid = _arc.centroid(d);\n        }\n        if (isNaN(centroid[0]) || isNaN(centroid[1])) {\n            return 'translate(0,0)';\n        } else {\n            return `translate(${centroid})`;\n        }\n    }\n\n    legendables () {\n        return this.data().map((d, i) => {\n            const legendable = {name: d.key, data: d.value, others: d.others, chart: this};\n            legendable.color = this.getColor(d, i);\n            return legendable;\n        });\n    }\n\n    legendHighlight (d) {\n        this._highlightSliceFromLegendable(d, true);\n    }\n\n    legendReset (d) {\n        this._highlightSliceFromLegendable(d, false);\n    }\n\n    legendToggle (d) {\n        this.onClick({key: d.name, others: d.others});\n    }\n\n    _highlightSliceFromLegendable (legendable, highlighted) {\n        this.selectAll('g.pie-slice').each(function (d) {\n            if (legendable.name === d.data.key) {\n                select(this).classed('highlight', highlighted);\n            }\n        });\n    }\n\n    _tweenPie (b, element) {\n        b.innerRadius = this._innerRadius;\n        let current = element._current;\n        if (this._isOffCanvas(current)) {\n            current = {startAngle: 0, endAngle: 0};\n        } else {\n            // only interpolate startAngle & endAngle, not the whole data object\n            current = {startAngle: current.startAngle, endAngle: current.endAngle};\n        }\n        const i = interpolate(current, b);\n        element._current = i(0);\n        return t => this._safeArc(i(t), 0, this._buildArcs());\n    }\n\n\n}\n\nexport const pieChart = (parent, chartGroup) => new PieChart(parent, chartGroup);\n","import {extent} from 'd3-array';\nimport {axisBottom} from 'd3-axis';\nimport {scaleLinear} from 'd3-scale';\n\nimport {CapMixin} from '../base/cap-mixin';\nimport {MarginMixin} from '../base/margin-mixin';\nimport {ColorMixin} from '../base/color-mixin';\nimport {transition} from '../core/core';\nimport {d3compat} from '../core/config';\n\n/**\n * Concrete row chart implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @mixes CapMixin\n * @mixes MarginMixin\n * @mixes ColorMixin\n * @mixes BaseMixin\n */\nexport class RowChart extends CapMixin(ColorMixin(MarginMixin)) {\n    /**\n     * Create a Row Chart.\n     * @example\n     * // create a row chart under #chart-container1 element using the default global chart group\n     * var chart1 = new RowChart('#chart-container1');\n     * // create a row chart under #chart-container2 element using chart group A\n     * var chart2 = new RowChart('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor (parent, chartGroup) {\n        super();\n\n        this._g = undefined;\n\n        this._labelOffsetX = 10;\n        this._labelOffsetY = 15;\n        this._hasLabelOffsetY = false;\n        this._dyOffset = '0.35em'; // this helps center labels https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#svg_text\n        this._titleLabelOffsetX = 2;\n\n        this._gap = 5;\n\n        this._fixedBarHeight = false;\n        this._rowCssClass = 'row';\n        this._titleRowCssClass = 'titlerow';\n        this._renderTitleLabel = false;\n\n        this._x = undefined;\n\n        this._elasticX = undefined;\n\n        this._xAxis = axisBottom();\n\n        this._rowData = undefined;\n\n        this.rowsCap = this.cap;\n\n        this.title(d => `${this.cappedKeyAccessor(d)}: ${this.cappedValueAccessor(d)}`);\n\n        this.label(d => this.cappedKeyAccessor(d));\n\n        this.anchor(parent, chartGroup);\n    }\n\n    _calculateAxisScale () {\n        if (!this._x || this._elasticX) {\n            const _extent = extent(this._rowData, d => this.cappedValueAccessor(d));\n            if (_extent[0] > 0) {\n                _extent[0] = 0;\n            }\n            if (_extent[1] < 0) {\n                _extent[1] = 0;\n            }\n            this._x = scaleLinear().domain(_extent)\n                .range([0, this.effectiveWidth()]);\n        }\n        this._xAxis.scale(this._x);\n    }\n\n    _drawAxis () {\n        let axisG = this._g.select('g.axis');\n\n        this._calculateAxisScale();\n\n        if (axisG.empty()) {\n            axisG = this._g.append('g').attr('class', 'axis');\n        }\n        axisG.attr('transform', `translate(0, ${this.effectiveHeight()})`);\n\n        transition(axisG, this.transitionDuration(), this.transitionDelay())\n            .call(this._xAxis);\n    }\n\n    _doRender () {\n        this.resetSvg();\n\n        this._g = this.svg()\n            .append('g')\n            .attr('transform', `translate(${this.margins().left},${this.margins().top})`);\n\n        this._drawChart();\n\n        return this;\n    }\n\n    /**\n     * Gets or sets the x scale. The x scale can be any d3\n     * {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}.\n     * @see {@link https://github.com/d3/d3-scale/blob/master/README.md d3.scale}\n     * @param {d3.scale} [scale]\n     * @returns {d3.scale|RowChart}\n     */\n    x (scale) {\n        if (!arguments.length) {\n            return this._x;\n        }\n        this._x = scale;\n        return this;\n    }\n\n    _drawGridLines () {\n        this._g.selectAll('g.tick')\n            .select('line.grid-line')\n            .remove();\n\n        this._g.selectAll('g.tick')\n            .append('line')\n            .attr('class', 'grid-line')\n            .attr('x1', 0)\n            .attr('y1', 0)\n            .attr('x2', 0)\n            .attr('y2', () => -this.effectiveHeight());\n    }\n\n    _drawChart () {\n        this._rowData = this.data();\n\n        this._drawAxis();\n        this._drawGridLines();\n\n        let rows = this._g.selectAll(`g.${this._rowCssClass}`)\n            .data(this._rowData);\n\n        this._removeElements(rows);\n        rows = this._createElements(rows)\n            .merge(rows);\n        this._updateElements(rows);\n    }\n\n    _createElements (rows) {\n        const rowEnter = rows.enter()\n            .append('g')\n            .attr('class', (d, i) => `${this._rowCssClass} _${i}`);\n\n        rowEnter.append('rect').attr('width', 0);\n\n        this._createLabels(rowEnter);\n\n        return rowEnter;\n    }\n\n    _removeElements (rows) {\n        rows.exit().remove();\n    }\n\n    _rootValue () {\n        const root = this._x(0);\n        return (root === -Infinity || root !== root) ? this._x(1) : root;\n    }\n\n    _updateElements (rows) {\n        const n = this._rowData.length;\n\n        let height;\n        if (!this._fixedBarHeight) {\n            height = (this.effectiveHeight() - (n + 1) * this._gap) / n;\n        } else {\n            height = this._fixedBarHeight;\n        }\n\n        // vertically align label in center unless they override the value via property setter\n        if (!this._hasLabelOffsetY) {\n            this._labelOffsetY = height / 2;\n        }\n\n        const rect = rows.attr('transform', (d, i) => `translate(0,${(i + 1) * this._gap + i * height})`).select('rect')\n            .attr('height', height)\n            .attr('fill', this.getColor)\n            .on('click', d3compat.eventHandler(d => this._onClick(d)))\n            .classed('dc-tabbable', this._keyboardAccessible)\n            .classed('deselected', d => (this.hasFilter()) ? !this._isSelectedRow(d) : false)\n            .classed('selected', d => (this.hasFilter()) ? this._isSelectedRow(d) : false);\n\n        if (this._keyboardAccessible) {\n            this._makeKeyboardAccessible(d => this._onClick(d));\n        }\n\n        transition(rect, this.transitionDuration(), this.transitionDelay())\n            .attr('width', d => Math.abs(this._rootValue() - this._x(this.cappedValueAccessor(d))))\n            .attr('transform', d => this._translateX(d));\n\n        this._createTitles(rows);\n        this._updateLabels(rows);\n    }\n\n    _createTitles (rows) {\n        if (this.renderTitle()) {\n            rows.select('title').remove();\n            rows.append('title').text(this.title());\n        }\n    }\n\n    _createLabels (rowEnter) {\n        if (this.renderLabel()) {\n            rowEnter.append('text')\n                .on('click', d3compat.eventHandler(d => this._onClick(d)));\n        }\n        if (this.renderTitleLabel()) {\n            rowEnter.append('text')\n                .attr('class', this._titleRowCssClass)\n                .on('click', d3compat.eventHandler(d => this._onClick(d)));\n        }\n    }\n\n    _updateLabels (rows) {\n        if (this.renderLabel()) {\n            const lab = rows.select('text')\n                .attr('x', this._labelOffsetX)\n                .attr('y', this._labelOffsetY)\n                .attr('dy', this._dyOffset)\n                .on('click', d3compat.eventHandler(d => this._onClick(d)))\n                .attr('class', (d, i) => `${this._rowCssClass} _${i}`)\n                .text(d => this.label()(d));\n            transition(lab, this.transitionDuration(), this.transitionDelay())\n                .attr('transform', d => this._translateX(d));\n        }\n        if (this.renderTitleLabel()) {\n            const titlelab = rows.select(`.${this._titleRowCssClass}`)\n                .attr('x', this.effectiveWidth() - this._titleLabelOffsetX)\n                .attr('y', this._labelOffsetY)\n                .attr('dy', this._dyOffset)\n                .attr('text-anchor', 'end')\n                .on('click', d3compat.eventHandler(d => this._onClick(d)))\n                .attr('class', (d, i) => `${this._titleRowCssClass} _${i}`)\n                .text(d => this.title()(d));\n            transition(titlelab, this.transitionDuration(), this.transitionDelay())\n                .attr('transform', d => this._translateX(d));\n        }\n    }\n\n    /**\n     * Turn on/off Title label rendering (values) using SVG style of text-anchor 'end'.\n     * @param {Boolean} [renderTitleLabel=false]\n     * @returns {Boolean|RowChart}\n     */\n    renderTitleLabel (renderTitleLabel) {\n        if (!arguments.length) {\n            return this._renderTitleLabel;\n        }\n        this._renderTitleLabel = renderTitleLabel;\n        return this;\n    }\n\n    _onClick (d) {\n        this.onClick(d);\n    }\n\n    _translateX (d) {\n        const x = this._x(this.cappedValueAccessor(d)),\n            x0 = this._rootValue(),\n            s = x > x0 ? x0 : x;\n        return `translate(${s},0)`;\n    }\n\n    _doRedraw () {\n        this._drawChart();\n        return this;\n    }\n\n    /**\n     * Get or sets the x axis for the row chart instance.\n     * See the {@link https://github.com/d3/d3-axis/blob/master/README.md d3.axis}\n     * documention for more information.\n     * @param {d3.axis} [xAxis]\n     * @example\n     * // customize x axis tick format\n     * chart.xAxis().tickFormat(function (v) {return v + '%';});\n     * // customize x axis tick values\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\n     * // use a top-oriented axis. Note: position of the axis and grid lines will need to\n     * // be set manually, see https://dc-js.github.io/dc.js/examples/row-top-axis.html\n     * chart.xAxis(d3.axisTop())\n     * @returns {d3.axis|RowChart}\n     */\n    xAxis (xAxis) {\n        if (!arguments.length) {\n            return this._xAxis;\n        }\n        this._xAxis = xAxis;\n        return this;\n    }\n\n    /**\n     * Get or set the fixed bar height. Default is [false] which will auto-scale bars.\n     * For example, if you want to fix the height for a specific number of bars (useful in TopN charts)\n     * you could fix height as follows (where count = total number of bars in your TopN and gap is\n     * your vertical gap space).\n     * @example\n     * chart.fixedBarHeight( chartheight - (count + 1) * gap / count);\n     * @param {Boolean|Number} [fixedBarHeight=false]\n     * @returns {Boolean|Number|RowChart}\n     */\n    fixedBarHeight (fixedBarHeight) {\n        if (!arguments.length) {\n            return this._fixedBarHeight;\n        }\n        this._fixedBarHeight = fixedBarHeight;\n        return this;\n    }\n\n    /**\n     * Get or set the vertical gap space between rows on a particular row chart instance.\n     * @param {Number} [gap=5]\n     * @returns {Number|RowChart}\n     */\n    gap (gap) {\n        if (!arguments.length) {\n            return this._gap;\n        }\n        this._gap = gap;\n        return this;\n    }\n\n    /**\n     * Get or set the elasticity on x axis. If this attribute is set to true, then the x axis will rescale to auto-fit the\n     * data range when filtered.\n     * @param {Boolean} [elasticX]\n     * @returns {Boolean|RowChart}\n     */\n    elasticX (elasticX) {\n        if (!arguments.length) {\n            return this._elasticX;\n        }\n        this._elasticX = elasticX;\n        return this;\n    }\n\n    /**\n     * Get or set the x offset (horizontal space to the top left corner of a row) for labels on a particular row chart.\n     * @param {Number} [labelOffsetX=10]\n     * @returns {Number|RowChart}\n     */\n    labelOffsetX (labelOffsetX) {\n        if (!arguments.length) {\n            return this._labelOffsetX;\n        }\n        this._labelOffsetX = labelOffsetX;\n        return this;\n    }\n\n    /**\n     * Get or set the y offset (vertical space to the top left corner of a row) for labels on a particular row chart.\n     * @param {Number} [labelOffsety=15]\n     * @returns {Number|RowChart}\n     */\n    labelOffsetY (labelOffsety) {\n        if (!arguments.length) {\n            return this._labelOffsetY;\n        }\n        this._labelOffsetY = labelOffsety;\n        this._hasLabelOffsetY = true;\n        return this;\n    }\n\n    /**\n     * Get of set the x offset (horizontal space between right edge of row and right edge or text.\n     * @param {Number} [titleLabelOffsetX=2]\n     * @returns {Number|RowChart}\n     */\n    titleLabelOffsetX (titleLabelOffsetX) {\n        if (!arguments.length) {\n            return this._titleLabelOffsetX;\n        }\n        this._titleLabelOffsetX = titleLabelOffsetX;\n        return this;\n    }\n\n    _isSelectedRow (d) {\n        return this.hasFilter(this.cappedKeyAccessor(d));\n    }\n}\n\nexport const rowChart = (parent, chartGroup) => new RowChart(parent, chartGroup);\n","import {symbol} from 'd3-shape';\nimport {select} from 'd3-selection';\nimport {brush} from 'd3-brush';\nimport {ascending} from 'd3-array'\n\nimport {CoordinateGridMixin} from '../base/coordinate-grid-mixin';\nimport {optionalTransition, transition} from '../core/core';\nimport {filters} from '../core/filters';\nimport {constants} from '../core/constants';\nimport {events} from '../core/events';\n\n/**\n * A scatter plot chart\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/scatter.html Scatter Chart}\n * - {@link http://dc-js.github.io/dc.js/examples/multi-scatter.html Multi-Scatter Chart}\n * @mixes CoordinateGridMixin\n */\nexport class ScatterPlot extends CoordinateGridMixin {\n    /**\n     * Create a Scatter Plot.\n     * @example\n     * // create a scatter plot under #chart-container1 element using the default global chart group\n     * var chart1 = new ScatterPlot('#chart-container1');\n     * // create a scatter plot under #chart-container2 element using chart group A\n     * var chart2 = new ScatterPlot('#chart-container2', 'chartGroupA');\n     * // create a sub-chart under a composite parent chart\n     * var chart3 = new ScatterPlot(compositeChart);\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor (parent, chartGroup) {\n        super();\n\n        this._symbol = symbol();\n\n        this._existenceAccessor = d => d.value;\n\n        const originalKeyAccessor = this.keyAccessor();\n        this.keyAccessor(d => originalKeyAccessor(d)[0]);\n        this.valueAccessor(d => originalKeyAccessor(d)[1]);\n        this.colorAccessor(() => this._groupName);\n\n        // this basically just counteracts the setting of its own key/value accessors\n        // see https://github.com/dc-js/dc.js/issues/702\n        this.title(d => `${this.keyAccessor()(d)},${this.valueAccessor()(d)}: ${this.existenceAccessor()(d)}`);\n\n        this._highlightedSize = 7;\n        this._symbolSize = 5;\n        this._excludedSize = 3;\n        this._excludedColor = null;\n        this._excludedOpacity = 1.0;\n        this._emptySize = 0;\n        this._emptyOpacity = 0;\n        this._nonemptyOpacity = 1;\n        this._emptyColor = null;\n        this._filtered = [];\n        this._canvas = null;\n        this._context = null;\n        this._useCanvas = false;\n\n\n        // Use a 2 dimensional brush\n        this.brush(brush());\n\n        this._symbol.size((d, i) => this._elementSize(d, i));\n\n        this.anchor(parent, chartGroup);\n    }\n\n    // Calculates element radius for canvas plot to be comparable to D3 area based symbol sizes\n    _canvasElementSize (d, isFiltered) {\n        if (!this._existenceAccessor(d)) {\n            return this._emptySize / Math.sqrt(Math.PI);\n        } else if (isFiltered) {\n            return this._symbolSize / Math.sqrt(Math.PI);\n        } else {\n            return this._excludedSize / Math.sqrt(Math.PI);\n        }\n    }\n\n    _elementSize (d, i) {\n        if (!this._existenceAccessor(d)) {\n            return Math.pow(this._emptySize, 2);\n        } else if (this._filtered[i]) {\n            return Math.pow(this._symbolSize, 2);\n        } else {\n            return Math.pow(this._excludedSize, 2);\n        }\n    }\n\n    _locator (d) {\n        return `translate(${this.x()(this.keyAccessor()(d))},${ \n            this.y()(this.valueAccessor()(d))})`;\n    }\n\n    filter (filter) {\n        if (!arguments.length) {\n            return super.filter();\n        }\n\n        return super.filter(filters.RangedTwoDimensionalFilter(filter));\n    }\n\n    /**\n     * Method that replaces original resetSvg and appropriately inserts canvas\n     * element along with svg element and sets their CSS properties appropriately\n     * so they are overlapped on top of each other.\n     * Remove the chart's SVGElements from the dom and recreate the container SVGElement.\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n     * @returns {SVGElement}\n     */\n    resetSvg () {\n        if (!this._useCanvas) {\n            return super.resetSvg();\n        } else {\n            super.resetSvg(); // Perform original svgReset inherited from baseMixin\n            this.select('canvas').remove(); // remove old canvas\n\n            const svgSel = this.svg();\n            const rootSel = this.root();\n\n            // Set root node to relative positioning and svg to absolute\n            rootSel.style('position', 'relative');\n            svgSel.style('position', 'relative');\n\n            // Check if SVG element already has any extra top/left CSS offsets\n            const svgLeft = isNaN(parseInt(svgSel.style('left'), 10)) ? 0 : parseInt(svgSel.style('left'), 10);\n            const svgTop = isNaN(parseInt(svgSel.style('top'), 10)) ? 0 : parseInt(svgSel.style('top'), 10);\n            const width = this.effectiveWidth();\n            const height = this.effectiveHeight();\n            const margins = this.margins(); // {top: 10, right: 130, bottom: 42, left: 42}\n\n            // Add the canvas element such that it perfectly overlaps the plot area of the scatter plot SVG\n            const devicePixelRatio = window.devicePixelRatio || 1;\n            this._canvas = this.root().append('canvas')\n                .attr('x', 0)\n                .attr('y', 0)\n                .attr('width', (width) * devicePixelRatio)\n                .attr('height', (height) * devicePixelRatio)\n                .style('width', `${width}px`)\n                .style('height', `${height}px`)\n                .style('position', 'absolute')\n                .style('top', `${margins.top + svgTop}px`)\n                .style('left', `${margins.left + svgLeft}px`)\n                .style('z-index', -1) // Place behind SVG\n                .style('pointer-events', 'none'); // Disable pointer events on canvas so SVG can capture brushing\n\n            // Define canvas context and set clipping path\n            this._context = this._canvas.node().getContext('2d');\n            this._context.scale(devicePixelRatio, devicePixelRatio);\n            this._context.rect(0, 0, width, height);\n            this._context.clip(); // Setup clipping path\n            this._context.imageSmoothingQuality = 'high';\n\n            return this.svg(); // Respect original return param for this.resetSvg;\n        }\n    }\n\n    _resizeCanvas () {\n        const width = this.effectiveWidth();\n        const height = this.effectiveHeight();\n\n        const devicePixelRatio = window.devicePixelRatio || 1;\n        this._canvas\n            .attr('width', (width) * devicePixelRatio)\n            .attr('height', (height) * devicePixelRatio)\n            .style('width', `${width}px`)\n            .style('height', `${height}px`);\n        this._context.scale(devicePixelRatio, devicePixelRatio);\n    }\n\n\n    /**\n     * Set or get whether to use canvas backend for plotting scatterPlot. Note that the\n     * canvas backend does not currently support\n     * {@link ScatterPlot#customSymbol customSymbol} or\n     * {@link ScatterPlot#symbol symbol} methods and is limited to always plotting\n     * with filled circles. Symbols are drawn with\n     * {@link ScatterPlot#symbolSize symbolSize} radius. By default, the SVG backend\n     * is used when `useCanvas` is set to `false`.\n     * @param {Boolean} [useCanvas=false]\n     * @return {Boolean|d3.selection}\n     */\n    useCanvas (useCanvas) {\n        if (!arguments.length) {\n            return this._useCanvas;\n        }\n        this._useCanvas = useCanvas;\n        return this;\n    }\n\n    /**\n     * Set or get canvas element. You should usually only ever use the get method as\n     * dc.js will handle canvas element generation.  Provides valid canvas only when\n     * {@link ScatterPlot#useCanvas useCanvas} is set to `true`\n     * @param {CanvasElement|d3.selection} [canvasElement]\n     * @return {CanvasElement|d3.selection}\n     */\n    canvas (canvasElement) {\n        if (!arguments.length) {\n            return this._canvas;\n        }\n        this._canvas = canvasElement;\n        return this;\n    }\n\n    /**\n     * Get canvas 2D context. Provides valid context only when\n     * {@link ScatterPlot#useCanvas useCanvas} is set to `true`\n     * @return {CanvasContext}\n     */\n    context () {\n        return this._context;\n    }\n\n    /*eslint complexity: [2,11] */\n    // Plots data on canvas element. If argument provided, assumes legend is\n    // currently being highlighted and modifies opacity/size of symbols accordingly\n    // @param {Object} [legendHighlightDatum] - Datum provided to legendHighlight method\n    _plotOnCanvas (legendHighlightDatum) {\n        this._resizeCanvas();\n        const context = this.context();\n        context.clearRect(0, 0, (context.canvas.width + 2) * 1, (context.canvas.height + 2) * 1);\n        const data = this.data();\n\n        // Draw the data on canvas\n        data.forEach((d, i) => {\n            const isFiltered = !this.filter() || this.filter().isFiltered([d.key[0], d.key[1]]);\n            // Calculate opacity for current data point\n            let cOpacity = 1;\n            if (!this._existenceAccessor(d)) {\n                cOpacity = this._emptyOpacity;\n            } else if (isFiltered) {\n                cOpacity = this._nonemptyOpacity;\n            } else {\n                cOpacity = this.excludedOpacity();\n            }\n            // Calculate color for current data point\n            let cColor = null;\n            if (this._emptyColor && !this._existenceAccessor(d)) {\n                cColor = this._emptyColor;\n            } else if (this.excludedColor() && !isFiltered) {\n                cColor = this.excludedColor();\n            } else {\n                cColor = this.getColor(d);\n            }\n            let cSize = this._canvasElementSize(d, isFiltered);\n\n            // Adjust params for data points if legend is highlighted\n            if (legendHighlightDatum) {\n                const isHighlighted = (cColor === legendHighlightDatum.color);\n                // Calculate opacity for current data point\n                const fadeOutOpacity = 0.1; // TODO: Make this programmatically setable\n                if (!isHighlighted) { // Fade out non-highlighted colors + highlighted colors outside filter\n                    cOpacity = fadeOutOpacity;\n                }\n                if (isHighlighted) { // Set size for highlighted color data points\n                    cSize = this._highlightedSize / Math.sqrt(Math.PI);\n                }\n            }\n\n            // Draw point on canvas\n            context.save();\n            context.globalAlpha = cOpacity;\n            context.beginPath();\n            context.arc(this.x()(this.keyAccessor()(d)), this.y()(this.valueAccessor()(d)), cSize, 0, 2 * Math.PI, true);\n            context.fillStyle = cColor;\n            context.fill();\n            // context.lineWidth = 0.5; // Commented out code to add stroke around scatter points if desired\n            // context.strokeStyle = '#333';\n            // context.stroke();\n            context.restore();\n        });\n    }\n\n    _plotOnSVG () {\n\n        const data = this.data();\n\n        if (this._keyboardAccessible) {\n            // sort based on the x value (key)\n            data.sort((a, b) => ascending(this.keyAccessor()(a), this.keyAccessor()(b)));\n        }\n\n        let symbols = this.chartBodyG().selectAll('path.symbol')\n            .data(data);\n\n        transition(symbols.exit(), this.transitionDuration(), this.transitionDelay())\n            .attr('opacity', 0).remove();\n\n        symbols = symbols\n            .enter()\n            .append('path')\n            .attr('class', 'symbol')\n            .classed('dc-tabbable', this._keyboardAccessible)\n            .attr('opacity', 0)\n            .attr('fill', this.getColor)\n            .attr('transform', d => this._locator(d))\n            .merge(symbols);\n\n        // no click handler - just tabindex for reading out of tooltips\n        if (this._keyboardAccessible) {\n            this._makeKeyboardAccessible();\n            symbols.order();\n        }\n\n        symbols.call(s => this._renderTitles(s, data));\n\n        symbols.each((d, i) => {\n            this._filtered[i] = !this.filter() || this.filter().isFiltered([this.keyAccessor()(d), this.valueAccessor()(d)]);\n        });\n\n        transition(symbols, this.transitionDuration(), this.transitionDelay())\n            .attr('opacity', (d, i) => {\n                if (!this._existenceAccessor(d)) {\n                    return this._emptyOpacity;\n                } else if (this._filtered[i]) {\n                    return this._nonemptyOpacity;\n                } else {\n                    return this.excludedOpacity();\n                }\n            })\n            .attr('fill', (d, i) => {\n                if (this._emptyColor && !this._existenceAccessor(d)) {\n                    return this._emptyColor;\n                } else if (this.excludedColor() && !this._filtered[i]) {\n                    return this.excludedColor();\n                } else {\n                    return this.getColor(d);\n                }\n            })\n            .attr('transform', d => this._locator(d))\n            .attr('d', this._symbol);\n    }\n\n    plotData () {\n        if (this._useCanvas) {\n            this._plotOnCanvas();\n        } else {\n            this._plotOnSVG();\n        }\n    }\n\n    _renderTitles (_symbol, _d) {\n        if (this.renderTitle()) {\n            _symbol.selectAll('title').remove();\n            _symbol.append('title').text(d => this.title()(d));\n        }\n    }\n\n    /**\n     * Get or set the existence accessor.  If a point exists, it is drawn with\n     * {@link ScatterPlot#symbolSize symbolSize} radius and\n     * opacity 1; if it does not exist, it is drawn with\n     * {@link ScatterPlot#emptySize emptySize} radius and opacity 0. By default,\n     * the existence accessor checks if the reduced value is truthy.\n     * @see {@link ScatterPlot#symbolSize symbolSize}\n     * @see {@link ScatterPlot#emptySize emptySize}\n     * @example\n     * // default accessor\n     * chart.existenceAccessor(function (d) { return d.value; });\n     * @param {Function} [accessor]\n     * @returns {Function|ScatterPlot}\n     */\n    existenceAccessor (accessor) {\n        if (!arguments.length) {\n            return this._existenceAccessor;\n        }\n        this._existenceAccessor = accessor;\n        return this;\n    }\n\n    /**\n     * Get or set the symbol type used for each point. By default the symbol is a circle (d3.symbolCircle).\n     * Type can be a constant or an accessor.\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_type symbol.type}\n     * @example\n     * // Circle type\n     * chart.symbol(d3.symbolCircle);\n     * // Square type\n     * chart.symbol(d3.symbolSquare);\n     * @param {Function} [type=d3.symbolCircle]\n     * @returns {Function|ScatterPlot}\n     */\n    symbol (type) {\n        if (!arguments.length) {\n            return this._symbol.type();\n        }\n        this._symbol.type(type);\n        return this;\n    }\n\n    /**\n     * Get or set the symbol generator. By default `ScatterPlot` will use\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol d3.symbol()}\n     * to generate symbols. `ScatterPlot` will set the\n     * {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_size symbol size accessor}\n     * on the symbol generator.\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol d3.symbol}\n     * @see {@link https://stackoverflow.com/questions/25332120/create-additional-d3-js-symbols Create additional D3.js symbols}\n     * @param {String|Function} [customSymbol=d3.symbol()]\n     * @returns {String|Function|ScatterPlot}\n     */\n    customSymbol (customSymbol) {\n        if (!arguments.length) {\n            return this._symbol;\n        }\n        this._symbol = customSymbol;\n        this._symbol.size((d, i) => this._elementSize(d, i));\n        return this;\n    }\n\n    /**\n     * Set or get radius for symbols.\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_size d3.symbol.size}\n     * @param {Number} [symbolSize=3]\n     * @returns {Number|ScatterPlot}\n     */\n    symbolSize (symbolSize) {\n        if (!arguments.length) {\n            return this._symbolSize;\n        }\n        this._symbolSize = symbolSize;\n        return this;\n    }\n\n    /**\n     * Set or get radius for highlighted symbols.\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_size d3.symbol.size}\n     * @param {Number} [highlightedSize=5]\n     * @returns {Number|ScatterPlot}\n     */\n    highlightedSize (highlightedSize) {\n        if (!arguments.length) {\n            return this._highlightedSize;\n        }\n        this._highlightedSize = highlightedSize;\n        return this;\n    }\n\n    /**\n     * Set or get size for symbols excluded from this chart's filter. If null, no\n     * special size is applied for symbols based on their filter status.\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_size d3.symbol.size}\n     * @param {Number} [excludedSize=null]\n     * @returns {Number|ScatterPlot}\n     */\n    excludedSize (excludedSize) {\n        if (!arguments.length) {\n            return this._excludedSize;\n        }\n        this._excludedSize = excludedSize;\n        return this;\n    }\n\n    /**\n     * Set or get color for symbols excluded from this chart's filter. If null, no\n     * special color is applied for symbols based on their filter status.\n     * @param {Number} [excludedColor=null]\n     * @returns {Number|ScatterPlot}\n     */\n    excludedColor (excludedColor) {\n        if (!arguments.length) {\n            return this._excludedColor;\n        }\n        this._excludedColor = excludedColor;\n        return this;\n    }\n\n    /**\n     * Set or get opacity for symbols excluded from this chart's filter.\n     * @param {Number} [excludedOpacity=1.0]\n     * @returns {Number|ScatterPlot}\n     */\n    excludedOpacity (excludedOpacity) {\n        if (!arguments.length) {\n            return this._excludedOpacity;\n        }\n        this._excludedOpacity = excludedOpacity;\n        return this;\n    }\n\n    /**\n     * Set or get radius for symbols when the group is empty.\n     * @see {@link https://github.com/d3/d3-shape/blob/master/README.md#symbol_size d3.symbol.size}\n     * @param {Number} [emptySize=0]\n     * @returns {Number|ScatterPlot}\n     */\n    emptySize (emptySize) {\n        if (!arguments.length) {\n            return this._emptySize;\n        }\n        this._emptySize = emptySize;\n        return this;\n    }\n\n    hiddenSize (emptySize) {\n        if (!arguments.length) {\n            return this.emptySize();\n        }\n        return this.emptySize(emptySize);\n    }\n\n    /**\n     * Set or get color for symbols when the group is empty. If null, just use the\n     * {@link ColorMixin#colors colorMixin.colors} color scale zero value.\n     * @param {String} [emptyColor=null]\n     * @return {String}\n     * @return {ScatterPlot}/\n     */\n    emptyColor (emptyColor) {\n        if (!arguments.length) {\n            return this._emptyColor;\n        }\n        this._emptyColor = emptyColor;\n        return this;\n    }\n\n    /**\n     * Set or get opacity for symbols when the group is empty.\n     * @param {Number} [emptyOpacity=0]\n     * @return {Number}\n     * @return {ScatterPlot}\n     */\n    emptyOpacity (emptyOpacity) {\n        if (!arguments.length) {\n            return this._emptyOpacity;\n        }\n        this._emptyOpacity = emptyOpacity;\n        return this;\n    }\n\n    /**\n     * Set or get opacity for symbols when the group is not empty.\n     * @param {Number} [nonemptyOpacity=1]\n     * @return {Number}\n     * @return {ScatterPlot}\n     */\n    nonemptyOpacity (nonemptyOpacity) {\n        if (!arguments.length) {\n            return this._emptyOpacity;\n        }\n        this._nonemptyOpacity = nonemptyOpacity;\n        return this;\n    }\n\n    legendables () {\n        return [{chart: this, name: this._groupName, color: this.getColor()}];\n    }\n\n    legendHighlight (d) {\n        if (this._useCanvas) {\n            this._plotOnCanvas(d); // Supply legend datum to plotOnCanvas\n        } else {\n            this._resizeSymbolsWhere(s => s.attr('fill') === d.color, this._highlightedSize);\n            this.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n                return select(this).attr('fill') !== d.color;\n            }).classed('fadeout', true);\n        }\n    }\n\n    legendReset (d) {\n        if (this._useCanvas) {\n            this._plotOnCanvas(d); // Supply legend datum to plotOnCanvas\n        } else {\n            this._resizeSymbolsWhere(s => s.attr('fill') === d.color, this._symbolSize);\n            this.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n                return select(this).attr('fill') !== d.color;\n            }).classed('fadeout', false);\n        }\n    }\n\n    _resizeSymbolsWhere (condition, size) {\n        const symbols = this.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return condition(select(this));\n        });\n        const oldSize = this._symbol.size();\n        this._symbol.size(Math.pow(size, 2));\n        transition(symbols, this.transitionDuration(), this.transitionDelay()).attr('d', this._symbol);\n        this._symbol.size(oldSize);\n    }\n    createBrushHandlePaths () {\n        // no handle paths for poly-brushes\n    }\n\n    extendBrush (brushSelection) {\n        if (this.round()) {\n            brushSelection[0] = brushSelection[0].map(this.round());\n            brushSelection[1] = brushSelection[1].map(this.round());\n        }\n        return brushSelection;\n    }\n\n    brushIsEmpty (brushSelection) {\n        return !brushSelection || brushSelection[0][0] >= brushSelection[1][0] || brushSelection[0][1] >= brushSelection[1][1];\n    }\n\n    _brushing (evt) {\n        if (this._ignoreBrushEvents) {\n            return;\n        }\n\n        let brushSelection = evt.selection;\n\n        // Testing with pixels is more reliable\n        let brushIsEmpty = this.brushIsEmpty(brushSelection);\n\n        if (brushSelection) {\n            brushSelection = brushSelection.map(point => point.map((coord, i) => {\n                const scale = i === 0 ? this.x() : this.y();\n                return scale.invert(coord);\n            }));\n\n            brushSelection = this.extendBrush(brushSelection);\n\n            // The rounding process might have made brushSelection empty, so we need to recheck\n            brushIsEmpty = brushIsEmpty && this.brushIsEmpty(brushSelection);\n        }\n\n        this.redrawBrush(brushSelection, false);\n\n        const ranged2DFilter = brushIsEmpty ? null : filters.RangedTwoDimensionalFilter(brushSelection);\n\n        events.trigger(() => {\n            this.replaceFilter(ranged2DFilter);\n            this.redrawGroup();\n        }, constants.EVENT_DELAY);\n    }\n\n    redrawBrush (brushSelection, doTransition) {\n        // override default x axis brush from parent chart\n        this._gBrush = this.gBrush();\n\n        if (this.brushOn() && this._gBrush) {\n            if (this.resizing()) {\n                this.setBrushExtents(doTransition);\n            }\n\n            if (!brushSelection) {\n                this._withoutBrushEvents(() => {\n                    this._gBrush\n                        .call(this.brush().move, brushSelection);\n                });\n            } else {\n                brushSelection = brushSelection.map(point => point.map((coord, i) => {\n                    const scale = i === 0 ? this.x() : this.y();\n                    return scale(coord);\n                }));\n\n                const gBrush =\n                    optionalTransition(doTransition, this.transitionDuration(), this.transitionDelay())(this._gBrush);\n\n                this._withoutBrushEvents(() => {\n                    gBrush\n                        .call(this.brush().move, brushSelection);\n                });\n            }\n        }\n\n        this.fadeDeselectedArea(brushSelection);\n    }\n}\n\nexport const scatterPlot = (parent, chartGroup) => new ScatterPlot(parent, chartGroup);\n","import {events} from '../core/events';\nimport {BaseMixin} from '../base/base-mixin';\nimport {logger} from '../core/logger';\nimport {d3compat} from '../core/config';\n\nconst SELECT_CSS_CLASS = 'dc-select-menu';\nconst OPTION_CSS_CLASS = 'dc-select-option';\n\n/**\n * The select menu is a simple widget designed to filter a dimension by selecting an option from\n * an HTML `<select/>` menu. The menu can be optionally turned into a multiselect.\n * @mixes BaseMixin\n */\nexport class SelectMenu extends BaseMixin {\n    /**\n     * Create a Select Menu.\n     * @example\n     * // create a select menu under #select-container using the default global chart group\n     * var select = new SelectMenu('#select-container')\n     *                .dimension(states)\n     *                .group(stateGroup);\n     * // the option text can be set via the title() function\n     * // by default the option text is '`key`: `value`'\n     * select.title(function (d){\n     *     return 'STATE: ' + d.key;\n     * })\n     * @param {String|node|d3.selection|CompositeChart} parent - Any valid\n     * [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this widget should be placed in.\n     * Interaction with the widget will only trigger events and redraws within its group.\n     */\n    constructor (parent, chartGroup) {\n        super();\n\n        this._select = undefined;\n        this._promptText = 'Select all';\n        this._multiple = false;\n        this._promptValue = null;\n        this._numberVisible = null;\n\n        this.data(group => group.all().filter(this._filterDisplayed));\n\n        this._filterDisplayed = d => this.valueAccessor()(d) > 0;\n\n        this._order = (a, b) => {\n            if (this.keyAccessor()(a) > this.keyAccessor()(b)) {\n                return 1;\n            }\n            if (this.keyAccessor()(a) < this.keyAccessor()(b)) {\n                return -1;\n            }\n            return 0;\n        };\n\n        this.anchor(parent, chartGroup);\n    }\n\n    _doRender () {\n        this.select('select').remove();\n        this._select = this.root().append('select')\n            .classed(SELECT_CSS_CLASS, true);\n        this._select.append('option').text(this._promptText).attr('value', '');\n\n        this._doRedraw();\n        return this;\n    }\n\n    _doRedraw () {\n        this._setAttributes();\n        this._renderOptions();\n        // select the option(s) corresponding to current filter(s)\n        if (this.hasFilter() && this._multiple) {\n            this._select.selectAll('option')\n                .property('selected', d => typeof d !== 'undefined' && this.filters().indexOf(String(this.keyAccessor()(d))) >= 0);\n        } else if (this.hasFilter()) {\n            this._select.property('value', this.filter());\n        } else {\n            this._select.property('value', '');\n        }\n        return this;\n    }\n\n    _renderOptions () {\n        const options = this._select.selectAll(`option.${OPTION_CSS_CLASS}`)\n            .data(this.data(), d => this.keyAccessor()(d));\n\n        options.exit().remove();\n\n        options.enter()\n            .append('option')\n            .classed(OPTION_CSS_CLASS, true)\n            .attr('value', d => this.keyAccessor()(d))\n            .merge(options)\n            .text(this.title());\n\n        this._select.selectAll(`option.${OPTION_CSS_CLASS}`).sort(this._order);\n\n        this._select.on('change', d3compat.eventHandler((d, evt) => this._onChange(d, evt)));\n    }\n\n    _onChange (_d, evt) {\n        let values;\n\n        const target = evt.target;\n\n        if (target.selectedOptions) {\n            const selectedOptions = Array.prototype.slice.call(target.selectedOptions);\n            values = selectedOptions.map(d => d.value);\n        } else { // IE and other browsers do not support selectedOptions\n            // adapted from this polyfill: https://gist.github.com/brettz9/4212217\n            const options = [].slice.call(evt.target.options);\n            values = options.filter(option => option.selected).map(option => option.value);\n        }\n        // console.log(values);\n        // check if only prompt option is selected\n        if (values.length === 1 && values[0] === '') {\n            values = this._promptValue || null;\n        } else if (!this._multiple && values.length === 1) {\n            values = values[0];\n        }\n        this.onChange(values);\n    }\n\n    onChange (val) {\n        if (val && this._multiple) {\n            this.replaceFilter([val]);\n        } else if (val) {\n            this.replaceFilter(val);\n        } else {\n            this.filterAll();\n        }\n        events.trigger(() => {\n            this.redrawGroup();\n        });\n    }\n\n    _setAttributes () {\n        if (this._multiple) {\n            this._select.attr('multiple', true);\n        } else {\n            this._select.attr('multiple', null);\n        }\n        if (this._numberVisible !== null) {\n            this._select.attr('size', this._numberVisible);\n        } else {\n            this._select.attr('size', null);\n        }\n    }\n\n    /**\n     * Get or set the function that controls the ordering of option tags in the\n     * select menu. By default options are ordered by the group key in ascending\n     * order.\n     * @param {Function} [order]\n     * @returns {Function|SelectMenu}\n     * @example\n     * // order by the group's value\n     * chart.order(function (a,b) {\n     *     return a.value > b.value ? 1 : b.value > a.value ? -1 : 0;\n     * });\n     */\n    order (order) {\n        if (!arguments.length) {\n            return this._order;\n        }\n        this._order = order;\n        return this;\n    }\n\n    /**\n     * Get or set the text displayed in the options used to prompt selection.\n     * @param {String} [promptText='Select all']\n     * @returns {String|SelectMenu}\n     * @example\n     * chart.promptText('All states');\n     */\n    promptText (promptText) {\n        if (!arguments.length) {\n            return this._promptText;\n        }\n        this._promptText = promptText;\n        return this;\n    }\n\n    /**\n     * Get or set the function that filters option tags prior to display. By default options\n     * with a value of < 1 are not displayed.\n     * @param {function} [filterDisplayed]\n     * @returns {Function|SelectMenu}\n     * @example\n     * // display all options override the `filterDisplayed` function:\n     * chart.filterDisplayed(function () {\n     *     return true;\n     * });\n     */\n    filterDisplayed (filterDisplayed) {\n        if (!arguments.length) {\n            return this._filterDisplayed;\n        }\n        this._filterDisplayed = filterDisplayed;\n        return this;\n    }\n\n    /**\n     * Controls the type of select menu. Setting it to true converts the underlying\n     * HTML tag into a multiple select.\n     * @param {boolean} [multiple=false]\n     * @returns {boolean|SelectMenu}\n     * @example\n     * chart.multiple(true);\n     */\n    multiple (multiple) {\n        if (!arguments.length) {\n            return this._multiple;\n        }\n        this._multiple = multiple;\n\n        return this;\n    }\n\n    /**\n     * Controls the default value to be used for\n     * [dimension.filter](https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter)\n     * when only the prompt value is selected. If `null` (the default), no filtering will occur when\n     * just the prompt is selected.\n     * @param {?*} [promptValue=null]\n     * @returns {*|SelectMenu}\n     */\n    promptValue (promptValue) {\n        if (!arguments.length) {\n            return this._promptValue;\n        }\n        this._promptValue = promptValue;\n\n        return this;\n    }\n\n    /**\n     * Controls the number of items to show in the select menu, when `.multiple()` is true. This\n     * controls the [`size` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#Attributes) of\n     * the `select` element. If `null` (the default), uses the browser's default height.\n     * @param {?number} [numberVisible=null]\n     * @returns {number|SelectMenu}\n     * @example\n     * chart.numberVisible(10);\n     */\n    numberVisible (numberVisible) {\n        if (!arguments.length) {\n            return this._numberVisible;\n        }\n        this._numberVisible = numberVisible;\n\n        return this;\n    }\n\n    size (numberVisible) {\n        logger.warnOnce('selectMenu.size is ambiguous - use selectMenu.numberVisible instead');\n        if (!arguments.length) {\n            return this.numberVisible();\n        }\n        return this.numberVisible(numberVisible);\n    }\n}\n\nexport const selectMenu = (parent, chartGroup) => new SelectMenu(parent, chartGroup);\n","import {ascending} from 'd3-array';\n\nimport {CompositeChart} from './composite-chart';\nimport {lineChart} from './line-chart';\nimport {utils} from '../core/utils';\nimport {d3compat} from '../core/config';\n\n/**\n * A series chart is a chart that shows multiple series of data overlaid on one chart, where the\n * series is specified in the data. It is a specialization of Composite Chart and inherits all\n * composite features other than recomposing the chart.\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/series.html Series Chart}\n * @mixes CompositeChart\n */\nexport class SeriesChart extends CompositeChart {\n    /**\n     * Create a Series Chart.\n     * @example\n     * // create a series chart under #chart-container1 element using the default global chart group\n     * var seriesChart1 = new SeriesChart(\"#chart-container1\");\n     * // create a series chart under #chart-container2 element using chart group A\n     * var seriesChart2 = new SeriesChart(\"#chart-container2\", \"chartGroupA\");\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor (parent, chartGroup) {\n        super(parent, chartGroup);\n\n        this._keySort = (a, b) => ascending(this.keyAccessor()(a), this.keyAccessor()(b));\n\n        this._charts = {};\n        this._chartFunction = lineChart;\n        this._chartGroup = chartGroup;\n        this._seriesAccessor = undefined;\n        this._seriesSort = ascending;\n        this._valueSort = this._keySort;\n\n        this._mandatoryAttributes().push('seriesAccessor', 'chart');\n        this.shareColors(true);\n    }\n\n    _compose (subChartArray) {\n        super.compose(subChartArray);\n    }\n\n    compose (subChartArray) {\n        throw new Error('Not supported for this chart type');\n    }\n\n    _preprocessData () {\n        const keep = [];\n        let childrenChanged;\n\n        const nesting = d3compat.nester({\n            key: this._seriesAccessor,\n            sortKeys: this._seriesSort,\n            sortValues: this._valueSort,\n            entries: this.data()\n        });\n\n        const children =\n            nesting.map((sub, i) => {\n                const subChart = this._charts[sub.key] || this._chartFunction(this, this._chartGroup , sub.key, i);\n                if (!this._charts[sub.key]) {\n                    childrenChanged = true;\n                }\n                this._charts[sub.key] = subChart;\n                keep.push(sub.key);\n                return subChart\n                    .dimension(this.dimension())\n                    .group({\n                        all: typeof sub.values === 'function' ? sub.values : utils.constant(sub.values)\n                    }, sub.key)\n                    .keyAccessor(this.keyAccessor())\n                    .valueAccessor(this.valueAccessor())\n                    .brushOn(false);\n            });\n        // this works around the fact compositeChart doesn't really\n        // have a removal interface\n        Object.keys(this._charts)\n            .filter(c => keep.indexOf(c) === -1)\n            .forEach(c => {\n                this._clearChart(c);\n                childrenChanged = true;\n            });\n        this._compose(children);\n        if (childrenChanged && this.legend()) {\n            this.legend().render();\n        }\n    }\n\n    _clearChart (c) {\n        if (this._charts[c].g()) {\n            this._charts[c].g().remove();\n        }\n        delete this._charts[c];\n    }\n\n    _resetChildren () {\n        Object.keys(this._charts).map(this._clearChart.bind(this));\n        this._charts = {};\n    }\n\n    /**\n     * Get or set the chart function, which generates the child charts.\n     * @example\n     * // put curve on the line charts used for the series\n     * chart.chart(function(c) { return new LineChart(c).curve(d3.curveBasis); })\n     * // do a scatter series chart\n     * chart.chart(anchor => new ScatterPlot(anchor))\n     * @param {Function} [chartFunction= (anchor) =>  new LineChart(anchor)]\n     * @returns {Function|SeriesChart}\n     */\n    chart (chartFunction) {\n        if (!arguments.length) {\n            return this._chartFunction;\n        }\n        this._chartFunction = chartFunction;\n        this._resetChildren();\n        return this;\n    }\n\n    /**\n     * **mandatory**\n     *\n     * Get or set accessor function for the displayed series. Given a datum, this function\n     * should return the series that datum belongs to.\n     * @example\n     * // simple series accessor\n     * chart.seriesAccessor(function(d) { return \"Expt: \" + d.key[0]; })\n     * @param {Function} [accessor]\n     * @returns {Function|SeriesChart}\n     */\n    seriesAccessor (accessor) {\n        if (!arguments.length) {\n            return this._seriesAccessor;\n        }\n        this._seriesAccessor = accessor;\n        this._resetChildren();\n        return this;\n    }\n\n    /**\n     * Get or set a function to sort the list of series by, given series values.\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#descending d3.descending}\n     * @example\n     * chart.seriesSort(d3.descending);\n     * @param {Function} [sortFunction=d3.ascending]\n     * @returns {Function|SeriesChart}\n     */\n    seriesSort (sortFunction) {\n        if (!arguments.length) {\n            return this._seriesSort;\n        }\n        this._seriesSort = sortFunction;\n        this._resetChildren();\n        return this;\n    }\n\n    /**\n     * Get or set a function to sort each series values by. By default this is the key accessor which,\n     * for example, will ensure a lineChart series connects its points in increasing key/x order,\n     * rather than haphazardly.\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-array/blob/master/README.md#descending d3.descending}\n     * @example\n     * // Default value sort\n     * _chart.valueSort(function keySort (a, b) {\n     *     return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n     * });\n     * @param {Function} [sortFunction]\n     * @returns {Function|SeriesChart}\n     */\n    valueSort (sortFunction) {\n        if (!arguments.length) {\n            return this._valueSort;\n        }\n        this._valueSort = sortFunction;\n        this._resetChildren();\n        return this;\n    }\n\n}\n\nexport const seriesChart = (parent, chartGroup) => new SeriesChart(parent, chartGroup);\n","import {hierarchy, partition} from 'd3-hierarchy';\nimport {ascending, min, sum} from 'd3-array';\nimport {arc} from 'd3-shape';\nimport {select} from 'd3-selection';\nimport {interpolate} from 'd3-interpolate';\n\nimport {transition} from '../core/core';\nimport {filters} from '../core/filters';\nimport {utils, pluck} from '../core/utils';\nimport {d3compat} from '../core/config';\nimport {events} from '../core/events';\nimport {ColorMixin} from '../base/color-mixin';\nimport {BaseMixin} from '../base/base-mixin';\nimport {constants} from '../core/constants';\nimport {BadArgumentException} from '../core/bad-argument-exception';\n\nconst DEFAULT_MIN_ANGLE_FOR_LABEL = 0.5;\n\n/**\n * The sunburst chart implementation is usually used to visualize a small tree distribution.  The sunburst\n * chart uses keyAccessor to determine the slices, and valueAccessor to calculate the size of each\n * slice relative to the sum of all values. Slices are ordered by {@link BaseMixin#ordering ordering} which defaults to sorting\n * by key.\n *\n * The keys used in the sunburst chart should be arrays, representing paths in the tree.\n *\n * When filtering, the sunburst chart creates instances of {@link Filters.HierarchyFilter HierarchyFilter}.\n *\n * @mixes CapMixin\n * @mixes ColorMixin\n * @mixes BaseMixin\n */\nexport class SunburstChart extends ColorMixin(BaseMixin) {\n    /**\n     * Create a Sunburst Chart\n     * @example\n     * // create a sunburst chart under #chart-container1 element using the default global chart group\n     * var chart1 = new SunburstChart('#chart-container1');\n     * // create a sunburst chart under #chart-container2 element using chart group A\n     * var chart2 = new SunburstChart('#chart-container2', 'chartGroupA');\n     *\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor (parent, chartGroup) {\n        super();\n\n        this._sliceCssClass = 'pie-slice';\n        this._emptyCssClass = 'empty-chart';\n        this._emptyTitle = 'empty';\n\n        this._radius = undefined;\n        this._givenRadius = undefined; // given radius, if any\n        this._innerRadius = 0;\n        this._ringSizes = null;\n\n        this._g = undefined;\n        this._cx = undefined;\n        this._cy = undefined;\n        this._minAngleForLabel = DEFAULT_MIN_ANGLE_FOR_LABEL;\n        this._externalLabelRadius = undefined;\n\n        this.colorAccessor(d => this.keyAccessor()(d));\n\n        // override cap mixin\n        this.ordering(pluck('key'));\n\n        this.title(d => `${this.keyAccessor()(d)}: ${this._extendedValueAccessor(d)}`);\n\n        this.label(d => this.keyAccessor()(d));\n        this.renderLabel(true);\n\n        this.transitionDuration(350);\n\n        this.anchor(parent, chartGroup);\n    }\n\n    // Handle cases if value corresponds to generated parent nodes\n    _extendedValueAccessor (d) {\n        if (d.path) {\n            return d.value;\n        }\n        return this.valueAccessor()(d);\n    }\n\n    _scaleRadius (ringIndex, y) {\n        if (ringIndex === 0) {\n            return this._innerRadius;\n        } else {\n            const customRelativeRadius = sum(this.ringSizes().relativeRingSizes.slice(0, ringIndex));\n            const scaleFactor = (ringIndex * (1 / this.ringSizes().relativeRingSizes.length)) /\n                  customRelativeRadius;\n            const standardRadius = (y - this.ringSizes().rootOffset) /\n                  (1 - this.ringSizes().rootOffset) * (this._radius - this._innerRadius);\n            return this._innerRadius + standardRadius / scaleFactor;\n        }\n    }\n\n    _doRender () {\n        this.resetSvg();\n\n        this._g = this.svg()\n            .append('g')\n            .attr('transform', `translate(${this.cx()},${this.cy()})`);\n\n        this._drawChart();\n\n        return this;\n    }\n\n    _drawChart () {\n        // set radius from chart size if none given, or if given radius is too large\n        const maxRadius = min([this.width(), this.height()]) / 2;\n        this._radius = this._givenRadius && this._givenRadius < maxRadius ? this._givenRadius : maxRadius;\n\n        const arcs = this._buildArcs();\n\n        let partitionedNodes, cdata;\n        // if we have data...\n        if (sum(this.data(), this.valueAccessor())) {\n            cdata = utils.toHierarchy(this.data(), this.valueAccessor());\n            partitionedNodes = this._partitionNodes(cdata);\n            // First one is the root, which is not needed\n            partitionedNodes.nodes.shift();\n            this._g.classed(this._emptyCssClass, false);\n        } else {\n            // otherwise we'd be getting NaNs, so override\n            // note: abuse others for its ignoring the value accessor\n            cdata = utils.toHierarchy([], d => d.value);\n            partitionedNodes = this._partitionNodes(cdata);\n            this._g.classed(this._emptyCssClass, true);\n        }\n        this.ringSizes().rootOffset = partitionedNodes.rootOffset;\n        this.ringSizes().relativeRingSizes = partitionedNodes.relativeRingSizes;\n\n        if (this._g) {\n            const slices = this._g.selectAll(`g.${this._sliceCssClass}`)\n                .data(partitionedNodes.nodes);\n            this._createElements(slices, arcs, partitionedNodes.nodes);\n\n            this._updateElements(partitionedNodes.nodes, arcs);\n\n            this._removeElements(slices);\n\n            this._highlightFilter();\n\n            transition(this._g, this.transitionDuration(), this.transitionDelay())\n                .attr('transform', `translate(${this.cx()},${this.cy()})`);\n        }\n    }\n\n    _createElements (slices, arcs, sunburstData) {\n        const slicesEnter = this._createSliceNodes(slices);\n\n        this._createSlicePath(slicesEnter, arcs);\n        this._createTitles(slicesEnter);\n        this._createLabels(sunburstData, arcs);\n    }\n\n    _createSliceNodes (slices) {\n        return slices\n            .enter()\n            .append('g')\n            .attr('class', (d, i) => `${this._sliceCssClass\n            } _${i} ${\n                this._sliceCssClass}-level-${d.depth}`);\n    }\n\n    _createSlicePath (slicesEnter, arcs) {\n        const slicePath = slicesEnter.append('path')\n            .attr('fill', (d, i) => this._fill(d, i))\n            .on('click', d3compat.eventHandler(d => this.onClick(d)))\n            .classed('dc-tabbable', this._keyboardAccessible)\n            .attr('d', d => this._safeArc(arcs, d));\n\n        if (this._keyboardAccessible) {\n            this._makeKeyboardAccessible(this.onClick);\n        }\n\n        const tranNodes = transition(slicePath, this.transitionDuration());\n        if (tranNodes.attrTween) {\n            const chart = this;\n            tranNodes.attrTween('d', function (d) {\n                return chart._tweenSlice(d, this);\n            });\n        }\n    }\n\n    _createTitles (slicesEnter) {\n        if (this.renderTitle()) {\n            slicesEnter.append('title').text(d => this.title()(d));\n        }\n    }\n\n    _positionLabels (labelsEnter, arcs) {\n        transition(labelsEnter, this.transitionDuration())\n            .attr('transform', d => this._labelPosition(d, arcs))\n            .attr('text-anchor', 'middle')\n            .text(d => {\n                // position label...\n                if (this._sliceHasNoData(d) || this._sliceTooSmall(d)) {\n                    return '';\n                }\n                return this.label()(d);\n            });\n    }\n\n    _createLabels (sunburstData, arcs) {\n        if (this.renderLabel()) {\n            const labels = this._g.selectAll(`text.${this._sliceCssClass}`)\n                .data(sunburstData);\n\n            labels.exit().remove();\n\n            const labelsEnter = labels\n                .enter()\n                .append('text')\n                .attr('class', (d, i) => {\n                    let classes = `${this._sliceCssClass} _${i}`;\n                    if (this._externalLabelRadius) {\n                        classes += ' external';\n                    }\n                    return classes;\n                })\n                .on('click', d3compat.eventHandler(d => this.onClick(d)));\n            this._positionLabels(labelsEnter, arcs);\n        }\n    }\n\n    _updateElements (sunburstData, arcs) {\n        this._updateSlicePaths(sunburstData, arcs);\n        this._updateLabels(sunburstData, arcs);\n        this._updateTitles(sunburstData);\n    }\n\n    _updateSlicePaths (sunburstData, arcs) {\n        const slicePaths = this._g.selectAll(`g.${this._sliceCssClass}`)\n            .data(sunburstData)\n            .select('path')\n            .attr('d', (d, i) => this._safeArc(arcs, d));\n        const tranNodes = transition(slicePaths, this.transitionDuration());\n        if (tranNodes.attrTween) {\n            const chart = this;\n            tranNodes.attrTween('d', function (d) {\n                return chart._tweenSlice(d, this);\n            });\n        }\n        tranNodes.attr('fill', (d, i) => this._fill(d, i));\n    }\n\n    _updateLabels (sunburstData, arcs) {\n        if (this.renderLabel()) {\n            const labels = this._g.selectAll(`text.${this._sliceCssClass}`)\n                .data(sunburstData);\n            this._positionLabels(labels, arcs);\n        }\n    }\n\n    _updateTitles (sunburstData) {\n        if (this.renderTitle()) {\n            this._g.selectAll(`g.${this._sliceCssClass}`)\n                .data(sunburstData)\n                .select('title')\n                .text(d => this.title()(d));\n        }\n    }\n\n    _removeElements (slices) {\n        slices.exit().remove();\n    }\n\n    _highlightFilter () {\n        const chart = this;\n        if (chart.hasFilter()) {\n            chart.selectAll(`g.${chart._sliceCssClass}`).each(function (d) {\n                if (chart._isSelectedSlice(d)) {\n                    chart.highlightSelected(this);\n                } else {\n                    chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            chart.selectAll(`g.${chart._sliceCssClass}`).each(function (d) {\n                chart.resetHighlight(this);\n            });\n        }\n    }\n\n    /**\n     * Get or set the inner radius of the sunburst chart. If the inner radius is greater than 0px then the\n     * sunburst chart will be rendered as a doughnut chart. Default inner radius is 0px.\n     * @param {Number} [innerRadius=0]\n     * @returns {Number|SunburstChart}\n     */\n    innerRadius (innerRadius) {\n        if (!arguments.length) {\n            return this._innerRadius;\n        }\n        this._innerRadius = innerRadius;\n        return this;\n    }\n\n    /**\n     * Get or set the outer radius. If the radius is not set, it will be half of the minimum of the\n     * chart width and height.\n     * @param {Number} [radius]\n     * @returns {Number|SunburstChart}\n     */\n    radius (radius) {\n        if (!arguments.length) {\n            return this._givenRadius;\n        }\n        this._givenRadius = radius;\n        return this;\n    }\n\n    /**\n     * Get or set center x coordinate position. Default is center of svg.\n     * @param {Number} [cx]\n     * @returns {Number|SunburstChart}\n     */\n    cx (cx) {\n        if (!arguments.length) {\n            return (this._cx || this.width() / 2);\n        }\n        this._cx = cx;\n        return this;\n    }\n\n    /**\n     * Get or set center y coordinate position. Default is center of svg.\n     * @param {Number} [cy]\n     * @returns {Number|SunburstChart}\n     */\n    cy (cy) {\n        if (!arguments.length) {\n            return (this._cy || this.height() / 2);\n        }\n        this._cy = cy;\n        return this;\n    }\n\n    /**\n     * Get or set the minimal slice angle for label rendering. Any slice with a smaller angle will not\n     * display a slice label.\n     * @param {Number} [minAngleForLabel=0.5]\n     * @returns {Number|SunburstChart}\n     */\n    minAngleForLabel (minAngleForLabel) {\n        if (!arguments.length) {\n            return this._minAngleForLabel;\n        }\n        this._minAngleForLabel = minAngleForLabel;\n        return this;\n    }\n\n    /**\n     * Title to use for the only slice when there is no data.\n     * @param {String} [title]\n     * @returns {String|SunburstChart}\n     */\n    emptyTitle (title) {\n        if (arguments.length === 0) {\n            return this._emptyTitle;\n        }\n        this._emptyTitle = title;\n        return this;\n    }\n\n    /**\n     * Position slice labels offset from the outer edge of the chart.\n     *\n     * The argument specifies the extra radius to be added for slice labels.\n     * @param {Number} [externalLabelRadius]\n     * @returns {Number|SunburstChart}\n     */\n    externalLabels (externalLabelRadius) {\n        if (arguments.length === 0) {\n            return this._externalLabelRadius;\n        } else if (externalLabelRadius) {\n            this._externalLabelRadius = externalLabelRadius;\n        } else {\n            this._externalLabelRadius = undefined;\n        }\n\n        return this;\n    }\n\n    /**\n     * Constructs the default RingSizes parameter for {@link SunburstChart#ringSizes ringSizes()},\n     * which makes the rings narrower as they get farther away from the center.\n     *\n     * Can be used as a parameter to ringSizes() to reset the default behavior, or modified for custom ring sizes.\n     *\n     * @example\n     *   var chart = new dc.SunburstChart(...);\n     *   chart.ringSizes(chart.defaultRingSizes())\n     * @returns {RingSizes}\n     */\n    defaultRingSizes () {\n        return {\n            partitionDy: () => this._radius * this._radius,\n            scaleInnerRadius: d => d.data.path && d.data.path.length === 1 ?\n                this._innerRadius :\n                Math.sqrt(d.y0),\n            scaleOuterRadius: d => Math.sqrt(d.y1),\n            relativeRingSizesFunction: () => []\n        };\n    }\n\n    /**\n     * Constructs a RingSizes parameter for {@link SunburstChart#ringSizes ringSizes()}\n     * that will make the chart rings equally wide.\n     *\n     * @example\n     *   var chart = new dc.SunburstChart(...);\n     *   chart.ringSizes(chart.equalRingSizes())\n     * @returns {RingSizes}\n     */\n    equalRingSizes () {\n        return this.relativeRingSizes(\n            ringCount => {\n                const result = [];\n                for (let i = 0; i < ringCount; i++) {\n                    result.push(1 / ringCount);\n                }\n                return result;\n            }\n        );\n    }\n\n    /**\n     * Constructs a RingSizes parameter for {@link SunburstChart#ringSizes ringSizes()} using the given function\n     * to determine each rings width.\n     *\n     * * The function must return an array containing portion values for each ring/level of the chart.\n     * * The length of the array must match the number of rings of the chart at runtime, which is provided as the only\n     *   argument.\n     * * The sum of all portions from the array must be 1 (100%).\n     *\n     * @example\n     * // specific relative portions (the number of rings (3) is known in this case)\n     * chart.ringSizes(chart.relativeRingSizes(function (ringCount) {\n     *     return [.1, .3, .6];\n     * });\n     * @param {Function} [relativeRingSizesFunction]\n     * @returns {RingSizes}\n     */\n    relativeRingSizes (relativeRingSizesFunction) {\n        function assertPortionsArray (relativeSizes, numberOfRings) {\n            if (!Array.isArray(relativeSizes)) {\n                throw new BadArgumentException('relativeRingSizes function must return an array');\n            }\n\n            const portionsSum = sum(relativeSizes);\n            if (Math.abs(portionsSum - 1) > constants.NEGLIGIBLE_NUMBER) {\n                throw new BadArgumentException(\n                    `relativeRingSizes : portions must add up to 1, but sum was ${portionsSum}`);\n            }\n\n            if (relativeSizes.length !== numberOfRings) {\n                throw new BadArgumentException(\n                    `relativeRingSizes : number of values must match number of rings (${\n                        numberOfRings}) but was ${relativeSizes.length}`);\n            }\n        }\n        return {\n            partitionDy: () => 1,\n            scaleInnerRadius: d => this._scaleRadius(d.data.path.length - 1, d.y0),\n            scaleOuterRadius: d => this._scaleRadius(d.data.path.length, d.y1),\n            relativeRingSizesFunction: ringCount => {\n                const result = relativeRingSizesFunction(ringCount);\n                assertPortionsArray(result, ringCount);\n                return result;\n            }\n        };\n    }\n\n    /**\n     * Get or set the strategy to use for sizing the charts rings.\n     *\n     * There are three strategies available\n     * * {@link SunburstChart#defaultRingSizes `defaultRingSizes`}: the rings get narrower farther away from the center\n     * * {@link SunburstChart#relativeRingSizes `relativeRingSizes`}: set the ring sizes as portions of 1\n     * * {@link SunburstChart#equalRingSizes `equalRingSizes`}: the rings are equally wide\n     *\n     * You can modify the returned strategy, or create your own, for custom ring sizing.\n     *\n     * RingSizes is a duck-typed interface that must support the following methods:\n     * * `partitionDy()`: used for\n     *   {@link https://github.com/d3/d3-hierarchy/blob/v1.1.9/README.md#partition_size `d3.partition.size`}\n     * * `scaleInnerRadius(d)`: takes datum and returns radius for\n     *    {@link https://github.com/d3/d3-shape/blob/v1.3.7/README.md#arc_innerRadius `d3.arc.innerRadius`}\n     * * `scaleOuterRadius(d)`: takes datum and returns radius for\n     *    {@link https://github.com/d3/d3-shape/blob/v1.3.7/README.md#arc_outerRadius `d3.arc.outerRadius`}\n     * * `relativeRingSizesFunction(ringCount)`: takes ring count and returns an array of portions that\n     *   must add up to 1\n     *\n     * @example\n     * // make rings equally wide\n     * chart.ringSizes(chart.equalRingSizes())\n     * // reset to default behavior\n     * chart.ringSizes(chart.defaultRingSizes()))\n     * @param {RingSizes} ringSizes\n     * @returns {Object|SunburstChart}\n     */\n    ringSizes (ringSizes) {\n        if (!arguments.length) {\n            if (!this._ringSizes) {\n                this._ringSizes = this.defaultRingSizes();\n            }\n            return this._ringSizes;\n        }\n        this._ringSizes = ringSizes;\n        return this;\n    }\n\n    _buildArcs () {\n        return arc()\n            .startAngle(d => d.x0)\n            .endAngle(d => d.x1)\n            .innerRadius(d => this.ringSizes().scaleInnerRadius(d))\n            .outerRadius(d => this.ringSizes().scaleOuterRadius(d));\n    }\n\n    _isSelectedSlice (d) {\n        return this._isPathFiltered(d.path);\n    }\n\n    _isPathFiltered (path) {\n        for (let i = 0; i < this.filters().length; i++) {\n            const currentFilter = this.filters()[i];\n            if (currentFilter.isFiltered(path)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    // returns all filters that are a parent or child of the path\n    _filtersForPath (path) {\n        const pathFilter = filters.HierarchyFilter(path);\n        const filtersList = [];\n        for (let i = 0; i < this.filters().length; i++) {\n            const currentFilter = this.filters()[i];\n            if (currentFilter.isFiltered(path) || pathFilter.isFiltered(currentFilter)) {\n                filtersList.push(currentFilter);\n            }\n        }\n        return filtersList;\n    }\n\n    _doRedraw () {\n        this._drawChart();\n        return this;\n    }\n\n    _partitionNodes (data) {\n        const getSortable = function (d) {\n            return {'key': d.data.key, 'value': d.value};\n        };\n        const _hierarchy = hierarchy(data)\n            .sum(d => d.children ? 0 : this._extendedValueAccessor(d))\n            .sort((a, b) => ascending(this.ordering()(getSortable(a)), this.ordering()(getSortable(b))));\n\n        const _partition = partition()\n              .size([2 * Math.PI, this.ringSizes().partitionDy()]);\n\n        _partition(_hierarchy);\n\n        // In D3v4 the returned data is slightly different, change it enough to suit our purposes.\n        const nodes = _hierarchy.descendants().map(d => {\n            d.key = d.data.key;\n            d.path = d.data.path;\n            return d;\n        });\n\n        const relativeSizes = this.ringSizes().relativeRingSizesFunction(_hierarchy.height);\n\n        return {\n            nodes,\n            rootOffset: _hierarchy.y1,\n            relativeRingSizes: relativeSizes\n        };\n    }\n\n    _sliceTooSmall (d) {\n        const angle = d.x1 - d.x0;\n        return isNaN(angle) || angle < this._minAngleForLabel;\n    }\n\n    _sliceHasNoData (d) {\n        return this._extendedValueAccessor(d) === 0;\n    }\n\n    _isOffCanvas (d) {\n        return !d || isNaN(d.x0) || isNaN(d.y0);\n    }\n\n    _fill (d, i) {\n        return this.getColor(d.data, i);\n    }\n\n    onClick (d) {\n        if (this._g.attr('class') === this._emptyCssClass) {\n            return;\n        }\n\n        // Must be better way to handle this, in legends we need to access `d.key`\n        const path = d.path || d.key;\n        const filter = filters.HierarchyFilter(path);\n\n        // filters are equal to parents or children of the path.\n        const filtersList = this._filtersForPath(path);\n        let exactMatch = false;\n        // clear out any filters that cover the path filtered.\n        for (let j = filtersList.length - 1; j >= 0; j--) {\n            const currentFilter = filtersList[j];\n            if (utils.arraysIdentical(currentFilter, path)) {\n                exactMatch = true;\n            }\n            this.filter(filtersList[j]);\n        }\n        events.trigger(() => {\n            // if it is a new filter - put it in.\n            if (!exactMatch) {\n                this.filter(filter);\n            }\n            this.redrawGroup();\n        });\n    }\n\n    _safeArc (_arc, d) {\n        let path = _arc(d);\n        if (path.indexOf('NaN') >= 0) {\n            path = 'M0,0';\n        }\n        return path;\n    }\n\n    _labelPosition (d, _arc) {\n        let centroid;\n        if (this._externalLabelRadius) {\n            centroid = arc()\n                .outerRadius(this._radius + this._externalLabelRadius)\n                .innerRadius(this._radius + this._externalLabelRadius)\n                .centroid(d);\n        } else {\n            centroid = _arc.centroid(d);\n        }\n        if (isNaN(centroid[0]) || isNaN(centroid[1])) {\n            return 'translate(0,0)';\n        } else {\n            return `translate(${centroid})`;\n        }\n    }\n\n    legendables () {\n        return this.data().map((d, i) => {\n            const legendable = {name: d.key, data: d.value, others: d.others, chart: this};\n            legendable.color = this.getColor(d, i);\n            return legendable;\n        });\n    }\n\n    legendHighlight (d) {\n        this._highlightSliceFromLegendable(d, true);\n    }\n\n    legendReset (d) {\n        this._highlightSliceFromLegendable(d, false);\n    }\n\n    legendToggle (d) {\n        this.onClick({key: d.name, others: d.others});\n    }\n\n    _highlightSliceFromLegendable (legendable, highlighted) {\n        this.selectAll('g.pie-slice').each(function (d) {\n            if (legendable.name === d.key) {\n                select(this).classed('highlight', highlighted);\n            }\n        });\n    }\n\n    _tweenSlice (d, element) {\n        let current = element._current;\n        if (this._isOffCanvas(current)) {\n            current = {x0: 0, x1: 0, y0: 0, y1: 0};\n        }\n        const tweenTarget = {\n            x0: d.x0,\n            x1: d.x1,\n            y0: d.y0,\n            y1: d.y1\n        };\n        const i = interpolate(current, tweenTarget);\n        element._current = i(0);\n        return t => this._safeArc(this._buildArcs(), Object.assign({}, d, i(t)));\n    }\n}\n\nexport const sunburstChart = (parent, chartGroup) => new SunburstChart(parent, chartGroup);\n","import {BaseMixin} from '../base/base-mixin';\nimport {constants} from '../core/constants';\nimport {events} from '../core/events';\n\nconst INPUT_CSS_CLASS = 'dc-text-filter-input';\n\n/**\n * Text Filter Widget\n *\n * The text filter widget is a simple widget designed to display an input field allowing to filter\n * data that matches the text typed.\n * As opposed to the other charts, this doesn't display any result and doesn't update its display,\n * it's just to input an filter other charts.\n *\n * @mixes BaseMixin\n */\nexport class TextFilterWidget extends BaseMixin {\n    /**\n     * Create Text Filter widget\n     * @example\n     *\n     * var data = [{\"firstName\":\"John\",\"lastName\":\"Coltrane\"}{\"firstName\":\"Miles\",lastName:\"Davis\"}]\n     * var ndx = crossfilter(data);\n     * var dimension = ndx.dimension(function(d) {\n     *     return d.lastName.toLowerCase() + ' ' + d.firstName.toLowerCase();\n     * });\n     *\n     * new TextFilterWidget('#search')\n     *     .dimension(dimension);\n     *     // you don't need the group() function\n     *\n     * @param {String|node|d3.selection|CompositeChart} parent - Any valid\n     * {@link https://github.com/d3/d3-selection/blob/master/README.md#select d3 single selector}\n     * specifying a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     */\n    constructor (parent, chartGroup) {\n        super();\n\n        this._normalize = s => s.toLowerCase();\n\n        this._filterFunctionFactory = query => {\n            query = this._normalize(query);\n            return d => this._normalize(d).indexOf(query) !== -1;\n        };\n\n        this._placeHolder = 'search';\n\n        this.group(() => {\n            throw 'the group function on textFilterWidget should never be called, please report the issue';\n        });\n\n        this.anchor(parent, chartGroup);\n    }\n\n    _doRender () {\n        this.select('input').remove();\n\n        this._input = this.root().append('input')\n            .classed(INPUT_CSS_CLASS, true);\n\n        const chart = this;\n        this._input.on('input', function () {\n            chart.dimension().filterFunction(chart._filterFunctionFactory(this.value));\n            events.trigger(() => {\n                chart.redrawGroup();\n            }, constants.EVENT_DELAY);\n        });\n\n        this._doRedraw();\n\n        return this;\n    }\n\n    _doRedraw () {\n        this.root().selectAll('input')\n            .attr('placeholder', this._placeHolder);\n\n        return this;\n    }\n\n    /**\n     * This function will be called on values before calling the filter function.\n     * @example\n     * // This is the default\n     * chart.normalize(function (s) {\n     *   return s.toLowerCase();\n     * });\n     * @param {function} [normalize]\n     * @returns {TextFilterWidget|function}\n     */\n    normalize (normalize) {\n        if (!arguments.length) {\n            return this._normalize;\n        }\n        this._normalize = normalize;\n        return this;\n    }\n\n    /**\n     * Placeholder text in the search box.\n     * @example\n     * // This is the default\n     * chart.placeHolder('type to filter');\n     * @param {function} [placeHolder='search']\n     * @returns {TextFilterWidget|string}\n     */\n    placeHolder (placeHolder) {\n        if (!arguments.length) {\n            return this._placeHolder;\n        }\n        this._placeHolder = placeHolder;\n        return this;\n    }\n\n    /**\n     * This function will be called with the search text, it needs to return a function that will be used to\n     * filter the data. The default function checks presence of the search text.\n     * @example\n     * // This is the default\n     * function (query) {\n     *     query = _normalize(query);\n     *     return function (d) {\n     *         return _normalize(d).indexOf(query) !== -1;\n     *     };\n     * };\n     * @param {function} [filterFunctionFactory]\n     * @returns {TextFilterWidget|function}\n     */\n    filterFunctionFactory (filterFunctionFactory) {\n        if (!arguments.length) {\n            return this._filterFunctionFactory;\n        }\n        this._filterFunctionFactory = filterFunctionFactory;\n        return this;\n    }\n}\n\nexport const textFilterWidget = (parent, chartGroup) => new TextFilterWidget(parent, chartGroup);\n","import { version } from 'd3';\n\nimport { event, mouse } from 'd3-selection';\nimport { nest } from 'd3-collection';\n\nimport { d3compat } from '../core/config';\n\nconst majorVer = +version[0];\n\nif (majorVer < 6) {\n    Object.assign(d3compat, {\n        eventHandler: handler => function eventHandler (d, _) {\n            handler.call(this, d, event);\n        },\n        // manual firing of event, usu for tests\n        callHandler: function callHandler (handler, that, _, d) {\n            // note: dropping event as well as any extra args\n            // d3@6 does not pass extra args anymore, so we can't use them and remain compatible\n            handler.call(that, d);\n        },\n        nester: ({key, sortKeys, sortValues, entries}) => {\n            const nester = nest().key(key);\n            if (sortKeys) {\n                nester.sortKeys(sortKeys);\n            }\n            if (sortValues) {\n                nester.sortValues(sortValues);\n            }\n            return nester.entries(entries);\n        },\n        pointer: (evt, elem) => mouse(elem)\n    });\n}\n","import { version } from 'd3';\n\nimport { pointer } from 'd3-selection';\nimport { groups } from 'd3-array';\n\nimport { d3compat } from '../core/config';\n\nconst majorVer = +version[0];\n\nif (majorVer > 5) {\n    Object.assign(d3compat, {\n        eventHandler: handler => function eventHandler (event, d) {\n            handler.call(this, d, event);\n        },\n        // manual firing of event, usu for tests\n        callHandler: function callHandler (handler, that, event, d) {\n            handler.call(that, event, d);\n        },\n        nester: ({key, sortKeys, sortValues, entries}) => {\n            if (sortValues) {\n                entries = [...entries].sort(sortValues);\n            }\n            let out = groups(entries, key);\n            if (sortKeys) {\n                out = out.sort(sortKeys);\n            }\n\n            // remap to d3@v5 structure\n            return out.map(e => ({\n                key: `${e[0]}`, // d3@v5 always returns key as string\n                values: e[1]\n            }));\n        },\n        pointer\n    });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}