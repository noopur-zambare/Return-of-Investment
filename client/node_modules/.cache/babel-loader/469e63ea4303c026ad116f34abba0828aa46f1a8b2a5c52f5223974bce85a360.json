{"ast":null,"code":"var _jsxFileName = \"/Users/noopurnishikantzambare/Downloads/ROI Website/client/src/components/ChartComponent.js\",\n  _s = $RefreshSig$();\nimport Papa from 'papaparse';\nimport { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nfunction Home() {\n  _s();\n  const [chartData, setChartData] = useState({\n    datasets: []\n  });\n  const [chartOptions, setChartOptions] = useState({});\n  const [labelCountData, setLabelCountData] = useState([]);\n  const [clickedLabelIndex, setClickedLabelIndex] = useState(null);\n  const [showDoubleBarGraph, setShowDoubleBarGraph] = useState(true);\n  useEffect(() => {\n    Papa.parse('/static/data.csv', {\n      download: true,\n      header: true,\n      dynamicTyping: true,\n      delimiter: \"\",\n      complete: result => {\n        const labelCounts = {};\n        result.data.forEach(item => {\n          const label = item['req1Product'];\n          if (label) {\n            if (labelCounts[label]) {\n              labelCounts[label] += 1;\n            } else {\n              labelCounts[label] = 1;\n            }\n          }\n        });\n        setChartData({\n          labels: Object.keys(labelCounts),\n          datasets: [{\n            label: \"Count\",\n            data: Object.values(labelCounts),\n            borderColor: \"white\",\n            backgroundColor: \"#defde0\"\n          }]\n        });\n        setChartOptions({\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            title: {\n              display: true,\n              text: \"Count of req1Product Values\",\n              color: 'white'\n            }\n          },\n          scales: {\n            x: {\n              ticks: {\n                color: 'white'\n              }\n            },\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: \"Count\",\n                color: 'white'\n              },\n              ticks: {\n                color: 'white'\n              }\n            }\n          }\n        });\n      }\n    });\n  }, []);\n  const handleColumnClick = async (event, activeElements) => {\n    if (activeElements.length > 0) {\n      const labelIndex = activeElements[0].index;\n      setClickedLabelIndex(labelIndex); // Update clicked label index\n\n      const clickedLabel = chartData.labels[labelIndex];\n      if (showDoubleBarGraph) {\n        // Create a new chart for the label count from the 'prediction' column\n        const predictionLabelCounts = {};\n        await new Promise((resolve, reject) => {\n          Papa.parse('/static/data.csv', {\n            download: true,\n            header: true,\n            dynamicTyping: true,\n            delimiter: \"\",\n            complete: result => {\n              result.data.forEach(item => {\n                const prediction = item['prediction'];\n                const label = item['req1Product'];\n                if (label === clickedLabel && prediction !== undefined) {\n                  if (predictionLabelCounts[prediction]) {\n                    predictionLabelCounts[prediction] += 1;\n                  } else {\n                    predictionLabelCounts[prediction] = 1;\n                  }\n                }\n              });\n              const labelCountChartData = {\n                labels: Object.keys(predictionLabelCounts),\n                datasets: [{\n                  label: \"Count\",\n                  data: Object.values(predictionLabelCounts),\n                  borderColor: \"white\",\n                  backgroundColor: [\"#ff4040\", \"#B6E4EB\"]\n                }]\n              };\n              const labelCountChartOptions = {\n                responsive: true,\n                plugins: {\n                  legend: {\n                    position: 'top'\n                  },\n                  title: {\n                    display: true,\n                    text: `Label Count for ${clickedLabel}`,\n                    color: 'white'\n                  }\n                },\n                scales: {\n                  x: {\n                    ticks: {\n                      color: 'white'\n                    }\n                  },\n                  y: {\n                    beginAtZero: true,\n                    title: {\n                      display: true,\n                      text: \"Count\",\n                      color: 'white'\n                    },\n                    ticks: {\n                      color: 'white'\n                    }\n                  }\n                }\n              };\n              setLabelCountData(prevData => {\n                const newData = [...prevData];\n                newData[labelIndex] = {\n                  chartData: labelCountChartData,\n                  chartOptions: labelCountChartOptions\n                };\n                return newData;\n              });\n              resolve();\n            },\n            error: error => {\n              reject(error);\n            }\n          });\n        });\n      } else {\n        // Create a new chart for the count of each value in the 'prediction' column for the clicked label\n        const predictionValueCounts = {};\n        await new Promise((resolve, reject) => {\n          Papa.parse('/static/data.csv', {\n            download: true,\n            header: true,\n            dynamicTyping: true,\n            delimiter: \"\",\n            complete: result => {\n              result.data.forEach(item => {\n                const prediction = item['prediction'];\n                const label = item['req1Product'];\n                const req2Product = item['req2Product'];\n                if (label === clickedLabel && prediction !== undefined && req2Product !== undefined) {\n                  if (!predictionValueCounts[req2Product]) {\n                    predictionValueCounts[req2Product] = {};\n                  }\n                  if (predictionValueCounts[req2Product][prediction]) {\n                    predictionValueCounts[req2Product][prediction] += 1;\n                  } else {\n                    predictionValueCounts[req2Product][prediction] = 1;\n                  }\n                }\n              });\n              const labelCountChartData = {\n                labels: Object.keys(predictionValueCounts),\n                datasets: Object.keys(predictionValueCounts[Object.keys(predictionValueCounts)[0]]).map(prediction => ({\n                  label: `Prediction ${prediction}`,\n                  data: Object.keys(predictionValueCounts).map(req2Product => predictionValueCounts[req2Product][prediction] || 0),\n                  backgroundColor: getRandomColor()\n                }))\n              };\n              const labelCountChartOptions = {\n                responsive: true,\n                plugins: {\n                  legend: {\n                    position: 'top'\n                  },\n                  title: {\n                    display: true,\n                    text: `Prediction Count for ${clickedLabel}`,\n                    color: 'white'\n                  }\n                },\n                scales: {\n                  x: {\n                    ticks: {\n                      color: 'white'\n                    }\n                  },\n                  y: {\n                    beginAtZero: true,\n                    title: {\n                      display: true,\n                      text: \"Count\",\n                      color: 'white'\n                    },\n                    ticks: {\n                      color: 'white'\n                    }\n                  }\n                }\n              };\n              setLabelCountData(prevData => {\n                const newData = [...prevData];\n                newData[labelIndex] = {\n                  chartData: labelCountChartData,\n                  chartOptions: labelCountChartOptions\n                };\n                return newData;\n              });\n              resolve();\n            },\n            error: error => {\n              reject(error);\n            }\n          });\n        });\n      }\n    }\n  };\n  const toggleGraphType = () => {\n    setShowDoubleBarGraph(prevValue => !prevValue);\n  };\n  const getRandomColor = () => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleGraphType,\n        children: \"Toggle Graph Type\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 278,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 277,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: '600px',\n        margin: '0 auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: chartOptions,\n        getElementAtEvent: handleColumnClick\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 283,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 282,\n      columnNumber: 7\n    }, this), labelCountData[clickedLabelIndex] && /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        maxWidth: '600px',\n        margin: '20px auto'\n      },\n      children: /*#__PURE__*/_jsxDEV(Bar, {\n        data: labelCountData[clickedLabelIndex].chartData,\n        options: labelCountData[clickedLabelIndex].chartOptions\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 276,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"jtFPUKtkp1VyVXpoUjhvnROOa5o=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["Papa","useEffect","useState","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","Home","_s","chartData","setChartData","datasets","chartOptions","setChartOptions","labelCountData","setLabelCountData","clickedLabelIndex","setClickedLabelIndex","showDoubleBarGraph","setShowDoubleBarGraph","parse","download","header","dynamicTyping","delimiter","complete","result","labelCounts","data","forEach","item","label","labels","Object","keys","values","borderColor","backgroundColor","responsive","plugins","legend","position","title","display","text","color","scales","x","ticks","y","beginAtZero","handleColumnClick","event","activeElements","length","labelIndex","index","clickedLabel","predictionLabelCounts","Promise","resolve","reject","prediction","undefined","labelCountChartData","labelCountChartOptions","prevData","newData","error","predictionValueCounts","req2Product","map","getRandomColor","toggleGraphType","prevValue","letters","i","Math","floor","random","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","style","maxWidth","margin","options","getElementAtEvent","_c","$RefreshReg$"],"sources":["/Users/noopurnishikantzambare/Downloads/ROI Website/client/src/components/ChartComponent.js"],"sourcesContent":["import Papa from 'papaparse';\nimport { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\n\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nfunction Home() {\n  const [chartData, setChartData] = useState({ datasets: [] });\n  const [chartOptions, setChartOptions] = useState({});\n  const [labelCountData, setLabelCountData] = useState([]);\n  const [clickedLabelIndex, setClickedLabelIndex] = useState(null);\n  const [showDoubleBarGraph, setShowDoubleBarGraph] = useState(true);\n\n  useEffect(() => {\n    Papa.parse('/static/data.csv', {\n      download: true,\n      header: true,\n      dynamicTyping: true,\n      delimiter: \"\",\n      complete: (result) => {\n        const labelCounts = {};\n\n        result.data.forEach((item) => {\n          const label = item['req1Product'];\n\n          if (label) {\n            if (labelCounts[label]) {\n              labelCounts[label] += 1;\n            } else {\n              labelCounts[label] = 1;\n            }\n          }\n        });\n\n        setChartData({\n          labels: Object.keys(labelCounts),\n          datasets: [\n            {\n              label: \"Count\",\n              data: Object.values(labelCounts),\n              borderColor: \"white\",\n              backgroundColor: \"#defde0\"\n            }\n          ]\n        });\n\n        setChartOptions({\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            title: {\n              display: true,\n              text: \"Count of req1Product Values\",\n              color: 'white'\n            }\n          },\n          scales: {\n            x: {\n              ticks: {\n                color: 'white'\n              }\n            },\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: \"Count\",\n                color: 'white'\n              },\n              ticks: {\n                color: 'white'\n              }\n            }\n          }\n        });\n      }\n    });\n  }, []);\n\n  const handleColumnClick = async (event, activeElements) => {\n    if (activeElements.length > 0) {\n      const labelIndex = activeElements[0].index;\n      setClickedLabelIndex(labelIndex); // Update clicked label index\n\n      const clickedLabel = chartData.labels[labelIndex];\n\n      if (showDoubleBarGraph) {\n        // Create a new chart for the label count from the 'prediction' column\n        const predictionLabelCounts = {};\n        await new Promise((resolve, reject) => {\n          Papa.parse('/static/data.csv', {\n            download: true,\n            header: true,\n            dynamicTyping: true,\n            delimiter: \"\",\n            complete: (result) => {\n              result.data.forEach((item) => {\n                const prediction = item['prediction'];\n                const label = item['req1Product'];\n\n                if (label === clickedLabel && prediction !== undefined) {\n                  if (predictionLabelCounts[prediction]) {\n                    predictionLabelCounts[prediction] += 1;\n                  } else {\n                    predictionLabelCounts[prediction] = 1;\n                  }\n                }\n              });\n\n              const labelCountChartData = {\n                labels: Object.keys(predictionLabelCounts),\n                datasets: [\n                  {\n                    label: \"Count\",\n                    data: Object.values(predictionLabelCounts),\n                    borderColor: \"white\",\n                    backgroundColor: [\"#ff4040\", \"#B6E4EB\"]\n                  }\n                ]\n              };\n\n              const labelCountChartOptions = {\n                responsive: true,\n                plugins: {\n                  legend: {\n                    position: 'top'\n                  },\n                  title: {\n                    display: true,\n                    text: `Label Count for ${clickedLabel}`,\n                    color: 'white'\n                  }\n                },\n                scales: {\n                  x: {\n                    ticks: {\n                      color: 'white'\n                    }\n                  },\n                  y: {\n                    beginAtZero: true,\n                    title: {\n                      display: true,\n                      text: \"Count\",\n                      color: 'white'\n                    },\n                    ticks: {\n                      color: 'white'\n                    }\n                  }\n                }\n              };\n\n              setLabelCountData((prevData) => {\n                const newData = [...prevData];\n                newData[labelIndex] = {\n                  chartData: labelCountChartData,\n                  chartOptions: labelCountChartOptions\n                };\n                return newData;\n              });\n\n              resolve();\n            },\n            error: (error) => {\n              reject(error);\n            }\n          });\n        });\n      } else {\n        // Create a new chart for the count of each value in the 'prediction' column for the clicked label\n        const predictionValueCounts = {};\n        await new Promise((resolve, reject) => {\n          Papa.parse('/static/data.csv', {\n            download: true,\n            header: true,\n            dynamicTyping: true,\n            delimiter: \"\",\n            complete: (result) => {\n              result.data.forEach((item) => {\n                const prediction = item['prediction'];\n                const label = item['req1Product'];\n                const req2Product = item['req2Product'];\n\n                if (label === clickedLabel && prediction !== undefined && req2Product !== undefined) {\n                  if (!predictionValueCounts[req2Product]) {\n                    predictionValueCounts[req2Product] = {};\n                  }\n\n                  if (predictionValueCounts[req2Product][prediction]) {\n                    predictionValueCounts[req2Product][prediction] += 1;\n                  } else {\n                    predictionValueCounts[req2Product][prediction] = 1;\n                  }\n                }\n              });\n\n              const labelCountChartData = {\n                labels: Object.keys(predictionValueCounts),\n                datasets: Object.keys(predictionValueCounts[Object.keys(predictionValueCounts)[0]]).map((prediction) => ({\n                  label: `Prediction ${prediction}`,\n                  data: Object.keys(predictionValueCounts).map((req2Product) => predictionValueCounts[req2Product][prediction] || 0),\n                  backgroundColor: getRandomColor()\n                }))\n              };\n\n              const labelCountChartOptions = {\n                responsive: true,\n                plugins: {\n                  legend: {\n                    position: 'top'\n                  },\n                  title: {\n                    display: true,\n                    text: `Prediction Count for ${clickedLabel}`,\n                    color: 'white'\n                  }\n                },\n                scales: {\n                  x: {\n                    ticks: {\n                      color: 'white'\n                    }\n                  },\n                  y: {\n                    beginAtZero: true,\n                    title: {\n                      display: true,\n                      text: \"Count\",\n                      color: 'white'\n                    },\n                    ticks: {\n                      color: 'white'\n                    }\n                  }\n                }\n              };\n\n              setLabelCountData((prevData) => {\n                const newData = [...prevData];\n                newData[labelIndex] = {\n                  chartData: labelCountChartData,\n                  chartOptions: labelCountChartOptions\n                };\n                return newData;\n              });\n\n              resolve();\n            },\n            error: (error) => {\n              reject(error);\n            }\n          });\n        });\n      }\n    }\n  };\n\n  const toggleGraphType = () => {\n    setShowDoubleBarGraph((prevValue) => !prevValue);\n  };\n\n  const getRandomColor = () => {\n    const letters = '0123456789ABCDEF';\n    let color = '#';\n    for (let i = 0; i < 6; i++) {\n      color += letters[Math.floor(Math.random() * 16)];\n    }\n    return color;\n  };\n\n  return (\n    <div>\n      <div>\n        <button onClick={toggleGraphType}>\n          Toggle Graph Type\n        </button>\n      </div>\n      <div style={{ maxWidth: '600px', margin: '0 auto' }}>\n        <Bar data={chartData} options={chartOptions} getElementAtEvent={handleColumnClick} />\n      </div>\n      {labelCountData[clickedLabelIndex] && (\n        <div style={{ maxWidth: '600px', margin: '20px auto' }}>\n          <Bar\n            data={labelCountData[clickedLabelIndex].chartData}\n            options={labelCountData[clickedLabelIndex].chartOptions}\n          />\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}