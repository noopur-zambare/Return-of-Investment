{"ast":null,"code":"var _jsxFileName = \"/Users/noopurnishikantzambare/Downloads/ROI Website/client/src/components/ChartComponent.js\",\n  _s = $RefreshSig$();\nimport Papa from 'papaparse';\nimport { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\nfunction Home() {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [chartOptions, setChartOptions] = useState({});\n  const [labelCountData, setLabelCountData] = useState([]);\n  const [clickedLabelIndex, setClickedLabelIndex] = useState(null);\n  const [showDoubleBarGraph, setShowDoubleBarGraph] = useState(false);\n  useEffect(() => {\n    Papa.parse('/static/data.csv', {\n      download: true,\n      header: true,\n      dynamicTyping: true,\n      delimiter: \"\",\n      complete: result => {\n        const labelCounts = {};\n        result.data.forEach(item => {\n          const label = item['req1Product'];\n          if (label) {\n            if (labelCounts[label]) {\n              labelCounts[label] += 1;\n            } else {\n              labelCounts[label] = 1;\n            }\n          }\n        });\n        setChartData({\n          labels: Object.keys(labelCounts),\n          datasets: [{\n            label: \"Count\",\n            data: Object.values(labelCounts),\n            borderColor: \"white\",\n            backgroundColor: \"#defde0\"\n          }]\n        });\n        setChartOptions({\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            title: {\n              display: true,\n              text: \"Count of req1Product Values\",\n              color: 'white'\n            }\n          },\n          scales: {\n            x: {\n              ticks: {\n                color: 'white'\n              }\n            },\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: \"Count\",\n                color: 'white'\n              },\n              ticks: {\n                color: 'white'\n              }\n            }\n          }\n        });\n      }\n    });\n  }, []);\n  const handleColumnClick = async (event, activeElements) => {\n    if (activeElements.length > 0) {\n      const labelIndex = activeElements[0].index;\n      setClickedLabelIndex(labelIndex); // Update clicked label index\n\n      const clickedLabel = chartData.labels[labelIndex];\n      if (showDoubleBarGraph) {\n        // Create a new chart for 0 and 1 occurrences for all req1Product values\n        const req1ProductLabelCounts = {};\n        await new Promise((resolve, reject) => {\n          Papa.parse('/static/data.csv', {\n            download: true,\n            header: true,\n            dynamicTyping: true,\n            delimiter: \"\",\n            complete: result => {\n              result.data.forEach(item => {\n                const req1Product = item['req1Product'];\n                const prediction = item['prediction'];\n                if (req1Product === clickedLabel && prediction !== undefined) {\n                  if (req1ProductLabelCounts[prediction]) {\n                    req1ProductLabelCounts[prediction] += 1;\n                  } else {\n                    req1ProductLabelCounts[prediction] = 1;\n                  }\n                }\n              });\n              const labelCountChartData = {\n                labels: Object.keys(req1ProductLabelCounts),\n                datasets: [{\n                  label: \"Count\",\n                  data: Object.values(req1ProductLabelCounts),\n                  borderColor: \"white\",\n                  backgroundColor: [\"#ff4040\", \"#B6E4EB\"]\n                }]\n              };\n              const labelCountChartOptions = {\n                responsive: true,\n                plugins: {\n                  legend: {\n                    position: 'top'\n                  },\n                  title: {\n                    display: true,\n                    text: `Label Count for ${clickedLabel}`,\n                    color: 'white'\n                  }\n                },\n                scales: {\n                  x: {\n                    ticks: {\n                      color: 'white'\n                    }\n                  },\n                  y: {\n                    beginAtZero: true,\n                    title: {\n                      display: true,\n                      text: \"Count\",\n                      color: 'white'\n                    },\n                    ticks: {\n                      color: 'white'\n                    }\n                  }\n                }\n              };\n              setLabelCountData(prevData => {\n                const newData = [...prevData];\n                newData[labelIndex] = {\n                  chartData: labelCountChartData,\n                  chartOptions: labelCountChartOptions\n                };\n                return newData;\n              });\n              resolve();\n            },\n            error: error => {\n              reject(error);\n            }\n          });\n        });\n      } else {\n        // Create individual charts for all columns except 'prediction'\n        const columnLabelCounts = {};\n        await new Promise((resolve, reject) => {\n          Papa.parse('/static/data.csv', {\n            download: true,\n            header: true,\n            dynamicTyping: true,\n            delimiter: \"\",\n            complete: result => {\n              result.data.forEach(item => {\n                const req1Product = item['req1Product'];\n                if (req1Product === clickedLabel) {\n                  Object.keys(item).forEach(column => {\n                    if (column !== 'prediction' && column !== 'req1Product') {\n                      if (!columnLabelCounts[column]) {\n                        columnLabelCounts[column] = {\n                          label: column,\n                          count: 0\n                        };\n                      }\n                      if (item[column] === 0 || item[column] === 1) {\n                        columnLabelCounts[column].count += 1;\n                      }\n                    }\n                  });\n                }\n              });\n              const labelCountChartData = {\n                labels: Object.keys(columnLabelCounts),\n                datasets: [{\n                  label: \"Count\",\n                  data: Object.values(columnLabelCounts).map(item => item.count),\n                  borderColor: \"white\",\n                  backgroundColor: \"#defde0\"\n                }]\n              };\n              const labelCountChartOptions = {\n                responsive: true,\n                plugins: {\n                  legend: {\n                    position: 'top'\n                  },\n                  title: {\n                    display: true,\n                    text: `Label Count for ${clickedLabel}`,\n                    color: 'white'\n                  }\n                },\n                scales: {\n                  x: {\n                    ticks: {\n                      color: 'white'\n                    }\n                  },\n                  y: {\n                    beginAtZero: true,\n                    title: {\n                      display: true,\n                      text: \"Count\",\n                      color: 'white'\n                    },\n                    ticks: {\n                      color: 'white'\n                    }\n                  }\n                }\n              };\n              setLabelCountData(prevData => {\n                const newData = [...prevData];\n                newData[labelIndex] = {\n                  chartData: labelCountChartData,\n                  chartOptions: labelCountChartOptions\n                };\n                return newData;\n              });\n              resolve();\n            },\n            error: error => {\n              reject(error);\n            }\n          });\n        });\n      }\n    }\n  };\n  const handleCountButtonClick = () => {\n    setShowDoubleBarGraph(prevState => !prevState);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 274,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"import-boxes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 275,\n      columnNumber: 7\n    }, this), chartData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Bar, {\n          options: {\n            onClick: handleColumnClick,\n            ...chartOptions\n          },\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 281,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCountButtonClick,\n          children: showDoubleBarGraph ? \"Hide Double Bar\" : \"Show Double Bar\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 282,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 280,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: labelCountData.length > 0 && labelCountData[clickedLabelIndex] && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: [\"Label Count for \", chartData.labels[clickedLabelIndex]]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 287,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            options: labelCountData[clickedLabelIndex].chartOptions,\n            data: labelCountData[clickedLabelIndex].chartData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 288,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 279,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n        .graph-container {\n          width: 600px; /* Set the desired width */\n          height: 400px; /* Set the desired height */\n          margin: 0 auto; /* Center the graph container horizontally */\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 273,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"UMcwqALyGv+cQjvqEHuS4xX1GbQ=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["Papa","useEffect","useState","Bar","Chart","ChartJS","CategoryScale","LinearScale","BarElement","Title","Tooltip","Legend","jsxDEV","_jsxDEV","register","Home","_s","chartData","setChartData","chartOptions","setChartOptions","labelCountData","setLabelCountData","clickedLabelIndex","setClickedLabelIndex","showDoubleBarGraph","setShowDoubleBarGraph","parse","download","header","dynamicTyping","delimiter","complete","result","labelCounts","data","forEach","item","label","labels","Object","keys","datasets","values","borderColor","backgroundColor","responsive","plugins","legend","position","title","display","text","color","scales","x","ticks","y","beginAtZero","handleColumnClick","event","activeElements","length","labelIndex","index","clickedLabel","req1ProductLabelCounts","Promise","resolve","reject","req1Product","prediction","undefined","labelCountChartData","labelCountChartOptions","prevData","newData","error","columnLabelCounts","column","count","map","handleCountButtonClick","prevState","children","fileName","_jsxFileName","lineNumber","columnNumber","className","options","onClick","_c","$RefreshReg$"],"sources":["/Users/noopurnishikantzambare/Downloads/ROI Website/client/src/components/ChartComponent.js"],"sourcesContent":["import Papa from 'papaparse';\nimport { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';\n\nChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);\n\nfunction Home() {\n  const [chartData, setChartData] = useState(null);\n  const [chartOptions, setChartOptions] = useState({});\n  const [labelCountData, setLabelCountData] = useState([]);\n  const [clickedLabelIndex, setClickedLabelIndex] = useState(null);\n  const [showDoubleBarGraph, setShowDoubleBarGraph] = useState(false);\n\n  useEffect(() => {\n    Papa.parse('/static/data.csv', {\n      download: true,\n      header: true,\n      dynamicTyping: true,\n      delimiter: \"\",\n      complete: (result) => {\n        const labelCounts = {};\n\n        result.data.forEach((item) => {\n          const label = item['req1Product'];\n\n          if (label) {\n            if (labelCounts[label]) {\n              labelCounts[label] += 1;\n            } else {\n              labelCounts[label] = 1;\n            }\n          }\n        });\n\n        setChartData({\n          labels: Object.keys(labelCounts),\n          datasets: [\n            {\n              label: \"Count\",\n              data: Object.values(labelCounts),\n              borderColor: \"white\",\n              backgroundColor: \"#defde0\"\n            }\n          ]\n        });\n\n        setChartOptions({\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            title: {\n              display: true,\n              text: \"Count of req1Product Values\",\n              color: 'white'\n            }\n          },\n          scales: {\n            x: {\n              ticks: {\n                color: 'white'\n              }\n            },\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: \"Count\",\n                color: 'white'\n              },\n              ticks: {\n                color: 'white'\n              }\n            }\n          }\n        });\n      }\n    });\n  }, []);\n\n  const handleColumnClick = async (event, activeElements) => {\n    if (activeElements.length > 0) {\n      const labelIndex = activeElements[0].index;\n      setClickedLabelIndex(labelIndex); // Update clicked label index\n\n      const clickedLabel = chartData.labels[labelIndex];\n\n      if (showDoubleBarGraph) {\n        // Create a new chart for 0 and 1 occurrences for all req1Product values\n        const req1ProductLabelCounts = {};\n        await new Promise((resolve, reject) => {\n          Papa.parse('/static/data.csv', {\n            download: true,\n            header: true,\n            dynamicTyping: true,\n            delimiter: \"\",\n            complete: (result) => {\n              result.data.forEach((item) => {\n                const req1Product = item['req1Product'];\n                const prediction = item['prediction'];\n\n                if (req1Product === clickedLabel && prediction !== undefined) {\n                  if (req1ProductLabelCounts[prediction]) {\n                    req1ProductLabelCounts[prediction] += 1;\n                  } else {\n                    req1ProductLabelCounts[prediction] = 1;\n                  }\n                }\n              });\n\n              const labelCountChartData = {\n                labels: Object.keys(req1ProductLabelCounts),\n                datasets: [\n                  {\n                    label: \"Count\",\n                    data: Object.values(req1ProductLabelCounts),\n                    borderColor: \"white\",\n                    backgroundColor: [\"#ff4040\", \"#B6E4EB\"]\n                  }\n                ]\n              };\n\n              const labelCountChartOptions = {\n                responsive: true,\n                plugins: {\n                  legend: {\n                    position: 'top'\n                  },\n                  title: {\n                    display: true,\n                    text: `Label Count for ${clickedLabel}`,\n                    color: 'white'\n                  }\n                },\n                scales: {\n                  x: {\n                    ticks: {\n                      color: 'white'\n                    }\n                  },\n                  y: {\n                    beginAtZero: true,\n                    title: {\n                      display: true,\n                      text: \"Count\",\n                      color: 'white'\n                    },\n                    ticks: {\n                      color: 'white'\n                    }\n                  }\n                }\n              };\n\n              setLabelCountData((prevData) => {\n                const newData = [...prevData];\n                newData[labelIndex] = {\n                  chartData: labelCountChartData,\n                  chartOptions: labelCountChartOptions\n                };\n                return newData;\n              });\n\n              resolve();\n            },\n            error: (error) => {\n              reject(error);\n            }\n          });\n        });\n      } else {\n        // Create individual charts for all columns except 'prediction'\n        const columnLabelCounts = {};\n        await new Promise((resolve, reject) => {\n          Papa.parse('/static/data.csv', {\n            download: true,\n            header: true,\n            dynamicTyping: true,\n            delimiter: \"\",\n            complete: (result) => {\n              result.data.forEach((item) => {\n                const req1Product = item['req1Product'];\n\n                if (req1Product === clickedLabel) {\n                  Object.keys(item).forEach((column) => {\n                    if (column !== 'prediction' && column !== 'req1Product') {\n                      if (!columnLabelCounts[column]) {\n                        columnLabelCounts[column] = {\n                          label: column,\n                          count: 0\n                        };\n                      }\n\n                      if (item[column] === 0 || item[column] === 1) {\n                        columnLabelCounts[column].count += 1;\n                      }\n                    }\n                  });\n                }\n              });\n\n              const labelCountChartData = {\n                labels: Object.keys(columnLabelCounts),\n                datasets: [\n                  {\n                    label: \"Count\",\n                    data: Object.values(columnLabelCounts).map((item) => item.count),\n                    borderColor: \"white\",\n                    backgroundColor: \"#defde0\"\n                  }\n                ]\n              };\n\n              const labelCountChartOptions = {\n                responsive: true,\n                plugins: {\n                  legend: {\n                    position: 'top'\n                  },\n                  title: {\n                    display: true,\n                    text: `Label Count for ${clickedLabel}`,\n                    color: 'white'\n                  }\n                },\n                scales: {\n                  x: {\n                    ticks: {\n                      color: 'white'\n                    }\n                  },\n                  y: {\n                    beginAtZero: true,\n                    title: {\n                      display: true,\n                      text: \"Count\",\n                      color: 'white'\n                    },\n                    ticks: {\n                      color: 'white'\n                    }\n                  }\n                }\n              };\n\n              setLabelCountData((prevData) => {\n                const newData = [...prevData];\n                newData[labelIndex] = {\n                  chartData: labelCountChartData,\n                  chartOptions: labelCountChartOptions\n                };\n                return newData;\n              });\n\n              resolve();\n            },\n            error: (error) => {\n              reject(error);\n            }\n          });\n        });\n      }\n    }\n  };\n\n  const handleCountButtonClick = () => {\n    setShowDoubleBarGraph((prevState) => !prevState);\n  };\n\n  return (\n    <div>\n      <h4>Analysis</h4>\n      <div className=\"import-boxes\">\n        {/* Import boxes code here */}\n      </div>\n      {chartData ? (\n        <div className=\"graph-container\">\n          <div>\n            <Bar options={{ onClick: handleColumnClick, ...chartOptions }} data={chartData} />\n            <button onClick={handleCountButtonClick}>{showDoubleBarGraph ? \"Hide Double Bar\" : \"Show Double Bar\"}</button>\n          </div>\n          <div>\n            {labelCountData.length > 0 && labelCountData[clickedLabelIndex] && (\n              <div>\n                <h4>Label Count for {chartData.labels[clickedLabelIndex]}</h4>\n                <Bar\n                  options={labelCountData[clickedLabelIndex].chartOptions}\n                  data={labelCountData[clickedLabelIndex].chartData}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      ) : (\n        <div>Loading...</div>\n      )}\n      <style>{`\n        .graph-container {\n          width: 600px; /* Set the desired width */\n          height: 400px; /* Set the desired height */\n          margin: 0 auto; /* Center the graph container horizontally */\n        }\n      `}</style>\n    </div>\n  );\n}\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}