{"ast":null,"code":"var _jsxFileName = \"/Users/noopurnishikantzambare/Downloads/ROI Website/client/src/components/ChartComponent.js\",\n  _s = $RefreshSig$();\nimport Papa from 'papaparse';\nimport { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [chartData, setChartData] = useState(null);\n  const [showDoubleBarGraph, setShowDoubleBarGraph] = useState(true);\n  useEffect(() => {\n    Papa.parse('/static/data.csv', {\n      download: true,\n      header: true,\n      dynamicTyping: true,\n      delimiter: \"\",\n      complete: result => {\n        const labelCounts = {};\n        result.data.forEach(item => {\n          const label = item['req1Product'];\n          if (label) {\n            if (labelCounts[label]) {\n              labelCounts[label] += 1;\n            } else {\n              labelCounts[label] = 1;\n            }\n          }\n        });\n        const labels = Object.keys(labelCounts);\n        const datasets = labels.map(label => ({\n          label: label,\n          data: [labelCounts[label]],\n          backgroundColor: \"#defde0\"\n        }));\n        const initialChartData = {\n          labels: labels,\n          datasets: datasets\n        };\n        setChartData(initialChartData);\n      }\n    });\n  }, []);\n  const handleColumnClick = async (event, activeElements) => {\n    if (activeElements.length > 0) {\n      const labelIndex = activeElements[0].index;\n      const clickedLabel = chartData.labels[labelIndex];\n      if (showDoubleBarGraph) {\n        const predictionLabelCounts = {};\n        await new Promise((resolve, reject) => {\n          Papa.parse('/static/data.csv', {\n            download: true,\n            header: true,\n            dynamicTyping: true,\n            delimiter: \"\",\n            complete: result => {\n              result.data.forEach(item => {\n                const prediction = item['prediction'];\n                const label = item['req1Product'];\n                if (label === clickedLabel && prediction !== undefined) {\n                  if (!predictionLabelCounts[prediction]) {\n                    predictionLabelCounts[prediction] = 1;\n                  } else {\n                    predictionLabelCounts[prediction] += 1;\n                  }\n                }\n              });\n              const labelCountChartData = {\n                labels: [\"a\", \"b\", \"c\", \"d\"],\n                // Assuming a, b, c, d are the prediction values\n                datasets: [{\n                  data: Object.values(predictionLabelCounts),\n                  backgroundColor: \"#defde0\"\n                }]\n              };\n              setChartData(labelCountChartData);\n              resolve();\n            },\n            error: error => {\n              reject(error);\n            }\n          });\n        });\n      } else {\n        const allLabelCounts = {};\n        await new Promise((resolve, reject) => {\n          Papa.parse('/static/data.csv', {\n            download: true,\n            header: true,\n            dynamicTyping: true,\n            delimiter: \"\",\n            complete: result => {\n              result.data.forEach(item => {\n                const prediction = item['prediction'];\n                if (prediction !== undefined) {\n                  if (!allLabelCounts[prediction]) {\n                    allLabelCounts[prediction] = 1;\n                  } else {\n                    allLabelCounts[prediction] += 1;\n                  }\n                }\n              });\n              const labelCountChartData = {\n                labels: [\"a\", \"b\", \"c\", \"d\"],\n                // Assuming a, b, c, d are the prediction values\n                datasets: [{\n                  data: Object.values(allLabelCounts),\n                  backgroundColor: \"#defde0\"\n                }]\n              };\n              setChartData(labelCountChartData);\n              resolve();\n            },\n            error: error => {\n              reject(error);\n            }\n          });\n        });\n      }\n    }\n  };\n  const handleCountButtonClick = () => {\n    setShowDoubleBarGraph(!showDoubleBarGraph);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 7\n    }, this), chartData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-container\",\n      children: [/*#__PURE__*/_jsxDEV(Bar, {\n        data: chartData,\n        options: {\n          onClick: handleColumnClick,\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            title: {\n              display: true,\n              text: showDoubleBarGraph ? \"Count of req1Product Values\" : \"Label Count for All Labels\"\n            }\n          },\n          scales: {\n            x: {\n              ticks: {\n                color: 'white'\n              }\n            },\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: \"Count\",\n                color: 'white'\n              },\n              ticks: {\n                color: 'white'\n              }\n            }\n          }\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleCountButtonClick,\n        children: showDoubleBarGraph ? \"Hide Double Bar\" : \"Show Double Bar\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 180,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n        .graph-container {\n          width: 600px; /* Set the desired width */\n          height: 400px; /* Set the desired height */\n          margin: 0 auto; /* Center the graph container horizontally */\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 187,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 142,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"D1u/6jj4zCTcLcXD2F1bqkSbwrU=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["Papa","useEffect","useState","Bar","jsxDEV","_jsxDEV","Home","_s","chartData","setChartData","showDoubleBarGraph","setShowDoubleBarGraph","parse","download","header","dynamicTyping","delimiter","complete","result","labelCounts","data","forEach","item","label","labels","Object","keys","datasets","map","backgroundColor","initialChartData","handleColumnClick","event","activeElements","length","labelIndex","index","clickedLabel","predictionLabelCounts","Promise","resolve","reject","prediction","undefined","labelCountChartData","values","error","allLabelCounts","handleCountButtonClick","children","fileName","_jsxFileName","lineNumber","columnNumber","className","options","onClick","responsive","plugins","legend","position","title","display","text","scales","x","ticks","color","y","beginAtZero","_c","$RefreshReg$"],"sources":["/Users/noopurnishikantzambare/Downloads/ROI Website/client/src/components/ChartComponent.js"],"sourcesContent":["import Papa from 'papaparse';\nimport { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\n\nfunction Home() {\n  const [chartData, setChartData] = useState(null);\n  const [showDoubleBarGraph, setShowDoubleBarGraph] = useState(true);\n\n  useEffect(() => {\n    Papa.parse('/static/data.csv', {\n      download: true,\n      header: true,\n      dynamicTyping: true,\n      delimiter: \"\",\n      complete: (result) => {\n        const labelCounts = {};\n\n        result.data.forEach((item) => {\n          const label = item['req1Product'];\n\n          if (label) {\n            if (labelCounts[label]) {\n              labelCounts[label] += 1;\n            } else {\n              labelCounts[label] = 1;\n            }\n          }\n        });\n\n        const labels = Object.keys(labelCounts);\n        const datasets = labels.map((label) => ({\n          label: label,\n          data: [labelCounts[label]],\n          backgroundColor: \"#defde0\"\n        }));\n\n        const initialChartData = {\n          labels: labels,\n          datasets: datasets\n        };\n\n        setChartData(initialChartData);\n      }\n    });\n  }, []);\n\n  const handleColumnClick = async (event, activeElements) => {\n    if (activeElements.length > 0) {\n      const labelIndex = activeElements[0].index;\n      const clickedLabel = chartData.labels[labelIndex];\n\n      if (showDoubleBarGraph) {\n        const predictionLabelCounts = {};\n        await new Promise((resolve, reject) => {\n          Papa.parse('/static/data.csv', {\n            download: true,\n            header: true,\n            dynamicTyping: true,\n            delimiter: \"\",\n            complete: (result) => {\n              result.data.forEach((item) => {\n                const prediction = item['prediction'];\n                const label = item['req1Product'];\n\n                if (label === clickedLabel && prediction !== undefined) {\n                  if (!predictionLabelCounts[prediction]) {\n                    predictionLabelCounts[prediction] = 1;\n                  } else {\n                    predictionLabelCounts[prediction] += 1;\n                  }\n                }\n              });\n\n              const labelCountChartData = {\n                labels: [\"a\", \"b\", \"c\", \"d\"], // Assuming a, b, c, d are the prediction values\n                datasets: [\n                  {\n                    data: Object.values(predictionLabelCounts),\n                    backgroundColor: \"#defde0\"\n                  }\n                ]\n              };\n\n              setChartData(labelCountChartData);\n\n              resolve();\n            },\n            error: (error) => {\n              reject(error);\n            }\n          });\n        });\n      } else {\n        const allLabelCounts = {};\n        await new Promise((resolve, reject) => {\n          Papa.parse('/static/data.csv', {\n            download: true,\n            header: true,\n            dynamicTyping: true,\n            delimiter: \"\",\n            complete: (result) => {\n              result.data.forEach((item) => {\n                const prediction = item['prediction'];\n\n                if (prediction !== undefined) {\n                  if (!allLabelCounts[prediction]) {\n                    allLabelCounts[prediction] = 1;\n                  } else {\n                    allLabelCounts[prediction] += 1;\n                  }\n                }\n              });\n\n              const labelCountChartData = {\n                labels: [\"a\", \"b\", \"c\", \"d\"], // Assuming a, b, c, d are the prediction values\n                datasets: [\n                  {\n                    data: Object.values(allLabelCounts),\n                    backgroundColor: \"#defde0\"\n                  }\n                ]\n              };\n\n              setChartData(labelCountChartData);\n\n              resolve();\n            },\n            error: (error) => {\n              reject(error);\n            }\n          });\n        });\n      }\n    }\n  };\n\n  const handleCountButtonClick = () => {\n    setShowDoubleBarGraph(!showDoubleBarGraph);\n  };\n\n  return (\n    <div>\n      <h4>Analysis</h4>\n      {chartData ? (\n        <div className=\"graph-container\">\n          <Bar\n            data={chartData}\n            options={{\n              onClick: handleColumnClick,\n              responsive: true,\n              plugins: {\n                legend: {\n                  position: 'top'\n                },\n                title: {\n                  display: true,\n                  text: showDoubleBarGraph ? \"Count of req1Product Values\" : \"Label Count for All Labels\"\n                }\n              },\n              scales: {\n                x: {\n                  ticks: {\n                    color: 'white'\n                  }\n                },\n                y: {\n                  beginAtZero: true,\n                  title: {\n                    display: true,\n                    text: \"Count\",\n                    color: 'white'\n                  },\n                  ticks: {\n                    color: 'white'\n                  }\n                }\n              }\n            }}\n          />\n          <button onClick={handleCountButtonClick}>\n            {showDoubleBarGraph ? \"Hide Double Bar\" : \"Show Double Bar\"}\n          </button>\n        </div>\n      ) : (\n        <div>Loading...</div>\n      )}\n      <style>{`\n        .graph-container {\n          width: 600px; /* Set the desired width */\n          height: 400px; /* Set the desired height */\n          margin: 0 auto; /* Center the graph container horizontally */\n        }\n      `}</style>\n    </div>\n  );\n}\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}