{"ast":null,"code":"import identity from './identity';\nfunction heap_by(f) {\n  // Builds a binary heap within the specified array a[lo:hi]. The heap has the\n  // property such that the parent a[lo+i] is always less than or equal to its\n  // two children: a[lo+2*i+1] and a[lo+2*i+2].\n  function heap(a, lo, hi) {\n    var n = hi - lo,\n      i = (n >>> 1) + 1;\n    while (--i > 0) sift(a, i, n, lo);\n    return a;\n  }\n\n  // Sorts the specified array a[lo:hi] in descending order, assuming it is\n  // already a heap.\n  function sort(a, lo, hi) {\n    var n = hi - lo,\n      t;\n    while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\n    return a;\n  }\n\n  // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\n  // slice of array a[lo:lo+n]. This method can also be used to update the heap\n  // incrementally, without incurring the full cost of reconstructing the heap.\n  function sift(a, i, n, lo) {\n    var d = a[--lo + i],\n      x = f(d),\n      child;\n    while ((child = i << 1) <= n) {\n      if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\n      if (x <= f(a[lo + child])) break;\n      a[lo + i] = a[lo + child];\n      i = child;\n    }\n    a[lo + i] = d;\n  }\n  heap.sort = sort;\n  return heap;\n}\nconst h = heap_by(identity);\nh.by = heap_by;\nexport default h;","map":{"version":3,"names":["identity","heap_by","f","heap","a","lo","hi","n","i","sift","sort","t","d","x","child","h","by"],"sources":["/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/crossfilter2/src/heap.js"],"sourcesContent":["import identity from './identity';\n\nfunction heap_by(f) {\n\n  // Builds a binary heap within the specified array a[lo:hi]. The heap has the\n  // property such that the parent a[lo+i] is always less than or equal to its\n  // two children: a[lo+2*i+1] and a[lo+2*i+2].\n  function heap(a, lo, hi) {\n    var n = hi - lo,\n        i = (n >>> 1) + 1;\n    while (--i > 0) sift(a, i, n, lo);\n    return a;\n  }\n\n  // Sorts the specified array a[lo:hi] in descending order, assuming it is\n  // already a heap.\n  function sort(a, lo, hi) {\n    var n = hi - lo,\n        t;\n    while (--n > 0) t = a[lo], a[lo] = a[lo + n], a[lo + n] = t, sift(a, 1, n, lo);\n    return a;\n  }\n\n  // Sifts the element a[lo+i-1] down the heap, where the heap is the contiguous\n  // slice of array a[lo:lo+n]. This method can also be used to update the heap\n  // incrementally, without incurring the full cost of reconstructing the heap.\n  function sift(a, i, n, lo) {\n    var d = a[--lo + i],\n        x = f(d),\n        child;\n    while ((child = i << 1) <= n) {\n      if (child < n && f(a[lo + child]) > f(a[lo + child + 1])) child++;\n      if (x <= f(a[lo + child])) break;\n      a[lo + i] = a[lo + child];\n      i = child;\n    }\n    a[lo + i] = d;\n  }\n\n  heap.sort = sort;\n  return heap;\n}\n\nconst h = heap_by(identity);\nh.by = heap_by;\n\nexport default h;\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,YAAY;AAEjC,SAASC,OAAOA,CAACC,CAAC,EAAE;EAElB;EACA;EACA;EACA,SAASC,IAAIA,CAACC,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAE;IACvB,IAAIC,CAAC,GAAGD,EAAE,GAAGD,EAAE;MACXG,CAAC,GAAG,CAACD,CAAC,KAAK,CAAC,IAAI,CAAC;IACrB,OAAO,EAAEC,CAAC,GAAG,CAAC,EAAEC,IAAI,CAACL,CAAC,EAAEI,CAAC,EAAED,CAAC,EAAEF,EAAE,CAAC;IACjC,OAAOD,CAAC;EACV;;EAEA;EACA;EACA,SAASM,IAAIA,CAACN,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAE;IACvB,IAAIC,CAAC,GAAGD,EAAE,GAAGD,EAAE;MACXM,CAAC;IACL,OAAO,EAAEJ,CAAC,GAAG,CAAC,EAAEI,CAAC,GAAGP,CAAC,CAACC,EAAE,CAAC,EAAED,CAAC,CAACC,EAAE,CAAC,GAAGD,CAAC,CAACC,EAAE,GAAGE,CAAC,CAAC,EAAEH,CAAC,CAACC,EAAE,GAAGE,CAAC,CAAC,GAAGI,CAAC,EAAEF,IAAI,CAACL,CAAC,EAAE,CAAC,EAAEG,CAAC,EAAEF,EAAE,CAAC;IAC9E,OAAOD,CAAC;EACV;;EAEA;EACA;EACA;EACA,SAASK,IAAIA,CAACL,CAAC,EAAEI,CAAC,EAAED,CAAC,EAAEF,EAAE,EAAE;IACzB,IAAIO,CAAC,GAAGR,CAAC,CAAC,EAAEC,EAAE,GAAGG,CAAC,CAAC;MACfK,CAAC,GAAGX,CAAC,CAACU,CAAC,CAAC;MACRE,KAAK;IACT,OAAO,CAACA,KAAK,GAAGN,CAAC,IAAI,CAAC,KAAKD,CAAC,EAAE;MAC5B,IAAIO,KAAK,GAAGP,CAAC,IAAIL,CAAC,CAACE,CAAC,CAACC,EAAE,GAAGS,KAAK,CAAC,CAAC,GAAGZ,CAAC,CAACE,CAAC,CAACC,EAAE,GAAGS,KAAK,GAAG,CAAC,CAAC,CAAC,EAAEA,KAAK,EAAE;MACjE,IAAID,CAAC,IAAIX,CAAC,CAACE,CAAC,CAACC,EAAE,GAAGS,KAAK,CAAC,CAAC,EAAE;MAC3BV,CAAC,CAACC,EAAE,GAAGG,CAAC,CAAC,GAAGJ,CAAC,CAACC,EAAE,GAAGS,KAAK,CAAC;MACzBN,CAAC,GAAGM,KAAK;IACX;IACAV,CAAC,CAACC,EAAE,GAAGG,CAAC,CAAC,GAAGI,CAAC;EACf;EAEAT,IAAI,CAACO,IAAI,GAAGA,IAAI;EAChB,OAAOP,IAAI;AACb;AAEA,MAAMY,CAAC,GAAGd,OAAO,CAACD,QAAQ,CAAC;AAC3Be,CAAC,CAACC,EAAE,GAAGf,OAAO;AAEd,eAAec,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}