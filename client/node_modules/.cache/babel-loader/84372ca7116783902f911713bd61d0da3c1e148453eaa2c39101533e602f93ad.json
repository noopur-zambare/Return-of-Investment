{"ast":null,"code":"/*!\n *  dc 2.2.2\n *  http://dc-js.github.io/dc.js/\n *  Copyright 2012-2016 Nick Zhu & the dc.js Developers\n *  https://github.com/dc-js/dc.js/blob/master/AUTHORS\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *      http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n */\n(function () {\n  function _dc(d3, crossfilter) {\n    'use strict';\n\n    /**\n     * The entire dc.js library is scoped under the **dc** name space. It does not introduce\n     * anything else into the global name space.\n     *\n     * Most `dc` functions are designed to allow function chaining, meaning they return the current chart\n     * instance whenever it is appropriate.  The getter forms of functions do not participate in function\n     * chaining because they return values that are not the chart, although some,\n     * such as {@link dc.baseMixin#svg .svg} and {@link dc.coordinateGridMixin#xAxis .xAxis},\n     * return values that are themselves chainable d3 objects.\n     * @namespace dc\n     * @version 2.2.2\n     * @example\n     * // Example chaining\n     * chart.width(300)\n     *      .height(300)\n     *      .filter('sunday');\n     */\n    /*jshint -W079*/\n    var dc = {\n      version: '2.2.2',\n      constants: {\n        CHART_CLASS: 'dc-chart',\n        DEBUG_GROUP_CLASS: 'debug',\n        STACK_CLASS: 'stack',\n        DESELECTED_CLASS: 'deselected',\n        SELECTED_CLASS: 'selected',\n        NODE_INDEX_NAME: '__index__',\n        GROUP_INDEX_NAME: '__group_index__',\n        DEFAULT_CHART_GROUP: '__default_chart_group__',\n        EVENT_DELAY: 40,\n        NEGLIGIBLE_NUMBER: 1e-10\n      },\n      _renderlet: null\n    };\n    /*jshint +W079*/\n\n    /**\n     * The dc.chartRegistry object maintains sets of all instantiated dc.js charts under named groups\n     * and the default group.\n     *\n     * A chart group often corresponds to a crossfilter instance. It specifies\n     * the set of charts which should be updated when a filter changes on one of the charts or when the\n     * global functions {@link dc.filterAll dc.filterAll}, {@link dc.refocusAll dc.refocusAll},\n     * {@link dc.renderAll dc.renderAll}, {@link dc.redrawAll dc.redrawAll}, or chart functions\n     * {@link dc.baseMixin#renderGroup baseMixin.renderGroup},\n     * {@link dc.baseMixin#redrawGroup baseMixin.redrawGroup} are called.\n     *\n     * @namespace chartRegistry\n     * @memberof dc\n     * @type {{has, register, deregister, clear, list}}\n     */\n    dc.chartRegistry = function () {\n      // chartGroup:string => charts:array\n      var _chartMap = {};\n      function initializeChartGroup(group) {\n        if (!group) {\n          group = dc.constants.DEFAULT_CHART_GROUP;\n        }\n        if (!_chartMap[group]) {\n          _chartMap[group] = [];\n        }\n        return group;\n      }\n      return {\n        /**\n         * Determine if a given chart instance resides in any group in the registry.\n         * @method has\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @returns {Boolean}\n         */\n        has: function (chart) {\n          for (var e in _chartMap) {\n            if (_chartMap[e].indexOf(chart) >= 0) {\n              return true;\n            }\n          }\n          return false;\n        },\n        /**\n         * Add given chart instance to the given group, creating the group if necessary.\n         * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n         * @method register\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @param {String} [group] Group name\n         */\n        register: function (chart, group) {\n          group = initializeChartGroup(group);\n          _chartMap[group].push(chart);\n        },\n        /**\n         * Remove given chart instance from the given group, creating the group if necessary.\n         * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n         * @method deregister\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @param {String} [group] Group name\n         */\n        deregister: function (chart, group) {\n          group = initializeChartGroup(group);\n          for (var i = 0; i < _chartMap[group].length; i++) {\n            if (_chartMap[group][i].anchorName() === chart.anchorName()) {\n              _chartMap[group].splice(i, 1);\n              break;\n            }\n          }\n        },\n        /**\n         * Clear given group if one is provided, otherwise clears all groups.\n         * @method clear\n         * @memberof dc.chartRegistry\n         * @param {String} group Group name\n         */\n        clear: function (group) {\n          if (group) {\n            delete _chartMap[group];\n          } else {\n            _chartMap = {};\n          }\n        },\n        /**\n         * Get an array of each chart instance in the given group.\n         * If no group is provided, the charts in the default group are returned.\n         * @method list\n         * @memberof dc.chartRegistry\n         * @param {String} [group] Group name\n         * @returns {Array<Object>}\n         */\n        list: function (group) {\n          group = initializeChartGroup(group);\n          return _chartMap[group];\n        }\n      };\n    }();\n\n    /**\n     * Add given chart instance to the given group, creating the group if necessary.\n     * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n     * @memberof dc\n     * @method registerChart\n     * @param {Object} chart dc.js chart instance\n     * @param {String} [group] Group name\n     */\n    dc.registerChart = function (chart, group) {\n      dc.chartRegistry.register(chart, group);\n    };\n\n    /**\n     * Remove given chart instance from the given group, creating the group if necessary.\n     * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n     * @memberof dc\n     * @method deregisterChart\n     * @param {Object} chart dc.js chart instance\n     * @param {String} [group] Group name\n     */\n    dc.deregisterChart = function (chart, group) {\n      dc.chartRegistry.deregister(chart, group);\n    };\n\n    /**\n     * Determine if a given chart instance resides in any group in the registry.\n     * @memberof dc\n     * @method hasChart\n     * @param {Object} chart dc.js chart instance\n     * @returns {Boolean}\n     */\n    dc.hasChart = function (chart) {\n      return dc.chartRegistry.has(chart);\n    };\n\n    /**\n     * Clear given group if one is provided, otherwise clears all groups.\n     * @memberof dc\n     * @method deregisterAllCharts\n     * @param {String} group Group name\n     */\n    dc.deregisterAllCharts = function (group) {\n      dc.chartRegistry.clear(group);\n    };\n\n    /**\n     * Clear all filters on all charts within the given chart group. If the chart group is not given then\n     * only charts that belong to the default chart group will be reset.\n     * @memberof dc\n     * @method filterAll\n     * @param {String} [group]\n     */\n    dc.filterAll = function (group) {\n      var charts = dc.chartRegistry.list(group);\n      for (var i = 0; i < charts.length; ++i) {\n        charts[i].filterAll();\n      }\n    };\n\n    /**\n     * Reset zoom level / focus on all charts that belong to the given chart group. If the chart group is\n     * not given then only charts that belong to the default chart group will be reset.\n     * @memberof dc\n     * @method refocusAll\n     * @param {String} [group]\n     */\n    dc.refocusAll = function (group) {\n      var charts = dc.chartRegistry.list(group);\n      for (var i = 0; i < charts.length; ++i) {\n        if (charts[i].focus) {\n          charts[i].focus();\n        }\n      }\n    };\n\n    /**\n     * Re-render all charts belong to the given chart group. If the chart group is not given then only\n     * charts that belong to the default chart group will be re-rendered.\n     * @memberof dc\n     * @method renderAll\n     * @param {String} [group]\n     */\n    dc.renderAll = function (group) {\n      var charts = dc.chartRegistry.list(group);\n      for (var i = 0; i < charts.length; ++i) {\n        charts[i].render();\n      }\n      if (dc._renderlet !== null) {\n        dc._renderlet(group);\n      }\n    };\n\n    /**\n     * Redraw all charts belong to the given chart group. If the chart group is not given then only charts\n     * that belong to the default chart group will be re-drawn. Redraw is different from re-render since\n     * when redrawing dc tries to update the graphic incrementally, using transitions, instead of starting\n     * from scratch.\n     * @memberof dc\n     * @method redrawAll\n     * @param {String} [group]\n     */\n    dc.redrawAll = function (group) {\n      var charts = dc.chartRegistry.list(group);\n      for (var i = 0; i < charts.length; ++i) {\n        charts[i].redraw();\n      }\n      if (dc._renderlet !== null) {\n        dc._renderlet(group);\n      }\n    };\n\n    /**\n     * If this boolean is set truthy, all transitions will be disabled, and changes to the charts will happen\n     * immediately.\n     * @memberof dc\n     * @member disableTransitions\n     * @type {Boolean}\n     * @default false\n     */\n    dc.disableTransitions = false;\n\n    /**\n     * Start a transition on a selection if transitions are globally enabled\n     * ({@link dc.disableTransitions} is false) and the duration is greater than zero; otherwise return\n     * the selection. Since most operations are the same on a d3 selection and a d3 transition, this\n     * allows a common code path for both cases.\n     * @memberof dc\n     * @method transition\n     * @param {d3.selection} selection - the selection to be transitioned\n     * @param {Number|Function} [duration=250] - the duration of the transition in milliseconds, a\n     * function returning the duration, or 0 for no transition\n     * @param {Number|Function} [delay] - the delay of the transition in milliseconds, or a function\n     * returning the delay, or 0 for no delay\n     * @param {String} [name] - the name of the transition (if concurrent transitions on the same\n     * elements are needed)\n     * @returns {d3.transition|d3.selection}\n     */\n    dc.transition = function (selection, duration, delay, name) {\n      if (dc.disableTransitions || duration <= 0) {\n        return selection;\n      }\n      var s = selection.transition(name);\n      if (duration >= 0 || duration !== undefined) {\n        s = s.duration(duration);\n      }\n      if (delay >= 0 || delay !== undefined) {\n        s = s.delay(delay);\n      }\n      return s;\n    };\n\n    /* somewhat silly, but to avoid duplicating logic */\n    dc.optionalTransition = function (enable, duration, delay, name) {\n      if (enable) {\n        return function (selection) {\n          return dc.transition(selection, duration, delay, name);\n        };\n      } else {\n        return function (selection) {\n          return selection;\n        };\n      }\n    };\n\n    // See http://stackoverflow.com/a/20773846\n    dc.afterTransition = function (transition, callback) {\n      if (transition.empty() || !transition.duration) {\n        callback.call(transition);\n      } else {\n        var n = 0;\n        transition.each(function () {\n          ++n;\n        }).each('end', function () {\n          if (! --n) {\n            callback.call(transition);\n          }\n        });\n      }\n    };\n\n    /**\n     * @namespace units\n     * @memberof dc\n     * @type {{}}\n     */\n    dc.units = {};\n\n    /**\n     * The default value for {@link dc.coordinateGridMixin#xUnits .xUnits} for the\n     * {@link dc.coordinateGridMixin Coordinate Grid Chart} and should\n     * be used when the x values are a sequence of integers.\n     * It is a function that counts the number of integers in the range supplied in its start and end parameters.\n     * @method integers\n     * @memberof dc.units\n     * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n     * @example\n     * chart.xUnits(dc.units.integers) // already the default\n     * @param {Number} start\n     * @param {Number} end\n     * @returns {Number}\n     */\n    dc.units.integers = function (start, end) {\n      return Math.abs(end - start);\n    };\n\n    /**\n     * This argument can be passed to the {@link dc.coordinateGridMixin#xUnits .xUnits} function of the to\n     * specify ordinal units for the x axis. Usually this parameter is used in combination with passing\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md d3.scale.ordinal} to\n     * {@link dc.coordinateGridMixin#x .x}.\n     * It just returns the domain passed to it, which for ordinal charts is an array of all values.\n     * @method ordinal\n     * @memberof dc.units\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md d3.scale.ordinal}\n     * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n     * @see {@link dc.coordinateGridMixin#x coordinateGridMixin.x}\n     * @example\n     * chart.xUnits(dc.units.ordinal)\n     *      .x(d3.scale.ordinal())\n     * @param {*} start\n     * @param {*} end\n     * @param {Array<String>} domain\n     * @returns {Array<String>}\n     */\n    dc.units.ordinal = function (start, end, domain) {\n      return domain;\n    };\n\n    /**\n     * @namespace fp\n     * @memberof dc.units\n     * @type {{}}\n     */\n    dc.units.fp = {};\n    /**\n     * This function generates an argument for the {@link dc.coordinateGridMixin Coordinate Grid Chart}\n     * {@link dc.coordinateGridMixin#xUnits .xUnits} function specifying that the x values are floating-point\n     * numbers with the given precision.\n     * The returned function determines how many values at the given precision will fit into the range\n     * supplied in its start and end parameters.\n     * @method precision\n     * @memberof dc.units.fp\n     * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n     * @example\n     * // specify values (and ticks) every 0.1 units\n     * chart.xUnits(dc.units.fp.precision(0.1)\n     * // there are 500 units between 0.5 and 1 if the precision is 0.001\n     * var thousandths = dc.units.fp.precision(0.001);\n     * thousandths(0.5, 1.0) // returns 500\n     * @param {Number} precision\n     * @returns {Function} start-end unit function\n     */\n    dc.units.fp.precision = function (precision) {\n      var _f = function (s, e) {\n        var d = Math.abs((e - s) / _f.resolution);\n        if (dc.utils.isNegligible(d - Math.floor(d))) {\n          return Math.floor(d);\n        } else {\n          return Math.ceil(d);\n        }\n      };\n      _f.resolution = precision;\n      return _f;\n    };\n    dc.round = {};\n    dc.round.floor = function (n) {\n      return Math.floor(n);\n    };\n    dc.round.ceil = function (n) {\n      return Math.ceil(n);\n    };\n    dc.round.round = function (n) {\n      return Math.round(n);\n    };\n    dc.override = function (obj, functionName, newFunction) {\n      var existingFunction = obj[functionName];\n      obj['_' + functionName] = existingFunction;\n      obj[functionName] = newFunction;\n    };\n    dc.renderlet = function (_) {\n      if (!arguments.length) {\n        return dc._renderlet;\n      }\n      dc._renderlet = _;\n      return dc;\n    };\n    dc.instanceOfChart = function (o) {\n      return o instanceof Object && o.__dcFlag__ && true;\n    };\n    dc.errors = {};\n    dc.errors.Exception = function (msg) {\n      var _msg = msg || 'Unexpected internal error';\n      this.message = _msg;\n      this.toString = function () {\n        return _msg;\n      };\n      this.stack = new Error().stack;\n    };\n    dc.errors.Exception.prototype = Object.create(Error.prototype);\n    dc.errors.Exception.prototype.constructor = dc.errors.Exception;\n    dc.errors.InvalidStateException = function () {\n      dc.errors.Exception.apply(this, arguments);\n    };\n    dc.errors.InvalidStateException.prototype = Object.create(dc.errors.Exception.prototype);\n    dc.errors.InvalidStateException.prototype.constructor = dc.errors.InvalidStateException;\n    dc.errors.BadArgumentException = function () {\n      dc.errors.Exception.apply(this, arguments);\n    };\n    dc.errors.BadArgumentException.prototype = Object.create(dc.errors.Exception.prototype);\n    dc.errors.BadArgumentException.prototype.constructor = dc.errors.BadArgumentException;\n\n    /**\n     * The default date format for dc.js\n     * @name dateFormat\n     * @memberof dc\n     * @type {Function}\n     * @default d3.time.format('%m/%d/%Y')\n     */\n    dc.dateFormat = d3.time.format('%m/%d/%Y');\n\n    /**\n     * @namespace printers\n     * @memberof dc\n     * @type {{}}\n     */\n    dc.printers = {};\n\n    /**\n     * Converts a list of filters into a readable string.\n     * @method filters\n     * @memberof dc.printers\n     * @param {Array<dc.filters>} filters\n     * @returns {String}\n     */\n    dc.printers.filters = function (filters) {\n      var s = '';\n      for (var i = 0; i < filters.length; ++i) {\n        if (i > 0) {\n          s += ', ';\n        }\n        s += dc.printers.filter(filters[i]);\n      }\n      return s;\n    };\n\n    /**\n     * Converts a filter into a readable string.\n     * @method filter\n     * @memberof dc.printers\n     * @param {dc.filters|any|Array<any>} filter\n     * @returns {String}\n     */\n    dc.printers.filter = function (filter) {\n      var s = '';\n      if (typeof filter !== 'undefined' && filter !== null) {\n        if (filter instanceof Array) {\n          if (filter.length >= 2) {\n            s = '[' + dc.utils.printSingleValue(filter[0]) + ' -> ' + dc.utils.printSingleValue(filter[1]) + ']';\n          } else if (filter.length >= 1) {\n            s = dc.utils.printSingleValue(filter[0]);\n          }\n        } else {\n          s = dc.utils.printSingleValue(filter);\n        }\n      }\n      return s;\n    };\n\n    /**\n     * Returns a function that given a string property name, can be used to pluck the property off an object.  A function\n     * can be passed as the second argument to also alter the data being returned.\n     *\n     * This can be a useful shorthand method to create accessor functions.\n     * @method pluck\n     * @memberof dc\n     * @example\n     * var xPluck = dc.pluck('x');\n     * var objA = {x: 1};\n     * xPluck(objA) // 1\n     * @example\n     * var xPosition = dc.pluck('x', function (x, i) {\n     *     // `this` is the original datum,\n     *     // `x` is the x property of the datum,\n     *     // `i` is the position in the array\n     *     return this.radius + x;\n     * });\n     * dc.selectAll('.circle').data(...).x(xPosition);\n     * @param {String} n\n     * @param {Function} [f]\n     * @returns {Function}\n     */\n    dc.pluck = function (n, f) {\n      if (!f) {\n        return function (d) {\n          return d[n];\n        };\n      }\n      return function (d, i) {\n        return f.call(d, d[n], i);\n      };\n    };\n\n    /**\n     * @namespace utils\n     * @memberof dc\n     * @type {{}}\n     */\n    dc.utils = {};\n\n    /**\n     * Print a single value filter.\n     * @method printSingleValue\n     * @memberof dc.utils\n     * @param {any} filter\n     * @returns {String}\n     */\n    dc.utils.printSingleValue = function (filter) {\n      var s = '' + filter;\n      if (filter instanceof Date) {\n        s = dc.dateFormat(filter);\n      } else if (typeof filter === 'string') {\n        s = filter;\n      } else if (dc.utils.isFloat(filter)) {\n        s = dc.utils.printSingleValue.fformat(filter);\n      } else if (dc.utils.isInteger(filter)) {\n        s = Math.round(filter);\n      }\n      return s;\n    };\n    dc.utils.printSingleValue.fformat = d3.format('.2f');\n\n    /**\n     * Arbitrary add one value to another.\n     * @method add\n     * @memberof dc.utils\n     * @todo\n     * These assume than any string r is a percentage (whether or not it includes %).\n     * They also generate strange results if l is a string.\n     * @param {String|Date|Number} l the value to modify\n     * @param {Number} r the amount by which to modify the value\n     * @param {String} [t] if `l` is a `Date`, the\n     * [interval](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval) in\n     * the `d3.time` namespace\n     * @returns {String|Date|Number}\n     */\n    dc.utils.add = function (l, r, t) {\n      if (typeof r === 'string') {\n        r = r.replace('%', '');\n      }\n      if (l instanceof Date) {\n        if (typeof r === 'string') {\n          r = +r;\n        }\n        if (t === 'millis') {\n          return new Date(l.getTime() + r);\n        }\n        t = t || 'day';\n        return d3.time[t].offset(l, r);\n      } else if (typeof r === 'string') {\n        var percentage = +r / 100;\n        return l > 0 ? l * (1 + percentage) : l * (1 - percentage);\n      } else {\n        return l + r;\n      }\n    };\n\n    /**\n     * Arbitrary subtract one value from another.\n     * @method subtract\n     * @memberof dc.utils\n     * @todo\n     * These assume than any string r is a percentage (whether or not it includes %).\n     * They also generate strange results if l is a string.\n     * @param {String|Date|Number} l the value to modify\n     * @param {Number} r the amount by which to modify the value\n     * @param {String} [t] if `l` is a `Date`, the\n     * [interval](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval) in\n     * the `d3.time` namespace\n     * @returns {String|Date|Number}\n     */\n    dc.utils.subtract = function (l, r, t) {\n      if (typeof r === 'string') {\n        r = r.replace('%', '');\n      }\n      if (l instanceof Date) {\n        if (typeof r === 'string') {\n          r = +r;\n        }\n        if (t === 'millis') {\n          return new Date(l.getTime() - r);\n        }\n        t = t || 'day';\n        return d3.time[t].offset(l, -r);\n      } else if (typeof r === 'string') {\n        var percentage = +r / 100;\n        return l < 0 ? l * (1 + percentage) : l * (1 - percentage);\n      } else {\n        return l - r;\n      }\n    };\n\n    /**\n     * Is the value a number?\n     * @method isNumber\n     * @memberof dc.utils\n     * @param {any} n\n     * @returns {Boolean}\n     */\n    dc.utils.isNumber = function (n) {\n      return n === +n;\n    };\n\n    /**\n     * Is the value a float?\n     * @method isFloat\n     * @memberof dc.utils\n     * @param {any} n\n     * @returns {Boolean}\n     */\n    dc.utils.isFloat = function (n) {\n      return n === +n && n !== (n | 0);\n    };\n\n    /**\n     * Is the value an integer?\n     * @method isInteger\n     * @memberof dc.utils\n     * @param {any} n\n     * @returns {Boolean}\n     */\n    dc.utils.isInteger = function (n) {\n      return n === +n && n === (n | 0);\n    };\n\n    /**\n     * Is the value very close to zero?\n     * @method isNegligible\n     * @memberof dc.utils\n     * @param {any} n\n     * @returns {Boolean}\n     */\n    dc.utils.isNegligible = function (n) {\n      return !dc.utils.isNumber(n) || n < dc.constants.NEGLIGIBLE_NUMBER && n > -dc.constants.NEGLIGIBLE_NUMBER;\n    };\n\n    /**\n     * Ensure the value is no greater or less than the min/max values.  If it is return the boundary value.\n     * @method clamp\n     * @memberof dc.utils\n     * @param {any} val\n     * @param {any} min\n     * @param {any} max\n     * @returns {any}\n     */\n    dc.utils.clamp = function (val, min, max) {\n      return val < min ? min : val > max ? max : val;\n    };\n\n    /**\n     * Using a simple static counter, provide a unique integer id.\n     * @method uniqueId\n     * @memberof dc.utils\n     * @returns {Number}\n     */\n    var _idCounter = 0;\n    dc.utils.uniqueId = function () {\n      return ++_idCounter;\n    };\n\n    /**\n     * Convert a name to an ID.\n     * @method nameToId\n     * @memberof dc.utils\n     * @param {String} name\n     * @returns {String}\n     */\n    dc.utils.nameToId = function (name) {\n      return name.toLowerCase().replace(/[\\s]/g, '_').replace(/[\\.']/g, '');\n    };\n\n    /**\n     * Append or select an item on a parent element.\n     * @method appendOrSelect\n     * @memberof dc.utils\n     * @param {d3.selection} parent\n     * @param {String} selector\n     * @param {String} tag\n     * @returns {d3.selection}\n     */\n    dc.utils.appendOrSelect = function (parent, selector, tag) {\n      tag = tag || selector;\n      var element = parent.select(selector);\n      if (element.empty()) {\n        element = parent.append(tag);\n      }\n      return element;\n    };\n\n    /**\n     * Return the number if the value is a number; else 0.\n     * @method safeNumber\n     * @memberof dc.utils\n     * @param {Number|any} n\n     * @returns {Number}\n     */\n    dc.utils.safeNumber = function (n) {\n      return dc.utils.isNumber(+n) ? +n : 0;\n    };\n    dc.logger = {};\n    dc.logger.enableDebugLog = false;\n    dc.logger.warn = function (msg) {\n      if (console) {\n        if (console.warn) {\n          console.warn(msg);\n        } else if (console.log) {\n          console.log(msg);\n        }\n      }\n      return dc.logger;\n    };\n    dc.logger.debug = function (msg) {\n      if (dc.logger.enableDebugLog && console) {\n        if (console.debug) {\n          console.debug(msg);\n        } else if (console.log) {\n          console.log(msg);\n        }\n      }\n      return dc.logger;\n    };\n    dc.logger.deprecate = function (fn, msg) {\n      // Allow logging of deprecation\n      var warned = false;\n      function deprecated() {\n        if (!warned) {\n          dc.logger.warn(msg);\n          warned = true;\n        }\n        return fn.apply(this, arguments);\n      }\n      return deprecated;\n    };\n    dc.events = {\n      current: null\n    };\n\n    /**\n     * This function triggers a throttled event function with a specified delay (in milli-seconds).  Events\n     * that are triggered repetitively due to user interaction such brush dragging might flood the library\n     * and invoke more renders than can be executed in time. Using this function to wrap your event\n     * function allows the library to smooth out the rendering by throttling events and only responding to\n     * the most recent event.\n     * @name events.trigger\n     * @memberof dc\n     * @example\n     * chart.on('renderlet', function(chart) {\n     *     // smooth the rendering through event throttling\n     *     dc.events.trigger(function(){\n     *         // focus some other chart to the range selected by user on this chart\n     *         someOtherChart.focus(chart.filter());\n     *     });\n     * })\n     * @param {Function} closure\n     * @param {Number} [delay]\n     */\n    dc.events.trigger = function (closure, delay) {\n      if (!delay) {\n        closure();\n        return;\n      }\n      dc.events.current = closure;\n      setTimeout(function () {\n        if (closure === dc.events.current) {\n          closure();\n        }\n      }, delay);\n    };\n\n    /**\n     * The dc.js filters are functions which are passed into crossfilter to chose which records will be\n     * accumulated to produce values for the charts.  In the crossfilter model, any filters applied on one\n     * dimension will affect all the other dimensions but not that one.  dc always applies a filter\n     * function to the dimension; the function combines multiple filters and if any of them accept a\n     * record, it is filtered in.\n     *\n     * These filter constructors are used as appropriate by the various charts to implement brushing.  We\n     * mention below which chart uses which filter.  In some cases, many instances of a filter will be added.\n     *\n     * Each of the dc.js filters is an object with the following properties:\n     * * `isFiltered` - a function that returns true if a value is within the filter\n     * * `filterType` - a string identifying the filter, here the name of the constructor\n     *\n     * Currently these filter objects are also arrays, but this is not a requirement. Custom filters\n     * can be used as long as they have the properties above.\n     * @namespace filters\n     * @memberof dc\n     * @type {{}}\n     */\n    dc.filters = {};\n\n    /**\n     * RangedFilter is a filter which accepts keys between `low` and `high`.  It is used to implement X\n     * axis brushing for the {@link dc.coordinateGridMixin coordinate grid charts}.\n     *\n     * Its `filterType` is 'RangedFilter'\n     * @name RangedFilter\n     * @memberof dc.filters\n     * @param {Number} low\n     * @param {Number} high\n     * @returns {Array<Number>}\n     * @constructor\n     */\n    dc.filters.RangedFilter = function (low, high) {\n      var range = new Array(low, high);\n      range.isFiltered = function (value) {\n        return value >= this[0] && value < this[1];\n      };\n      range.filterType = 'RangedFilter';\n      return range;\n    };\n\n    /**\n     * TwoDimensionalFilter is a filter which accepts a single two-dimensional value.  It is used by the\n     * {@link dc.heatMap heat map chart} to include particular cells as they are clicked.  (Rows and columns are\n     * filtered by filtering all the cells in the row or column.)\n     *\n     * Its `filterType` is 'TwoDimensionalFilter'\n     * @name TwoDimensionalFilter\n     * @memberof dc.filters\n     * @param {Array<Number>} filter\n     * @returns {Array<Number>}\n     * @constructor\n     */\n    dc.filters.TwoDimensionalFilter = function (filter) {\n      if (filter === null) {\n        return null;\n      }\n      var f = filter;\n      f.isFiltered = function (value) {\n        return value.length && value.length === f.length && value[0] === f[0] && value[1] === f[1];\n      };\n      f.filterType = 'TwoDimensionalFilter';\n      return f;\n    };\n\n    /**\n     * The RangedTwoDimensionalFilter allows filtering all values which fit within a rectangular\n     * region. It is used by the {@link dc.scatterPlot scatter plot} to implement rectangular brushing.\n     *\n     * It takes two two-dimensional points in the form `[[x1,y1],[x2,y2]]`, and normalizes them so that\n     * `x1 <= x2` and `y1 <= y2`. It then returns a filter which accepts any points which are in the\n     * rectangular range including the lower values but excluding the higher values.\n     *\n     * If an array of two values are given to the RangedTwoDimensionalFilter, it interprets the values as\n     * two x coordinates `x1` and `x2` and returns a filter which accepts any points for which `x1 <= x <\n     * x2`.\n     *\n     * Its `filterType` is 'RangedTwoDimensionalFilter'\n     * @name RangedTwoDimensionalFilter\n     * @memberof dc.filters\n     * @param {Array<Array<Number>>} filter\n     * @returns {Array<Array<Number>>}\n     * @constructor\n     */\n    dc.filters.RangedTwoDimensionalFilter = function (filter) {\n      if (filter === null) {\n        return null;\n      }\n      var f = filter;\n      var fromBottomLeft;\n      if (f[0] instanceof Array) {\n        fromBottomLeft = [[Math.min(filter[0][0], filter[1][0]), Math.min(filter[0][1], filter[1][1])], [Math.max(filter[0][0], filter[1][0]), Math.max(filter[0][1], filter[1][1])]];\n      } else {\n        fromBottomLeft = [[filter[0], -Infinity], [filter[1], Infinity]];\n      }\n      f.isFiltered = function (value) {\n        var x, y;\n        if (value instanceof Array) {\n          x = value[0];\n          y = value[1];\n        } else {\n          x = value;\n          y = fromBottomLeft[0][1];\n        }\n        return x >= fromBottomLeft[0][0] && x < fromBottomLeft[1][0] && y >= fromBottomLeft[0][1] && y < fromBottomLeft[1][1];\n      };\n      f.filterType = 'RangedTwoDimensionalFilter';\n      return f;\n    };\n\n    /**\n     * `dc.baseMixin` is an abstract functional object representing a basic `dc` chart object\n     * for all chart and widget implementations. Methods from the {@link #dc.baseMixin dc.baseMixin} are inherited\n     * and available on all chart implementations in the `dc` library.\n     * @name baseMixin\n     * @memberof dc\n     * @mixin\n     * @param {Object} _chart\n     * @returns {dc.baseMixin}\n     */\n    dc.baseMixin = function (_chart) {\n      _chart.__dcFlag__ = dc.utils.uniqueId();\n      var _dimension;\n      var _group;\n      var _anchor;\n      var _root;\n      var _svg;\n      var _isChild;\n      var _minWidth = 200;\n      var _defaultWidthCalc = function (element) {\n        var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n        return width && width > _minWidth ? width : _minWidth;\n      };\n      var _widthCalc = _defaultWidthCalc;\n      var _minHeight = 200;\n      var _defaultHeightCalc = function (element) {\n        var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n        return height && height > _minHeight ? height : _minHeight;\n      };\n      var _heightCalc = _defaultHeightCalc;\n      var _width, _height;\n      var _useViewBoxResizing = false;\n      var _keyAccessor = dc.pluck('key');\n      var _valueAccessor = dc.pluck('value');\n      var _label = dc.pluck('key');\n      var _ordering = dc.pluck('key');\n      var _orderSort;\n      var _renderLabel = false;\n      var _title = function (d) {\n        return _chart.keyAccessor()(d) + ': ' + _chart.valueAccessor()(d);\n      };\n      var _renderTitle = true;\n      var _controlsUseVisibility = false;\n      var _transitionDuration = 750;\n      var _transitionDelay = 0;\n      var _filterPrinter = dc.printers.filters;\n      var _mandatoryAttributes = ['dimension', 'group'];\n      var _chartGroup = dc.constants.DEFAULT_CHART_GROUP;\n      var _listeners = d3.dispatch('preRender', 'postRender', 'preRedraw', 'postRedraw', 'filtered', 'zoomed', 'renderlet', 'pretransition');\n      var _legend;\n      var _commitHandler;\n      var _filters = [];\n      var _filterHandler = function (dimension, filters) {\n        if (filters.length === 0) {\n          dimension.filter(null);\n        } else if (filters.length === 1 && !filters[0].isFiltered) {\n          // single value and not a function-based filter\n          dimension.filterExact(filters[0]);\n        } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n          // single range-based filter\n          dimension.filterRange(filters[0]);\n        } else {\n          dimension.filterFunction(function (d) {\n            for (var i = 0; i < filters.length; i++) {\n              var filter = filters[i];\n              if (filter.isFiltered && filter.isFiltered(d)) {\n                return true;\n              } else if (filter <= d && filter >= d) {\n                return true;\n              }\n            }\n            return false;\n          });\n        }\n        return filters;\n      };\n      var _data = function (group) {\n        return group.all();\n      };\n\n      /**\n       * Set or get the height attribute of a chart. The height is applied to the SVGElement generated by\n       * the chart when rendered (or re-rendered). If a value is given, then it will be used to calculate\n       * the new height and the chart returned for method chaining.  The value can either be a numeric, a\n       * function, or falsy. If no value is specified then the value of the current height attribute will\n       * be returned.\n       *\n       * By default, without an explicit height being given, the chart will select the width of its\n       * anchor element. If that isn't possible it defaults to 200 (provided by the\n       * {@link dc.baseMixin#minHeight minHeight} property). Setting the value falsy will return\n       * the chart to the default behavior.\n       * @method height\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link dc.baseMixin#minHeight minHeight}\n       * @example\n       * // Default height\n       * chart.height(function (element) {\n       *     var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n       *     return (height && height > chart.minHeight()) ? height : chart.minHeight();\n       * });\n       *\n       * chart.height(250); // Set the chart's height to 250px;\n       * chart.height(function(anchor) { return doSomethingWith(anchor); }); // set the chart's height with a function\n       * chart.height(null); // reset the height to the default auto calculation\n       * @param {Number|Function} [height]\n       * @returns {Number|dc.baseMixin}\n       */\n      _chart.height = function (height) {\n        if (!arguments.length) {\n          if (!dc.utils.isNumber(_height)) {\n            // only calculate once\n            _height = _heightCalc(_root.node());\n          }\n          return _height;\n        }\n        _heightCalc = d3.functor(height || _defaultHeightCalc);\n        _height = undefined;\n        return _chart;\n      };\n\n      /**\n       * Set or get the width attribute of a chart.\n       * @method width\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link dc.baseMixin#height height}\n       * @see {@link dc.baseMixin#minWidth minWidth}\n       * @example\n       * // Default width\n       * chart.width(function (element) {\n       *     var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n       *     return (width && width > chart.minWidth()) ? width : chart.minWidth();\n       * });\n       * @param {Number|Function} [width]\n       * @returns {Number|dc.baseMixin}\n       */\n      _chart.width = function (width) {\n        if (!arguments.length) {\n          if (!dc.utils.isNumber(_width)) {\n            // only calculate once\n            _width = _widthCalc(_root.node());\n          }\n          return _width;\n        }\n        _widthCalc = d3.functor(width || _defaultWidthCalc);\n        _width = undefined;\n        return _chart;\n      };\n\n      /**\n       * Set or get the minimum width attribute of a chart. This only has effect when used with the default\n       * {@link dc.baseMixin#width width} function.\n       * @method minWidth\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link dc.baseMixin#width width}\n       * @param {Number} [minWidth=200]\n       * @returns {Number|dc.baseMixin}\n       */\n      _chart.minWidth = function (minWidth) {\n        if (!arguments.length) {\n          return _minWidth;\n        }\n        _minWidth = minWidth;\n        return _chart;\n      };\n\n      /**\n       * Set or get the minimum height attribute of a chart. This only has effect when used with the default\n       * {@link dc.baseMixin#height height} function.\n       * @method minHeight\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link dc.baseMixin#height height}\n       * @param {Number} [minHeight=200]\n       * @returns {Number|dc.baseMixin}\n       */\n      _chart.minHeight = function (minHeight) {\n        if (!arguments.length) {\n          return _minHeight;\n        }\n        _minHeight = minHeight;\n        return _chart;\n      };\n\n      /**\n       * Turn on/off using the SVG\n       * {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox `viewBox` attribute}.\n       * When enabled, `viewBox` will be set on the svg root element instead of `width` and `height`.\n       * Requires that the chart aspect ratio be defined using chart.width(w) and chart.height(h).\n       *\n       * This will maintain the aspect ratio while enabling the chart to resize responsively to the\n       * space given to the chart using CSS. For example, the chart can use `width: 100%; height:\n       * 100%` or absolute positioning to resize to its parent div.\n       *\n       * Since the text will be sized as if the chart is drawn according to the width and height, and\n       * will be resized if the chart is any other size, you need to set the chart width and height so\n       * that the text looks good. In practice, 600x400 seems to work pretty well for most charts.\n       *\n       * You can see examples of this resizing strategy in the [Chart Resizing\n       * Examples](http://dc-js.github.io/dc.js/resizing/); just add `?resize=viewbox` to any of the\n       * one-chart examples to enable `useViewBoxResizing`.\n       * @method useViewBoxResizing\n       * @memberof dc.baseMixin\n       * @instance\n       * @param {Boolean} [useViewBoxResizing=false]\n       * @returns {Boolean|dc.baseMixin}\n       */\n      _chart.useViewBoxResizing = function (useViewBoxResizing) {\n        if (!arguments.length) {\n          return _useViewBoxResizing;\n        }\n        _useViewBoxResizing = useViewBoxResizing;\n        return _chart;\n      };\n\n      /**\n       * **mandatory**\n       *\n       * Set or get the dimension attribute of a chart. In `dc`, a dimension can be any valid\n       * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter dimension}\n       *\n       * If a value is given, then it will be used as the new dimension. If no value is specified then\n       * the current dimension will be returned.\n       * @method dimension\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter.dimension}\n       * @example\n       * var index = crossfilter([]);\n       * var dimension = index.dimension(dc.pluck('key'));\n       * chart.dimension(dimension);\n       * @param {crossfilter.dimension} [dimension]\n       * @returns {crossfilter.dimension|dc.baseMixin}\n       */\n      _chart.dimension = function (dimension) {\n        if (!arguments.length) {\n          return _dimension;\n        }\n        _dimension = dimension;\n        _chart.expireCache();\n        return _chart;\n      };\n\n      /**\n       * Set the data callback or retrieve the chart's data set. The data callback is passed the chart's\n       * group and by default will return\n       * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all}.\n       * This behavior may be modified to, for instance, return only the top 5 groups.\n       * @method data\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * // Default data function\n       * chart.data(function (group) { return group.all(); });\n       *\n       * chart.data(function (group) { return group.top(5); });\n       * @param {Function} [callback]\n       * @returns {*|dc.baseMixin}\n       */\n      _chart.data = function (callback) {\n        if (!arguments.length) {\n          return _data.call(_chart, _group);\n        }\n        _data = d3.functor(callback);\n        _chart.expireCache();\n        return _chart;\n      };\n\n      /**\n       * **mandatory**\n       *\n       * Set or get the group attribute of a chart. In `dc` a group is a\n       * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter group}.\n       * Usually the group should be created from the particular dimension associated with the same chart. If a value is\n       * given, then it will be used as the new group.\n       *\n       * If no value specified then the current group will be returned.\n       * If `name` is specified then it will be used to generate legend label.\n       * @method group\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n       * @example\n       * var index = crossfilter([]);\n       * var dimension = index.dimension(dc.pluck('key'));\n       * chart.dimension(dimension);\n       * chart.group(dimension.group(crossfilter.reduceSum()));\n       * @param {crossfilter.group} [group]\n       * @param {String} [name]\n       * @returns {crossfilter.group|dc.baseMixin}\n       */\n      _chart.group = function (group, name) {\n        if (!arguments.length) {\n          return _group;\n        }\n        _group = group;\n        _chart._groupName = name;\n        _chart.expireCache();\n        return _chart;\n      };\n\n      /**\n       * Get or set an accessor to order ordinal dimensions.  The chart uses\n       * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#quicksort_by crossfilter.quicksort.by}\n       * to sort elements; this accessor returns the value to order on.\n       * @method ordering\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#quicksort_by crossfilter.quicksort.by}\n       * @example\n       * // Default ordering accessor\n       * _chart.ordering(dc.pluck('key'));\n       * @param {Function} [orderFunction]\n       * @returns {Function|dc.baseMixin}\n       */\n      _chart.ordering = function (orderFunction) {\n        if (!arguments.length) {\n          return _ordering;\n        }\n        _ordering = orderFunction;\n        _orderSort = crossfilter.quicksort.by(_ordering);\n        _chart.expireCache();\n        return _chart;\n      };\n      _chart._computeOrderedGroups = function (data) {\n        var dataCopy = data.slice(0);\n        if (dataCopy.length <= 1) {\n          return dataCopy;\n        }\n        if (!_orderSort) {\n          _orderSort = crossfilter.quicksort.by(_ordering);\n        }\n        return _orderSort(dataCopy, 0, dataCopy.length);\n      };\n\n      /**\n       * Clear all filters associated with this chart. The same effect can be achieved by calling\n       * {@link dc.baseMixin#filter chart.filter(null)}.\n       * @method filterAll\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {dc.baseMixin}\n       */\n      _chart.filterAll = function () {\n        return _chart.filter(null);\n      };\n\n      /**\n       * Execute d3 single selection in the chart's scope using the given selector and return the d3\n       * selection.\n       *\n       * This function is **not chainable** since it does not return a chart instance; however the d3\n       * selection result can be chained to d3 function calls.\n       * @method select\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#d3_select d3.select}\n       * @example\n       * // Has the same effect as d3.select('#chart-id').select(selector)\n       * chart.select(selector)\n       * @returns {d3.selection}\n       */\n      _chart.select = function (s) {\n        return _root.select(s);\n      };\n\n      /**\n       * Execute in scope d3 selectAll using the given selector and return d3 selection result.\n       *\n       * This function is **not chainable** since it does not return a chart instance; however the d3\n       * selection result can be chained to d3 function calls.\n       * @method selectAll\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#d3_selectAll d3.selectAll}\n       * @example\n       * // Has the same effect as d3.select('#chart-id').selectAll(selector)\n       * chart.selectAll(selector)\n       * @returns {d3.selection}\n       */\n      _chart.selectAll = function (s) {\n        return _root ? _root.selectAll(s) : null;\n      };\n\n      /**\n       * Set the root SVGElement to either be an existing chart's root; or any valid [d3 single\n       * selector](https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements) specifying a dom\n       * block element such as a div; or a dom element or d3 selection. Optionally registers the chart\n       * within the chartGroup. This class is called internally on chart initialization, but be called\n       * again to relocate the chart. However, it will orphan any previously created SVGElements.\n       * @method anchor\n       * @memberof dc.baseMixin\n       * @instance\n       * @param {anchorChart|anchorSelector|anchorNode} [parent]\n       * @param {String} [chartGroup]\n       * @returns {String|node|d3.selection|dc.baseMixin}\n       */\n      _chart.anchor = function (parent, chartGroup) {\n        if (!arguments.length) {\n          return _anchor;\n        }\n        if (dc.instanceOfChart(parent)) {\n          _anchor = parent.anchor();\n          _root = parent.root();\n          _isChild = true;\n        } else if (parent) {\n          if (parent.select && parent.classed) {\n            // detect d3 selection\n            _anchor = parent.node();\n          } else {\n            _anchor = parent;\n          }\n          _root = d3.select(_anchor);\n          _root.classed(dc.constants.CHART_CLASS, true);\n          dc.registerChart(_chart, chartGroup);\n          _isChild = false;\n        } else {\n          throw new dc.errors.BadArgumentException('parent must be defined');\n        }\n        _chartGroup = chartGroup;\n        return _chart;\n      };\n\n      /**\n       * Returns the DOM id for the chart's anchored location.\n       * @method anchorName\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {String}\n       */\n      _chart.anchorName = function () {\n        var a = _chart.anchor();\n        if (a && a.id) {\n          return a.id;\n        }\n        if (a && a.replace) {\n          return a.replace('#', '');\n        }\n        return 'dc-chart' + _chart.chartID();\n      };\n\n      /**\n       * Returns the root element where a chart resides. Usually it will be the parent div element where\n       * the SVGElement was created. You can also pass in a new root element however this is usually handled by\n       * dc internally. Resetting the root element on a chart outside of dc internals may have\n       * unexpected consequences.\n       * @method root\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement HTMLElement}\n       * @param {HTMLElement} [rootElement]\n       * @returns {HTMLElement|dc.baseMixin}\n       */\n      _chart.root = function (rootElement) {\n        if (!arguments.length) {\n          return _root;\n        }\n        _root = rootElement;\n        return _chart;\n      };\n\n      /**\n       * Returns the top SVGElement for this specific chart. You can also pass in a new SVGElement,\n       * however this is usually handled by dc internally. Resetting the SVGElement on a chart outside\n       * of dc internals may have unexpected consequences.\n       * @method svg\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n       * @param {SVGElement|d3.selection} [svgElement]\n       * @returns {SVGElement|d3.selection|dc.baseMixin}\n       */\n      _chart.svg = function (svgElement) {\n        if (!arguments.length) {\n          return _svg;\n        }\n        _svg = svgElement;\n        return _chart;\n      };\n\n      /**\n       * Remove the chart's SVGElements from the dom and recreate the container SVGElement.\n       * @method resetSvg\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n       * @returns {SVGElement}\n       */\n      _chart.resetSvg = function () {\n        _chart.select('svg').remove();\n        return generateSvg();\n      };\n      function sizeSvg() {\n        if (_svg) {\n          if (!_useViewBoxResizing) {\n            _svg.attr('width', _chart.width()).attr('height', _chart.height());\n          } else if (!_svg.attr('viewBox')) {\n            _svg.attr('viewBox', '0 0 ' + _chart.width() + ' ' + _chart.height());\n          }\n        }\n      }\n      function generateSvg() {\n        _svg = _chart.root().append('svg');\n        sizeSvg();\n        return _svg;\n      }\n\n      /**\n       * Set or get the filter printer function. The filter printer function is used to generate human\n       * friendly text for filter value(s) associated with the chart instance. The text will get shown\n       * in the `.filter element; see {@link dc.baseMixin#turnOnControls turnOnControls}.\n       *\n       * By default dc charts use a default filter printer {@link dc.printers.filters dc.printers.filters}\n       * that provides simple printing support for both single value and ranged filters.\n       * @method filterPrinter\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * // for a chart with an ordinal brush, print the filters in upper case\n       * chart.filterPrinter(function(filters) {\n       *   return filters.map(function(f) { return f.toUpperCase(); }).join(', ');\n       * });\n       * // for a chart with a range brush, print the filter as start and extent\n       * chart.filterPrinter(function(filters) {\n       *   return 'start ' + dc.utils.printSingleValue(filters[0][0]) +\n       *     ' extent ' + dc.utils.printSingleValue(filters[0][1] - filters[0][0]);\n       * });\n       * @param {Function} [filterPrinterFunction=dc.printers.filters]\n       * @returns {Function|dc.baseMixin}\n       */\n      _chart.filterPrinter = function (filterPrinterFunction) {\n        if (!arguments.length) {\n          return _filterPrinter;\n        }\n        _filterPrinter = filterPrinterFunction;\n        return _chart;\n      };\n\n      /**\n       * If set, use the `visibility` attribute instead of the `display` attribute for showing/hiding\n       * chart reset and filter controls, for less disruption to the layout.\n       * @method controlsUseVisibility\n       * @memberof dc.baseMixin\n       * @instance\n       * @param {Boolean} [controlsUseVisibility=false]\n       * @returns {Boolean|dc.baseMixin}\n       **/\n      _chart.controlsUseVisibility = function (useVisibility) {\n        if (!arguments.length) {\n          return _controlsUseVisibility;\n        }\n        _controlsUseVisibility = useVisibility;\n        return _chart;\n      };\n\n      /**\n       * Turn on optional control elements within the root element. dc currently supports the\n       * following html control elements.\n       * * root.selectAll('.reset') - elements are turned on if the chart has an active filter. This type\n       * of control element is usually used to store a reset link to allow user to reset filter on a\n       * certain chart. This element will be turned off automatically if the filter is cleared.\n       * * root.selectAll('.filter') elements are turned on if the chart has an active filter. The text\n       * content of this element is then replaced with the current filter value using the filter printer\n       * function. This type of element will be turned off automatically if the filter is cleared.\n       * @method turnOnControls\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {dc.baseMixin}\n       */\n      _chart.turnOnControls = function () {\n        if (_root) {\n          var attribute = _chart.controlsUseVisibility() ? 'visibility' : 'display';\n          _chart.selectAll('.reset').style(attribute, null);\n          _chart.selectAll('.filter').text(_filterPrinter(_chart.filters())).style(attribute, null);\n        }\n        return _chart;\n      };\n\n      /**\n       * Turn off optional control elements within the root element.\n       * @method turnOffControls\n       * @memberof dc.baseMixin\n       * @see {@link dc.baseMixin#turnOnControls turnOnControls}\n       * @instance\n       * @returns {dc.baseMixin}\n       */\n      _chart.turnOffControls = function () {\n        if (_root) {\n          var attribute = _chart.controlsUseVisibility() ? 'visibility' : 'display';\n          var value = _chart.controlsUseVisibility() ? 'hidden' : 'none';\n          _chart.selectAll('.reset').style(attribute, value);\n          _chart.selectAll('.filter').style(attribute, value).text(_chart.filter());\n        }\n        return _chart;\n      };\n\n      /**\n       * Set or get the animation transition duration (in milliseconds) for this chart instance.\n       * @method transitionDuration\n       * @memberof dc.baseMixin\n       * @instance\n       * @param {Number} [duration=750]\n       * @returns {Number|dc.baseMixin}\n       */\n      _chart.transitionDuration = function (duration) {\n        if (!arguments.length) {\n          return _transitionDuration;\n        }\n        _transitionDuration = duration;\n        return _chart;\n      };\n\n      /**\n       * Set or get the animation transition delay (in milliseconds) for this chart instance.\n       * @method transitionDelay\n       * @memberof dc.baseMixin\n       * @instance\n       * @param {Number} [delay=0]\n       * @returns {Number|dc.baseMixin}\n       */\n      _chart.transitionDelay = function (delay) {\n        if (!arguments.length) {\n          return _transitionDelay;\n        }\n        _transitionDelay = delay;\n        return _chart;\n      };\n      _chart._mandatoryAttributes = function (_) {\n        if (!arguments.length) {\n          return _mandatoryAttributes;\n        }\n        _mandatoryAttributes = _;\n        return _chart;\n      };\n      function checkForMandatoryAttributes(a) {\n        if (!_chart[a] || !_chart[a]()) {\n          throw new dc.errors.InvalidStateException('Mandatory attribute chart.' + a + ' is missing on chart[#' + _chart.anchorName() + ']');\n        }\n      }\n\n      /**\n       * Invoking this method will force the chart to re-render everything from scratch. Generally it\n       * should only be used to render the chart for the first time on the page or if you want to make\n       * sure everything is redrawn from scratch instead of relying on the default incremental redrawing\n       * behaviour.\n       * @method render\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {dc.baseMixin}\n       */\n      _chart.render = function () {\n        _height = _width = undefined; // force recalculate\n        _listeners.preRender(_chart);\n        if (_mandatoryAttributes) {\n          _mandatoryAttributes.forEach(checkForMandatoryAttributes);\n        }\n        var result = _chart._doRender();\n        if (_legend) {\n          _legend.render();\n        }\n        _chart._activateRenderlets('postRender');\n        return result;\n      };\n      _chart._activateRenderlets = function (event) {\n        _listeners.pretransition(_chart);\n        if (_chart.transitionDuration() > 0 && _svg) {\n          _svg.transition().duration(_chart.transitionDuration()).delay(_chart.transitionDelay()).each('end', function () {\n            _listeners.renderlet(_chart);\n            if (event) {\n              _listeners[event](_chart);\n            }\n          });\n        } else {\n          _listeners.renderlet(_chart);\n          if (event) {\n            _listeners[event](_chart);\n          }\n        }\n      };\n\n      /**\n       * Calling redraw will cause the chart to re-render data changes incrementally. If there is no\n       * change in the underlying data dimension then calling this method will have no effect on the\n       * chart. Most chart interaction in dc will automatically trigger this method through internal\n       * events (in particular {@link dc.redrawAll dc.redrawAll}); therefore, you only need to\n       * manually invoke this function if data is manipulated outside of dc's control (for example if\n       * data is loaded in the background using\n       * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}).\n       * @method redraw\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {dc.baseMixin}\n       */\n      _chart.redraw = function () {\n        sizeSvg();\n        _listeners.preRedraw(_chart);\n        var result = _chart._doRedraw();\n        if (_legend) {\n          _legend.render();\n        }\n        _chart._activateRenderlets('postRedraw');\n        return result;\n      };\n\n      /**\n       * Gets/sets the commit handler. If the chart has a commit handler, the handler will be called when\n       * the chart's filters have changed, in order to send the filter data asynchronously to a server.\n       *\n       * Unlike other functions in dc.js, the commit handler is asynchronous. It takes two arguments:\n       * a flag indicating whether this is a render (true) or a redraw (false), and a callback to be\n       * triggered once the commit is filtered. The callback has the standard node.js continuation signature\n       * with error first and result second.\n       * @method commitHandler\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {dc.baseMixin}\n       */\n      _chart.commitHandler = function (commitHandler) {\n        if (!arguments.length) {\n          return _commitHandler;\n        }\n        _commitHandler = commitHandler;\n        return _chart;\n      };\n\n      /**\n       * Redraws all charts in the same group as this chart, typically in reaction to a filter\n       * change. If the chart has a {@link dc.baseMixin.commitFilter commitHandler}, it will\n       * be executed and waited for.\n       * @method redrawGroup\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {dc.baseMixin}\n       */\n      _chart.redrawGroup = function () {\n        if (_commitHandler) {\n          _commitHandler(false, function (error, result) {\n            if (error) {\n              console.log(error);\n            } else {\n              dc.redrawAll(_chart.chartGroup());\n            }\n          });\n        } else {\n          dc.redrawAll(_chart.chartGroup());\n        }\n        return _chart;\n      };\n\n      /**\n       * Renders all charts in the same group as this chart. If the chart has a\n       * {@link dc.baseMixin.commitFilter commitHandler}, it will be executed and waited for\n       * @method renderGroup\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {dc.baseMixin}\n       */\n      _chart.renderGroup = function () {\n        if (_commitHandler) {\n          _commitHandler(false, function (error, result) {\n            if (error) {\n              console.log(error);\n            } else {\n              dc.renderAll(_chart.chartGroup());\n            }\n          });\n        } else {\n          dc.renderAll(_chart.chartGroup());\n        }\n        return _chart;\n      };\n      _chart._invokeFilteredListener = function (f) {\n        if (f !== undefined) {\n          _listeners.filtered(_chart, f);\n        }\n      };\n      _chart._invokeZoomedListener = function () {\n        _listeners.zoomed(_chart);\n      };\n      var _hasFilterHandler = function (filters, filter) {\n        if (filter === null || typeof filter === 'undefined') {\n          return filters.length > 0;\n        }\n        return filters.some(function (f) {\n          return filter <= f && filter >= f;\n        });\n      };\n\n      /**\n       * Set or get the has-filter handler. The has-filter handler is a function that checks to see if\n       * the chart's current filters (first argument) include a specific filter (second argument).  Using a custom has-filter handler allows\n       * you to change the way filters are checked for and replaced.\n       * @method hasFilterHandler\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * // default has-filter handler\n       * chart.hasFilterHandler(function (filters, filter) {\n       *     if (filter === null || typeof(filter) === 'undefined') {\n       *         return filters.length > 0;\n       *     }\n       *     return filters.some(function (f) {\n       *         return filter <= f && filter >= f;\n       *     });\n       * });\n       *\n       * // custom filter handler (no-op)\n       * chart.hasFilterHandler(function(filters, filter) {\n       *     return false;\n       * });\n       * @param {Function} [hasFilterHandler]\n       * @returns {Function|dc.baseMixin}\n       */\n      _chart.hasFilterHandler = function (hasFilterHandler) {\n        if (!arguments.length) {\n          return _hasFilterHandler;\n        }\n        _hasFilterHandler = hasFilterHandler;\n        return _chart;\n      };\n\n      /**\n       * Check whether any active filter or a specific filter is associated with particular chart instance.\n       * This function is **not chainable**.\n       * @method hasFilter\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link dc.baseMixin#hasFilterHandler hasFilterHandler}\n       * @param {*} [filter]\n       * @returns {Boolean}\n       */\n      _chart.hasFilter = function (filter) {\n        return _hasFilterHandler(_filters, filter);\n      };\n      var _removeFilterHandler = function (filters, filter) {\n        for (var i = 0; i < filters.length; i++) {\n          if (filters[i] <= filter && filters[i] >= filter) {\n            filters.splice(i, 1);\n            break;\n          }\n        }\n        return filters;\n      };\n\n      /**\n       * Set or get the remove filter handler. The remove filter handler is a function that removes a\n       * filter from the chart's current filters. Using a custom remove filter handler allows you to\n       * change how filters are removed or perform additional work when removing a filter, e.g. when\n       * using a filter server other than crossfilter.\n       *\n       * The handler should return a new or modified array as the result.\n       * @method removeFilterHandler\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * // default remove filter handler\n       * chart.removeFilterHandler(function (filters, filter) {\n       *     for (var i = 0; i < filters.length; i++) {\n       *         if (filters[i] <= filter && filters[i] >= filter) {\n       *             filters.splice(i, 1);\n       *             break;\n       *         }\n       *     }\n       *     return filters;\n       * });\n       *\n       * // custom filter handler (no-op)\n       * chart.removeFilterHandler(function(filters, filter) {\n       *     return filters;\n       * });\n       * @param {Function} [removeFilterHandler]\n       * @returns {Function|dc.baseMixin}\n       */\n      _chart.removeFilterHandler = function (removeFilterHandler) {\n        if (!arguments.length) {\n          return _removeFilterHandler;\n        }\n        _removeFilterHandler = removeFilterHandler;\n        return _chart;\n      };\n      var _addFilterHandler = function (filters, filter) {\n        filters.push(filter);\n        return filters;\n      };\n\n      /**\n       * Set or get the add filter handler. The add filter handler is a function that adds a filter to\n       * the chart's filter list. Using a custom add filter handler allows you to change the way filters\n       * are added or perform additional work when adding a filter, e.g. when using a filter server other\n       * than crossfilter.\n       *\n       * The handler should return a new or modified array as the result.\n       * @method addFilterHandler\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * // default add filter handler\n       * chart.addFilterHandler(function (filters, filter) {\n       *     filters.push(filter);\n       *     return filters;\n       * });\n       *\n       * // custom filter handler (no-op)\n       * chart.addFilterHandler(function(filters, filter) {\n       *     return filters;\n       * });\n       * @param {Function} [addFilterHandler]\n       * @returns {Function|dc.baseMixin}\n       */\n      _chart.addFilterHandler = function (addFilterHandler) {\n        if (!arguments.length) {\n          return _addFilterHandler;\n        }\n        _addFilterHandler = addFilterHandler;\n        return _chart;\n      };\n      var _resetFilterHandler = function (filters) {\n        return [];\n      };\n\n      /**\n       * Set or get the reset filter handler. The reset filter handler is a function that resets the\n       * chart's filter list by returning a new list. Using a custom reset filter handler allows you to\n       * change the way filters are reset, or perform additional work when resetting the filters,\n       * e.g. when using a filter server other than crossfilter.\n       *\n       * The handler should return a new or modified array as the result.\n       * @method resetFilterHandler\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * // default remove filter handler\n       * function (filters) {\n       *     return [];\n       * }\n       *\n       * // custom filter handler (no-op)\n       * chart.resetFilterHandler(function(filters) {\n       *     return filters;\n       * });\n       * @param {Function} [resetFilterHandler]\n       * @returns {dc.baseMixin}\n       */\n      _chart.resetFilterHandler = function (resetFilterHandler) {\n        if (!arguments.length) {\n          return _resetFilterHandler;\n        }\n        _resetFilterHandler = resetFilterHandler;\n        return _chart;\n      };\n      function applyFilters(filters) {\n        if (_chart.dimension() && _chart.dimension().filter) {\n          var fs = _filterHandler(_chart.dimension(), filters);\n          if (fs) {\n            filters = fs;\n          }\n        }\n        return filters;\n      }\n\n      /**\n       * Replace the chart filter. This is equivalent to calling `chart.filter(null).filter(filter)`\n       * but more efficient because the filter is only applied once.\n       *\n       * @method replaceFilter\n       * @memberof dc.baseMixin\n       * @instance\n       * @param {*} [filter]\n       * @returns {dc.baseMixin}\n       **/\n      _chart.replaceFilter = function (filter) {\n        _filters = _resetFilterHandler(_filters);\n        _chart.filter(filter);\n        return _chart;\n      };\n\n      /**\n       * Filter the chart by the given parameter, or return the current filter if no input parameter\n       * is given.\n       *\n       * The filter parameter can take one of these forms:\n       * * A single value: the value will be toggled (added if it is not present in the current\n       * filters, removed if it is present)\n       * * An array containing a single array of values (`[[value,value,value]]`): each value is\n       * toggled\n       * * When appropriate for the chart, a {@link dc.filters dc filter object} such as\n       *   * {@link dc.filters.RangedFilter `dc.filters.RangedFilter`} for the\n       * {@link dc.coordinateGridMixin dc.coordinateGridMixin} charts\n       *   * {@link dc.filters.TwoDimensionalFilter `dc.filters.TwoDimensionalFilter`} for the\n       * {@link dc.heatMap heat map}\n       *   * {@link dc.filters.RangedTwoDimensionalFilter `dc.filters.RangedTwoDimensionalFilter`}\n       * for the {@link dc.scatterPlot scatter plot}\n       * * `null`: the filter will be reset using the\n       * {@link dc.baseMixin#resetFilterHandler resetFilterHandler}\n       *\n       * Note that this is always a toggle (even when it doesn't make sense for the filter type). If\n       * you wish to replace the current filter, either call `chart.filter(null)` first - or it's more\n       * efficient to call {@link dc.baseMixin#replaceFilter `chart.replaceFilter(filter)`} instead.\n       *\n       * Each toggle is executed by checking if the value is already present using the\n       * {@link dc.baseMixin#hasFilterHandler hasFilterHandler}; if it is not present, it is added\n       * using the {@link dc.baseMixin#addFilterHandler addFilterHandler}; if it is already present,\n       * it is removed using the {@link dc.baseMixin#removeFilterHandler removeFilterHandler}.\n       *\n       * Once the filters array has been updated, the filters are applied to the\n       * crossfilter dimension, using the {@link dc.baseMixin#filterHandler filterHandler}.\n       *\n       * Once you have set the filters, call {@link dc.baseMixin#redrawGroup `chart.redrawGroup()`}\n       * (or {@link dc.redrawAll `dc.redrawAll()`}) to redraw the chart's group.\n       * @method filter\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link dc.baseMixin#addFilterHandler addFilterHandler}\n       * @see {@link dc.baseMixin#removeFilterHandler removeFilterHandler}\n       * @see {@link dc.baseMixin#resetFilterHandler resetFilterHandler}\n       * @see {@link dc.baseMixin#filterHandler filterHandler}\n       * @example\n       * // filter by a single string\n       * chart.filter('Sunday');\n       * // filter by a single age\n       * chart.filter(18);\n       * // filter by a set of states\n       * chart.filter([['MA', 'TX', 'ND', 'WA']]);\n       * // filter by range -- note the use of dc.filters.RangedFilter, which is different\n       * // from the syntax for filtering a crossfilter dimension directly, dimension.filter([15,20])\n       * chart.filter(dc.filters.RangedFilter(15,20));\n       * @param {*} [filter]\n       * @returns {dc.baseMixin}\n       */\n      _chart.filter = function (filter) {\n        if (!arguments.length) {\n          return _filters.length > 0 ? _filters[0] : null;\n        }\n        var filters = _filters;\n        if (filter instanceof Array && filter[0] instanceof Array && !filter.isFiltered) {\n          // toggle each filter\n          filter[0].forEach(function (f) {\n            if (_hasFilterHandler(filters, f)) {\n              filters = _removeFilterHandler(filters, f);\n            } else {\n              filters = _addFilterHandler(filters, f);\n            }\n          });\n        } else if (filter === null) {\n          filters = _resetFilterHandler(filters);\n        } else {\n          if (_hasFilterHandler(filters, filter)) {\n            filters = _removeFilterHandler(filters, filter);\n          } else {\n            filters = _addFilterHandler(filters, filter);\n          }\n        }\n        _filters = applyFilters(filters);\n        _chart._invokeFilteredListener(filter);\n        if (_root !== null && _chart.hasFilter()) {\n          _chart.turnOnControls();\n        } else {\n          _chart.turnOffControls();\n        }\n        return _chart;\n      };\n\n      /**\n       * Returns all current filters. This method does not perform defensive cloning of the internal\n       * filter array before returning, therefore any modification of the returned array will effect the\n       * chart's internal filter storage.\n       * @method filters\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {Array<*>}\n       */\n      _chart.filters = function () {\n        return _filters;\n      };\n      _chart.highlightSelected = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, true);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);\n      };\n      _chart.fadeDeselected = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, false);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, true);\n      };\n      _chart.resetHighlight = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, false);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);\n      };\n\n      /**\n       * This function is passed to d3 as the onClick handler for each chart. The default behavior is to\n       * filter on the clicked datum (passed to the callback) and redraw the chart group.\n       * @method onClick\n       * @memberof dc.baseMixin\n       * @instance\n       * @param {*} datum\n       */\n      _chart.onClick = function (datum) {\n        var filter = _chart.keyAccessor()(datum);\n        dc.events.trigger(function () {\n          _chart.filter(filter);\n          _chart.redrawGroup();\n        });\n      };\n\n      /**\n       * Set or get the filter handler. The filter handler is a function that performs the filter action\n       * on a specific dimension. Using a custom filter handler allows you to perform additional logic\n       * before or after filtering.\n       * @method filterHandler\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter crossfilter.dimension.filter}\n       * @example\n       * // the default filter handler handles all possible cases for the charts in dc.js\n       * // you can replace it with something more specialized for your own chart\n       * chart.filterHandler(function (dimension, filters) {\n       *     if (filters.length === 0) {\n       *         // the empty case (no filtering)\n       *         dimension.filter(null);\n       *     } else if (filters.length === 1 && !filters[0].isFiltered) {\n       *         // single value and not a function-based filter\n       *         dimension.filterExact(filters[0]);\n       *     } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n       *         // single range-based filter\n       *         dimension.filterRange(filters[0]);\n       *     } else {\n       *         // an array of values, or an array of filter objects\n       *         dimension.filterFunction(function (d) {\n       *             for (var i = 0; i < filters.length; i++) {\n       *                 var filter = filters[i];\n       *                 if (filter.isFiltered && filter.isFiltered(d)) {\n       *                     return true;\n       *                 } else if (filter <= d && filter >= d) {\n       *                     return true;\n       *                 }\n       *             }\n       *             return false;\n       *         });\n       *     }\n       *     return filters;\n       * });\n       *\n       * // custom filter handler\n       * chart.filterHandler(function(dimension, filter){\n       *     var newFilter = filter + 10;\n       *     dimension.filter(newFilter);\n       *     return newFilter; // set the actual filter value to the new value\n       * });\n       * @param {Function} [filterHandler]\n       * @returns {Function|dc.baseMixin}\n       */\n      _chart.filterHandler = function (filterHandler) {\n        if (!arguments.length) {\n          return _filterHandler;\n        }\n        _filterHandler = filterHandler;\n        return _chart;\n      };\n\n      // abstract function stub\n      _chart._doRender = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n      };\n      _chart._doRedraw = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n      };\n      _chart.legendables = function () {\n        // do nothing in base, should be overridden by sub-function\n        return [];\n      };\n      _chart.legendHighlight = function () {\n        // do nothing in base, should be overridden by sub-function\n      };\n      _chart.legendReset = function () {\n        // do nothing in base, should be overridden by sub-function\n      };\n      _chart.legendToggle = function () {\n        // do nothing in base, should be overriden by sub-function\n      };\n      _chart.isLegendableHidden = function () {\n        // do nothing in base, should be overridden by sub-function\n        return false;\n      };\n\n      /**\n       * Set or get the key accessor function. The key accessor function is used to retrieve the key\n       * value from the crossfilter group. Key values are used differently in different charts, for\n       * example keys correspond to slices in a pie chart and x axis positions in a grid coordinate chart.\n       * @method keyAccessor\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * // default key accessor\n       * chart.keyAccessor(function(d) { return d.key; });\n       * // custom key accessor for a multi-value crossfilter reduction\n       * chart.keyAccessor(function(p) { return p.value.absGain; });\n       * @param {Function} [keyAccessor]\n       * @returns {Function|dc.baseMixin}\n       */\n      _chart.keyAccessor = function (keyAccessor) {\n        if (!arguments.length) {\n          return _keyAccessor;\n        }\n        _keyAccessor = keyAccessor;\n        return _chart;\n      };\n\n      /**\n       * Set or get the value accessor function. The value accessor function is used to retrieve the\n       * value from the crossfilter group. Group values are used differently in different charts, for\n       * example values correspond to slice sizes in a pie chart and y axis positions in a grid\n       * coordinate chart.\n       * @method valueAccessor\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * // default value accessor\n       * chart.valueAccessor(function(d) { return d.value; });\n       * // custom value accessor for a multi-value crossfilter reduction\n       * chart.valueAccessor(function(p) { return p.value.percentageGain; });\n       * @param {Function} [valueAccessor]\n       * @returns {Function|dc.baseMixin}\n       */\n      _chart.valueAccessor = function (valueAccessor) {\n        if (!arguments.length) {\n          return _valueAccessor;\n        }\n        _valueAccessor = valueAccessor;\n        return _chart;\n      };\n\n      /**\n       * Set or get the label function. The chart class will use this function to render labels for each\n       * child element in the chart, e.g. slices in a pie chart or bubbles in a bubble chart. Not every\n       * chart supports the label function, for example line chart does not use this function\n       * at all. By default, enables labels; pass false for the second parameter if this is not desired.\n       * @method label\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * // default label function just return the key\n       * chart.label(function(d) { return d.key; });\n       * // label function has access to the standard d3 data binding and can get quite complicated\n       * chart.label(function(d) { return d.data.key + '(' + Math.floor(d.data.value / all.value() * 100) + '%)'; });\n       * @param {Function} [labelFunction]\n       * @param {Boolean} [enableLabels=true]\n       * @returns {Function|dc.baseMixin}\n       */\n      _chart.label = function (labelFunction, enableLabels) {\n        if (!arguments.length) {\n          return _label;\n        }\n        _label = labelFunction;\n        if (enableLabels === undefined || enableLabels) {\n          _renderLabel = true;\n        }\n        return _chart;\n      };\n\n      /**\n       * Turn on/off label rendering\n       * @method renderLabel\n       * @memberof dc.baseMixin\n       * @instance\n       * @param {Boolean} [renderLabel=false]\n       * @returns {Boolean|dc.baseMixin}\n       */\n      _chart.renderLabel = function (renderLabel) {\n        if (!arguments.length) {\n          return _renderLabel;\n        }\n        _renderLabel = renderLabel;\n        return _chart;\n      };\n\n      /**\n       * Set or get the title function. The chart class will use this function to render the SVGElement title\n       * (usually interpreted by browser as tooltips) for each child element in the chart, e.g. a slice\n       * in a pie chart or a bubble in a bubble chart. Almost every chart supports the title function;\n       * however in grid coordinate charts you need to turn off the brush in order to see titles, because\n       * otherwise the brush layer will block tooltip triggering.\n       * @method title\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * // default title function shows \"key: value\"\n       * chart.title(function(d) { return d.key + ': ' + d.value; });\n       * // title function has access to the standard d3 data binding and can get quite complicated\n       * chart.title(function(p) {\n       *    return p.key.getFullYear()\n       *        + '\\n'\n       *        + 'Index Gain: ' + numberFormat(p.value.absGain) + '\\n'\n       *        + 'Index Gain in Percentage: ' + numberFormat(p.value.percentageGain) + '%\\n'\n       *        + 'Fluctuation / Index Ratio: ' + numberFormat(p.value.fluctuationPercentage) + '%';\n       * });\n       * @param {Function} [titleFunction]\n       * @returns {Function|dc.baseMixin}\n       */\n      _chart.title = function (titleFunction) {\n        if (!arguments.length) {\n          return _title;\n        }\n        _title = titleFunction;\n        return _chart;\n      };\n\n      /**\n       * Turn on/off title rendering, or return the state of the render title flag if no arguments are\n       * given.\n       * @method renderTitle\n       * @memberof dc.baseMixin\n       * @instance\n       * @param {Boolean} [renderTitle=true]\n       * @returns {Boolean|dc.baseMixin}\n       */\n      _chart.renderTitle = function (renderTitle) {\n        if (!arguments.length) {\n          return _renderTitle;\n        }\n        _renderTitle = renderTitle;\n        return _chart;\n      };\n\n      /**\n       * A renderlet is similar to an event listener on rendering event. Multiple renderlets can be added\n       * to an individual chart.  Each time a chart is rerendered or redrawn the renderlets are invoked\n       * right after the chart finishes its transitions, giving you a way to modify the SVGElements.\n       * Renderlet functions take the chart instance as the only input parameter and you can\n       * use the dc API or use raw d3 to achieve pretty much any effect.\n       *\n       * Use {@link dc.baseMixin#on on} with a 'renderlet' prefix.\n       * Generates a random key for the renderlet, which makes it hard to remove.\n       * @method renderlet\n       * @memberof dc.baseMixin\n       * @instance\n       * @deprecated\n       * @example\n       * // do this instead of .renderlet(function(chart) { ... })\n       * chart.on(\"renderlet\", function(chart){\n       *     // mix of dc API and d3 manipulation\n       *     chart.select('g.y').style('display', 'none');\n       *     // its a closure so you can also access other chart variable available in the closure scope\n       *     moveChart.filter(chart.filter());\n       * });\n       * @param {Function} renderletFunction\n       * @returns {dc.baseMixin}\n       */\n      _chart.renderlet = dc.logger.deprecate(function (renderletFunction) {\n        _chart.on('renderlet.' + dc.utils.uniqueId(), renderletFunction);\n        return _chart;\n      }, 'chart.renderlet has been deprecated.  Please use chart.on(\"renderlet.<renderletKey>\", renderletFunction)');\n\n      /**\n       * Get or set the chart group to which this chart belongs. Chart groups are rendered or redrawn\n       * together since it is expected they share the same underlying crossfilter data set.\n       * @method chartGroup\n       * @memberof dc.baseMixin\n       * @instance\n       * @param {String} [chartGroup]\n       * @returns {String|dc.baseMixin}\n       */\n      _chart.chartGroup = function (chartGroup) {\n        if (!arguments.length) {\n          return _chartGroup;\n        }\n        if (!_isChild) {\n          dc.deregisterChart(_chart, _chartGroup);\n        }\n        _chartGroup = chartGroup;\n        if (!_isChild) {\n          dc.registerChart(_chart, _chartGroup);\n        }\n        return _chart;\n      };\n\n      /**\n       * Expire the internal chart cache. dc charts cache some data internally on a per chart basis to\n       * speed up rendering and avoid unnecessary calculation; however it might be useful to clear the\n       * cache if you have changed state which will affect rendering.  For example, if you invoke\n       * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}\n       * function or reset group or dimension after rendering, it is a good idea to\n       * clear the cache to make sure charts are rendered properly.\n       * @method expireCache\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {dc.baseMixin}\n       */\n      _chart.expireCache = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n      };\n\n      /**\n       * Attach a dc.legend widget to this chart. The legend widget will automatically draw legend labels\n       * based on the color setting and names associated with each group.\n       * @method legend\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\n       * @param {dc.legend} [legend]\n       * @returns {dc.legend|dc.baseMixin}\n       */\n      _chart.legend = function (legend) {\n        if (!arguments.length) {\n          return _legend;\n        }\n        _legend = legend;\n        _legend.parent(_chart);\n        return _chart;\n      };\n\n      /**\n       * Returns the internal numeric ID of the chart.\n       * @method chartID\n       * @memberof dc.baseMixin\n       * @instance\n       * @returns {String}\n       */\n      _chart.chartID = function () {\n        return _chart.__dcFlag__;\n      };\n\n      /**\n       * Set chart options using a configuration object. Each key in the object will cause the method of\n       * the same name to be called with the value to set that attribute for the chart.\n       * @method options\n       * @memberof dc.baseMixin\n       * @instance\n       * @example\n       * chart.options({dimension: myDimension, group: myGroup});\n       * @param {{}} opts\n       * @returns {dc.baseMixin}\n       */\n      _chart.options = function (opts) {\n        var applyOptions = ['anchor', 'group', 'xAxisLabel', 'yAxisLabel', 'stack', 'title', 'point', 'getColor', 'overlayGeoJson'];\n        for (var o in opts) {\n          if (typeof _chart[o] === 'function') {\n            if (opts[o] instanceof Array && applyOptions.indexOf(o) !== -1) {\n              _chart[o].apply(_chart, opts[o]);\n            } else {\n              _chart[o].call(_chart, opts[o]);\n            }\n          } else {\n            dc.logger.debug('Not a valid option setter name: ' + o);\n          }\n        }\n        return _chart;\n      };\n\n      /**\n       * All dc chart instance supports the following listeners.\n       * Supports the following events:\n       * * `renderlet` - This listener function will be invoked after transitions after redraw and render. Replaces the\n       * deprecated {@link dc.baseMixin#renderlet renderlet} method.\n       * * `pretransition` - Like `.on('renderlet', ...)` but the event is fired before transitions start.\n       * * `preRender` - This listener function will be invoked before chart rendering.\n       * * `postRender` - This listener function will be invoked after chart finish rendering including\n       * all renderlets' logic.\n       * * `preRedraw` - This listener function will be invoked before chart redrawing.\n       * * `postRedraw` - This listener function will be invoked after chart finish redrawing\n       * including all renderlets' logic.\n       * * `filtered` - This listener function will be invoked after a filter is applied, added or removed.\n       * * `zoomed` - This listener function will be invoked after a zoom is triggered.\n       * @method on\n       * @memberof dc.baseMixin\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Internals.md#dispatch_on d3.dispatch.on}\n       * @example\n       * .on('renderlet', function(chart, filter){...})\n       * .on('pretransition', function(chart, filter){...})\n       * .on('preRender', function(chart){...})\n       * .on('postRender', function(chart){...})\n       * .on('preRedraw', function(chart){...})\n       * .on('postRedraw', function(chart){...})\n       * .on('filtered', function(chart, filter){...})\n       * .on('zoomed', function(chart, filter){...})\n       * @param {String} event\n       * @param {Function} listener\n       * @returns {dc.baseMixin}\n       */\n      _chart.on = function (event, listener) {\n        _listeners.on(event, listener);\n        return _chart;\n      };\n      return _chart;\n    };\n\n    /**\n     * Margin is a mixin that provides margin utility functions for both the Row Chart and Coordinate Grid\n     * Charts.\n     * @name marginMixin\n     * @memberof dc\n     * @mixin\n     * @param {Object} _chart\n     * @returns {dc.marginMixin}\n     */\n    dc.marginMixin = function (_chart) {\n      var _margin = {\n        top: 10,\n        right: 50,\n        bottom: 30,\n        left: 30\n      };\n\n      /**\n       * Get or set the margins for a particular coordinate grid chart instance. The margins is stored as\n       * an associative Javascript array.\n       * @method margins\n       * @memberof dc.marginMixin\n       * @instance\n       * @example\n       * var leftMargin = chart.margins().left; // 30 by default\n       * chart.margins().left = 50;\n       * leftMargin = chart.margins().left; // now 50\n       * @param {{top: Number, right: Number, left: Number, bottom: Number}} [margins={top: 10, right: 50, bottom: 30, left: 30}]\n       * @returns {{top: Number, right: Number, left: Number, bottom: Number}|dc.marginMixin}\n       */\n      _chart.margins = function (margins) {\n        if (!arguments.length) {\n          return _margin;\n        }\n        _margin = margins;\n        return _chart;\n      };\n      _chart.effectiveWidth = function () {\n        return _chart.width() - _chart.margins().left - _chart.margins().right;\n      };\n      _chart.effectiveHeight = function () {\n        return _chart.height() - _chart.margins().top - _chart.margins().bottom;\n      };\n      return _chart;\n    };\n\n    /**\n     * The Color Mixin is an abstract chart functional class providing universal coloring support\n     * as a mix-in for any concrete chart implementation.\n     * @name colorMixin\n     * @memberof dc\n     * @mixin\n     * @param {Object} _chart\n     * @returns {dc.colorMixin}\n     */\n    dc.colorMixin = function (_chart) {\n      var _colors = d3.scale.category20c();\n      var _defaultAccessor = true;\n      var _colorAccessor = function (d) {\n        return _chart.keyAccessor()(d);\n      };\n      var _colorCalculator;\n\n      /**\n       * Retrieve current color scale or set a new color scale. This methods accepts any function that\n       * operates like a d3 scale.\n       * @method colors\n       * @memberof dc.colorMixin\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n       * @example\n       * // alternate categorical scale\n       * chart.colors(d3.scale.category20b());\n       * // ordinal scale\n       * chart.colors(d3.scale.ordinal().range(['red','green','blue']));\n       * // convenience method, the same as above\n       * chart.ordinalColors(['red','green','blue']);\n       * // set a linear scale\n       * chart.linearColors([\"#4575b4\", \"#ffffbf\", \"#a50026\"]);\n       * @param {d3.scale} [colorScale=d3.scale.category20c()]\n       * @returns {d3.scale|dc.colorMixin}\n       */\n      _chart.colors = function (colorScale) {\n        if (!arguments.length) {\n          return _colors;\n        }\n        if (colorScale instanceof Array) {\n          _colors = d3.scale.quantize().range(colorScale); // deprecated legacy support, note: this fails for ordinal domains\n        } else {\n          _colors = d3.functor(colorScale);\n        }\n        return _chart;\n      };\n\n      /**\n       * Convenience method to set the color scale to\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal d3.scale.ordinal} with\n       * range `r`.\n       * @method ordinalColors\n       * @memberof dc.colorMixin\n       * @instance\n       * @param {Array<String>} r\n       * @returns {dc.colorMixin}\n       */\n      _chart.ordinalColors = function (r) {\n        return _chart.colors(d3.scale.ordinal().range(r));\n      };\n\n      /**\n       * Convenience method to set the color scale to an Hcl interpolated linear scale with range `r`.\n       * @method linearColors\n       * @memberof dc.colorMixin\n       * @instance\n       * @param {Array<Number>} r\n       * @returns {dc.colorMixin}\n       */\n      _chart.linearColors = function (r) {\n        return _chart.colors(d3.scale.linear().range(r).interpolate(d3.interpolateHcl));\n      };\n\n      /**\n       * Set or the get color accessor function. This function will be used to map a data point in a\n       * crossfilter group to a color value on the color scale. The default function uses the key\n       * accessor.\n       * @method colorAccessor\n       * @memberof dc.colorMixin\n       * @instance\n       * @example\n       * // default index based color accessor\n       * .colorAccessor(function (d, i){return i;})\n       * // color accessor for a multi-value crossfilter reduction\n       * .colorAccessor(function (d){return d.value.absGain;})\n       * @param {Function} [colorAccessor]\n       * @returns {Function|dc.colorMixin}\n       */\n      _chart.colorAccessor = function (colorAccessor) {\n        if (!arguments.length) {\n          return _colorAccessor;\n        }\n        _colorAccessor = colorAccessor;\n        _defaultAccessor = false;\n        return _chart;\n      };\n\n      // what is this?\n      _chart.defaultColorAccessor = function () {\n        return _defaultAccessor;\n      };\n\n      /**\n       * Set or get the current domain for the color mapping function. The domain must be supplied as an\n       * array.\n       *\n       * Note: previously this method accepted a callback function. Instead you may use a custom scale\n       * set by {@link dc.colorMixin#colors .colors}.\n       * @method colorDomain\n       * @memberof dc.colorMixin\n       * @instance\n       * @param {Array<String>} [domain]\n       * @returns {Array<String>|dc.colorMixin}\n       */\n      _chart.colorDomain = function (domain) {\n        if (!arguments.length) {\n          return _colors.domain();\n        }\n        _colors.domain(domain);\n        return _chart;\n      };\n\n      /**\n       * Set the domain by determining the min and max values as retrieved by\n       * {@link dc.colorMixin#colorAccessor .colorAccessor} over the chart's dataset.\n       * @method calculateColorDomain\n       * @memberof dc.colorMixin\n       * @instance\n       * @returns {dc.colorMixin}\n       */\n      _chart.calculateColorDomain = function () {\n        var newDomain = [d3.min(_chart.data(), _chart.colorAccessor()), d3.max(_chart.data(), _chart.colorAccessor())];\n        _colors.domain(newDomain);\n        return _chart;\n      };\n\n      /**\n       * Get the color for the datum d and counter i. This is used internally by charts to retrieve a color.\n       * @method getColor\n       * @memberof dc.colorMixin\n       * @instance\n       * @param {*} d\n       * @param {Number} [i]\n       * @returns {String}\n       */\n      _chart.getColor = function (d, i) {\n        return _colorCalculator ? _colorCalculator.call(this, d, i) : _colors(_colorAccessor.call(this, d, i));\n      };\n\n      /**\n       * Overrides the color selection algorithm, replacing it with a simple function.\n       *\n       * Normally colors will be determined by calling the `colorAccessor` to get a value, and then passing that\n       * value through the `colorScale`.\n       *\n       * But sometimes it is difficult to get a color scale to produce the desired effect. The `colorCalculator`\n       * takes the datum and index and returns a color directly.\n       * @method colorCalculator\n       * @memberof dc.colorMixin\n       * @instance\n       * @param {*} [colorCalculator]\n       * @returns {Function|dc.colorMixin}\n       */\n      _chart.colorCalculator = function (colorCalculator) {\n        if (!arguments.length) {\n          return _colorCalculator || _chart.getColor;\n        }\n        _colorCalculator = colorCalculator;\n        return _chart;\n      };\n      return _chart;\n    };\n\n    /**\n     * Coordinate Grid is an abstract base chart designed to support a number of coordinate grid based\n     * concrete chart types, e.g. bar chart, line chart, and bubble chart.\n     * @name coordinateGridMixin\n     * @memberof dc\n     * @mixin\n     * @mixes dc.colorMixin\n     * @mixes dc.marginMixin\n     * @mixes dc.baseMixin\n     * @param {Object} _chart\n     * @returns {dc.coordinateGridMixin}\n     */\n    dc.coordinateGridMixin = function (_chart) {\n      var GRID_LINE_CLASS = 'grid-line';\n      var HORIZONTAL_CLASS = 'horizontal';\n      var VERTICAL_CLASS = 'vertical';\n      var Y_AXIS_LABEL_CLASS = 'y-axis-label';\n      var X_AXIS_LABEL_CLASS = 'x-axis-label';\n      var DEFAULT_AXIS_LABEL_PADDING = 12;\n      _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin(_chart)));\n      _chart.colors(d3.scale.category10());\n      _chart._mandatoryAttributes().push('x');\n      var _parent;\n      var _g;\n      var _chartBodyG;\n      var _x;\n      var _xOriginalDomain;\n      var _xAxis = d3.svg.axis().orient('bottom');\n      var _xUnits = dc.units.integers;\n      var _xAxisPadding = 0;\n      var _xAxisPaddingUnit = 'day';\n      var _xElasticity = false;\n      var _xAxisLabel;\n      var _xAxisLabelPadding = 0;\n      var _lastXDomain;\n      var _y;\n      var _yAxis = d3.svg.axis().orient('left');\n      var _yAxisPadding = 0;\n      var _yElasticity = false;\n      var _yAxisLabel;\n      var _yAxisLabelPadding = 0;\n      var _brush = d3.svg.brush();\n      var _brushOn = true;\n      var _round;\n      var _renderHorizontalGridLine = false;\n      var _renderVerticalGridLine = false;\n      var _refocused = false,\n        _resizing = false;\n      var _unitCount;\n      var _zoomScale = [1, Infinity];\n      var _zoomOutRestrict = true;\n      var _zoom = d3.behavior.zoom().on('zoom', zoomHandler);\n      var _nullZoom = d3.behavior.zoom().on('zoom', null);\n      var _hasBeenMouseZoomable = false;\n      var _rangeChart;\n      var _focusChart;\n      var _mouseZoomable = false;\n      var _clipPadding = 0;\n      var _outerRangeBandPadding = 0.5;\n      var _rangeBandPadding = 0;\n      var _useRightYAxis = false;\n\n      /**\n       * When changing the domain of the x or y scale, it is necessary to tell the chart to recalculate\n       * and redraw the axes. (`.rescale()` is called automatically when the x or y scale is replaced\n       * with {@link dc.coordinateGridMixin+x .x()} or {@link dc.coordinateGridMixin#y .y()}, and has\n       * no effect on elastic scales.)\n       * @method rescale\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @returns {dc.coordinateGridMixin}\n       */\n      _chart.rescale = function () {\n        _unitCount = undefined;\n        _resizing = true;\n        return _chart;\n      };\n      _chart.resizing = function () {\n        return _resizing;\n      };\n\n      /**\n       * Get or set the range selection chart associated with this instance. Setting the range selection\n       * chart using this function will automatically update its selection brush when the current chart\n       * zooms in. In return the given range chart will also automatically attach this chart as its focus\n       * chart hence zoom in when range brush updates.\n       *\n       * Usually the range and focus charts will share a dimension. The range chart will set the zoom\n       * boundaries for the focus chart, so its dimension values must be compatible with the domain of\n       * the focus chart.\n       *\n       * See the [Nasdaq 100 Index](http://dc-js.github.com/dc.js/) example for this effect in action.\n       * @method rangeChart\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {dc.coordinateGridMixin} [rangeChart]\n       * @returns {dc.coordinateGridMixin}\n       */\n      _chart.rangeChart = function (rangeChart) {\n        if (!arguments.length) {\n          return _rangeChart;\n        }\n        _rangeChart = rangeChart;\n        _rangeChart.focusChart(_chart);\n        return _chart;\n      };\n\n      /**\n       * Get or set the scale extent for mouse zooms.\n       * @method zoomScale\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Array<Number|Date>} [extent=[1, Infinity]]\n       * @returns {Array<Number|Date>|dc.coordinateGridMixin}\n       */\n      _chart.zoomScale = function (extent) {\n        if (!arguments.length) {\n          return _zoomScale;\n        }\n        _zoomScale = extent;\n        return _chart;\n      };\n\n      /**\n       * Get or set the zoom restriction for the chart. If true limits the zoom to origional domain of the chart.\n       * @method zoomOutRestrict\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Boolean} [zoomOutRestrict=true]\n       * @returns {Boolean|dc.coordinateGridMixin}\n       */\n      _chart.zoomOutRestrict = function (zoomOutRestrict) {\n        if (!arguments.length) {\n          return _zoomOutRestrict;\n        }\n        _zoomScale[0] = zoomOutRestrict ? 1 : 0;\n        _zoomOutRestrict = zoomOutRestrict;\n        return _chart;\n      };\n      _chart._generateG = function (parent) {\n        if (parent === undefined) {\n          _parent = _chart.svg();\n        } else {\n          _parent = parent;\n        }\n        var href = window.location.href.split('#')[0];\n        _g = _parent.append('g');\n        _chartBodyG = _g.append('g').attr('class', 'chart-body').attr('transform', 'translate(' + _chart.margins().left + ', ' + _chart.margins().top + ')').attr('clip-path', 'url(' + href + '#' + getClipPathId() + ')');\n        return _g;\n      };\n\n      /**\n       * Get or set the root g element. This method is usually used to retrieve the g element in order to\n       * overlay custom svg drawing programatically. **Caution**: The root g element is usually generated\n       * by dc.js internals, and resetting it might produce unpredictable result.\n       * @method g\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {SVGElement} [gElement]\n       * @returns {SVGElement|dc.coordinateGridMixin}\n       */\n      _chart.g = function (gElement) {\n        if (!arguments.length) {\n          return _g;\n        }\n        _g = gElement;\n        return _chart;\n      };\n\n      /**\n       * Set or get mouse zoom capability flag (default: false). When turned on the chart will be\n       * zoomable using the mouse wheel. If the range selector chart is attached zooming will also update\n       * the range selection brush on the associated range selector chart.\n       * @method mouseZoomable\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Boolean} [mouseZoomable=false]\n       * @returns {Boolean|dc.coordinateGridMixin}\n       */\n      _chart.mouseZoomable = function (mouseZoomable) {\n        if (!arguments.length) {\n          return _mouseZoomable;\n        }\n        _mouseZoomable = mouseZoomable;\n        return _chart;\n      };\n\n      /**\n       * Retrieve the svg group for the chart body.\n       * @method chartBodyG\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {SVGElement} [chartBodyG]\n       * @returns {SVGElement}\n       */\n      _chart.chartBodyG = function (chartBodyG) {\n        if (!arguments.length) {\n          return _chartBodyG;\n        }\n        _chartBodyG = chartBodyG;\n        return _chart;\n      };\n\n      /**\n       * **mandatory**\n       *\n       * Get or set the x scale. The x scale can be any d3\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale} or\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md ordinal scale}.\n       * @method x\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n       * @example\n       * // set x to a linear scale\n       * chart.x(d3.scale.linear().domain([-2500, 2500]))\n       * // set x to a time scale to generate histogram\n       * chart.x(d3.time.scale().domain([new Date(1985, 0, 1), new Date(2012, 11, 31)]))\n       * @param {d3.scale} [xScale]\n       * @returns {d3.scale|dc.coordinateGridMixin}\n       */\n      _chart.x = function (xScale) {\n        if (!arguments.length) {\n          return _x;\n        }\n        _x = xScale;\n        _xOriginalDomain = _x.domain();\n        _chart.rescale();\n        return _chart;\n      };\n      _chart.xOriginalDomain = function () {\n        return _xOriginalDomain;\n      };\n\n      /**\n       * Set or get the xUnits function. The coordinate grid chart uses the xUnits function to calculate\n       * the number of data projections on x axis such as the number of bars for a bar chart or the\n       * number of dots for a line chart. This function is expected to return a Javascript array of all\n       * data points on x axis, or the number of points on the axis. [d3 time range functions\n       * d3.time.days, d3.time.months, and\n       * d3.time.years](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#aliases) are all valid xUnits\n       * function. dc.js also provides a few units function, see the {@link dc.units Units Namespace} for\n       * a list of built-in units functions.\n       * @method xUnits\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @todo Add docs for utilities\n       * @example\n       * // set x units to count days\n       * chart.xUnits(d3.time.days);\n       * // set x units to count months\n       * chart.xUnits(d3.time.months);\n       *\n       * // A custom xUnits function can be used as long as it follows the following interface:\n       * // units in integer\n       * function(start, end, xDomain) {\n       *      // simply calculates how many integers in the domain\n       *      return Math.abs(end - start);\n       * };\n       *\n       * // fixed units\n       * function(start, end, xDomain) {\n       *      // be aware using fixed units will disable the focus/zoom ability on the chart\n       *      return 1000;\n       * @param {Function} [xUnits=dc.units.integers]\n       * @returns {Function|dc.coordinateGridMixin}\n       */\n      _chart.xUnits = function (xUnits) {\n        if (!arguments.length) {\n          return _xUnits;\n        }\n        _xUnits = xUnits;\n        return _chart;\n      };\n\n      /**\n       * Set or get the x axis used by a particular coordinate grid chart instance. This function is most\n       * useful when x axis customization is required. The x axis in dc.js is an instance of a\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3 axis object};\n       * therefore it supports any valid d3 axis manipulation.\n       *\n       * **Caution**: The x axis is usually generated internally by dc; resetting it may cause\n       * unexpected results. Note also that when used as a getter, this function is not chainable:\n       * it returns the axis, not the chart,\n       * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n       * so attempting to call chart functions after calling `.xAxis()` will fail}.\n       * @method xAxis\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n       * @example\n       * // customize x axis tick format\n       * chart.xAxis().tickFormat(function(v) {return v + '%';});\n       * // customize x axis tick values\n       * chart.xAxis().tickValues([0, 100, 200, 300]);\n       * @param {d3.svg.axis} [xAxis=d3.svg.axis().orient('bottom')]\n       * @returns {d3.svg.axis|dc.coordinateGridMixin}\n       */\n      _chart.xAxis = function (xAxis) {\n        if (!arguments.length) {\n          return _xAxis;\n        }\n        _xAxis = xAxis;\n        return _chart;\n      };\n\n      /**\n       * Turn on/off elastic x axis behavior. If x axis elasticity is turned on, then the grid chart will\n       * attempt to recalculate the x axis range whenever a redraw event is triggered.\n       * @method elasticX\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Boolean} [elasticX=false]\n       * @returns {Boolean|dc.coordinateGridMixin}\n       */\n      _chart.elasticX = function (elasticX) {\n        if (!arguments.length) {\n          return _xElasticity;\n        }\n        _xElasticity = elasticX;\n        return _chart;\n      };\n\n      /**\n       * Set or get x axis padding for the elastic x axis. The padding will be added to both end of the x\n       * axis if elasticX is turned on; otherwise it is ignored.\n       *\n       * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n       * number or date x axes.  When padding a date axis, an integer represents number of units being padded\n       * and a percentage string will be treated the same as an integer. The unit will be determined by the\n       * xAxisPaddingUnit variable.\n       * @method xAxisPadding\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Number|String} [padding=0]\n       * @returns {Number|String|dc.coordinateGridMixin}\n       */\n      _chart.xAxisPadding = function (padding) {\n        if (!arguments.length) {\n          return _xAxisPadding;\n        }\n        _xAxisPadding = padding;\n        return _chart;\n      };\n\n      /**\n       * Set or get x axis padding unit for the elastic x axis. The padding unit will determine which unit to\n       * use when applying xAxis padding if elasticX is turned on and if x-axis uses a time dimension;\n       * otherwise it is ignored.\n       *\n       * Padding unit is a string that will be used when the padding is calculated. Available parameters are\n       * the available d3 time intervals; see\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval d3.time.interval}.\n       * @method xAxisPaddingUnit\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {String} [unit='days']\n       * @returns {String|dc.coordinateGridMixin}\n       */\n      _chart.xAxisPaddingUnit = function (unit) {\n        if (!arguments.length) {\n          return _xAxisPaddingUnit;\n        }\n        _xAxisPaddingUnit = unit;\n        return _chart;\n      };\n\n      /**\n       * Returns the number of units displayed on the x axis using the unit measure configured by\n       * {@link dc.coordinateGridMixin#xUnits xUnits}.\n       * @method xUnitCount\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @returns {Number}\n       */\n      _chart.xUnitCount = function () {\n        if (_unitCount === undefined) {\n          var units = _chart.xUnits()(_chart.x().domain()[0], _chart.x().domain()[1], _chart.x().domain());\n          if (units instanceof Array) {\n            _unitCount = units.length;\n          } else {\n            _unitCount = units;\n          }\n        }\n        return _unitCount;\n      };\n\n      /**\n       * Gets or sets whether the chart should be drawn with a right axis instead of a left axis. When\n       * used with a chart in a composite chart, allows both left and right Y axes to be shown on a\n       * chart.\n       * @method useRightYAxis\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Boolean} [useRightYAxis=false]\n       * @returns {Boolean|dc.coordinateGridMixin}\n       */\n      _chart.useRightYAxis = function (useRightYAxis) {\n        if (!arguments.length) {\n          return _useRightYAxis;\n        }\n        _useRightYAxis = useRightYAxis;\n        return _chart;\n      };\n\n      /**\n       * Returns true if the chart is using ordinal xUnits ({@link dc.units.ordinal dc.units.ordinal}, or false\n       * otherwise. Most charts behave differently with ordinal data and use the result of this method to\n       * trigger the appropriate logic.\n       * @method isOrdinal\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @returns {Boolean}\n       */\n      _chart.isOrdinal = function () {\n        return _chart.xUnits() === dc.units.ordinal;\n      };\n      _chart._useOuterPadding = function () {\n        return true;\n      };\n      _chart._ordinalXDomain = function () {\n        var groups = _chart._computeOrderedGroups(_chart.data());\n        return groups.map(_chart.keyAccessor());\n      };\n      function compareDomains(d1, d2) {\n        return !d1 || !d2 || d1.length !== d2.length || d1.some(function (elem, i) {\n          return elem && d2[i] ? elem.toString() !== d2[i].toString() : elem === d2[i];\n        });\n      }\n      function prepareXAxis(g, render) {\n        if (!_chart.isOrdinal()) {\n          if (_chart.elasticX()) {\n            _x.domain([_chart.xAxisMin(), _chart.xAxisMax()]);\n          }\n        } else {\n          // _chart.isOrdinal()\n          if (_chart.elasticX() || _x.domain().length === 0) {\n            _x.domain(_chart._ordinalXDomain());\n          }\n        }\n\n        // has the domain changed?\n        var xdom = _x.domain();\n        if (render || compareDomains(_lastXDomain, xdom)) {\n          _chart.rescale();\n        }\n        _lastXDomain = xdom;\n\n        // please can't we always use rangeBands for bar charts?\n        if (_chart.isOrdinal()) {\n          _x.rangeBands([0, _chart.xAxisLength()], _rangeBandPadding, _chart._useOuterPadding() ? _outerRangeBandPadding : 0);\n        } else {\n          _x.range([0, _chart.xAxisLength()]);\n        }\n        _xAxis = _xAxis.scale(_chart.x());\n        renderVerticalGridLines(g);\n      }\n      _chart.renderXAxis = function (g) {\n        var axisXG = g.select('g.x');\n        if (axisXG.empty()) {\n          axisXG = g.append('g').attr('class', 'axis x').attr('transform', 'translate(' + _chart.margins().left + ',' + _chart._xAxisY() + ')');\n        }\n        var axisXLab = g.select('text.' + X_AXIS_LABEL_CLASS);\n        if (axisXLab.empty() && _chart.xAxisLabel()) {\n          axisXLab = g.append('text').attr('class', X_AXIS_LABEL_CLASS).attr('transform', 'translate(' + (_chart.margins().left + _chart.xAxisLength() / 2) + ',' + (_chart.height() - _xAxisLabelPadding) + ')').attr('text-anchor', 'middle');\n        }\n        if (_chart.xAxisLabel() && axisXLab.text() !== _chart.xAxisLabel()) {\n          axisXLab.text(_chart.xAxisLabel());\n        }\n        dc.transition(axisXG, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', 'translate(' + _chart.margins().left + ',' + _chart._xAxisY() + ')').call(_xAxis);\n        dc.transition(axisXLab, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', 'translate(' + (_chart.margins().left + _chart.xAxisLength() / 2) + ',' + (_chart.height() - _xAxisLabelPadding) + ')');\n      };\n      function renderVerticalGridLines(g) {\n        var gridLineG = g.select('g.' + VERTICAL_CLASS);\n        if (_renderVerticalGridLine) {\n          if (gridLineG.empty()) {\n            gridLineG = g.insert('g', ':first-child').attr('class', GRID_LINE_CLASS + ' ' + VERTICAL_CLASS).attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n          }\n          var ticks = _xAxis.tickValues() ? _xAxis.tickValues() : typeof _x.ticks === 'function' ? _x.ticks(_xAxis.ticks()[0]) : _x.domain();\n          var lines = gridLineG.selectAll('line').data(ticks);\n\n          // enter\n          var linesGEnter = lines.enter().append('line').attr('x1', function (d) {\n            return _x(d);\n          }).attr('y1', _chart._xAxisY() - _chart.margins().top).attr('x2', function (d) {\n            return _x(d);\n          }).attr('y2', 0).attr('opacity', 0);\n          dc.transition(linesGEnter, _chart.transitionDuration(), _chart.transitionDelay()).attr('opacity', 1);\n\n          // update\n          dc.transition(lines, _chart.transitionDuration(), _chart.transitionDelay()).attr('x1', function (d) {\n            return _x(d);\n          }).attr('y1', _chart._xAxisY() - _chart.margins().top).attr('x2', function (d) {\n            return _x(d);\n          }).attr('y2', 0);\n\n          // exit\n          lines.exit().remove();\n        } else {\n          gridLineG.selectAll('line').remove();\n        }\n      }\n      _chart._xAxisY = function () {\n        return _chart.height() - _chart.margins().bottom;\n      };\n      _chart.xAxisLength = function () {\n        return _chart.effectiveWidth();\n      };\n\n      /**\n       * Set or get the x axis label. If setting the label, you may optionally include additional padding to\n       * the margin to make room for the label. By default the padded is set to 12 to accomodate the text height.\n       * @method xAxisLabel\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {String} [labelText]\n       * @param {Number} [padding=12]\n       * @returns {String}\n       */\n      _chart.xAxisLabel = function (labelText, padding) {\n        if (!arguments.length) {\n          return _xAxisLabel;\n        }\n        _xAxisLabel = labelText;\n        _chart.margins().bottom -= _xAxisLabelPadding;\n        _xAxisLabelPadding = padding === undefined ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        _chart.margins().bottom += _xAxisLabelPadding;\n        return _chart;\n      };\n      _chart._prepareYAxis = function (g) {\n        if (_y === undefined || _chart.elasticY()) {\n          if (_y === undefined) {\n            _y = d3.scale.linear();\n          }\n          var min = _chart.yAxisMin() || 0,\n            max = _chart.yAxisMax() || 0;\n          _y.domain([min, max]).rangeRound([_chart.yAxisHeight(), 0]);\n        }\n        _y.range([_chart.yAxisHeight(), 0]);\n        _yAxis = _yAxis.scale(_y);\n        if (_useRightYAxis) {\n          _yAxis.orient('right');\n        }\n        _chart._renderHorizontalGridLinesForAxis(g, _y, _yAxis);\n      };\n      _chart.renderYAxisLabel = function (axisClass, text, rotation, labelXPosition) {\n        labelXPosition = labelXPosition || _yAxisLabelPadding;\n        var axisYLab = _chart.g().select('text.' + Y_AXIS_LABEL_CLASS + '.' + axisClass + '-label');\n        var labelYPosition = _chart.margins().top + _chart.yAxisHeight() / 2;\n        if (axisYLab.empty() && text) {\n          axisYLab = _chart.g().append('text').attr('transform', 'translate(' + labelXPosition + ',' + labelYPosition + '),rotate(' + rotation + ')').attr('class', Y_AXIS_LABEL_CLASS + ' ' + axisClass + '-label').attr('text-anchor', 'middle').text(text);\n        }\n        if (text && axisYLab.text() !== text) {\n          axisYLab.text(text);\n        }\n        dc.transition(axisYLab, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', 'translate(' + labelXPosition + ',' + labelYPosition + '),rotate(' + rotation + ')');\n      };\n      _chart.renderYAxisAt = function (axisClass, axis, position) {\n        var axisYG = _chart.g().select('g.' + axisClass);\n        if (axisYG.empty()) {\n          axisYG = _chart.g().append('g').attr('class', 'axis ' + axisClass).attr('transform', 'translate(' + position + ',' + _chart.margins().top + ')');\n        }\n        dc.transition(axisYG, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', 'translate(' + position + ',' + _chart.margins().top + ')').call(axis);\n      };\n      _chart.renderYAxis = function () {\n        var axisPosition = _useRightYAxis ? _chart.width() - _chart.margins().right : _chart._yAxisX();\n        _chart.renderYAxisAt('y', _yAxis, axisPosition);\n        var labelPosition = _useRightYAxis ? _chart.width() - _yAxisLabelPadding : _yAxisLabelPadding;\n        var rotation = _useRightYAxis ? 90 : -90;\n        _chart.renderYAxisLabel('y', _chart.yAxisLabel(), rotation, labelPosition);\n      };\n      _chart._renderHorizontalGridLinesForAxis = function (g, scale, axis) {\n        var gridLineG = g.select('g.' + HORIZONTAL_CLASS);\n        if (_renderHorizontalGridLine) {\n          var ticks = axis.tickValues() ? axis.tickValues() : scale.ticks(axis.ticks()[0]);\n          if (gridLineG.empty()) {\n            gridLineG = g.insert('g', ':first-child').attr('class', GRID_LINE_CLASS + ' ' + HORIZONTAL_CLASS).attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n          }\n          var lines = gridLineG.selectAll('line').data(ticks);\n\n          // enter\n          var linesGEnter = lines.enter().append('line').attr('x1', 1).attr('y1', function (d) {\n            return scale(d);\n          }).attr('x2', _chart.xAxisLength()).attr('y2', function (d) {\n            return scale(d);\n          }).attr('opacity', 0);\n          dc.transition(linesGEnter, _chart.transitionDuration(), _chart.transitionDelay()).attr('opacity', 1);\n\n          // update\n          dc.transition(lines, _chart.transitionDuration(), _chart.transitionDelay()).attr('x1', 1).attr('y1', function (d) {\n            return scale(d);\n          }).attr('x2', _chart.xAxisLength()).attr('y2', function (d) {\n            return scale(d);\n          });\n\n          // exit\n          lines.exit().remove();\n        } else {\n          gridLineG.selectAll('line').remove();\n        }\n      };\n      _chart._yAxisX = function () {\n        return _chart.useRightYAxis() ? _chart.width() - _chart.margins().right : _chart.margins().left;\n      };\n\n      /**\n       * Set or get the y axis label. If setting the label, you may optionally include additional padding\n       * to the margin to make room for the label. By default the padding is set to 12 to accommodate the\n       * text height.\n       * @method yAxisLabel\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {String} [labelText]\n       * @param {Number} [padding=12]\n       * @returns {String|dc.coordinateGridMixin}\n       */\n      _chart.yAxisLabel = function (labelText, padding) {\n        if (!arguments.length) {\n          return _yAxisLabel;\n        }\n        _yAxisLabel = labelText;\n        _chart.margins().left -= _yAxisLabelPadding;\n        _yAxisLabelPadding = padding === undefined ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        _chart.margins().left += _yAxisLabelPadding;\n        return _chart;\n      };\n\n      /**\n       * Get or set the y scale. The y scale is typically automatically determined by the chart implementation.\n       * @method y\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n       * @param {d3.scale} [yScale]\n       * @returns {d3.scale|dc.coordinateGridMixin}\n       */\n      _chart.y = function (yScale) {\n        if (!arguments.length) {\n          return _y;\n        }\n        _y = yScale;\n        _chart.rescale();\n        return _chart;\n      };\n\n      /**\n       * Set or get the y axis used by the coordinate grid chart instance. This function is most useful\n       * when y axis customization is required. The y axis in dc.js is simply an instance of a [d3 axis\n       * object](https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis); therefore it supports any\n       * valid d3 axis manipulation.\n       *\n       * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\n       * unexpected results.  Note also that when used as a getter, this function is not chainable: it\n       * returns the axis, not the chart,\n       * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n       * so attempting to call chart functions after calling `.yAxis()` will fail}.\n       * @method yAxis\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n       * @example\n       * // customize y axis tick format\n       * chart.yAxis().tickFormat(function(v) {return v + '%';});\n       * // customize y axis tick values\n       * chart.yAxis().tickValues([0, 100, 200, 300]);\n       * @param {d3.svg.axis} [yAxis=d3.svg.axis().orient('left')]\n       * @returns {d3.svg.axis|dc.coordinateGridMixin}\n       */\n      _chart.yAxis = function (yAxis) {\n        if (!arguments.length) {\n          return _yAxis;\n        }\n        _yAxis = yAxis;\n        return _chart;\n      };\n\n      /**\n       * Turn on/off elastic y axis behavior. If y axis elasticity is turned on, then the grid chart will\n       * attempt to recalculate the y axis range whenever a redraw event is triggered.\n       * @method elasticY\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Boolean} [elasticY=false]\n       * @returns {Boolean|dc.coordinateGridMixin}\n       */\n      _chart.elasticY = function (elasticY) {\n        if (!arguments.length) {\n          return _yElasticity;\n        }\n        _yElasticity = elasticY;\n        return _chart;\n      };\n\n      /**\n       * Turn on/off horizontal grid lines.\n       * @method renderHorizontalGridLines\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Boolean} [renderHorizontalGridLines=false]\n       * @returns {Boolean|dc.coordinateGridMixin}\n       */\n      _chart.renderHorizontalGridLines = function (renderHorizontalGridLines) {\n        if (!arguments.length) {\n          return _renderHorizontalGridLine;\n        }\n        _renderHorizontalGridLine = renderHorizontalGridLines;\n        return _chart;\n      };\n\n      /**\n       * Turn on/off vertical grid lines.\n       * @method renderVerticalGridLines\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Boolean} [renderVerticalGridLines=false]\n       * @returns {Boolean|dc.coordinateGridMixin}\n       */\n      _chart.renderVerticalGridLines = function (renderVerticalGridLines) {\n        if (!arguments.length) {\n          return _renderVerticalGridLine;\n        }\n        _renderVerticalGridLine = renderVerticalGridLines;\n        return _chart;\n      };\n\n      /**\n       * Calculates the minimum x value to display in the chart. Includes xAxisPadding if set.\n       * @method xAxisMin\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @returns {*}\n       */\n      _chart.xAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n          return _chart.keyAccessor()(e);\n        });\n        return dc.utils.subtract(min, _xAxisPadding, _xAxisPaddingUnit);\n      };\n\n      /**\n       * Calculates the maximum x value to display in the chart. Includes xAxisPadding if set.\n       * @method xAxisMax\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @returns {*}\n       */\n      _chart.xAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n          return _chart.keyAccessor()(e);\n        });\n        return dc.utils.add(max, _xAxisPadding, _xAxisPaddingUnit);\n      };\n\n      /**\n       * Calculates the minimum y value to display in the chart. Includes yAxisPadding if set.\n       * @method yAxisMin\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @returns {*}\n       */\n      _chart.yAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n          return _chart.valueAccessor()(e);\n        });\n        return dc.utils.subtract(min, _yAxisPadding);\n      };\n\n      /**\n       * Calculates the maximum y value to display in the chart. Includes yAxisPadding if set.\n       * @method yAxisMax\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @returns {*}\n       */\n      _chart.yAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n          return _chart.valueAccessor()(e);\n        });\n        return dc.utils.add(max, _yAxisPadding);\n      };\n\n      /**\n       * Set or get y axis padding for the elastic y axis. The padding will be added to the top and\n       * bottom of the y axis if elasticY is turned on; otherwise it is ignored.\n       *\n       * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n       * number or date axes. When padding a date axis, an integer represents number of days being padded\n       * and a percentage string will be treated the same as an integer.\n       * @method yAxisPadding\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Number|String} [padding=0]\n       * @returns {Number|dc.coordinateGridMixin}\n       */\n      _chart.yAxisPadding = function (padding) {\n        if (!arguments.length) {\n          return _yAxisPadding;\n        }\n        _yAxisPadding = padding;\n        return _chart;\n      };\n      _chart.yAxisHeight = function () {\n        return _chart.effectiveHeight();\n      };\n\n      /**\n       * Set or get the rounding function used to quantize the selection when brushing is enabled.\n       * @method round\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @example\n       * // set x unit round to by month, this will make sure range selection brush will\n       * // select whole months\n       * chart.round(d3.time.month.round);\n       * @param {Function} [round]\n       * @returns {Function|dc.coordinateGridMixin}\n       */\n      _chart.round = function (round) {\n        if (!arguments.length) {\n          return _round;\n        }\n        _round = round;\n        return _chart;\n      };\n      _chart._rangeBandPadding = function (_) {\n        if (!arguments.length) {\n          return _rangeBandPadding;\n        }\n        _rangeBandPadding = _;\n        return _chart;\n      };\n      _chart._outerRangeBandPadding = function (_) {\n        if (!arguments.length) {\n          return _outerRangeBandPadding;\n        }\n        _outerRangeBandPadding = _;\n        return _chart;\n      };\n      dc.override(_chart, 'filter', function (_) {\n        if (!arguments.length) {\n          return _chart._filter();\n        }\n        _chart._filter(_);\n        if (_) {\n          _chart.brush().extent(_);\n        } else {\n          _chart.brush().clear();\n        }\n        return _chart;\n      });\n      _chart.brush = function (_) {\n        if (!arguments.length) {\n          return _brush;\n        }\n        _brush = _;\n        return _chart;\n      };\n      function brushHeight() {\n        return _chart._xAxisY() - _chart.margins().top;\n      }\n      _chart.renderBrush = function (g) {\n        if (_brushOn) {\n          _brush.on('brush', _chart._brushing);\n          _brush.on('brushstart', _chart._disableMouseZoom);\n          _brush.on('brushend', configureMouseZoom);\n          var gBrush = g.append('g').attr('class', 'brush').attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')').call(_brush.x(_chart.x()));\n          _chart.setBrushY(gBrush, false);\n          _chart.setHandlePaths(gBrush);\n          if (_chart.hasFilter()) {\n            _chart.redrawBrush(g, false);\n          }\n        }\n      };\n      _chart.setHandlePaths = function (gBrush) {\n        gBrush.selectAll('.resize').append('path').attr('d', _chart.resizeHandlePath);\n      };\n      _chart.setBrushY = function (gBrush) {\n        gBrush.selectAll('rect').attr('height', brushHeight());\n        gBrush.selectAll('.resize path').attr('d', _chart.resizeHandlePath);\n      };\n      _chart.extendBrush = function () {\n        var extent = _brush.extent();\n        if (_chart.round()) {\n          extent[0] = extent.map(_chart.round())[0];\n          extent[1] = extent.map(_chart.round())[1];\n          _g.select('.brush').call(_brush.extent(extent));\n        }\n        return extent;\n      };\n      _chart.brushIsEmpty = function (extent) {\n        return _brush.empty() || !extent || extent[1] <= extent[0];\n      };\n      _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n        _chart.redrawBrush(_g, false);\n        if (_chart.brushIsEmpty(extent)) {\n          dc.events.trigger(function () {\n            _chart.filter(null);\n            _chart.redrawGroup();\n          }, dc.constants.EVENT_DELAY);\n        } else {\n          var rangedFilter = dc.filters.RangedFilter(extent[0], extent[1]);\n          dc.events.trigger(function () {\n            _chart.replaceFilter(rangedFilter);\n            _chart.redrawGroup();\n          }, dc.constants.EVENT_DELAY);\n        }\n      };\n      _chart.redrawBrush = function (g, doTransition) {\n        if (_brushOn) {\n          if (_chart.filter() && _chart.brush().empty()) {\n            _chart.brush().extent(_chart.filter());\n          }\n          var gBrush = dc.optionalTransition(doTransition, _chart.transitionDuration(), _chart.transitionDelay())(g.select('g.brush'));\n          _chart.setBrushY(gBrush);\n          gBrush.call(_chart.brush().x(_chart.x()).extent(_chart.brush().extent()));\n        }\n        _chart.fadeDeselectedArea();\n      };\n      _chart.fadeDeselectedArea = function () {\n        // do nothing, sub-chart should override this function\n      };\n\n      // borrowed from Crossfilter example\n      _chart.resizeHandlePath = function (d) {\n        var e = +(d === 'e'),\n          x = e ? 1 : -1,\n          y = brushHeight() / 3;\n        return 'M' + 0.5 * x + ',' + y + 'A6,6 0 0 ' + e + ' ' + 6.5 * x + ',' + (y + 6) + 'V' + (2 * y - 6) + 'A6,6 0 0 ' + e + ' ' + 0.5 * x + ',' + 2 * y + 'Z' + 'M' + 2.5 * x + ',' + (y + 8) + 'V' + (2 * y - 8) + 'M' + 4.5 * x + ',' + (y + 8) + 'V' + (2 * y - 8);\n      };\n      function getClipPathId() {\n        return _chart.anchorName().replace(/[ .#=\\[\\]\"]/g, '-') + '-clip';\n      }\n\n      /**\n       * Get or set the padding in pixels for the clip path. Once set padding will be applied evenly to\n       * the top, left, right, and bottom when the clip path is generated. If set to zero, the clip area\n       * will be exactly the chart body area minus the margins.\n       * @method clipPadding\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Number} [padding=5]\n       * @returns {Number|dc.coordinateGridMixin}\n       */\n      _chart.clipPadding = function (padding) {\n        if (!arguments.length) {\n          return _clipPadding;\n        }\n        _clipPadding = padding;\n        return _chart;\n      };\n      function generateClipPath() {\n        var defs = dc.utils.appendOrSelect(_parent, 'defs');\n        // cannot select <clippath> elements; bug in WebKit, must select by id\n        // https://groups.google.com/forum/#!topic/d3-js/6EpAzQ2gU9I\n        var id = getClipPathId();\n        var chartBodyClip = dc.utils.appendOrSelect(defs, '#' + id, 'clipPath').attr('id', id);\n        var padding = _clipPadding * 2;\n        dc.utils.appendOrSelect(chartBodyClip, 'rect').attr('width', _chart.xAxisLength() + padding).attr('height', _chart.yAxisHeight() + padding).attr('transform', 'translate(-' + _clipPadding + ', -' + _clipPadding + ')');\n      }\n      _chart._preprocessData = function () {};\n      _chart._doRender = function () {\n        _chart.resetSvg();\n        _chart._preprocessData();\n        _chart._generateG();\n        generateClipPath();\n        drawChart(true);\n        configureMouseZoom();\n        return _chart;\n      };\n      _chart._doRedraw = function () {\n        _chart._preprocessData();\n        drawChart(false);\n        generateClipPath();\n        return _chart;\n      };\n      function drawChart(render) {\n        if (_chart.isOrdinal()) {\n          _brushOn = false;\n        }\n        prepareXAxis(_chart.g(), render);\n        _chart._prepareYAxis(_chart.g());\n        _chart.plotData();\n        if (_chart.elasticX() || _resizing || render) {\n          _chart.renderXAxis(_chart.g());\n        }\n        if (_chart.elasticY() || _resizing || render) {\n          _chart.renderYAxis(_chart.g());\n        }\n        if (render) {\n          _chart.renderBrush(_chart.g(), false);\n        } else {\n          _chart.redrawBrush(_chart.g(), _resizing);\n        }\n        _chart.fadeDeselectedArea();\n        _resizing = false;\n      }\n      function configureMouseZoom() {\n        if (_mouseZoomable) {\n          _chart._enableMouseZoom();\n        } else if (_hasBeenMouseZoomable) {\n          _chart._disableMouseZoom();\n        }\n      }\n      _chart._enableMouseZoom = function () {\n        _hasBeenMouseZoomable = true;\n        _zoom.x(_chart.x()).scaleExtent(_zoomScale).size([_chart.width(), _chart.height()]).duration(_chart.transitionDuration());\n        _chart.root().call(_zoom);\n      };\n      _chart._disableMouseZoom = function () {\n        _chart.root().call(_nullZoom);\n      };\n      function zoomHandler() {\n        _refocused = true;\n        if (_zoomOutRestrict) {\n          var constraint = _xOriginalDomain;\n          if (_rangeChart) {\n            constraint = intersectExtents(constraint, _rangeChart.x().domain());\n          }\n          var constrained = constrainExtent(_chart.x().domain(), constraint);\n          if (constrained) {\n            _chart.x().domain(constrained);\n          }\n        }\n        var domain = _chart.x().domain();\n        var domFilter = dc.filters.RangedFilter(domain[0], domain[1]);\n        _chart.replaceFilter(domFilter);\n        _chart.rescale();\n        _chart.redraw();\n        if (_rangeChart && !rangesEqual(_chart.filter(), _rangeChart.filter())) {\n          dc.events.trigger(function () {\n            _rangeChart.replaceFilter(domFilter);\n            _rangeChart.redraw();\n          });\n        }\n        _chart._invokeZoomedListener();\n        dc.events.trigger(function () {\n          _chart.redrawGroup();\n        }, dc.constants.EVENT_DELAY);\n        _refocused = !rangesEqual(domain, _xOriginalDomain);\n      }\n      function intersectExtents(ext1, ext2) {\n        if (ext1[0] > ext2[1] || ext1[1] < ext2[0]) {\n          console.warn('could not intersect extents');\n        }\n        return [Math.max(ext1[0], ext2[0]), Math.min(ext1[1], ext2[1])];\n      }\n      function constrainExtent(extent, constraint) {\n        var size = extent[1] - extent[0];\n        if (extent[0] < constraint[0]) {\n          return [constraint[0], Math.min(constraint[1], dc.utils.add(constraint[0], size, 'millis'))];\n        } else if (extent[1] > constraint[1]) {\n          return [Math.max(constraint[0], dc.utils.subtract(constraint[1], size, 'millis')), constraint[1]];\n        } else {\n          return null;\n        }\n      }\n\n      /**\n       * Zoom this chart to focus on the given range. The given range should be an array containing only\n       * 2 elements (`[start, end]`) defining a range in the x domain. If the range is not given or set\n       * to null, then the zoom will be reset. _For focus to work elasticX has to be turned off;\n       * otherwise focus will be ignored.\n       * @method focus\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @example\n       * chart.on('renderlet', function(chart) {\n       *     // smooth the rendering through event throttling\n       *     dc.events.trigger(function(){\n       *          // focus some other chart to the range selected by user on this chart\n       *          someOtherChart.focus(chart.filter());\n       *     });\n       * })\n       * @param {Array<Number>} [range]\n       */\n      _chart.focus = function (range) {\n        if (hasRangeSelected(range)) {\n          _chart.x().domain(range);\n        } else {\n          _chart.x().domain(_xOriginalDomain);\n        }\n        _zoom.x(_chart.x());\n        zoomHandler();\n      };\n      _chart.refocused = function () {\n        return _refocused;\n      };\n      _chart.focusChart = function (c) {\n        if (!arguments.length) {\n          return _focusChart;\n        }\n        _focusChart = c;\n        _chart.on('filtered', function (chart) {\n          if (!chart.filter()) {\n            dc.events.trigger(function () {\n              _focusChart.x().domain(_focusChart.xOriginalDomain());\n            });\n          } else if (!rangesEqual(chart.filter(), _focusChart.filter())) {\n            dc.events.trigger(function () {\n              _focusChart.focus(chart.filter());\n            });\n          }\n        });\n        return _chart;\n      };\n      function rangesEqual(range1, range2) {\n        if (!range1 && !range2) {\n          return true;\n        } else if (!range1 || !range2) {\n          return false;\n        } else if (range1.length === 0 && range2.length === 0) {\n          return true;\n        } else if (range1[0].valueOf() === range2[0].valueOf() && range1[1].valueOf() === range2[1].valueOf()) {\n          return true;\n        }\n        return false;\n      }\n\n      /**\n       * Turn on/off the brush-based range filter. When brushing is on then user can drag the mouse\n       * across a chart with a quantitative scale to perform range filtering based on the extent of the\n       * brush, or click on the bars of an ordinal bar chart or slices of a pie chart to filter and\n       * un-filter them. However turning on the brush filter will disable other interactive elements on\n       * the chart such as highlighting, tool tips, and reference lines. Zooming will still be possible\n       * if enabled, but only via scrolling (panning will be disabled.)\n       * @method brushOn\n       * @memberof dc.coordinateGridMixin\n       * @instance\n       * @param {Boolean} [brushOn=true]\n       * @returns {Boolean|dc.coordinateGridMixin}\n       */\n      _chart.brushOn = function (brushOn) {\n        if (!arguments.length) {\n          return _brushOn;\n        }\n        _brushOn = brushOn;\n        return _chart;\n      };\n      function hasRangeSelected(range) {\n        return range instanceof Array && range.length > 1;\n      }\n      return _chart;\n    };\n\n    /**\n     * Stack Mixin is an mixin that provides cross-chart support of stackability using d3.layout.stack.\n     * @name stackMixin\n     * @memberof dc\n     * @mixin\n     * @param {Object} _chart\n     * @returns {dc.stackMixin}\n     */\n    dc.stackMixin = function (_chart) {\n      function prepareValues(layer, layerIdx) {\n        var valAccessor = layer.accessor || _chart.valueAccessor();\n        layer.name = String(layer.name || layerIdx);\n        layer.values = layer.group.all().map(function (d, i) {\n          return {\n            x: _chart.keyAccessor()(d, i),\n            y: layer.hidden ? null : valAccessor(d, i),\n            data: d,\n            layer: layer.name,\n            hidden: layer.hidden\n          };\n        });\n        layer.values = layer.values.filter(domainFilter());\n        return layer.values;\n      }\n      var _stackLayout = d3.layout.stack().values(prepareValues);\n      var _stack = [];\n      var _titles = {};\n      var _hidableStacks = false;\n      var _evadeDomainFilter = false;\n      function domainFilter() {\n        if (!_chart.x() || _evadeDomainFilter) {\n          return d3.functor(true);\n        }\n        var xDomain = _chart.x().domain();\n        if (_chart.isOrdinal()) {\n          // TODO #416\n          //var domainSet = d3.set(xDomain);\n          return function () {\n            return true; //domainSet.has(p.x);\n          };\n        }\n\n        if (_chart.elasticX()) {\n          return function () {\n            return true;\n          };\n        }\n        return function (p) {\n          //return true;\n          return p.x >= xDomain[0] && p.x <= xDomain[xDomain.length - 1];\n        };\n      }\n\n      /**\n       * Stack a new crossfilter group onto this chart with an optional custom value accessor. All stacks\n       * in the same chart will share the same key accessor and therefore the same set of keys.\n       *\n       * For example, in a stacked bar chart, the bars of each stack will be positioned using the same set\n       * of keys on the x axis, while stacked vertically. If name is specified then it will be used to\n       * generate the legend label.\n       * @method stack\n       * @memberof dc.stackMixin\n       * @instance\n       * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n       * @example\n       * // stack group using default accessor\n       * chart.stack(valueSumGroup)\n       * // stack group using custom accessor\n       * .stack(avgByDayGroup, function(d){return d.value.avgByDay;});\n       * @param {crossfilter.group} group\n       * @param {String} [name]\n       * @param {Function} [accessor]\n       * @returns {Array<{group: crossfilter.group, name: String, accessor: Function}>|dc.stackMixin}\n       */\n      _chart.stack = function (group, name, accessor) {\n        if (!arguments.length) {\n          return _stack;\n        }\n        if (arguments.length <= 2) {\n          accessor = name;\n        }\n        var layer = {\n          group: group\n        };\n        if (typeof name === 'string') {\n          layer.name = name;\n        }\n        if (typeof accessor === 'function') {\n          layer.accessor = accessor;\n        }\n        _stack.push(layer);\n        return _chart;\n      };\n      dc.override(_chart, 'group', function (g, n, f) {\n        if (!arguments.length) {\n          return _chart._group();\n        }\n        _stack = [];\n        _titles = {};\n        _chart.stack(g, n);\n        if (f) {\n          _chart.valueAccessor(f);\n        }\n        return _chart._group(g, n);\n      });\n\n      /**\n       * Allow named stacks to be hidden or shown by clicking on legend items.\n       * This does not affect the behavior of hideStack or showStack.\n       * @method hidableStacks\n       * @memberof dc.stackMixin\n       * @instance\n       * @param {Boolean} [hidableStacks=false]\n       * @returns {Boolean|dc.stackMixin}\n       */\n      _chart.hidableStacks = function (hidableStacks) {\n        if (!arguments.length) {\n          return _hidableStacks;\n        }\n        _hidableStacks = hidableStacks;\n        return _chart;\n      };\n      function findLayerByName(n) {\n        var i = _stack.map(dc.pluck('name')).indexOf(n);\n        return _stack[i];\n      }\n\n      /**\n       * Hide all stacks on the chart with the given name.\n       * The chart must be re-rendered for this change to appear.\n       * @method hideStack\n       * @memberof dc.stackMixin\n       * @instance\n       * @param {String} stackName\n       * @returns {dc.stackMixin}\n       */\n      _chart.hideStack = function (stackName) {\n        var layer = findLayerByName(stackName);\n        if (layer) {\n          layer.hidden = true;\n        }\n        return _chart;\n      };\n\n      /**\n       * Show all stacks on the chart with the given name.\n       * The chart must be re-rendered for this change to appear.\n       * @method showStack\n       * @memberof dc.stackMixin\n       * @instance\n       * @param {String} stackName\n       * @returns {dc.stackMixin}\n       */\n      _chart.showStack = function (stackName) {\n        var layer = findLayerByName(stackName);\n        if (layer) {\n          layer.hidden = false;\n        }\n        return _chart;\n      };\n      _chart.getValueAccessorByIndex = function (index) {\n        return _stack[index].accessor || _chart.valueAccessor();\n      };\n      _chart.yAxisMin = function () {\n        var min = d3.min(flattenStack(), function (p) {\n          return p.y < 0 ? p.y + p.y0 : p.y0;\n        });\n        return dc.utils.subtract(min, _chart.yAxisPadding());\n      };\n      _chart.yAxisMax = function () {\n        var max = d3.max(flattenStack(), function (p) {\n          return p.y > 0 ? p.y + p.y0 : p.y0;\n        });\n        return dc.utils.add(max, _chart.yAxisPadding());\n      };\n      function flattenStack() {\n        var valueses = _chart.data().map(function (layer) {\n          return layer.values;\n        });\n        return Array.prototype.concat.apply([], valueses);\n      }\n      _chart.xAxisMin = function () {\n        var min = d3.min(flattenStack(), dc.pluck('x'));\n        return dc.utils.subtract(min, _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n      };\n      _chart.xAxisMax = function () {\n        var max = d3.max(flattenStack(), dc.pluck('x'));\n        return dc.utils.add(max, _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n      };\n\n      /**\n       * Set or get the title function. Chart class will use this function to render svg title (usually interpreted by\n       * browser as tooltips) for each child element in the chart, i.e. a slice in a pie chart or a bubble in a bubble chart.\n       * Almost every chart supports title function however in grid coordinate chart you need to turn off brush in order to\n       * use title otherwise the brush layer will block tooltip trigger.\n       *\n       * If the first argument is a stack name, the title function will get or set the title for that stack. If stackName\n       * is not provided, the first stack is implied.\n       * @method title\n       * @memberof dc.stackMixin\n       * @instance\n       * @example\n       * // set a title function on 'first stack'\n       * chart.title('first stack', function(d) { return d.key + ': ' + d.value; });\n       * // get a title function from 'second stack'\n       * var secondTitleFunction = chart.title('second stack');\n       * @param {String} [stackName]\n       * @param {Function} [titleAccessor]\n       * @returns {String|dc.stackMixin}\n       */\n      dc.override(_chart, 'title', function (stackName, titleAccessor) {\n        if (!stackName) {\n          return _chart._title();\n        }\n        if (typeof stackName === 'function') {\n          return _chart._title(stackName);\n        }\n        if (stackName === _chart._groupName && typeof titleAccessor === 'function') {\n          return _chart._title(titleAccessor);\n        }\n        if (typeof titleAccessor !== 'function') {\n          return _titles[stackName] || _chart._title();\n        }\n        _titles[stackName] = titleAccessor;\n        return _chart;\n      });\n\n      /**\n       * Gets or sets the stack layout algorithm, which computes a baseline for each stack and\n       * propagates it to the next.\n       * @method stackLayout\n       * @memberof dc.stackMixin\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Stack-Layout.md d3.layout.stack}\n       * @param {Function} [stack=d3.layout.stack]\n       * @returns {Function|dc.stackMixin}\n       */\n      _chart.stackLayout = function (stack) {\n        if (!arguments.length) {\n          return _stackLayout;\n        }\n        _stackLayout = stack;\n        if (_stackLayout.values() === d3.layout.stack().values()) {\n          _stackLayout.values(prepareValues);\n        }\n        return _chart;\n      };\n\n      /**\n       * Since dc.js 2.0, there has been {@link https://github.com/dc-js/dc.js/issues/949 an issue}\n       * where points are filtered to the current domain. While this is a useful optimization, it is\n       * incorrectly implemented: the next point outside the domain is required in order to draw lines\n       * that are clipped to the bounds, as well as bars that are partly clipped.\n       *\n       * A fix will be included in dc.js 2.1.x, but a workaround is needed for dc.js 2.0 and until\n       * that fix is published, so set this flag to skip any filtering of points.\n       *\n       * Once the bug is fixed, this flag will have no effect, and it will be deprecated.\n       * @method evadeDomainFilter\n       * @memberof dc.stackMixin\n       * @instance\n       * @param {Boolean} [evadeDomainFilter=false]\n       * @returns {Boolean|dc.stackMixin}\n       */\n      _chart.evadeDomainFilter = function (evadeDomainFilter) {\n        if (!arguments.length) {\n          return _evadeDomainFilter;\n        }\n        _evadeDomainFilter = evadeDomainFilter;\n        return _chart;\n      };\n      function visability(l) {\n        return !l.hidden;\n      }\n      _chart.data(function () {\n        var layers = _stack.filter(visability);\n        return layers.length ? _chart.stackLayout()(layers) : [];\n      });\n      _chart._ordinalXDomain = function () {\n        var flat = flattenStack().map(dc.pluck('data'));\n        var ordered = _chart._computeOrderedGroups(flat);\n        return ordered.map(_chart.keyAccessor());\n      };\n      _chart.colorAccessor(function (d) {\n        var layer = this.layer || this.name || d.name || d.layer;\n        return layer;\n      });\n      _chart.legendables = function () {\n        return _stack.map(function (layer, i) {\n          return {\n            chart: _chart,\n            name: layer.name,\n            hidden: layer.hidden || false,\n            color: _chart.getColor.call(layer, layer.values, i)\n          };\n        });\n      };\n      _chart.isLegendableHidden = function (d) {\n        var layer = findLayerByName(d.name);\n        return layer ? layer.hidden : false;\n      };\n      _chart.legendToggle = function (d) {\n        if (_hidableStacks) {\n          if (_chart.isLegendableHidden(d)) {\n            _chart.showStack(d.name);\n          } else {\n            _chart.hideStack(d.name);\n          }\n          //_chart.redraw();\n          _chart.renderGroup();\n        }\n      };\n      return _chart;\n    };\n\n    /**\n     * Cap is a mixin that groups small data elements below a _cap_ into an *others* grouping for both the\n     * Row and Pie Charts.\n     *\n     * The top ordered elements in the group up to the cap amount will be kept in the chart, and the rest\n     * will be replaced with an *others* element, with value equal to the sum of the replaced values. The\n     * keys of the elements below the cap limit are recorded in order to filter by those keys when the\n     * others* element is clicked.\n     * @name capMixin\n     * @memberof dc\n     * @mixin\n     * @param {Object} _chart\n     * @returns {dc.capMixin}\n     */\n    dc.capMixin = function (_chart) {\n      var _cap = Infinity,\n        _takeFront = true;\n      var _othersLabel = 'Others';\n\n      // emulate old group.top(N) ordering\n      _chart.ordering(function (kv) {\n        return -kv.value;\n      });\n      var _othersGrouper = function (topItems, restItems) {\n        var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\n          restKeys = restItems.map(_chart.keyAccessor());\n        if (restItemsSum > 0) {\n          return topItems.concat([{\n            others: restKeys,\n            key: _chart.othersLabel(),\n            value: restItemsSum\n          }]);\n        }\n        return topItems;\n      };\n      _chart.cappedKeyAccessor = function (d, i) {\n        if (d.others) {\n          return d.key;\n        }\n        return _chart.keyAccessor()(d, i);\n      };\n      _chart.cappedValueAccessor = function (d, i) {\n        if (d.others) {\n          return d.value;\n        }\n        return _chart.valueAccessor()(d, i);\n      };\n\n      // return N \"top\" groups, where N is the cap, sorted by baseMixin.ordering\n      // whether top means front or back depends on takeFront\n      _chart.data(function (group) {\n        if (_cap === Infinity) {\n          return _chart._computeOrderedGroups(group.all());\n        } else {\n          var items = group.all(),\n            rest;\n          items = _chart._computeOrderedGroups(items); // sort by baseMixin.ordering\n\n          if (_cap) {\n            if (_takeFront) {\n              rest = items.slice(_cap);\n              items = items.slice(0, _cap);\n            } else {\n              var start = Math.max(0, items.length - _cap);\n              rest = items.slice(0, start);\n              items = items.slice(start);\n            }\n          }\n          if (_othersGrouper) {\n            return _othersGrouper(items, rest);\n          }\n          return items;\n        }\n      });\n\n      /**\n       * Get or set the count of elements to that will be included in the cap. If there is an\n       * {@link dc.capMixin#othersGrouper othersGrouper}, any further elements will be combined in an\n       * extra element with its name determined by {@link dc.capMixin#othersLabel othersLabel}.\n       *\n       * As of dc.js 2.1 and onward, the capped charts use\n       * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all()}\n       * and {@link dc.baseMixin#ordering baseMixin.ordering()} to determine the order of\n       * elements. Then `cap` and {@link dc.capMixin#takeFront takeFront} determine how many elements\n       * to keep, from which end of the resulting array.\n       *\n       * **Migration note:** Up through dc.js 2.0.*, capping used\n       * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_top group.top(N)},\n       * which selects the largest items according to\n       * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_order group.order()}.\n       * The chart then sorted the items according to {@link dc.baseMixin#ordering baseMixin.ordering()}.\n       * So the two values essentially had to agree, but if the `group.order()` was incorrect (it's\n       * easy to forget about), the wrong rows or slices would be displayed, in the correct order.\n       *\n       * If your chart previously relied on `group.order()`, use `chart.ordering()` instead. As of\n       * 2.1.5, the ordering defaults to sorting from greatest to least like `group.top(N)` did.\n       *\n       * If you want to cap by one ordering but sort by another, please\n       * [file an issue](https://github.com/dc-js/dc.js/issues/new) - it's still possible but we'll\n       * need to work up an example.\n       * @method cap\n       * @memberof dc.capMixin\n       * @instance\n       * @param {Number} [count=Infinity]\n       * @returns {Number|dc.capMixin}\n       */\n      _chart.cap = function (count) {\n        if (!arguments.length) {\n          return _cap;\n        }\n        _cap = count;\n        return _chart;\n      };\n\n      /**\n       * Get or set the direction of capping. If set, the chart takes the first\n       * {@link dc.capMixin#cap cap} elements from the sorted array of elements; otherwise\n       * it takes the last `cap` elements.\n       * @method takeFront\n       * @memberof dc.capMixin\n       * @instance\n       * @param {Boolean} [takeFront=true]\n       * @returns {Boolean|dc.capMixin}\n       */\n      _chart.takeFront = function (takeFront) {\n        if (!arguments.length) {\n          return _takeFront;\n        }\n        _takeFront = takeFront;\n        return _chart;\n      };\n\n      /**\n       * Get or set the label for *Others* slice when slices cap is specified.\n       * @method othersLabel\n       * @memberof dc.capMixin\n       * @instance\n       * @param {String} [label=\"Others\"]\n       * @returns {String|dc.capMixin}\n       */\n      _chart.othersLabel = function (label) {\n        if (!arguments.length) {\n          return _othersLabel;\n        }\n        _othersLabel = label;\n        return _chart;\n      };\n\n      /**\n       * Get or set the grouper function that will perform the insertion of data for the *Others* slice\n       * if the slices cap is specified. If set to a falsy value, no others will be added.\n       *\n       * The grouper function takes an array of included (\"top\") items, and an array of the rest of\n       * the items. By default the grouper function computes the sum of the rest.\n       * @method othersGrouper\n       * @memberof dc.capMixin\n       * @instance\n       * @example\n       * // Do not show others\n       * chart.othersGrouper(null);\n       * // Default others grouper\n       * chart.othersGrouper(function (topItems, restItems) {\n       *     var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\n       *         restKeys = restItems.map(_chart.keyAccessor());\n       *     if (restItemsSum > 0) {\n       *         return topItems.concat([{\n       *             others: restKeys,\n       *             key: _chart.othersLabel(),\n       *             value: restItemsSum\n       *         }]);\n       *     }\n       *     return topItems;\n       * });\n       * @param {Function} [grouperFunction]\n       * @returns {Function|dc.capMixin}\n       */\n      _chart.othersGrouper = function (grouperFunction) {\n        if (!arguments.length) {\n          return _othersGrouper;\n        }\n        _othersGrouper = grouperFunction;\n        return _chart;\n      };\n      dc.override(_chart, 'onClick', function (d) {\n        if (d.others) {\n          _chart.filter([d.others]);\n        }\n        _chart._onClick(d);\n      });\n      return _chart;\n    };\n\n    /**\n     * This Mixin provides reusable functionalities for any chart that needs to visualize data using bubbles.\n     * @name bubbleMixin\n     * @memberof dc\n     * @mixin\n     * @mixes dc.colorMixin\n     * @param {Object} _chart\n     * @returns {dc.bubbleMixin}\n     */\n    dc.bubbleMixin = function (_chart) {\n      var _maxBubbleRelativeSize = 0.3;\n      var _minRadiusWithLabel = 10;\n      var _sortBubbleSize = false;\n      var _elasticRadius = false;\n      _chart.BUBBLE_NODE_CLASS = 'node';\n      _chart.BUBBLE_CLASS = 'bubble';\n      _chart.MIN_RADIUS = 10;\n      _chart = dc.colorMixin(_chart);\n      _chart.renderLabel(true);\n      _chart.data(function (group) {\n        var data = group.all();\n        if (_sortBubbleSize) {\n          // sort descending so smaller bubbles are on top\n          var radiusAccessor = _chart.radiusValueAccessor();\n          data.sort(function (a, b) {\n            return d3.descending(radiusAccessor(a), radiusAccessor(b));\n          });\n        }\n        return data;\n      });\n      var _r = d3.scale.linear().domain([0, 100]);\n      var _rValueAccessor = function (d) {\n        return d.r;\n      };\n\n      /**\n       * Get or set the bubble radius scale. By default the bubble chart uses\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md#linear d3.scale.linear().domain([0, 100])}\n       * as its radius scale.\n       * @method r\n       * @memberof dc.bubbleMixin\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n       * @param {d3.scale} [bubbleRadiusScale=d3.scale.linear().domain([0, 100])]\n       * @returns {d3.scale|dc.bubbleMixin}\n       */\n      _chart.r = function (bubbleRadiusScale) {\n        if (!arguments.length) {\n          return _r;\n        }\n        _r = bubbleRadiusScale;\n        return _chart;\n      };\n\n      /**\n       * Turn on or off the elastic bubble radius feature, or return the value of the flag. If this\n       * feature is turned on, then bubble radii will be automatically rescaled to fit the chart better.\n       * @method elasticRadius\n       * @memberof dc.bubbleChart\n       * @instance\n       * @param {Boolean} [elasticRadius=false]\n       * @returns {Boolean|dc.bubbleChart}\n       */\n      _chart.elasticRadius = function (elasticRadius) {\n        if (!arguments.length) {\n          return _elasticRadius;\n        }\n        _elasticRadius = elasticRadius;\n        return _chart;\n      };\n      _chart.calculateRadiusDomain = function () {\n        if (_elasticRadius) {\n          _chart.r().domain([_chart.rMin(), _chart.rMax()]);\n        }\n      };\n\n      /**\n       * Get or set the radius value accessor function. If set, the radius value accessor function will\n       * be used to retrieve a data value for each bubble. The data retrieved then will be mapped using\n       * the r scale to the actual bubble radius. This allows you to encode a data dimension using bubble\n       * size.\n       * @method radiusValueAccessor\n       * @memberof dc.bubbleMixin\n       * @instance\n       * @param {Function} [radiusValueAccessor]\n       * @returns {Function|dc.bubbleMixin}\n       */\n      _chart.radiusValueAccessor = function (radiusValueAccessor) {\n        if (!arguments.length) {\n          return _rValueAccessor;\n        }\n        _rValueAccessor = radiusValueAccessor;\n        return _chart;\n      };\n      _chart.rMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n          return _chart.radiusValueAccessor()(e);\n        });\n        return min;\n      };\n      _chart.rMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n          return _chart.radiusValueAccessor()(e);\n        });\n        return max;\n      };\n      _chart.bubbleR = function (d) {\n        var value = _chart.radiusValueAccessor()(d);\n        var r = _chart.r()(value);\n        if (isNaN(r) || value <= 0) {\n          r = 0;\n        }\n        return r;\n      };\n      var labelFunction = function (d) {\n        return _chart.label()(d);\n      };\n      var shouldLabel = function (d) {\n        return _chart.bubbleR(d) > _minRadiusWithLabel;\n      };\n      var labelOpacity = function (d) {\n        return shouldLabel(d) ? 1 : 0;\n      };\n      var labelPointerEvent = function (d) {\n        return shouldLabel(d) ? 'all' : 'none';\n      };\n      _chart._doRenderLabel = function (bubbleGEnter) {\n        if (_chart.renderLabel()) {\n          var label = bubbleGEnter.select('text');\n          if (label.empty()) {\n            label = bubbleGEnter.append('text').attr('text-anchor', 'middle').attr('dy', '.3em').on('click', _chart.onClick);\n          }\n          label.attr('opacity', 0).attr('pointer-events', labelPointerEvent).text(labelFunction);\n          dc.transition(label, _chart.transitionDuration(), _chart.transitionDelay()).attr('opacity', labelOpacity);\n        }\n      };\n      _chart.doUpdateLabels = function (bubbleGEnter) {\n        if (_chart.renderLabel()) {\n          var labels = bubbleGEnter.select('text').attr('pointer-events', labelPointerEvent).text(labelFunction);\n          dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay()).attr('opacity', labelOpacity);\n        }\n      };\n      var titleFunction = function (d) {\n        return _chart.title()(d);\n      };\n      _chart._doRenderTitles = function (g) {\n        if (_chart.renderTitle()) {\n          var title = g.select('title');\n          if (title.empty()) {\n            g.append('title').text(titleFunction);\n          }\n        }\n      };\n      _chart.doUpdateTitles = function (g) {\n        if (_chart.renderTitle()) {\n          g.select('title').text(titleFunction);\n        }\n      };\n\n      /**\n       * Turn on or off the bubble sorting feature, or return the value of the flag. If enabled,\n       * bubbles will be sorted by their radius, with smaller bubbles in front.\n       * @method sortBubbleSize\n       * @memberof dc.bubbleChart\n       * @instance\n       * @param {Boolean} [sortBubbleSize=false]\n       * @returns {Boolean|dc.bubbleChart}\n       */\n      _chart.sortBubbleSize = function (sortBubbleSize) {\n        if (!arguments.length) {\n          return _sortBubbleSize;\n        }\n        _sortBubbleSize = sortBubbleSize;\n        return _chart;\n      };\n\n      /**\n       * Get or set the minimum radius. This will be used to initialize the radius scale's range.\n       * @method minRadius\n       * @memberof dc.bubbleMixin\n       * @instance\n       * @param {Number} [radius=10]\n       * @returns {Number|dc.bubbleMixin}\n       */\n      _chart.minRadius = function (radius) {\n        if (!arguments.length) {\n          return _chart.MIN_RADIUS;\n        }\n        _chart.MIN_RADIUS = radius;\n        return _chart;\n      };\n\n      /**\n       * Get or set the minimum radius for label rendering. If a bubble's radius is less than this value\n       * then no label will be rendered.\n       * @method minRadiusWithLabel\n       * @memberof dc.bubbleMixin\n       * @instance\n       * @param {Number} [radius=10]\n       * @returns {Number|dc.bubbleMixin}\n       */\n\n      _chart.minRadiusWithLabel = function (radius) {\n        if (!arguments.length) {\n          return _minRadiusWithLabel;\n        }\n        _minRadiusWithLabel = radius;\n        return _chart;\n      };\n\n      /**\n       * Get or set the maximum relative size of a bubble to the length of x axis. This value is useful\n       * when the difference in radius between bubbles is too great.\n       * @method maxBubbleRelativeSize\n       * @memberof dc.bubbleMixin\n       * @instance\n       * @param {Number} [relativeSize=0.3]\n       * @returns {Number|dc.bubbleMixin}\n       */\n      _chart.maxBubbleRelativeSize = function (relativeSize) {\n        if (!arguments.length) {\n          return _maxBubbleRelativeSize;\n        }\n        _maxBubbleRelativeSize = relativeSize;\n        return _chart;\n      };\n      _chart.fadeDeselectedArea = function () {\n        if (_chart.hasFilter()) {\n          _chart.selectAll('g.' + _chart.BUBBLE_NODE_CLASS).each(function (d) {\n            if (_chart.isSelectedNode(d)) {\n              _chart.highlightSelected(this);\n            } else {\n              _chart.fadeDeselected(this);\n            }\n          });\n        } else {\n          _chart.selectAll('g.' + _chart.BUBBLE_NODE_CLASS).each(function () {\n            _chart.resetHighlight(this);\n          });\n        }\n      };\n      _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(d.key);\n      };\n      _chart.onClick = function (d) {\n        var filter = d.key;\n        dc.events.trigger(function () {\n          _chart.filter(filter);\n          _chart.redrawGroup();\n        });\n      };\n      return _chart;\n    };\n\n    /**\n     * The pie chart implementation is usually used to visualize a small categorical distribution.  The pie\n     * chart uses keyAccessor to determine the slices, and valueAccessor to calculate the size of each\n     * slice relative to the sum of all values. Slices are ordered by {@link dc.baseMixin#ordering ordering}\n     * which defaults to sorting by key.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n     * @class pieChart\n     * @memberof dc\n     * @mixes dc.capMixin\n     * @mixes dc.colorMixin\n     * @mixes dc.baseMixin\n     * @example\n     * // create a pie chart under #chart-container1 element using the default global chart group\n     * var chart1 = dc.pieChart('#chart-container1');\n     * // create a pie chart under #chart-container2 element using chart group A\n     * var chart2 = dc.pieChart('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.pieChart}\n     */\n    dc.pieChart = function (parent, chartGroup) {\n      var DEFAULT_MIN_ANGLE_FOR_LABEL = 0.5;\n      var _sliceCssClass = 'pie-slice';\n      var _labelCssClass = 'pie-label';\n      var _sliceGroupCssClass = 'pie-slice-group';\n      var _labelGroupCssClass = 'pie-label-group';\n      var _emptyCssClass = 'empty-chart';\n      var _emptyTitle = 'empty';\n      var _radius,\n        _givenRadius,\n        // specified radius, if any\n        _innerRadius = 0,\n        _externalRadiusPadding = 0;\n      var _g;\n      var _cx;\n      var _cy;\n      var _minAngleForLabel = DEFAULT_MIN_ANGLE_FOR_LABEL;\n      var _externalLabelRadius;\n      var _drawPaths = false;\n      var _chart = dc.capMixin(dc.colorMixin(dc.baseMixin({})));\n      _chart.colorAccessor(_chart.cappedKeyAccessor);\n      _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + _chart.cappedValueAccessor(d);\n      });\n\n      /**\n       * Get or set the maximum number of slices the pie chart will generate. The top slices are determined by\n       * value from high to low. Other slices exeeding the cap will be rolled up into one single *Others* slice.\n       * @method slicesCap\n       * @memberof dc.pieChart\n       * @instance\n       * @param {Number} [cap]\n       * @returns {Number|dc.pieChart}\n       */\n      _chart.slicesCap = _chart.cap;\n      _chart.label(_chart.cappedKeyAccessor);\n      _chart.renderLabel(true);\n      _chart.transitionDuration(350);\n      _chart.transitionDelay(0);\n      _chart._doRender = function () {\n        _chart.resetSvg();\n        _g = _chart.svg().append('g').attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n        _g.append('g').attr('class', _sliceGroupCssClass);\n        _g.append('g').attr('class', _labelGroupCssClass);\n        drawChart();\n        return _chart;\n      };\n      function drawChart() {\n        // set radius from chart size if none given, or if given radius is too large\n        var maxRadius = d3.min([_chart.width(), _chart.height()]) / 2;\n        _radius = _givenRadius && _givenRadius < maxRadius ? _givenRadius : maxRadius;\n        var arc = buildArcs();\n        var pie = pieLayout();\n        var pieData;\n        // if we have data...\n        if (d3.sum(_chart.data(), _chart.valueAccessor())) {\n          pieData = pie(_chart.data());\n          _g.classed(_emptyCssClass, false);\n        } else {\n          // otherwise we'd be getting NaNs, so override\n          // note: abuse others for its ignoring the value accessor\n          pieData = pie([{\n            key: _emptyTitle,\n            value: 1,\n            others: [_emptyTitle]\n          }]);\n          _g.classed(_emptyCssClass, true);\n        }\n        if (_g) {\n          var slices = _g.select('g.' + _sliceGroupCssClass).selectAll('g.' + _sliceCssClass).data(pieData);\n          var labels = _g.select('g.' + _labelGroupCssClass).selectAll('text.' + _labelCssClass).data(pieData);\n          createElements(slices, labels, arc, pieData);\n          updateElements(pieData, arc);\n          removeElements(slices, labels);\n          highlightFilter();\n          dc.transition(_g, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n        }\n      }\n      function createElements(slices, labels, arc, pieData) {\n        var slicesEnter = createSliceNodes(slices);\n        createSlicePath(slicesEnter, arc);\n        createTitles(slicesEnter);\n        createLabels(labels, pieData, arc);\n      }\n      function createSliceNodes(slices) {\n        var slicesEnter = slices.enter().append('g').attr('class', function (d, i) {\n          return _sliceCssClass + ' _' + i;\n        });\n        return slicesEnter;\n      }\n      function createSlicePath(slicesEnter, arc) {\n        var slicePath = slicesEnter.append('path').attr('fill', fill).on('click', onClick).attr('d', function (d, i) {\n          return safeArc(d, i, arc);\n        });\n        var transition = dc.transition(slicePath, _chart.transitionDuration(), _chart.transitionDelay());\n        if (transition.attrTween) {\n          transition.attrTween('d', tweenPie);\n        }\n      }\n      function createTitles(slicesEnter) {\n        if (_chart.renderTitle()) {\n          slicesEnter.append('title').text(function (d) {\n            return _chart.title()(d.data);\n          });\n        }\n      }\n      _chart._applyLabelText = function (labels) {\n        labels.text(function (d) {\n          var data = d.data;\n          if ((sliceHasNoData(data) || sliceTooSmall(d)) && !isSelectedSlice(d)) {\n            return '';\n          }\n          return _chart.label()(d.data);\n        });\n      };\n      function positionLabels(labels, arc) {\n        _chart._applyLabelText(labels);\n        dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', function (d) {\n          return labelPosition(d, arc);\n        }).attr('text-anchor', 'middle');\n      }\n      function highlightSlice(i, whether) {\n        _chart.select('g.pie-slice._' + i).classed('highlight', whether);\n      }\n      function createLabels(labels, pieData, arc) {\n        if (_chart.renderLabel()) {\n          var labelsEnter = labels.enter().append('text').attr('class', function (d, i) {\n            var classes = _sliceCssClass + ' ' + _labelCssClass + ' _' + i;\n            if (_externalLabelRadius) {\n              classes += ' external';\n            }\n            return classes;\n          }).on('click', onClick).on('mouseover', function (d, i) {\n            highlightSlice(i, true);\n          }).on('mouseout', function (d, i) {\n            highlightSlice(i, false);\n          });\n          positionLabels(labelsEnter, arc);\n          if (_externalLabelRadius && _drawPaths) {\n            updateLabelPaths(pieData, arc);\n          }\n        }\n      }\n      function updateLabelPaths(pieData, arc) {\n        var polyline = _g.selectAll('polyline.' + _sliceCssClass).data(pieData);\n        polyline.enter().append('polyline').attr('class', function (d, i) {\n          return 'pie-path _' + i + ' ' + _sliceCssClass;\n        }).on('click', onClick).on('mouseover', function (d, i) {\n          highlightSlice(i, true);\n        }).on('mouseout', function (d, i) {\n          highlightSlice(i, false);\n        });\n        polyline.exit().remove();\n        var arc2 = d3.svg.arc().outerRadius(_radius - _externalRadiusPadding + _externalLabelRadius).innerRadius(_radius - _externalRadiusPadding);\n        var transition = dc.transition(polyline, _chart.transitionDuration(), _chart.transitionDelay());\n        // this is one rare case where d3.selection differs from d3.transition\n        if (transition.attrTween) {\n          transition.attrTween('points', function (d) {\n            var current = this._current || d;\n            current = {\n              startAngle: current.startAngle,\n              endAngle: current.endAngle\n            };\n            var interpolate = d3.interpolate(current, d);\n            this._current = interpolate(0);\n            return function (t) {\n              var d2 = interpolate(t);\n              return [arc.centroid(d2), arc2.centroid(d2)];\n            };\n          });\n        } else {\n          transition.attr('points', function (d) {\n            return [arc.centroid(d), arc2.centroid(d)];\n          });\n        }\n        transition.style('visibility', function (d) {\n          return d.endAngle - d.startAngle < 0.0001 ? 'hidden' : 'visible';\n        });\n      }\n      function updateElements(pieData, arc) {\n        updateSlicePaths(pieData, arc);\n        updateLabels(pieData, arc);\n        updateTitles(pieData);\n      }\n      function updateSlicePaths(pieData, arc) {\n        var slicePaths = _g.selectAll('g.' + _sliceCssClass).data(pieData).select('path').attr('d', function (d, i) {\n          return safeArc(d, i, arc);\n        });\n        var transition = dc.transition(slicePaths, _chart.transitionDuration(), _chart.transitionDelay());\n        if (transition.attrTween) {\n          transition.attrTween('d', tweenPie);\n        }\n        transition.attr('fill', fill);\n      }\n      function updateLabels(pieData, arc) {\n        if (_chart.renderLabel()) {\n          var labels = _g.selectAll('text.' + _labelCssClass).data(pieData);\n          positionLabels(labels, arc);\n          if (_externalLabelRadius && _drawPaths) {\n            updateLabelPaths(pieData, arc);\n          }\n        }\n      }\n      function updateTitles(pieData) {\n        if (_chart.renderTitle()) {\n          _g.selectAll('g.' + _sliceCssClass).data(pieData).select('title').text(function (d) {\n            return _chart.title()(d.data);\n          });\n        }\n      }\n      function removeElements(slices, labels) {\n        slices.exit().remove();\n        labels.exit().remove();\n      }\n      function highlightFilter() {\n        if (_chart.hasFilter()) {\n          _chart.selectAll('g.' + _sliceCssClass).each(function (d) {\n            if (isSelectedSlice(d)) {\n              _chart.highlightSelected(this);\n            } else {\n              _chart.fadeDeselected(this);\n            }\n          });\n        } else {\n          _chart.selectAll('g.' + _sliceCssClass).each(function () {\n            _chart.resetHighlight(this);\n          });\n        }\n      }\n\n      /**\n       * Get or set the external radius padding of the pie chart. This will force the radius of the\n       * pie chart to become smaller or larger depending on the value.\n       * @method externalRadiusPadding\n       * @memberof dc.pieChart\n       * @instance\n       * @param {Number} [externalRadiusPadding=0]\n       * @returns {Number|dc.pieChart}\n       */\n      _chart.externalRadiusPadding = function (externalRadiusPadding) {\n        if (!arguments.length) {\n          return _externalRadiusPadding;\n        }\n        _externalRadiusPadding = externalRadiusPadding;\n        return _chart;\n      };\n\n      /**\n       * Get or set the inner radius of the pie chart. If the inner radius is greater than 0px then the\n       * pie chart will be rendered as a doughnut chart.\n       * @method innerRadius\n       * @memberof dc.pieChart\n       * @instance\n       * @param {Number} [innerRadius=0]\n       * @returns {Number|dc.pieChart}\n       */\n      _chart.innerRadius = function (innerRadius) {\n        if (!arguments.length) {\n          return _innerRadius;\n        }\n        _innerRadius = innerRadius;\n        return _chart;\n      };\n\n      /**\n       * Get or set the outer radius. If the radius is not set, it will be half of the minimum of the\n       * chart width and height.\n       * @method radius\n       * @memberof dc.pieChart\n       * @instance\n       * @param {Number} [radius]\n       * @returns {Number|dc.pieChart}\n       */\n      _chart.radius = function (radius) {\n        if (!arguments.length) {\n          return _givenRadius;\n        }\n        _givenRadius = radius;\n        return _chart;\n      };\n\n      /**\n       * Get or set center x coordinate position. Default is center of svg.\n       * @method cx\n       * @memberof dc.pieChart\n       * @instance\n       * @param {Number} [cx]\n       * @returns {Number|dc.pieChart}\n       */\n      _chart.cx = function (cx) {\n        if (!arguments.length) {\n          return _cx || _chart.width() / 2;\n        }\n        _cx = cx;\n        return _chart;\n      };\n\n      /**\n       * Get or set center y coordinate position. Default is center of svg.\n       * @method cy\n       * @memberof dc.pieChart\n       * @instance\n       * @param {Number} [cy]\n       * @returns {Number|dc.pieChart}\n       */\n      _chart.cy = function (cy) {\n        if (!arguments.length) {\n          return _cy || _chart.height() / 2;\n        }\n        _cy = cy;\n        return _chart;\n      };\n      function buildArcs() {\n        return d3.svg.arc().outerRadius(_radius - _externalRadiusPadding).innerRadius(_innerRadius);\n      }\n      function isSelectedSlice(d) {\n        return _chart.hasFilter(_chart.cappedKeyAccessor(d.data));\n      }\n      _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n      };\n\n      /**\n       * Get or set the minimal slice angle for label rendering. Any slice with a smaller angle will not\n       * display a slice label.\n       * @method minAngleForLabel\n       * @memberof dc.pieChart\n       * @instance\n       * @param {Number} [minAngleForLabel=0.5]\n       * @returns {Number|dc.pieChart}\n       */\n      _chart.minAngleForLabel = function (minAngleForLabel) {\n        if (!arguments.length) {\n          return _minAngleForLabel;\n        }\n        _minAngleForLabel = minAngleForLabel;\n        return _chart;\n      };\n      function pieLayout() {\n        return d3.layout.pie().sort(null).value(_chart.cappedValueAccessor);\n      }\n      function sliceTooSmall(d) {\n        var angle = d.endAngle - d.startAngle;\n        return isNaN(angle) || angle < _minAngleForLabel;\n      }\n      function sliceHasNoData(d) {\n        return _chart.cappedValueAccessor(d) === 0;\n      }\n      function tweenPie(b) {\n        b.innerRadius = _innerRadius;\n        var current = this._current;\n        if (isOffCanvas(current)) {\n          current = {\n            startAngle: 0,\n            endAngle: 0\n          };\n        } else {\n          // only interpolate startAngle & endAngle, not the whole data object\n          current = {\n            startAngle: current.startAngle,\n            endAngle: current.endAngle\n          };\n        }\n        var i = d3.interpolate(current, b);\n        this._current = i(0);\n        return function (t) {\n          return safeArc(i(t), 0, buildArcs());\n        };\n      }\n      function isOffCanvas(current) {\n        return !current || isNaN(current.startAngle) || isNaN(current.endAngle);\n      }\n      function fill(d, i) {\n        return _chart.getColor(d.data, i);\n      }\n      function onClick(d, i) {\n        if (_g.attr('class') !== _emptyCssClass) {\n          _chart.onClick(d.data, i);\n        }\n      }\n      function safeArc(d, i, arc) {\n        var path = arc(d, i);\n        if (path.indexOf('NaN') >= 0) {\n          path = 'M0,0';\n        }\n        return path;\n      }\n\n      /**\n       * Title to use for the only slice when there is no data.\n       * @method emptyTitle\n       * @memberof dc.pieChart\n       * @instance\n       * @param {String} [title]\n       * @returns {String|dc.pieChart}\n       */\n      _chart.emptyTitle = function (title) {\n        if (arguments.length === 0) {\n          return _emptyTitle;\n        }\n        _emptyTitle = title;\n        return _chart;\n      };\n\n      /**\n       * Position slice labels offset from the outer edge of the chart.\n       *\n       * The argument specifies the extra radius to be added for slice labels.\n       * @method externalLabels\n       * @memberof dc.pieChart\n       * @instance\n       * @param {Number} [externalLabelRadius]\n       * @returns {Number|dc.pieChart}\n       */\n      _chart.externalLabels = function (externalLabelRadius) {\n        if (arguments.length === 0) {\n          return _externalLabelRadius;\n        } else if (externalLabelRadius) {\n          _externalLabelRadius = externalLabelRadius;\n        } else {\n          _externalLabelRadius = undefined;\n        }\n        return _chart;\n      };\n\n      /**\n       * Get or set whether to draw lines from pie slices to their labels.\n       *\n       * @method drawPaths\n       * @memberof dc.pieChart\n       * @instance\n       * @param {Boolean} [drawPaths]\n       * @returns {Boolean|dc.pieChart}\n       */\n      _chart.drawPaths = function (drawPaths) {\n        if (arguments.length === 0) {\n          return _drawPaths;\n        }\n        _drawPaths = drawPaths;\n        return _chart;\n      };\n      function labelPosition(d, arc) {\n        var centroid;\n        if (_externalLabelRadius) {\n          centroid = d3.svg.arc().outerRadius(_radius - _externalRadiusPadding + _externalLabelRadius).innerRadius(_radius - _externalRadiusPadding + _externalLabelRadius).centroid(d);\n        } else {\n          centroid = arc.centroid(d);\n        }\n        if (isNaN(centroid[0]) || isNaN(centroid[1])) {\n          return 'translate(0,0)';\n        } else {\n          return 'translate(' + centroid + ')';\n        }\n      }\n      _chart.legendables = function () {\n        return _chart.data().map(function (d, i) {\n          var legendable = {\n            name: d.key,\n            data: d.value,\n            others: d.others,\n            chart: _chart\n          };\n          legendable.color = _chart.getColor(d, i);\n          return legendable;\n        });\n      };\n      _chart.legendHighlight = function (d) {\n        highlightSliceFromLegendable(d, true);\n      };\n      _chart.legendReset = function (d) {\n        highlightSliceFromLegendable(d, false);\n      };\n      _chart.legendToggle = function (d) {\n        _chart.onClick({\n          key: d.name,\n          others: d.others\n        });\n      };\n      function highlightSliceFromLegendable(legendable, highlighted) {\n        _chart.selectAll('g.pie-slice').each(function (d) {\n          if (legendable.name === d.data.key) {\n            d3.select(this).classed('highlight', highlighted);\n          }\n        });\n      }\n      return _chart.anchor(parent, chartGroup);\n    };\n\n    /**\n     * Concrete bar chart/histogram implementation.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n     * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n     * @class barChart\n     * @memberof dc\n     * @mixes dc.stackMixin\n     * @mixes dc.coordinateGridMixin\n     * @example\n     * // create a bar chart under #chart-container1 element using the default global chart group\n     * var chart1 = dc.barChart('#chart-container1');\n     * // create a bar chart under #chart-container2 element using chart group A\n     * var chart2 = dc.barChart('#chart-container2', 'chartGroupA');\n     * // create a sub-chart under a composite parent chart\n     * var chart3 = dc.barChart(compositeChart);\n     * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector}\n     * specifying a dom block element such as a div; or a dom element or d3 selection.  If the bar\n     * chart is a sub-chart in a {@link dc.compositeChart Composite Chart} then pass in the parent\n     * composite chart instance instead.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.barChart}\n     */\n    dc.barChart = function (parent, chartGroup) {\n      var MIN_BAR_WIDTH = 1;\n      var DEFAULT_GAP_BETWEEN_BARS = 2;\n      var LABEL_PADDING = 3;\n      var _chart = dc.stackMixin(dc.coordinateGridMixin({}));\n      var _gap = DEFAULT_GAP_BETWEEN_BARS;\n      var _centerBar = false;\n      var _alwaysUseRounding = false;\n      var _barWidth;\n      dc.override(_chart, 'rescale', function () {\n        _chart._rescale();\n        _barWidth = undefined;\n        return _chart;\n      });\n      dc.override(_chart, 'render', function () {\n        if (_chart.round() && _centerBar && !_alwaysUseRounding) {\n          dc.logger.warn('By default, brush rounding is disabled if bars are centered. ' + 'See dc.js bar chart API documentation for details.');\n        }\n        return _chart._render();\n      });\n      _chart.label(function (d) {\n        return dc.utils.printSingleValue(d.y0 + d.y);\n      }, false);\n      _chart.plotData = function () {\n        var layers = _chart.chartBodyG().selectAll('g.stack').data(_chart.data());\n        calculateBarWidth();\n        layers.enter().append('g').attr('class', function (d, i) {\n          return 'stack ' + '_' + i;\n        });\n        var last = layers.size() - 1;\n        layers.each(function (d, i) {\n          var layer = d3.select(this);\n          renderBars(layer, i, d);\n          if (_chart.renderLabel() && last === i) {\n            renderLabels(layer, i, d);\n          }\n        });\n      };\n      function barHeight(d) {\n        return dc.utils.safeNumber(Math.abs(_chart.y()(d.y + d.y0) - _chart.y()(d.y0)));\n      }\n      function renderLabels(layer, layerIndex, d) {\n        var labels = layer.selectAll('text.barLabel').data(d.values, dc.pluck('x'));\n        labels.enter().append('text').attr('class', 'barLabel').attr('text-anchor', 'middle');\n        if (_chart.isOrdinal()) {\n          labels.on('click', _chart.onClick);\n          labels.attr('cursor', 'pointer');\n        }\n        dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay()).attr('x', function (d) {\n          var x = _chart.x()(d.x);\n          if (!_centerBar) {\n            x += _barWidth / 2;\n          }\n          return dc.utils.safeNumber(x);\n        }).attr('y', function (d) {\n          var y = _chart.y()(d.y + d.y0);\n          if (d.y < 0) {\n            y -= barHeight(d);\n          }\n          return dc.utils.safeNumber(y - LABEL_PADDING);\n        }).text(function (d) {\n          return _chart.label()(d);\n        });\n        dc.transition(labels.exit(), _chart.transitionDuration(), _chart.transitionDelay()).attr('height', 0).remove();\n      }\n      function renderBars(layer, layerIndex, d) {\n        var bars = layer.selectAll('rect.bar').data(d.values, dc.pluck('x'));\n        var enter = bars.enter().append('rect').attr('class', 'bar').attr('fill', dc.pluck('data', _chart.getColor)).attr('y', _chart.yAxisHeight()).attr('height', 0);\n        if (_chart.renderTitle()) {\n          enter.append('title').text(dc.pluck('data', _chart.title(d.name)));\n        }\n        if (_chart.isOrdinal()) {\n          bars.on('click', _chart.onClick);\n        }\n        dc.transition(bars, _chart.transitionDuration(), _chart.transitionDelay()).attr('x', function (d) {\n          var x = _chart.x()(d.x);\n          if (_centerBar) {\n            x -= _barWidth / 2;\n          }\n          if (_chart.isOrdinal() && _gap !== undefined) {\n            x += _gap / 2;\n          }\n          return dc.utils.safeNumber(x);\n        }).attr('y', function (d) {\n          var y = _chart.y()(d.y + d.y0);\n          if (d.y < 0) {\n            y -= barHeight(d);\n          }\n          return dc.utils.safeNumber(y);\n        }).attr('width', _barWidth).attr('height', function (d) {\n          return barHeight(d);\n        }).attr('fill', dc.pluck('data', _chart.getColor)).select('title').text(dc.pluck('data', _chart.title(d.name)));\n        dc.transition(bars.exit(), _chart.transitionDuration(), _chart.transitionDelay()).attr('x', function (d) {\n          return _chart.x()(d.x);\n        }).attr('width', _barWidth * 0.9).remove();\n      }\n      function calculateBarWidth() {\n        if (_barWidth === undefined) {\n          var numberOfBars = _chart.xUnitCount();\n\n          // please can't we always use rangeBands for bar charts?\n          if (_chart.isOrdinal() && _gap === undefined) {\n            _barWidth = Math.floor(_chart.x().rangeBand());\n          } else if (_gap) {\n            _barWidth = Math.floor((_chart.xAxisLength() - (numberOfBars - 1) * _gap) / numberOfBars);\n          } else {\n            _barWidth = Math.floor(_chart.xAxisLength() / (1 + _chart.barPadding()) / numberOfBars);\n          }\n          if (_barWidth === Infinity || isNaN(_barWidth) || _barWidth < MIN_BAR_WIDTH) {\n            _barWidth = MIN_BAR_WIDTH;\n          }\n        }\n      }\n      _chart.fadeDeselectedArea = function () {\n        var bars = _chart.chartBodyG().selectAll('rect.bar');\n        var extent = _chart.brush().extent();\n        if (_chart.isOrdinal()) {\n          if (_chart.hasFilter()) {\n            bars.classed(dc.constants.SELECTED_CLASS, function (d) {\n              return _chart.hasFilter(d.x);\n            });\n            bars.classed(dc.constants.DESELECTED_CLASS, function (d) {\n              return !_chart.hasFilter(d.x);\n            });\n          } else {\n            bars.classed(dc.constants.SELECTED_CLASS, false);\n            bars.classed(dc.constants.DESELECTED_CLASS, false);\n          }\n        } else {\n          if (!_chart.brushIsEmpty(extent)) {\n            var start = extent[0];\n            var end = extent[1];\n            bars.classed(dc.constants.DESELECTED_CLASS, function (d) {\n              return d.x < start || d.x >= end;\n            });\n          } else {\n            bars.classed(dc.constants.DESELECTED_CLASS, false);\n          }\n        }\n      };\n\n      /**\n       * Whether the bar chart will render each bar centered around the data position on the x-axis.\n       * @method centerBar\n       * @memberof dc.barChart\n       * @instance\n       * @param {Boolean} [centerBar=false]\n       * @returns {Boolean|dc.barChart}\n       */\n      _chart.centerBar = function (centerBar) {\n        if (!arguments.length) {\n          return _centerBar;\n        }\n        _centerBar = centerBar;\n        return _chart;\n      };\n      dc.override(_chart, 'onClick', function (d) {\n        _chart._onClick(d.data);\n      });\n\n      /**\n       * Get or set the spacing between bars as a fraction of bar size. Valid values are between 0-1.\n       * Setting this value will also remove any previously set {@link dc.barChart#gap gap}. See the\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3 docs}\n       * for a visual description of how the padding is applied.\n       * @method barPadding\n       * @memberof dc.barChart\n       * @instance\n       * @param {Number} [barPadding=0]\n       * @returns {Number|dc.barChart}\n       */\n      _chart.barPadding = function (barPadding) {\n        if (!arguments.length) {\n          return _chart._rangeBandPadding();\n        }\n        _chart._rangeBandPadding(barPadding);\n        _gap = undefined;\n        return _chart;\n      };\n      _chart._useOuterPadding = function () {\n        return _gap === undefined;\n      };\n\n      /**\n       * Get or set the outer padding on an ordinal bar chart. This setting has no effect on non-ordinal charts.\n       * Will pad the width by `padding * barWidth` on each side of the chart.\n       * @method outerPadding\n       * @memberof dc.barChart\n       * @instance\n       * @param {Number} [padding=0.5]\n       * @returns {Number|dc.barChart}\n       */\n      _chart.outerPadding = _chart._outerRangeBandPadding;\n\n      /**\n       * Manually set fixed gap (in px) between bars instead of relying on the default auto-generated\n       * gap.  By default the bar chart implementation will calculate and set the gap automatically\n       * based on the number of data points and the length of the x axis.\n       * @method gap\n       * @memberof dc.barChart\n       * @instance\n       * @param {Number} [gap=2]\n       * @returns {Number|dc.barChart}\n       */\n      _chart.gap = function (gap) {\n        if (!arguments.length) {\n          return _gap;\n        }\n        _gap = gap;\n        return _chart;\n      };\n      _chart.extendBrush = function () {\n        var extent = _chart.brush().extent();\n        if (_chart.round() && (!_centerBar || _alwaysUseRounding)) {\n          extent[0] = extent.map(_chart.round())[0];\n          extent[1] = extent.map(_chart.round())[1];\n          _chart.chartBodyG().select('.brush').call(_chart.brush().extent(extent));\n        }\n        return extent;\n      };\n\n      /**\n       * Set or get whether rounding is enabled when bars are centered. If false, using\n       * rounding with centered bars will result in a warning and rounding will be ignored.  This flag\n       * has no effect if bars are not {@link dc.barChart#centerBar centered}.\n       * When using standard d3.js rounding methods, the brush often doesn't align correctly with\n       * centered bars since the bars are offset.  The rounding function must add an offset to\n       * compensate, such as in the following example.\n       * @method alwaysUseRounding\n       * @memberof dc.barChart\n       * @instance\n       * @example\n       * chart.round(function(n) { return Math.floor(n) + 0.5; });\n       * @param {Boolean} [alwaysUseRounding=false]\n       * @returns {Boolean|dc.barChart}\n       */\n      _chart.alwaysUseRounding = function (alwaysUseRounding) {\n        if (!arguments.length) {\n          return _alwaysUseRounding;\n        }\n        _alwaysUseRounding = alwaysUseRounding;\n        return _chart;\n      };\n      function colorFilter(color, inv) {\n        return function () {\n          var item = d3.select(this);\n          var match = item.attr('fill') === color;\n          return inv ? !match : match;\n        };\n      }\n      _chart.legendHighlight = function (d) {\n        if (!_chart.isLegendableHidden(d)) {\n          _chart.g().selectAll('rect.bar').classed('highlight', colorFilter(d.color)).classed('fadeout', colorFilter(d.color, true));\n        }\n      };\n      _chart.legendReset = function () {\n        _chart.g().selectAll('rect.bar').classed('highlight', false).classed('fadeout', false);\n      };\n      dc.override(_chart, 'xAxisMax', function () {\n        var max = this._xAxisMax();\n        if ('resolution' in _chart.xUnits()) {\n          var res = _chart.xUnits().resolution;\n          max += res;\n        }\n        return max;\n      });\n      return _chart.anchor(parent, chartGroup);\n    };\n\n    /**\n     * Concrete line/area chart implementation.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n     * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n     * @class lineChart\n     * @memberof dc\n     * @mixes dc.stackMixin\n     * @mixes dc.coordinateGridMixin\n     * @example\n     * // create a line chart under #chart-container1 element using the default global chart group\n     * var chart1 = dc.lineChart('#chart-container1');\n     * // create a line chart under #chart-container2 element using chart group A\n     * var chart2 = dc.lineChart('#chart-container2', 'chartGroupA');\n     * // create a sub-chart under a composite parent chart\n     * var chart3 = dc.lineChart(compositeChart);\n     * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector}\n     * specifying a dom block element such as a div; or a dom element or d3 selection.  If the line\n     * chart is a sub-chart in a {@link dc.compositeChart Composite Chart} then pass in the parent\n     * composite chart instance instead.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.lineChart}\n     */\n    dc.lineChart = function (parent, chartGroup) {\n      var DEFAULT_DOT_RADIUS = 5;\n      var TOOLTIP_G_CLASS = 'dc-tooltip';\n      var DOT_CIRCLE_CLASS = 'dot';\n      var Y_AXIS_REF_LINE_CLASS = 'yRef';\n      var X_AXIS_REF_LINE_CLASS = 'xRef';\n      var DEFAULT_DOT_OPACITY = 1e-6;\n      var LABEL_PADDING = 3;\n      var _chart = dc.stackMixin(dc.coordinateGridMixin({}));\n      var _renderArea = false;\n      var _dotRadius = DEFAULT_DOT_RADIUS;\n      var _dataPointRadius = null;\n      var _dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n      var _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n      var _interpolate = 'linear';\n      var _tension = 0.7;\n      var _defined;\n      var _dashStyle;\n      var _xyTipsOn = true;\n      _chart.transitionDuration(500);\n      _chart.transitionDelay(0);\n      _chart._rangeBandPadding(1);\n      _chart.plotData = function () {\n        var chartBody = _chart.chartBodyG();\n        var layersList = chartBody.select('g.stack-list');\n        if (layersList.empty()) {\n          layersList = chartBody.append('g').attr('class', 'stack-list');\n        }\n        var layers = layersList.selectAll('g.stack').data(_chart.data());\n        var layersEnter = layers.enter().append('g').attr('class', function (d, i) {\n          return 'stack ' + '_' + i;\n        });\n        drawLine(layersEnter, layers);\n        drawArea(layersEnter, layers);\n        drawDots(chartBody, layers);\n        if (_chart.renderLabel()) {\n          drawLabels(layers);\n        }\n      };\n\n      /**\n       * Gets or sets the interpolator to use for lines drawn, by string name, allowing e.g. step\n       * functions, splines, and cubic interpolation.  This is passed to\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate} and\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate},\n       * where you can find a complete list of valid arguments.\n       * @method interpolate\n       * @memberof dc.lineChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate}\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate}\n       * @param  {String} [interpolate='linear']\n       * @returns {String|dc.lineChart}\n       */\n      _chart.interpolate = function (interpolate) {\n        if (!arguments.length) {\n          return _interpolate;\n        }\n        _interpolate = interpolate;\n        return _chart;\n      };\n\n      /**\n       * Gets or sets the tension to use for lines drawn, in the range 0 to 1.\n       * This parameter further customizes the interpolation behavior.  It is passed to\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_tension d3.svg.line.tension} and\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_tension d3.svg.area.tension}.\n       * @method tension\n       * @memberof dc.lineChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate}\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate}\n       * @param  {Number} [tension=0.7]\n       * @returns {Number|dc.lineChart}\n       */\n      _chart.tension = function (tension) {\n        if (!arguments.length) {\n          return _tension;\n        }\n        _tension = tension;\n        return _chart;\n      };\n\n      /**\n       * Gets or sets a function that will determine discontinuities in the line which should be\n       * skipped: the path will be broken into separate subpaths if some points are undefined.\n       * This function is passed to\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_defined d3.svg.line.defined}\n       *\n       * Note: crossfilter will sometimes coerce nulls to 0, so you may need to carefully write\n       * custom reduce functions to get this to work, depending on your data. See\n       * {@link https://github.com/dc-js/dc.js/issues/615#issuecomment-49089248 this GitHub comment}\n       * for more details and an example.\n       * @method defined\n       * @memberof dc.lineChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_defined d3.svg.line.defined}\n       * @param  {Function} [defined]\n       * @returns {Function|dc.lineChart}\n       */\n      _chart.defined = function (defined) {\n        if (!arguments.length) {\n          return _defined;\n        }\n        _defined = defined;\n        return _chart;\n      };\n\n      /**\n       * Set the line's d3 dashstyle. This value becomes the 'stroke-dasharray' of line. Defaults to empty\n       * array (solid line).\n       * @method dashStyle\n       * @memberof dc.lineChart\n       * @instance\n       * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray stroke-dasharray}\n       * @example\n       * // create a Dash Dot Dot Dot\n       * chart.dashStyle([3,1,1,1]);\n       * @param  {Array<Number>} [dashStyle=[]]\n       * @returns {Array<Number>|dc.lineChart}\n       */\n      _chart.dashStyle = function (dashStyle) {\n        if (!arguments.length) {\n          return _dashStyle;\n        }\n        _dashStyle = dashStyle;\n        return _chart;\n      };\n\n      /**\n       * Get or set render area flag. If the flag is set to true then the chart will render the area\n       * beneath each line and the line chart effectively becomes an area chart.\n       * @method renderArea\n       * @memberof dc.lineChart\n       * @instance\n       * @param  {Boolean} [renderArea=false]\n       * @returns {Boolean|dc.lineChart}\n       */\n      _chart.renderArea = function (renderArea) {\n        if (!arguments.length) {\n          return _renderArea;\n        }\n        _renderArea = renderArea;\n        return _chart;\n      };\n      function colors(d, i) {\n        return _chart.getColor.call(d, d.values, i);\n      }\n      function drawLine(layersEnter, layers) {\n        var line = d3.svg.line().x(function (d) {\n          return _chart.x()(d.x);\n        }).y(function (d) {\n          return _chart.y()(d.y + d.y0);\n        }).interpolate(_interpolate).tension(_tension);\n        if (_defined) {\n          line.defined(_defined);\n        }\n        var path = layersEnter.append('path').attr('class', 'line').attr('stroke', colors);\n        if (_dashStyle) {\n          path.attr('stroke-dasharray', _dashStyle);\n        }\n        dc.transition(layers.select('path.line'), _chart.transitionDuration(), _chart.transitionDelay())\n        //.ease('linear')\n        .attr('stroke', colors).attr('d', function (d) {\n          return safeD(line(d.values));\n        });\n      }\n      function drawArea(layersEnter, layers) {\n        if (_renderArea) {\n          var area = d3.svg.area().x(function (d) {\n            return _chart.x()(d.x);\n          }).y(function (d) {\n            return _chart.y()(d.y + d.y0);\n          }).y0(function (d) {\n            return _chart.y()(d.y0);\n          }).interpolate(_interpolate).tension(_tension);\n          if (_defined) {\n            area.defined(_defined);\n          }\n          layersEnter.append('path').attr('class', 'area').attr('fill', colors).attr('d', function (d) {\n            return safeD(area(d.values));\n          });\n          dc.transition(layers.select('path.area'), _chart.transitionDuration(), _chart.transitionDelay())\n          //.ease('linear')\n          .attr('fill', colors).attr('d', function (d) {\n            return safeD(area(d.values));\n          });\n        }\n      }\n      function safeD(d) {\n        return !d || d.indexOf('NaN') >= 0 ? 'M0,0' : d;\n      }\n      function drawDots(chartBody, layers) {\n        if (_chart.xyTipsOn() === 'always' || !_chart.brushOn() && _chart.xyTipsOn()) {\n          var tooltipListClass = TOOLTIP_G_CLASS + '-list';\n          var tooltips = chartBody.select('g.' + tooltipListClass);\n          if (tooltips.empty()) {\n            tooltips = chartBody.append('g').attr('class', tooltipListClass);\n          }\n          layers.each(function (d, layerIndex) {\n            var points = d.values;\n            if (_defined) {\n              points = points.filter(_defined);\n            }\n            var g = tooltips.select('g.' + TOOLTIP_G_CLASS + '._' + layerIndex);\n            if (g.empty()) {\n              g = tooltips.append('g').attr('class', TOOLTIP_G_CLASS + ' _' + layerIndex);\n            }\n            createRefLines(g);\n            var dots = g.selectAll('circle.' + DOT_CIRCLE_CLASS).data(points, dc.pluck('x'));\n            dots.enter().append('circle').attr('class', DOT_CIRCLE_CLASS).attr('r', getDotRadius()).style('fill-opacity', _dataPointFillOpacity).style('stroke-opacity', _dataPointStrokeOpacity).attr('fill', _chart.getColor).attr('stroke', _chart.getColor).on('mousemove', function () {\n              var dot = d3.select(this);\n              showDot(dot);\n              showRefLines(dot, g);\n            }).on('mouseout', function () {\n              var dot = d3.select(this);\n              hideDot(dot);\n              hideRefLines(g);\n            });\n            dots.call(renderTitle, d);\n            dc.transition(dots, _chart.transitionDuration()).attr('cx', function (d) {\n              return dc.utils.safeNumber(_chart.x()(d.x));\n            }).attr('cy', function (d) {\n              return dc.utils.safeNumber(_chart.y()(d.y + d.y0));\n            }).attr('fill', _chart.getColor);\n            dots.exit().remove();\n          });\n        }\n      }\n      _chart.label(function (d) {\n        return dc.utils.printSingleValue(d.y0 + d.y);\n      }, false);\n      function drawLabels(layers) {\n        layers.each(function (d, layerIndex) {\n          var layer = d3.select(this);\n          var labels = layer.selectAll('text.lineLabel').data(d.values, dc.pluck('x'));\n          labels.enter().append('text').attr('class', 'lineLabel').attr('text-anchor', 'middle');\n          dc.transition(labels, _chart.transitionDuration()).attr('x', function (d) {\n            return dc.utils.safeNumber(_chart.x()(d.x));\n          }).attr('y', function (d) {\n            var y = _chart.y()(d.y + d.y0) - LABEL_PADDING;\n            return dc.utils.safeNumber(y);\n          }).text(function (d) {\n            return _chart.label()(d);\n          });\n          dc.transition(labels.exit(), _chart.transitionDuration()).attr('height', 0).remove();\n        });\n      }\n      function createRefLines(g) {\n        var yRefLine = g.select('path.' + Y_AXIS_REF_LINE_CLASS).empty() ? g.append('path').attr('class', Y_AXIS_REF_LINE_CLASS) : g.select('path.' + Y_AXIS_REF_LINE_CLASS);\n        yRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n        var xRefLine = g.select('path.' + X_AXIS_REF_LINE_CLASS).empty() ? g.append('path').attr('class', X_AXIS_REF_LINE_CLASS) : g.select('path.' + X_AXIS_REF_LINE_CLASS);\n        xRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n      }\n      function showDot(dot) {\n        dot.style('fill-opacity', 0.8);\n        dot.style('stroke-opacity', 0.8);\n        dot.attr('r', _dotRadius);\n        return dot;\n      }\n      function showRefLines(dot, g) {\n        var x = dot.attr('cx');\n        var y = dot.attr('cy');\n        var yAxisX = _chart._yAxisX() - _chart.margins().left;\n        var yAxisRefPathD = 'M' + yAxisX + ' ' + y + 'L' + x + ' ' + y;\n        var xAxisRefPathD = 'M' + x + ' ' + _chart.yAxisHeight() + 'L' + x + ' ' + y;\n        g.select('path.' + Y_AXIS_REF_LINE_CLASS).style('display', '').attr('d', yAxisRefPathD);\n        g.select('path.' + X_AXIS_REF_LINE_CLASS).style('display', '').attr('d', xAxisRefPathD);\n      }\n      function getDotRadius() {\n        return _dataPointRadius || _dotRadius;\n      }\n      function hideDot(dot) {\n        dot.style('fill-opacity', _dataPointFillOpacity).style('stroke-opacity', _dataPointStrokeOpacity).attr('r', getDotRadius());\n      }\n      function hideRefLines(g) {\n        g.select('path.' + Y_AXIS_REF_LINE_CLASS).style('display', 'none');\n        g.select('path.' + X_AXIS_REF_LINE_CLASS).style('display', 'none');\n      }\n      function renderTitle(dot, d) {\n        if (_chart.renderTitle()) {\n          dot.select('title').remove();\n          dot.append('title').text(dc.pluck('data', _chart.title(d.name)));\n        }\n      }\n\n      /**\n       * Turn on/off the mouseover behavior of an individual data point which renders a circle and x/y axis\n       * dashed lines back to each respective axis.  This is ignored if the chart\n       * {@link dc.coordinateGridMixin#brushOn brush} is on\n       * @method xyTipsOn\n       * @memberof dc.lineChart\n       * @instance\n       * @param  {Boolean} [xyTipsOn=false]\n       * @returns {Boolean|dc.lineChart}\n       */\n      _chart.xyTipsOn = function (xyTipsOn) {\n        if (!arguments.length) {\n          return _xyTipsOn;\n        }\n        _xyTipsOn = xyTipsOn;\n        return _chart;\n      };\n\n      /**\n       * Get or set the radius (in px) for dots displayed on the data points.\n       * @method dotRadius\n       * @memberof dc.lineChart\n       * @instance\n       * @param  {Number} [dotRadius=5]\n       * @returns {Number|dc.lineChart}\n       */\n      _chart.dotRadius = function (dotRadius) {\n        if (!arguments.length) {\n          return _dotRadius;\n        }\n        _dotRadius = dotRadius;\n        return _chart;\n      };\n\n      /**\n       * Always show individual dots for each datapoint.\n       *\n       * If `options` is falsy, it disables data point rendering. If no `options` are provided, the\n       * current `options` values are instead returned.\n       * @method renderDataPoints\n       * @memberof dc.lineChart\n       * @instance\n       * @example\n       * chart.renderDataPoints({radius: 2, fillOpacity: 0.8, strokeOpacity: 0.0})\n       * @param  {{fillOpacity: Number, strokeOpacity: Number, radius: Number}} [options={fillOpacity: 0.8, strokeOpacity: 0.0, radius: 2}]\n       * @returns {{fillOpacity: Number, strokeOpacity: Number, radius: Number}|dc.lineChart}\n       */\n      _chart.renderDataPoints = function (options) {\n        if (!arguments.length) {\n          return {\n            fillOpacity: _dataPointFillOpacity,\n            strokeOpacity: _dataPointStrokeOpacity,\n            radius: _dataPointRadius\n          };\n        } else if (!options) {\n          _dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n          _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n          _dataPointRadius = null;\n        } else {\n          _dataPointFillOpacity = options.fillOpacity || 0.8;\n          _dataPointStrokeOpacity = options.strokeOpacity || 0.0;\n          _dataPointRadius = options.radius || 2;\n        }\n        return _chart;\n      };\n      function colorFilter(color, dashstyle, inv) {\n        return function () {\n          var item = d3.select(this);\n          var match = item.attr('stroke') === color && item.attr('stroke-dasharray') === (dashstyle instanceof Array ? dashstyle.join(',') : null) || item.attr('fill') === color;\n          return inv ? !match : match;\n        };\n      }\n      _chart.legendHighlight = function (d) {\n        if (!_chart.isLegendableHidden(d)) {\n          _chart.g().selectAll('path.line, path.area').classed('highlight', colorFilter(d.color, d.dashstyle)).classed('fadeout', colorFilter(d.color, d.dashstyle, true));\n        }\n      };\n      _chart.legendReset = function () {\n        _chart.g().selectAll('path.line, path.area').classed('highlight', false).classed('fadeout', false);\n      };\n      dc.override(_chart, 'legendables', function () {\n        var legendables = _chart._legendables();\n        if (!_dashStyle) {\n          return legendables;\n        }\n        return legendables.map(function (l) {\n          l.dashstyle = _dashStyle;\n          return l;\n        });\n      });\n      return _chart.anchor(parent, chartGroup);\n    };\n\n    /**\n     * The data count widget is a simple widget designed to display the number of records selected by the\n     * current filters out of the total number of records in the data set. Once created the data count widget\n     * will automatically update the text content of child elements with the following classes:\n     *\n     * * `.total-count` - total number of records\n     * * `.filter-count` - number of records matched by the current filters\n     *\n     * Note: this widget works best for the specific case of showing the number of records out of a\n     * total. If you want a more general-purpose numeric display, please use the\n     * {@link dc.numberDisplay} widget instead.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n     * @class dataCount\n     * @memberof dc\n     * @mixes dc.baseMixin\n     * @example\n     * var ndx = crossfilter(data);\n     * var all = ndx.groupAll();\n     *\n     * dc.dataCount('.dc-data-count')\n     *     .dimension(ndx)\n     *     .group(all);\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.dataCount}\n     */\n    dc.dataCount = function (parent, chartGroup) {\n      var _formatNumber = d3.format(',d');\n      var _chart = dc.baseMixin({});\n      var _html = {\n        some: '',\n        all: ''\n      };\n\n      /**\n       * Gets or sets an optional object specifying HTML templates to use depending how many items are\n       * selected. The text `%total-count` will replaced with the total number of records, and the text\n       * `%filter-count` will be replaced with the number of selected records.\n       * - all: HTML template to use if all items are selected\n       * - some: HTML template to use if not all items are selected\n       * @method html\n       * @memberof dc.dataCount\n       * @instance\n       * @example\n       * counter.html({\n       *      some: '%filter-count out of %total-count records selected',\n       *      all: 'All records selected. Click on charts to apply filters'\n       * })\n       * @param {{some:String, all: String}} [options]\n       * @returns {{some:String, all: String}|dc.dataCount}\n       */\n      _chart.html = function (options) {\n        if (!arguments.length) {\n          return _html;\n        }\n        if (options.all) {\n          _html.all = options.all;\n        }\n        if (options.some) {\n          _html.some = options.some;\n        }\n        return _chart;\n      };\n\n      /**\n       * Gets or sets an optional function to format the filter count and total count.\n       * @method formatNumber\n       * @memberof dc.dataCount\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md d3.format}\n       * @example\n       * counter.formatNumber(d3.format('.2g'))\n       * @param {Function} [formatter=d3.format('.2g')]\n       * @returns {Function|dc.dataCount}\n       */\n      _chart.formatNumber = function (formatter) {\n        if (!arguments.length) {\n          return _formatNumber;\n        }\n        _formatNumber = formatter;\n        return _chart;\n      };\n      _chart._doRender = function () {\n        var tot = _chart.dimension().size(),\n          val = _chart.group().value();\n        var all = _formatNumber(tot);\n        var selected = _formatNumber(val);\n        if (tot === val && _html.all !== '') {\n          _chart.root().html(_html.all.replace('%total-count', all).replace('%filter-count', selected));\n        } else if (_html.some !== '') {\n          _chart.root().html(_html.some.replace('%total-count', all).replace('%filter-count', selected));\n        } else {\n          _chart.selectAll('.total-count').text(all);\n          _chart.selectAll('.filter-count').text(selected);\n        }\n        return _chart;\n      };\n      _chart._doRedraw = function () {\n        return _chart._doRender();\n      };\n      return _chart.anchor(parent, chartGroup);\n    };\n\n    /**\n     * The data table is a simple widget designed to list crossfilter focused data set (rows being\n     * filtered) in a good old tabular fashion.\n     *\n     * Note: Unlike other charts, the data table (and data grid chart) use the {@link dc.dataTable#group group} attribute as a\n     * keying function for {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#nest nesting} the data\n     * together in groups.  Do not pass in a crossfilter group as this will not work.\n     *\n     * Another interesting feature of the data table is that you can pass a crossfilter group to the `dimension`, as\n     * long as you specify the {@link dc.dataTable#order order} as `d3.descending`, since the data\n     * table will use `dimension.top()` to fetch the data in that case, and the method is equally\n     * supported on the crossfilter group as the crossfilter dimension.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n     * - {@link http://dc-js.github.io/dc.js/examples/table-on-aggregated-data.html dataTable on a crossfilter group}\n     * ({@link https://github.com/dc-js/dc.js/blob/develop/web/examples/table-on-aggregated-data.html source})\n     * @class dataTable\n     * @memberof dc\n     * @mixes dc.baseMixin\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.dataTable}\n     */\n    dc.dataTable = function (parent, chartGroup) {\n      var LABEL_CSS_CLASS = 'dc-table-label';\n      var ROW_CSS_CLASS = 'dc-table-row';\n      var COLUMN_CSS_CLASS = 'dc-table-column';\n      var GROUP_CSS_CLASS = 'dc-table-group';\n      var HEAD_CSS_CLASS = 'dc-table-head';\n      var _chart = dc.baseMixin({});\n      var _size = 25;\n      var _columns = [];\n      var _sortBy = function (d) {\n        return d;\n      };\n      var _order = d3.ascending;\n      var _beginSlice = 0;\n      var _endSlice;\n      var _showGroups = true;\n      _chart._doRender = function () {\n        _chart.selectAll('tbody').remove();\n        renderRows(renderGroups());\n        return _chart;\n      };\n      _chart._doColumnValueFormat = function (v, d) {\n        return typeof v === 'function' ? v(d) :\n        // v as function\n        typeof v === 'string' ? d[v] :\n        // v is field name string\n        v.format(d) // v is Object, use fn (element 2)\n        ;\n      };\n\n      _chart._doColumnHeaderFormat = function (d) {\n        // if 'function', convert to string representation\n        // show a string capitalized\n        // if an object then display its label string as-is.\n        return typeof d === 'function' ? _chart._doColumnHeaderFnToString(d) : typeof d === 'string' ? _chart._doColumnHeaderCapitalize(d) : String(d.label);\n      };\n      _chart._doColumnHeaderCapitalize = function (s) {\n        // capitalize\n        return s.charAt(0).toUpperCase() + s.slice(1);\n      };\n      _chart._doColumnHeaderFnToString = function (f) {\n        // columnString(f) {\n        var s = String(f);\n        var i1 = s.indexOf('return ');\n        if (i1 >= 0) {\n          var i2 = s.lastIndexOf(';');\n          if (i2 >= 0) {\n            s = s.substring(i1 + 7, i2);\n            var i3 = s.indexOf('numberFormat');\n            if (i3 >= 0) {\n              s = s.replace('numberFormat', '');\n            }\n          }\n        }\n        return s;\n      };\n      function renderGroups() {\n        // The 'original' example uses all 'functions'.\n        // If all 'functions' are used, then don't remove/add a header, and leave\n        // the html alone. This preserves the functionality of earlier releases.\n        // A 2nd option is a string representing a field in the data.\n        // A third option is to supply an Object such as an array of 'information', and\n        // supply your own _doColumnHeaderFormat and _doColumnValueFormat functions to\n        // create what you need.\n        var bAllFunctions = true;\n        _columns.forEach(function (f) {\n          bAllFunctions = bAllFunctions & typeof f === 'function';\n        });\n        if (!bAllFunctions) {\n          // ensure one thead\n          var thead = _chart.selectAll('thead').data([0]);\n          thead.enter().append('thead');\n          thead.exit().remove();\n\n          // with one tr\n          var headrow = thead.selectAll('tr').data([0]);\n          headrow.enter().append('tr');\n          headrow.exit().remove();\n\n          // with a th for each column\n          var headcols = headrow.selectAll('th').data(_columns);\n          headcols.enter().append('th');\n          headcols.exit().remove();\n          headcols.attr('class', HEAD_CSS_CLASS).html(function (d) {\n            return _chart._doColumnHeaderFormat(d);\n          });\n        }\n        var groups = _chart.root().selectAll('tbody').data(nestEntries(), function (d) {\n          return _chart.keyAccessor()(d);\n        });\n        var rowGroup = groups.enter().append('tbody');\n        if (_showGroups === true) {\n          rowGroup.append('tr').attr('class', GROUP_CSS_CLASS).append('td').attr('class', LABEL_CSS_CLASS).attr('colspan', _columns.length).html(function (d) {\n            return _chart.keyAccessor()(d);\n          });\n        }\n        groups.exit().remove();\n        return rowGroup;\n      }\n      function nestEntries() {\n        var entries;\n        if (_order === d3.ascending) {\n          entries = _chart.dimension().bottom(_size);\n        } else {\n          entries = _chart.dimension().top(_size);\n        }\n        return d3.nest().key(_chart.group()).sortKeys(_order).entries(entries.sort(function (a, b) {\n          return _order(_sortBy(a), _sortBy(b));\n        }).slice(_beginSlice, _endSlice));\n      }\n      function renderRows(groups) {\n        var rows = groups.order().selectAll('tr.' + ROW_CSS_CLASS).data(function (d) {\n          return d.values;\n        });\n        var rowEnter = rows.enter().append('tr').attr('class', ROW_CSS_CLASS);\n        _columns.forEach(function (v, i) {\n          rowEnter.append('td').attr('class', COLUMN_CSS_CLASS + ' _' + i).html(function (d) {\n            return _chart._doColumnValueFormat(v, d);\n          });\n        });\n        rows.exit().remove();\n        return rows;\n      }\n      _chart._doRedraw = function () {\n        return _chart._doRender();\n      };\n\n      /**\n       * Get or set the group function for the data table. The group function takes a data row and\n       * returns the key to specify to {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_nest d3.nest}\n       * to split rows into groups.\n       *\n       * Do not pass in a crossfilter group as this will not work.\n       * @method group\n       * @memberof dc.dataTable\n       * @instance\n       * @example\n       * // group rows by the value of their field\n       * chart\n       *     .group(function(d) { return d.field; })\n       * @param {Function} groupFunction Function taking a row of data and returning the nest key.\n       * @returns {Function|dc.dataTable}\n       */\n\n      /**\n       * Get or set the table size which determines the number of rows displayed by the widget.\n       * @method size\n       * @memberof dc.dataTable\n       * @instance\n       * @param {Number} [size=25]\n       * @returns {Number|dc.dataTable}\n       */\n      _chart.size = function (size) {\n        if (!arguments.length) {\n          return _size;\n        }\n        _size = size;\n        return _chart;\n      };\n\n      /**\n       * Get or set the index of the beginning slice which determines which entries get displayed\n       * by the widget. Useful when implementing pagination.\n       *\n       * Note: the sortBy function will determine how the rows are ordered for pagination purposes.\n        * See the {@link http://dc-js.github.io/dc.js/examples/table-pagination.html table pagination example}\n       * to see how to implement the pagination user interface using `beginSlice` and `endSlice`.\n       * @method beginSlice\n       * @memberof dc.dataTable\n       * @instance\n       * @param {Number} [beginSlice=0]\n       * @returns {Number|dc.dataTable}\n       */\n      _chart.beginSlice = function (beginSlice) {\n        if (!arguments.length) {\n          return _beginSlice;\n        }\n        _beginSlice = beginSlice;\n        return _chart;\n      };\n\n      /**\n       * Get or set the index of the end slice which determines which entries get displayed by the\n       * widget. Useful when implementing pagination. See {@link dc.dataTable#beginSlice `beginSlice`} for more information.\n       * @method endSlice\n       * @memberof dc.dataTable\n       * @instance\n       * @param {Number|undefined} [endSlice=undefined]\n       * @returns {Number|dc.dataTable}\n       */\n      _chart.endSlice = function (endSlice) {\n        if (!arguments.length) {\n          return _endSlice;\n        }\n        _endSlice = endSlice;\n        return _chart;\n      };\n\n      /**\n       * Get or set column functions. The data table widget supports several methods of specifying the\n       * columns to display.\n       *\n       * The original method uses an array of functions to generate dynamic columns. Column functions\n       * are simple javascript functions with only one input argument `d` which represents a row in\n       * the data set. The return value of these functions will be used to generate the content for\n       * each cell. However, this method requires the HTML for the table to have a fixed set of column\n       * headers.\n       *\n       * <pre><code>chart.columns([\n       *     function(d) { return d.date; },\n       *     function(d) { return d.open; },\n       *     function(d) { return d.close; },\n       *     function(d) { return numberFormat(d.close - d.open); },\n       *     function(d) { return d.volume; }\n       * ]);\n       * </code></pre>\n       *\n       * In the second method, you can list the columns to read from the data without specifying it as\n       * a function, except where necessary (ie, computed columns).  Note the data element name is\n       * capitalized when displayed in the table header. You can also mix in functions as necessary,\n       * using the third `{label, format}` form, as shown below.\n       *\n       * <pre><code>chart.columns([\n       *     \"date\",    // d[\"date\"], ie, a field accessor; capitalized automatically\n       *     \"open\",    // ...\n       *     \"close\",   // ...\n       *     {\n       *         label: \"Change\",\n       *         format: function (d) {\n       *             return numberFormat(d.close - d.open);\n       *         }\n       *     },\n       *     \"volume\"   // d[\"volume\"], ie, a field accessor; capitalized automatically\n       * ]);\n       * </code></pre>\n       *\n       * In the third example, we specify all fields using the `{label, format}` method:\n       * <pre><code>chart.columns([\n       *     {\n       *         label: \"Date\",\n       *         format: function (d) { return d.date; }\n       *     },\n       *     {\n       *         label: \"Open\",\n       *         format: function (d) { return numberFormat(d.open); }\n       *     },\n       *     {\n       *         label: \"Close\",\n       *         format: function (d) { return numberFormat(d.close); }\n       *     },\n       *     {\n       *         label: \"Change\",\n       *         format: function (d) { return numberFormat(d.close - d.open); }\n       *     },\n       *     {\n       *         label: \"Volume\",\n       *         format: function (d) { return d.volume; }\n       *     }\n       * ]);\n       * </code></pre>\n       *\n       * You may wish to override the dataTable functions `_doColumnHeaderCapitalize` and\n       * `_doColumnHeaderFnToString`, which are used internally to translate the column information or\n       * function into a displayed header. The first one is used on the \"string\" column specifier; the\n       * second is used to transform a stringified function into something displayable. For the Stock\n       * example, the function for Change becomes the table header **d.close - d.open**.\n       *\n       * Finally, you can even specify a completely different form of column definition. To do this,\n       * override `_chart._doColumnHeaderFormat` and `_chart._doColumnValueFormat` Be aware that\n       * fields without numberFormat specification will be displayed just as they are stored in the\n       * data, unformatted.\n       * @method columns\n       * @memberof dc.dataTable\n       * @instance\n       * @param {Array<Function>} [columns=[]]\n       * @returns {Array<Function>}|dc.dataTable}\n       */\n      _chart.columns = function (columns) {\n        if (!arguments.length) {\n          return _columns;\n        }\n        _columns = columns;\n        return _chart;\n      };\n\n      /**\n       * Get or set sort-by function. This function works as a value accessor at row level and returns a\n       * particular field to be sorted by.\n       * @method sortBy\n       * @memberof dc.dataTable\n       * @instance\n       * @example\n       * chart.sortBy(function(d) {\n       *     return d.date;\n       * });\n       * @param {Function} [sortBy=identity function]\n       * @returns {Function|dc.dataTable}\n       */\n      _chart.sortBy = function (sortBy) {\n        if (!arguments.length) {\n          return _sortBy;\n        }\n        _sortBy = sortBy;\n        return _chart;\n      };\n\n      /**\n       * Get or set sort order. If the order is `d3.ascending`, the data table will use\n       * `dimension().bottom()` to fetch the data; otherwise it will use `dimension().top()`\n       * @method order\n       * @memberof dc.dataTable\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n       * @example\n       * chart.order(d3.descending);\n       * @param {Function} [order=d3.ascending]\n       * @returns {Function|dc.dataTable}\n       */\n      _chart.order = function (order) {\n        if (!arguments.length) {\n          return _order;\n        }\n        _order = order;\n        return _chart;\n      };\n\n      /**\n       * Get or set if group rows will be shown. The dataTable {@link dc.dataTable#group group}\n       * function must be specified even if groups are not shown.\n       * @method showGroups\n       * @memberof dc.dataTable\n       * @instance\n       * @example\n       * chart\n       *     .group([value], [name])\n       *     .showGroups(true|false);\n       * @param {Boolean} [showGroups=true]\n       * @returns {Boolean|dc.dataTable}\n       */\n      _chart.showGroups = function (showGroups) {\n        if (!arguments.length) {\n          return _showGroups;\n        }\n        _showGroups = showGroups;\n        return _chart;\n      };\n      return _chart.anchor(parent, chartGroup);\n    };\n\n    /**\n     * Data grid is a simple widget designed to list the filtered records, providing\n     * a simple way to define how the items are displayed.\n     *\n     * Note: Unlike other charts, the data grid chart (and data table) use the {@link dc.dataGrid#group group} attribute as a keying function\n     * for {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#nest nesting} the data together in groups.\n     * Do not pass in a crossfilter group as this will not work.\n     *\n     * Examples:\n     * - {@link http://europarl.me/dc.js/web/ep/index.html List of members of the european parliament}\n     * @class dataGrid\n     * @memberof dc\n     * @mixes dc.baseMixin\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.dataGrid}\n     */\n    dc.dataGrid = function (parent, chartGroup) {\n      var LABEL_CSS_CLASS = 'dc-grid-label';\n      var ITEM_CSS_CLASS = 'dc-grid-item';\n      var GROUP_CSS_CLASS = 'dc-grid-group';\n      var GRID_CSS_CLASS = 'dc-grid-top';\n      var _chart = dc.baseMixin({});\n      var _size = 999; // shouldn't be needed, but you might\n      var _html = function (d) {\n        return 'you need to provide an html() handling param:  ' + JSON.stringify(d);\n      };\n      var _sortBy = function (d) {\n        return d;\n      };\n      var _order = d3.ascending;\n      var _beginSlice = 0,\n        _endSlice;\n      var _htmlGroup = function (d) {\n        return '<div class=\\'' + GROUP_CSS_CLASS + '\\'><h1 class=\\'' + LABEL_CSS_CLASS + '\\'>' + _chart.keyAccessor()(d) + '</h1></div>';\n      };\n      _chart._doRender = function () {\n        _chart.selectAll('div.' + GRID_CSS_CLASS).remove();\n        renderItems(renderGroups());\n        return _chart;\n      };\n      function renderGroups() {\n        var groups = _chart.root().selectAll('div.' + GRID_CSS_CLASS).data(nestEntries(), function (d) {\n          return _chart.keyAccessor()(d);\n        });\n        var itemGroup = groups.enter().append('div').attr('class', GRID_CSS_CLASS);\n        if (_htmlGroup) {\n          itemGroup.html(function (d) {\n            return _htmlGroup(d);\n          });\n        }\n        groups.exit().remove();\n        return itemGroup;\n      }\n      function nestEntries() {\n        var entries = _chart.dimension().top(_size);\n        return d3.nest().key(_chart.group()).sortKeys(_order).entries(entries.sort(function (a, b) {\n          return _order(_sortBy(a), _sortBy(b));\n        }).slice(_beginSlice, _endSlice));\n      }\n      function renderItems(groups) {\n        var items = groups.order().selectAll('div.' + ITEM_CSS_CLASS).data(function (d) {\n          return d.values;\n        });\n        items.enter().append('div').attr('class', ITEM_CSS_CLASS).html(function (d) {\n          return _html(d);\n        });\n        items.exit().remove();\n        return items;\n      }\n      _chart._doRedraw = function () {\n        return _chart._doRender();\n      };\n\n      /**\n       * Get or set the group function for the data grid. The group function takes a data row and\n       * returns the key to specify to {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_nest d3.nest}\n       * to split rows into groups.\n       *\n       * Do not pass in a crossfilter group as this will not work.\n       * @method group\n       * @memberof dc.dataGrid\n       * @instance\n       * @example\n       * // group rows by the value of their field\n       * chart\n       *     .group(function(d) { return d.field; })\n       * @param {Function} groupFunction Function taking a row of data and returning the nest key.\n       * @returns {Function|dc.dataTable}\n       */\n\n      /**\n       * Get or set the index of the beginning slice which determines which entries get displayed by the widget.\n       * Useful when implementing pagination.\n       * @method beginSlice\n       * @memberof dc.dataGrid\n       * @instance\n       * @param {Number} [beginSlice=0]\n       * @returns {Number|dc.dataGrid}\n       */\n      _chart.beginSlice = function (beginSlice) {\n        if (!arguments.length) {\n          return _beginSlice;\n        }\n        _beginSlice = beginSlice;\n        return _chart;\n      };\n\n      /**\n       * Get or set the index of the end slice which determines which entries get displayed by the widget.\n       * Useful when implementing pagination.\n       * @method endSlice\n       * @memberof dc.dataGrid\n       * @instance\n       * @param {Number} [endSlice]\n       * @returns {Number|dc.dataGrid}\n       */\n      _chart.endSlice = function (endSlice) {\n        if (!arguments.length) {\n          return _endSlice;\n        }\n        _endSlice = endSlice;\n        return _chart;\n      };\n\n      /**\n       * Get or set the grid size which determines the number of items displayed by the widget.\n       * @method size\n       * @memberof dc.dataGrid\n       * @instance\n       * @param {Number} [size=999]\n       * @returns {Number|dc.dataGrid}\n       */\n      _chart.size = function (size) {\n        if (!arguments.length) {\n          return _size;\n        }\n        _size = size;\n        return _chart;\n      };\n\n      /**\n       * Get or set the function that formats an item. The data grid widget uses a\n       * function to generate dynamic html. Use your favourite templating engine or\n       * generate the string directly.\n       * @method html\n       * @memberof dc.dataGrid\n       * @instance\n       * @example\n       * chart.html(function (d) { return '<div class='item '+data.exampleCategory+''>'+data.exampleString+'</div>';});\n       * @param {Function} [html]\n       * @returns {Function|dc.dataGrid}\n       */\n      _chart.html = function (html) {\n        if (!arguments.length) {\n          return _html;\n        }\n        _html = html;\n        return _chart;\n      };\n\n      /**\n       * Get or set the function that formats a group label.\n       * @method htmlGroup\n       * @memberof dc.dataGrid\n       * @instance\n       * @example\n       * chart.htmlGroup (function (d) { return '<h2>'.d.key . 'with ' . d.values.length .' items</h2>'});\n       * @param {Function} [htmlGroup]\n       * @returns {Function|dc.dataGrid}\n       */\n      _chart.htmlGroup = function (htmlGroup) {\n        if (!arguments.length) {\n          return _htmlGroup;\n        }\n        _htmlGroup = htmlGroup;\n        return _chart;\n      };\n\n      /**\n       * Get or set sort-by function. This function works as a value accessor at the item\n       * level and returns a particular field to be sorted.\n       * @method sortBy\n       * @memberof dc.dataGrid\n       * @instance\n       * @example\n       * chart.sortBy(function(d) {\n       *     return d.date;\n       * });\n       * @param {Function} [sortByFunction]\n       * @returns {Function|dc.dataGrid}\n       */\n      _chart.sortBy = function (sortByFunction) {\n        if (!arguments.length) {\n          return _sortBy;\n        }\n        _sortBy = sortByFunction;\n        return _chart;\n      };\n\n      /**\n       * Get or set sort the order function.\n       * @method order\n       * @memberof dc.dataGrid\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n       * @example\n       * chart.order(d3.descending);\n       * @param {Function} [order=d3.ascending]\n       * @returns {Function|dc.dataGrid}\n       */\n      _chart.order = function (order) {\n        if (!arguments.length) {\n          return _order;\n        }\n        _order = order;\n        return _chart;\n      };\n      return _chart.anchor(parent, chartGroup);\n    };\n\n    /**\n     * A concrete implementation of a general purpose bubble chart that allows data visualization using the\n     * following dimensions:\n     * - x axis position\n     * - y axis position\n     * - bubble radius\n     * - color\n     *\n     * Examples:\n     * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n     * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n     * @class bubbleChart\n     * @memberof dc\n     * @mixes dc.bubbleMixin\n     * @mixes dc.coordinateGridMixin\n     * @example\n     * // create a bubble chart under #chart-container1 element using the default global chart group\n     * var bubbleChart1 = dc.bubbleChart('#chart-container1');\n     * // create a bubble chart under #chart-container2 element using chart group A\n     * var bubbleChart2 = dc.bubbleChart('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.bubbleChart}\n     */\n    dc.bubbleChart = function (parent, chartGroup) {\n      var _chart = dc.bubbleMixin(dc.coordinateGridMixin({}));\n      _chart.transitionDuration(750);\n      _chart.transitionDelay(0);\n      var bubbleLocator = function (d) {\n        return 'translate(' + bubbleX(d) + ',' + bubbleY(d) + ')';\n      };\n      _chart.plotData = function () {\n        _chart.calculateRadiusDomain();\n        _chart.r().range([_chart.MIN_RADIUS, _chart.xAxisLength() * _chart.maxBubbleRelativeSize()]);\n        var data = _chart.data();\n        var bubbleG = _chart.chartBodyG().selectAll('g.' + _chart.BUBBLE_NODE_CLASS).data(data, function (d) {\n          return d.key;\n        });\n        if (_chart.sortBubbleSize()) {\n          // update dom order based on sort\n          bubbleG.order();\n        }\n        renderNodes(bubbleG);\n        updateNodes(bubbleG);\n        removeNodes(bubbleG);\n        _chart.fadeDeselectedArea();\n      };\n      function renderNodes(bubbleG) {\n        var bubbleGEnter = bubbleG.enter().append('g');\n        bubbleGEnter.attr('class', _chart.BUBBLE_NODE_CLASS).attr('transform', bubbleLocator).append('circle').attr('class', function (d, i) {\n          return _chart.BUBBLE_CLASS + ' _' + i;\n        }).on('click', _chart.onClick).attr('fill', _chart.getColor).attr('r', 0);\n        dc.transition(bubbleG, _chart.transitionDuration(), _chart.transitionDelay()).select('circle.' + _chart.BUBBLE_CLASS).attr('r', function (d) {\n          return _chart.bubbleR(d);\n        }).attr('opacity', function (d) {\n          return _chart.bubbleR(d) > 0 ? 1 : 0;\n        });\n        _chart._doRenderLabel(bubbleGEnter);\n        _chart._doRenderTitles(bubbleGEnter);\n      }\n      function updateNodes(bubbleG) {\n        dc.transition(bubbleG, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', bubbleLocator).select('circle.' + _chart.BUBBLE_CLASS).attr('fill', _chart.getColor).attr('r', function (d) {\n          return _chart.bubbleR(d);\n        }).attr('opacity', function (d) {\n          return _chart.bubbleR(d) > 0 ? 1 : 0;\n        });\n        _chart.doUpdateLabels(bubbleG);\n        _chart.doUpdateTitles(bubbleG);\n      }\n      function removeNodes(bubbleG) {\n        bubbleG.exit().remove();\n      }\n      function bubbleX(d) {\n        var x = _chart.x()(_chart.keyAccessor()(d));\n        if (isNaN(x)) {\n          x = 0;\n        }\n        return x;\n      }\n      function bubbleY(d) {\n        var y = _chart.y()(_chart.valueAccessor()(d));\n        if (isNaN(y)) {\n          y = 0;\n        }\n        return y;\n      }\n      _chart.renderBrush = function () {\n        // override default x axis brush from parent chart\n      };\n      _chart.redrawBrush = function () {\n        // override default x axis brush from parent chart\n        _chart.fadeDeselectedArea();\n      };\n      return _chart.anchor(parent, chartGroup);\n    };\n\n    /**\n     * Composite charts are a special kind of chart that render multiple charts on the same Coordinate\n     * Grid. You can overlay (compose) different bar/line/area charts in a single composite chart to\n     * achieve some quite flexible charting effects.\n     * @class compositeChart\n     * @memberof dc\n     * @mixes dc.coordinateGridMixin\n     * @example\n     * // create a composite chart under #chart-container1 element using the default global chart group\n     * var compositeChart1 = dc.compositeChart('#chart-container1');\n     * // create a composite chart under #chart-container2 element using chart group A\n     * var compositeChart2 = dc.compositeChart('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.compositeChart}\n     */\n    dc.compositeChart = function (parent, chartGroup) {\n      var SUB_CHART_CLASS = 'sub';\n      var DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING = 12;\n      var _chart = dc.coordinateGridMixin({});\n      var _children = [];\n      var _childOptions = {};\n      var _shareColors = false,\n        _shareTitle = true,\n        _alignYAxes = false;\n      var _rightYAxis = d3.svg.axis(),\n        _rightYAxisLabel = 0,\n        _rightYAxisLabelPadding = DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING,\n        _rightY,\n        _rightAxisGridLines = false;\n      _chart._mandatoryAttributes([]);\n      _chart.transitionDuration(500);\n      _chart.transitionDelay(0);\n      dc.override(_chart, '_generateG', function () {\n        var g = this.__generateG();\n        for (var i = 0; i < _children.length; ++i) {\n          var child = _children[i];\n          generateChildG(child, i);\n          if (!child.dimension()) {\n            child.dimension(_chart.dimension());\n          }\n          if (!child.group()) {\n            child.group(_chart.group());\n          }\n          child.chartGroup(_chart.chartGroup());\n          child.svg(_chart.svg());\n          child.xUnits(_chart.xUnits());\n          child.transitionDuration(_chart.transitionDuration(), _chart.transitionDelay());\n          child.brushOn(_chart.brushOn());\n          child.renderTitle(_chart.renderTitle());\n          child.elasticX(_chart.elasticX());\n        }\n        return g;\n      });\n      _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n        var brushIsEmpty = _chart.brushIsEmpty(extent);\n        for (var i = 0; i < _children.length; ++i) {\n          _children[i].replaceFilter(brushIsEmpty ? null : extent);\n        }\n      };\n      _chart._prepareYAxis = function () {\n        var left = leftYAxisChildren().length !== 0;\n        var right = rightYAxisChildren().length !== 0;\n        var ranges = calculateYAxisRanges(left, right);\n        if (left) {\n          prepareLeftYAxis(ranges);\n        }\n        if (right) {\n          prepareRightYAxis(ranges);\n        }\n        if (leftYAxisChildren().length > 0 && !_rightAxisGridLines) {\n          _chart._renderHorizontalGridLinesForAxis(_chart.g(), _chart.y(), _chart.yAxis());\n        } else if (rightYAxisChildren().length > 0) {\n          _chart._renderHorizontalGridLinesForAxis(_chart.g(), _rightY, _rightYAxis);\n        }\n      };\n      _chart.renderYAxis = function () {\n        if (leftYAxisChildren().length !== 0) {\n          _chart.renderYAxisAt('y', _chart.yAxis(), _chart.margins().left);\n          _chart.renderYAxisLabel('y', _chart.yAxisLabel(), -90);\n        }\n        if (rightYAxisChildren().length !== 0) {\n          _chart.renderYAxisAt('yr', _chart.rightYAxis(), _chart.width() - _chart.margins().right);\n          _chart.renderYAxisLabel('yr', _chart.rightYAxisLabel(), 90, _chart.width() - _rightYAxisLabelPadding);\n        }\n      };\n      function calculateYAxisRanges(left, right) {\n        var lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax;\n        var ranges;\n        if (left) {\n          lyAxisMin = yAxisMin();\n          lyAxisMax = yAxisMax();\n        }\n        if (right) {\n          ryAxisMin = rightYAxisMin();\n          ryAxisMax = rightYAxisMax();\n        }\n        if (_chart.alignYAxes() && left && right) {\n          ranges = alignYAxisRanges(lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax);\n        }\n        return ranges || {\n          lyAxisMin: lyAxisMin,\n          lyAxisMax: lyAxisMax,\n          ryAxisMin: ryAxisMin,\n          ryAxisMax: ryAxisMax\n        };\n      }\n      function alignYAxisRanges(lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax) {\n        // since the two series will share a zero, each Y is just a multiple\n        // of the other. and the ratio should be the ratio of the ranges of the\n        // input data, so that they come out the same height. so we just min/max\n\n        // note: both ranges already include zero due to the stack mixin (#667)\n        // if #667 changes, we can reconsider whether we want data height or\n        // height from zero to be equal. and it will be possible for the axes\n        // to be aligned but not visible.\n        var extentRatio = (ryAxisMax - ryAxisMin) / (lyAxisMax - lyAxisMin);\n        return {\n          lyAxisMin: Math.min(lyAxisMin, ryAxisMin / extentRatio),\n          lyAxisMax: Math.max(lyAxisMax, ryAxisMax / extentRatio),\n          ryAxisMin: Math.min(ryAxisMin, lyAxisMin * extentRatio),\n          ryAxisMax: Math.max(ryAxisMax, lyAxisMax * extentRatio)\n        };\n      }\n      function prepareRightYAxis(ranges) {\n        var needDomain = _chart.rightY() === undefined || _chart.elasticY(),\n          needRange = needDomain || _chart.resizing();\n        if (_chart.rightY() === undefined) {\n          _chart.rightY(d3.scale.linear());\n        }\n        if (needDomain) {\n          _chart.rightY().domain([ranges.ryAxisMin, ranges.ryAxisMax]);\n        }\n        if (needRange) {\n          _chart.rightY().rangeRound([_chart.yAxisHeight(), 0]);\n        }\n        _chart.rightY().range([_chart.yAxisHeight(), 0]);\n        _chart.rightYAxis(_chart.rightYAxis().scale(_chart.rightY()));\n        _chart.rightYAxis().orient('right');\n      }\n      function prepareLeftYAxis(ranges) {\n        var needDomain = _chart.y() === undefined || _chart.elasticY(),\n          needRange = needDomain || _chart.resizing();\n        if (_chart.y() === undefined) {\n          _chart.y(d3.scale.linear());\n        }\n        if (needDomain) {\n          _chart.y().domain([ranges.lyAxisMin, ranges.lyAxisMax]);\n        }\n        if (needRange) {\n          _chart.y().rangeRound([_chart.yAxisHeight(), 0]);\n        }\n        _chart.y().range([_chart.yAxisHeight(), 0]);\n        _chart.yAxis(_chart.yAxis().scale(_chart.y()));\n        _chart.yAxis().orient('left');\n      }\n      function generateChildG(child, i) {\n        child._generateG(_chart.g());\n        child.g().attr('class', SUB_CHART_CLASS + ' _' + i);\n      }\n      _chart.plotData = function () {\n        for (var i = 0; i < _children.length; ++i) {\n          var child = _children[i];\n          if (!child.g()) {\n            generateChildG(child, i);\n          }\n          if (_shareColors) {\n            child.colors(_chart.colors());\n          }\n          child.x(_chart.x());\n          child.xAxis(_chart.xAxis());\n          if (child.useRightYAxis()) {\n            child.y(_chart.rightY());\n            child.yAxis(_chart.rightYAxis());\n          } else {\n            child.y(_chart.y());\n            child.yAxis(_chart.yAxis());\n          }\n          child.plotData();\n          child._activateRenderlets();\n        }\n      };\n\n      /**\n       * Get or set whether to draw gridlines from the right y axis.  Drawing from the left y axis is the\n       * default behavior. This option is only respected when subcharts with both left and right y-axes\n       * are present.\n       * @method useRightAxisGridLines\n       * @memberof dc.compositeChart\n       * @instance\n       * @param {Boolean} [useRightAxisGridLines=false]\n       * @returns {Boolean|dc.compositeChart}\n       */\n      _chart.useRightAxisGridLines = function (useRightAxisGridLines) {\n        if (!arguments) {\n          return _rightAxisGridLines;\n        }\n        _rightAxisGridLines = useRightAxisGridLines;\n        return _chart;\n      };\n\n      /**\n       * Get or set chart-specific options for all child charts. This is equivalent to calling\n       * {@link dc.baseMixin#options .options} on each child chart.\n       * @method childOptions\n       * @memberof dc.compositeChart\n       * @instance\n       * @param {Object} [childOptions]\n       * @returns {Object|dc.compositeChart}\n       */\n      _chart.childOptions = function (childOptions) {\n        if (!arguments.length) {\n          return _childOptions;\n        }\n        _childOptions = childOptions;\n        _children.forEach(function (child) {\n          child.options(_childOptions);\n        });\n        return _chart;\n      };\n      _chart.fadeDeselectedArea = function () {\n        for (var i = 0; i < _children.length; ++i) {\n          var child = _children[i];\n          child.brush(_chart.brush());\n          child.fadeDeselectedArea();\n        }\n      };\n\n      /**\n       * Set or get the right y axis label.\n       * @method rightYAxisLabel\n       * @memberof dc.compositeChart\n       * @instance\n       * @param {String} [rightYAxisLabel]\n       * @param {Number} [padding]\n       * @returns {String|dc.compositeChart}\n       */\n      _chart.rightYAxisLabel = function (rightYAxisLabel, padding) {\n        if (!arguments.length) {\n          return _rightYAxisLabel;\n        }\n        _rightYAxisLabel = rightYAxisLabel;\n        _chart.margins().right -= _rightYAxisLabelPadding;\n        _rightYAxisLabelPadding = padding === undefined ? DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING : padding;\n        _chart.margins().right += _rightYAxisLabelPadding;\n        return _chart;\n      };\n\n      /**\n       * Combine the given charts into one single composite coordinate grid chart.\n       * @method compose\n       * @memberof dc.compositeChart\n       * @instance\n       * @example\n       * moveChart.compose([\n       *     // when creating sub-chart you need to pass in the parent chart\n       *     dc.lineChart(moveChart)\n       *         .group(indexAvgByMonthGroup) // if group is missing then parent's group will be used\n       *         .valueAccessor(function (d){return d.value.avg;})\n       *         // most of the normal functions will continue to work in a composed chart\n       *         .renderArea(true)\n       *         .stack(monthlyMoveGroup, function (d){return d.value;})\n       *         .title(function (d){\n       *             var value = d.value.avg?d.value.avg:d.value;\n       *             if(isNaN(value)) value = 0;\n       *             return dateFormat(d.key) + '\\n' + numberFormat(value);\n       *         }),\n       *     dc.barChart(moveChart)\n       *         .group(volumeByMonthGroup)\n       *         .centerBar(true)\n       * ]);\n       * @param {Array<Chart>} [subChartArray]\n       * @returns {dc.compositeChart}\n       */\n      _chart.compose = function (subChartArray) {\n        _children = subChartArray;\n        _children.forEach(function (child) {\n          child.height(_chart.height());\n          child.width(_chart.width());\n          child.margins(_chart.margins());\n          if (_shareTitle) {\n            child.title(_chart.title());\n          }\n          child.options(_childOptions);\n        });\n        return _chart;\n      };\n\n      /**\n       * Returns the child charts which are composed into the composite chart.\n       * @method children\n       * @memberof dc.compositeChart\n       * @instance\n       * @returns {Array<dc.baseMixin>}\n       */\n      _chart.children = function () {\n        return _children;\n      };\n\n      /**\n       * Get or set color sharing for the chart. If set, the {@link dc.colorMixin#colors .colors()} value from this chart\n       * will be shared with composed children. Additionally if the child chart implements\n       * Stackable and has not set a custom .colorAccessor, then it will generate a color\n       * specific to its order in the composition.\n       * @method shareColors\n       * @memberof dc.compositeChart\n       * @instance\n       * @param {Boolean} [shareColors=false]\n       * @returns {Boolean|dc.compositeChart}\n       */\n      _chart.shareColors = function (shareColors) {\n        if (!arguments.length) {\n          return _shareColors;\n        }\n        _shareColors = shareColors;\n        return _chart;\n      };\n\n      /**\n       * Get or set title sharing for the chart. If set, the {@link dc.baseMixin#title .title()} value from\n       * this chart will be shared with composed children.\n       * @method shareTitle\n       * @memberof dc.compositeChart\n       * @instance\n       * @param {Boolean} [shareTitle=true]\n       * @returns {Boolean|dc.compositeChart}\n       */\n      _chart.shareTitle = function (shareTitle) {\n        if (!arguments.length) {\n          return _shareTitle;\n        }\n        _shareTitle = shareTitle;\n        return _chart;\n      };\n\n      /**\n       * Get or set the y scale for the right axis. The right y scale is typically automatically\n       * generated by the chart implementation.\n       * @method rightY\n       * @memberof dc.compositeChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n       * @param {d3.scale} [yScale]\n       * @returns {d3.scale|dc.compositeChart}\n       */\n      _chart.rightY = function (yScale) {\n        if (!arguments.length) {\n          return _rightY;\n        }\n        _rightY = yScale;\n        _chart.rescale();\n        return _chart;\n      };\n\n      /**\n       * Get or set alignment between left and right y axes. A line connecting '0' on both y axis\n       * will be parallel to x axis. This only has effect when {@link #dc.coordinateGridMixin+elasticY elasticY} is true.\n       * @method alignYAxes\n       * @memberof dc.compositeChart\n       * @instance\n       * @param {Boolean} [alignYAxes=false]\n       * @returns {Chart}\n       */\n      _chart.alignYAxes = function (alignYAxes) {\n        if (!arguments.length) {\n          return _alignYAxes;\n        }\n        _alignYAxes = alignYAxes;\n        _chart.rescale();\n        return _chart;\n      };\n      function leftYAxisChildren() {\n        return _children.filter(function (child) {\n          return !child.useRightYAxis();\n        });\n      }\n      function rightYAxisChildren() {\n        return _children.filter(function (child) {\n          return child.useRightYAxis();\n        });\n      }\n      function getYAxisMin(charts) {\n        return charts.map(function (c) {\n          return c.yAxisMin();\n        });\n      }\n      delete _chart.yAxisMin;\n      function yAxisMin() {\n        return d3.min(getYAxisMin(leftYAxisChildren()));\n      }\n      function rightYAxisMin() {\n        return d3.min(getYAxisMin(rightYAxisChildren()));\n      }\n      function getYAxisMax(charts) {\n        return charts.map(function (c) {\n          return c.yAxisMax();\n        });\n      }\n      delete _chart.yAxisMax;\n      function yAxisMax() {\n        return dc.utils.add(d3.max(getYAxisMax(leftYAxisChildren())), _chart.yAxisPadding());\n      }\n      function rightYAxisMax() {\n        return dc.utils.add(d3.max(getYAxisMax(rightYAxisChildren())), _chart.yAxisPadding());\n      }\n      function getAllXAxisMinFromChildCharts() {\n        return _children.map(function (c) {\n          return c.xAxisMin();\n        });\n      }\n      dc.override(_chart, 'xAxisMin', function () {\n        return dc.utils.subtract(d3.min(getAllXAxisMinFromChildCharts()), _chart.xAxisPadding());\n      });\n      function getAllXAxisMaxFromChildCharts() {\n        return _children.map(function (c) {\n          return c.xAxisMax();\n        });\n      }\n      dc.override(_chart, 'xAxisMax', function () {\n        return dc.utils.add(d3.max(getAllXAxisMaxFromChildCharts()), _chart.xAxisPadding());\n      });\n      _chart.legendables = function () {\n        return _children.reduce(function (items, child) {\n          if (_shareColors) {\n            child.colors(_chart.colors());\n          }\n          items.push.apply(items, child.legendables());\n          return items;\n        }, []);\n      };\n      _chart.legendHighlight = function (d) {\n        for (var j = 0; j < _children.length; ++j) {\n          var child = _children[j];\n          child.legendHighlight(d);\n        }\n      };\n      _chart.legendReset = function (d) {\n        for (var j = 0; j < _children.length; ++j) {\n          var child = _children[j];\n          child.legendReset(d);\n        }\n      };\n      _chart.legendToggle = function () {\n        console.log('composite should not be getting legendToggle itself');\n      };\n\n      /**\n       * Set or get the right y axis used by the composite chart. This function is most useful when y\n       * axis customization is required. The y axis in dc.js is an instance of a [d3 axis\n       * object](https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis) therefore it supports any valid\n       * d3 axis manipulation.\n       *\n       * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\n       * unexpected results.\n       * @method rightYAxis\n       * @memberof dc.compositeChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n       * @example\n       * // customize y axis tick format\n       * chart.rightYAxis().tickFormat(function (v) {return v + '%';});\n       * // customize y axis tick values\n       * chart.rightYAxis().tickValues([0, 100, 200, 300]);\n       * @param {d3.svg.axis} [rightYAxis]\n       * @returns {d3.svg.axis|dc.compositeChart}\n       */\n      _chart.rightYAxis = function (rightYAxis) {\n        if (!arguments.length) {\n          return _rightYAxis;\n        }\n        _rightYAxis = rightYAxis;\n        return _chart;\n      };\n      return _chart.anchor(parent, chartGroup);\n    };\n\n    /**\n     * A series chart is a chart that shows multiple series of data overlaid on one chart, where the\n     * series is specified in the data. It is a specialization of Composite Chart and inherits all\n     * composite features other than recomposing the chart.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.io/dc.js/examples/series.html Series Chart}\n     * @class seriesChart\n     * @memberof dc\n     * @mixes dc.compositeChart\n     * @example\n     * // create a series chart under #chart-container1 element using the default global chart group\n     * var seriesChart1 = dc.seriesChart(\"#chart-container1\");\n     * // create a series chart under #chart-container2 element using chart group A\n     * var seriesChart2 = dc.seriesChart(\"#chart-container2\", \"chartGroupA\");\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.seriesChart}\n     */\n    dc.seriesChart = function (parent, chartGroup) {\n      var _chart = dc.compositeChart(parent, chartGroup);\n      function keySort(a, b) {\n        return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n      }\n      var _charts = {};\n      var _chartFunction = dc.lineChart;\n      var _seriesAccessor;\n      var _seriesSort = d3.ascending;\n      var _valueSort = keySort;\n      _chart._mandatoryAttributes().push('seriesAccessor', 'chart');\n      _chart.shareColors(true);\n      _chart._preprocessData = function () {\n        var keep = [];\n        var childrenChanged;\n        var nester = d3.nest().key(_seriesAccessor);\n        if (_seriesSort) {\n          nester.sortKeys(_seriesSort);\n        }\n        if (_valueSort) {\n          nester.sortValues(_valueSort);\n        }\n        var nesting = nester.entries(_chart.data());\n        var children = nesting.map(function (sub, i) {\n          var subChart = _charts[sub.key] || _chartFunction.call(_chart, _chart, chartGroup, sub.key, i);\n          if (!_charts[sub.key]) {\n            childrenChanged = true;\n          }\n          _charts[sub.key] = subChart;\n          keep.push(sub.key);\n          return subChart.dimension(_chart.dimension()).group({\n            all: d3.functor(sub.values)\n          }, sub.key).keyAccessor(_chart.keyAccessor()).valueAccessor(_chart.valueAccessor()).brushOn(_chart.brushOn());\n        });\n        // this works around the fact compositeChart doesn't really\n        // have a removal interface\n        Object.keys(_charts).filter(function (c) {\n          return keep.indexOf(c) === -1;\n        }).forEach(function (c) {\n          clearChart(c);\n          childrenChanged = true;\n        });\n        _chart._compose(children);\n        if (childrenChanged && _chart.legend()) {\n          _chart.legend().render();\n        }\n      };\n      function clearChart(c) {\n        if (_charts[c].g()) {\n          _charts[c].g().remove();\n        }\n        delete _charts[c];\n      }\n      function resetChildren() {\n        Object.keys(_charts).map(clearChart);\n        _charts = {};\n      }\n\n      /**\n       * Get or set the chart function, which generates the child charts.\n       * @method chart\n       * @memberof dc.seriesChart\n       * @instance\n       * @example\n       * // put interpolation on the line charts used for the series\n       * chart.chart(function(c) { return dc.lineChart(c).interpolate('basis'); })\n       * // do a scatter series chart\n       * chart.chart(dc.scatterPlot)\n       * @param {Function} [chartFunction=dc.lineChart]\n       * @returns {Function|dc.seriesChart}\n       */\n      _chart.chart = function (chartFunction) {\n        if (!arguments.length) {\n          return _chartFunction;\n        }\n        _chartFunction = chartFunction;\n        resetChildren();\n        return _chart;\n      };\n\n      /**\n       * **mandatory**\n       *\n       * Get or set accessor function for the displayed series. Given a datum, this function\n       * should return the series that datum belongs to.\n       * @method seriesAccessor\n       * @memberof dc.seriesChart\n       * @instance\n       * @example\n       * // simple series accessor\n       * chart.seriesAccessor(function(d) { return \"Expt: \" + d.key[0]; })\n       * @param {Function} [accessor]\n       * @returns {Function|dc.seriesChart}\n       */\n      _chart.seriesAccessor = function (accessor) {\n        if (!arguments.length) {\n          return _seriesAccessor;\n        }\n        _seriesAccessor = accessor;\n        resetChildren();\n        return _chart;\n      };\n\n      /**\n       * Get or set a function to sort the list of series by, given series values.\n       * @method seriesSort\n       * @memberof dc.seriesChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n       * @example\n       * chart.seriesSort(d3.descending);\n       * @param {Function} [sortFunction=d3.ascending]\n       * @returns {Function|dc.seriesChart}\n       */\n      _chart.seriesSort = function (sortFunction) {\n        if (!arguments.length) {\n          return _seriesSort;\n        }\n        _seriesSort = sortFunction;\n        resetChildren();\n        return _chart;\n      };\n\n      /**\n       * Get or set a function to sort each series values by. By default this is the key accessor which,\n       * for example, will ensure a lineChart series connects its points in increasing key/x order,\n       * rather than haphazardly.\n       * @method valueSort\n       * @memberof dc.seriesChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n       * @example\n       * // Default value sort\n       * _chart.valueSort(function keySort (a, b) {\n       *     return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n       * });\n       * @param {Function} [sortFunction]\n       * @returns {Function|dc.seriesChart}\n       */\n      _chart.valueSort = function (sortFunction) {\n        if (!arguments.length) {\n          return _valueSort;\n        }\n        _valueSort = sortFunction;\n        resetChildren();\n        return _chart;\n      };\n\n      // make compose private\n      _chart._compose = _chart.compose;\n      delete _chart.compose;\n      return _chart;\n    };\n\n    /**\n     * The geo choropleth chart is designed as an easy way to create a crossfilter driven choropleth map\n     * from GeoJson data. This chart implementation was inspired by\n     * {@link http://bl.ocks.org/4060606 the great d3 choropleth example}.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n     * @class geoChoroplethChart\n     * @memberof dc\n     * @mixes dc.colorMixin\n     * @mixes dc.baseMixin\n     * @example\n     * // create a choropleth chart under '#us-chart' element using the default global chart group\n     * var chart1 = dc.geoChoroplethChart('#us-chart');\n     * // create a choropleth chart under '#us-chart2' element using chart group A\n     * var chart2 = dc.compositeChart('#us-chart2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.geoChoroplethChart}\n     */\n    dc.geoChoroplethChart = function (parent, chartGroup) {\n      var _chart = dc.colorMixin(dc.baseMixin({}));\n      _chart.colorAccessor(function (d) {\n        return d || 0;\n      });\n      var _geoPath = d3.geo.path();\n      var _projectionFlag;\n      var _geoJsons = [];\n      _chart._doRender = function () {\n        _chart.resetSvg();\n        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {\n          var states = _chart.svg().append('g').attr('class', 'layer' + layerIndex);\n          var regionG = states.selectAll('g.' + geoJson(layerIndex).name).data(geoJson(layerIndex).data).enter().append('g').attr('class', geoJson(layerIndex).name);\n          regionG.append('path').attr('fill', 'white').attr('d', _geoPath);\n          regionG.append('title');\n          plotData(layerIndex);\n        }\n        _projectionFlag = false;\n      };\n      function plotData(layerIndex) {\n        var data = generateLayeredData();\n        if (isDataLayer(layerIndex)) {\n          var regionG = renderRegionG(layerIndex);\n          renderPaths(regionG, layerIndex, data);\n          renderTitle(regionG, layerIndex, data);\n        }\n      }\n      function generateLayeredData() {\n        var data = {};\n        var groupAll = _chart.data();\n        for (var i = 0; i < groupAll.length; ++i) {\n          data[_chart.keyAccessor()(groupAll[i])] = _chart.valueAccessor()(groupAll[i]);\n        }\n        return data;\n      }\n      function isDataLayer(layerIndex) {\n        return geoJson(layerIndex).keyAccessor;\n      }\n      function renderRegionG(layerIndex) {\n        var regionG = _chart.svg().selectAll(layerSelector(layerIndex)).classed('selected', function (d) {\n          return isSelected(layerIndex, d);\n        }).classed('deselected', function (d) {\n          return isDeselected(layerIndex, d);\n        }).attr('class', function (d) {\n          var layerNameClass = geoJson(layerIndex).name;\n          var regionClass = dc.utils.nameToId(geoJson(layerIndex).keyAccessor(d));\n          var baseClasses = layerNameClass + ' ' + regionClass;\n          if (isSelected(layerIndex, d)) {\n            baseClasses += ' selected';\n          }\n          if (isDeselected(layerIndex, d)) {\n            baseClasses += ' deselected';\n          }\n          return baseClasses;\n        });\n        return regionG;\n      }\n      function layerSelector(layerIndex) {\n        return 'g.layer' + layerIndex + ' g.' + geoJson(layerIndex).name;\n      }\n      function isSelected(layerIndex, d) {\n        return _chart.hasFilter() && _chart.hasFilter(getKey(layerIndex, d));\n      }\n      function isDeselected(layerIndex, d) {\n        return _chart.hasFilter() && !_chart.hasFilter(getKey(layerIndex, d));\n      }\n      function getKey(layerIndex, d) {\n        return geoJson(layerIndex).keyAccessor(d);\n      }\n      function geoJson(index) {\n        return _geoJsons[index];\n      }\n      function renderPaths(regionG, layerIndex, data) {\n        var paths = regionG.select('path').attr('fill', function () {\n          var currentFill = d3.select(this).attr('fill');\n          if (currentFill) {\n            return currentFill;\n          }\n          return 'none';\n        }).on('click', function (d) {\n          return _chart.onClick(d, layerIndex);\n        });\n        dc.transition(paths, _chart.transitionDuration(), _chart.transitionDelay()).attr('fill', function (d, i) {\n          return _chart.getColor(data[geoJson(layerIndex).keyAccessor(d)], i);\n        });\n      }\n      _chart.onClick = function (d, layerIndex) {\n        var selectedRegion = geoJson(layerIndex).keyAccessor(d);\n        dc.events.trigger(function () {\n          _chart.filter(selectedRegion);\n          _chart.redrawGroup();\n        });\n      };\n      function renderTitle(regionG, layerIndex, data) {\n        if (_chart.renderTitle()) {\n          regionG.selectAll('title').text(function (d) {\n            var key = getKey(layerIndex, d);\n            var value = data[key];\n            return _chart.title()({\n              key: key,\n              value: value\n            });\n          });\n        }\n      }\n      _chart._doRedraw = function () {\n        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {\n          plotData(layerIndex);\n          if (_projectionFlag) {\n            _chart.svg().selectAll('g.' + geoJson(layerIndex).name + ' path').attr('d', _geoPath);\n          }\n        }\n        _projectionFlag = false;\n      };\n\n      /**\n       * **mandatory**\n       *\n       * Use this function to insert a new GeoJson map layer. This function can be invoked multiple times\n       * if you have multiple GeoJson data layers to render on top of each other. If you overlay multiple\n       * layers with the same name the new overlay will override the existing one.\n       * @method overlayGeoJson\n       * @memberof dc.geoChoroplethChart\n       * @instance\n       * @see {@link http://geojson.org/ GeoJSON}\n       * @see {@link https://github.com/topojson/topojson/wiki TopoJSON}\n       * @see {@link https://github.com/topojson/topojson-1.x-api-reference/blob/master/API-Reference.md#wiki-feature topojson.feature}\n       * @example\n       * // insert a layer for rendering US states\n       * chart.overlayGeoJson(statesJson.features, 'state', function(d) {\n       *      return d.properties.name;\n       * });\n       * @param {geoJson} json - a geojson feed\n       * @param {String} name - name of the layer\n       * @param {Function} keyAccessor - accessor function used to extract 'key' from the GeoJson data. The key extracted by\n       * this function should match the keys returned by the crossfilter groups.\n       * @returns {dc.geoChoroplethChart}\n       */\n      _chart.overlayGeoJson = function (json, name, keyAccessor) {\n        for (var i = 0; i < _geoJsons.length; ++i) {\n          if (_geoJsons[i].name === name) {\n            _geoJsons[i].data = json;\n            _geoJsons[i].keyAccessor = keyAccessor;\n            return _chart;\n          }\n        }\n        _geoJsons.push({\n          name: name,\n          data: json,\n          keyAccessor: keyAccessor\n        });\n        return _chart;\n      };\n\n      /**\n       * Set custom geo projection function. See the available\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Projections.md d3 geo projection functions}.\n       * @method projection\n       * @memberof dc.geoChoroplethChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Projections.md d3.geo.projection}\n       * @see {@link https://github.com/d3/d3-geo-projection Extended d3.geo.projection}\n       * @param {d3.projection} [projection=d3.geo.albersUsa()]\n       * @returns {dc.geoChoroplethChart}\n       */\n      _chart.projection = function (projection) {\n        _geoPath.projection(projection);\n        _projectionFlag = true;\n        return _chart;\n      };\n\n      /**\n       * Returns all GeoJson layers currently registered with this chart. The returned array is a\n       * reference to this chart's internal data structure, so any modification to this array will also\n       * modify this chart's internal registration.\n       * @method geoJsons\n       * @memberof dc.geoChoroplethChart\n       * @instance\n       * @returns {Array<{name:String, data: Object, accessor: Function}>}\n       */\n      _chart.geoJsons = function () {\n        return _geoJsons;\n      };\n\n      /**\n       * Returns the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Paths.md#path d3.geo.path} object used to\n       * render the projection and features.  Can be useful for figuring out the bounding box of the\n       * feature set and thus a way to calculate scale and translation for the projection.\n       * @method geoPath\n       * @memberof dc.geoChoroplethChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Paths.md#path d3.geo.path}\n       * @returns {d3.geo.path}\n       */\n      _chart.geoPath = function () {\n        return _geoPath;\n      };\n\n      /**\n       * Remove a GeoJson layer from this chart by name\n       * @method removeGeoJson\n       * @memberof dc.geoChoroplethChart\n       * @instance\n       * @param {String} name\n       * @returns {dc.geoChoroplethChart}\n       */\n      _chart.removeGeoJson = function (name) {\n        var geoJsons = [];\n        for (var i = 0; i < _geoJsons.length; ++i) {\n          var layer = _geoJsons[i];\n          if (layer.name !== name) {\n            geoJsons.push(layer);\n          }\n        }\n        _geoJsons = geoJsons;\n        return _chart;\n      };\n      return _chart.anchor(parent, chartGroup);\n    };\n\n    /**\n     * The bubble overlay chart is quite different from the typical bubble chart. With the bubble overlay\n     * chart you can arbitrarily place bubbles on an existing svg or bitmap image, thus changing the\n     * typical x and y positioning while retaining the capability to visualize data using bubble radius\n     * and coloring.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n     * @class bubbleOverlay\n     * @memberof dc\n     * @mixes dc.bubbleMixin\n     * @mixes dc.baseMixin\n     * @example\n     * // create a bubble overlay chart on top of the '#chart-container1 svg' element using the default global chart group\n     * var bubbleChart1 = dc.bubbleOverlayChart('#chart-container1').svg(d3.select('#chart-container1 svg'));\n     * // create a bubble overlay chart on top of the '#chart-container2 svg' element using chart group A\n     * var bubbleChart2 = dc.compositeChart('#chart-container2', 'chartGroupA').svg(d3.select('#chart-container2 svg'));\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.bubbleOverlay}\n     */\n    dc.bubbleOverlay = function (parent, chartGroup) {\n      var BUBBLE_OVERLAY_CLASS = 'bubble-overlay';\n      var BUBBLE_NODE_CLASS = 'node';\n      var BUBBLE_CLASS = 'bubble';\n\n      /**\n       * **mandatory**\n       *\n       * Set the underlying svg image element. Unlike other dc charts this chart will not generate a svg\n       * element; therefore the bubble overlay chart will not work if this function is not invoked. If the\n       * underlying image is a bitmap, then an empty svg will need to be created on top of the image.\n       * @method svg\n       * @memberof dc.bubbleOverlay\n       * @instance\n       * @example\n       * // set up underlying svg element\n       * chart.svg(d3.select('#chart svg'));\n       * @param {SVGElement|d3.selection} [imageElement]\n       * @returns {dc.bubbleOverlay}\n       */\n      var _chart = dc.bubbleMixin(dc.baseMixin({}));\n      var _g;\n      var _points = [];\n      _chart.transitionDuration(750);\n      _chart.transitionDelay(0);\n      _chart.radiusValueAccessor(function (d) {\n        return d.value;\n      });\n\n      /**\n       * **mandatory**\n       *\n       * Set up a data point on the overlay. The name of a data point should match a specific 'key' among\n       * data groups generated using keyAccessor.  If a match is found (point name <-> data group key)\n       * then a bubble will be generated at the position specified by the function. x and y\n       * value specified here are relative to the underlying svg.\n       * @method point\n       * @memberof dc.bubbleOverlay\n       * @instance\n       * @param {String} name\n       * @param {Number} x\n       * @param {Number} y\n       * @returns {dc.bubbleOverlay}\n       */\n      _chart.point = function (name, x, y) {\n        _points.push({\n          name: name,\n          x: x,\n          y: y\n        });\n        return _chart;\n      };\n      _chart._doRender = function () {\n        _g = initOverlayG();\n        _chart.r().range([_chart.MIN_RADIUS, _chart.width() * _chart.maxBubbleRelativeSize()]);\n        initializeBubbles();\n        _chart.fadeDeselectedArea();\n        return _chart;\n      };\n      function initOverlayG() {\n        _g = _chart.select('g.' + BUBBLE_OVERLAY_CLASS);\n        if (_g.empty()) {\n          _g = _chart.svg().append('g').attr('class', BUBBLE_OVERLAY_CLASS);\n        }\n        return _g;\n      }\n      function initializeBubbles() {\n        var data = mapData();\n        _chart.calculateRadiusDomain();\n        _points.forEach(function (point) {\n          var nodeG = getNodeG(point, data);\n          var circle = nodeG.select('circle.' + BUBBLE_CLASS);\n          if (circle.empty()) {\n            circle = nodeG.append('circle').attr('class', BUBBLE_CLASS).attr('r', 0).attr('fill', _chart.getColor).on('click', _chart.onClick);\n          }\n          dc.transition(circle, _chart.transitionDuration(), _chart.transitionDelay()).attr('r', function (d) {\n            return _chart.bubbleR(d);\n          });\n          _chart._doRenderLabel(nodeG);\n          _chart._doRenderTitles(nodeG);\n        });\n      }\n      function mapData() {\n        var data = {};\n        _chart.data().forEach(function (datum) {\n          data[_chart.keyAccessor()(datum)] = datum;\n        });\n        return data;\n      }\n      function getNodeG(point, data) {\n        var bubbleNodeClass = BUBBLE_NODE_CLASS + ' ' + dc.utils.nameToId(point.name);\n        var nodeG = _g.select('g.' + dc.utils.nameToId(point.name));\n        if (nodeG.empty()) {\n          nodeG = _g.append('g').attr('class', bubbleNodeClass).attr('transform', 'translate(' + point.x + ',' + point.y + ')');\n        }\n        nodeG.datum(data[point.name]);\n        return nodeG;\n      }\n      _chart._doRedraw = function () {\n        updateBubbles();\n        _chart.fadeDeselectedArea();\n        return _chart;\n      };\n      function updateBubbles() {\n        var data = mapData();\n        _chart.calculateRadiusDomain();\n        _points.forEach(function (point) {\n          var nodeG = getNodeG(point, data);\n          var circle = nodeG.select('circle.' + BUBBLE_CLASS);\n          dc.transition(circle, _chart.transitionDuration(), _chart.transitionDelay()).attr('r', function (d) {\n            return _chart.bubbleR(d);\n          }).attr('fill', _chart.getColor);\n          _chart.doUpdateLabels(nodeG);\n          _chart.doUpdateTitles(nodeG);\n        });\n      }\n      _chart.debug = function (flag) {\n        if (flag) {\n          var debugG = _chart.select('g.' + dc.constants.DEBUG_GROUP_CLASS);\n          if (debugG.empty()) {\n            debugG = _chart.svg().append('g').attr('class', dc.constants.DEBUG_GROUP_CLASS);\n          }\n          var debugText = debugG.append('text').attr('x', 10).attr('y', 20);\n          debugG.append('rect').attr('width', _chart.width()).attr('height', _chart.height()).on('mousemove', function () {\n            var position = d3.mouse(debugG.node());\n            var msg = position[0] + ', ' + position[1];\n            debugText.text(msg);\n          });\n        } else {\n          _chart.selectAll('.debug').remove();\n        }\n        return _chart;\n      };\n      _chart.anchor(parent, chartGroup);\n      return _chart;\n    };\n\n    /**\n     * Concrete row chart implementation.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n     * @class rowChart\n     * @memberof dc\n     * @mixes dc.capMixin\n     * @mixes dc.marginMixin\n     * @mixes dc.colorMixin\n     * @mixes dc.baseMixin\n     * @example\n     * // create a row chart under #chart-container1 element using the default global chart group\n     * var chart1 = dc.rowChart('#chart-container1');\n     * // create a row chart under #chart-container2 element using chart group A\n     * var chart2 = dc.rowChart('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.rowChart}\n     */\n    dc.rowChart = function (parent, chartGroup) {\n      var _g;\n      var _labelOffsetX = 10;\n      var _labelOffsetY = 15;\n      var _hasLabelOffsetY = false;\n      var _dyOffset = '0.35em'; // this helps center labels https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#svg_text\n      var _titleLabelOffsetX = 2;\n      var _gap = 5;\n      var _fixedBarHeight = false;\n      var _rowCssClass = 'row';\n      var _titleRowCssClass = 'titlerow';\n      var _renderTitleLabel = false;\n      var _chart = dc.capMixin(dc.marginMixin(dc.colorMixin(dc.baseMixin({}))));\n      var _x;\n      var _elasticX;\n      var _xAxis = d3.svg.axis().orient('bottom');\n      var _rowData;\n      _chart.rowsCap = _chart.cap;\n      function calculateAxisScale() {\n        if (!_x || _elasticX) {\n          var extent = d3.extent(_rowData, _chart.cappedValueAccessor);\n          if (extent[0] > 0) {\n            extent[0] = 0;\n          }\n          if (extent[1] < 0) {\n            extent[1] = 0;\n          }\n          _x = d3.scale.linear().domain(extent).range([0, _chart.effectiveWidth()]);\n        }\n        _xAxis.scale(_x);\n      }\n      function drawAxis() {\n        var axisG = _g.select('g.axis');\n        calculateAxisScale();\n        if (axisG.empty()) {\n          axisG = _g.append('g').attr('class', 'axis');\n        }\n        axisG.attr('transform', 'translate(0, ' + _chart.effectiveHeight() + ')');\n        dc.transition(axisG, _chart.transitionDuration(), _chart.transitionDelay()).call(_xAxis);\n      }\n      _chart._doRender = function () {\n        _chart.resetSvg();\n        _g = _chart.svg().append('g').attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n        drawChart();\n        return _chart;\n      };\n      _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + _chart.cappedValueAccessor(d);\n      });\n      _chart.label(_chart.cappedKeyAccessor);\n\n      /**\n       * Gets or sets the x scale. The x scale can be any d3\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale}.\n       * @method x\n       * @memberof dc.rowChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale}\n       * @param {d3.scale} [scale]\n       * @returns {d3.scale|dc.rowChart}\n       */\n      _chart.x = function (scale) {\n        if (!arguments.length) {\n          return _x;\n        }\n        _x = scale;\n        return _chart;\n      };\n      function drawGridLines() {\n        _g.selectAll('g.tick').select('line.grid-line').remove();\n        _g.selectAll('g.tick').append('line').attr('class', 'grid-line').attr('x1', 0).attr('y1', 0).attr('x2', 0).attr('y2', function () {\n          return -_chart.effectiveHeight();\n        });\n      }\n      function drawChart() {\n        _rowData = _chart.data();\n        drawAxis();\n        drawGridLines();\n        var rows = _g.selectAll('g.' + _rowCssClass).data(_rowData);\n        createElements(rows);\n        removeElements(rows);\n        updateElements(rows);\n      }\n      function createElements(rows) {\n        var rowEnter = rows.enter().append('g').attr('class', function (d, i) {\n          return _rowCssClass + ' _' + i;\n        });\n        rowEnter.append('rect').attr('width', 0);\n        createLabels(rowEnter);\n      }\n      function removeElements(rows) {\n        rows.exit().remove();\n      }\n      function rootValue() {\n        var root = _x(0);\n        return root === -Infinity || root !== root ? _x(1) : root;\n      }\n      function updateElements(rows) {\n        var n = _rowData.length;\n        var height;\n        if (!_fixedBarHeight) {\n          height = (_chart.effectiveHeight() - (n + 1) * _gap) / n;\n        } else {\n          height = _fixedBarHeight;\n        }\n\n        // vertically align label in center unless they override the value via property setter\n        if (!_hasLabelOffsetY) {\n          _labelOffsetY = height / 2;\n        }\n        var rect = rows.attr('transform', function (d, i) {\n          return 'translate(0,' + ((i + 1) * _gap + i * height) + ')';\n        }).select('rect').attr('height', height).attr('fill', _chart.getColor).on('click', onClick).classed('deselected', function (d) {\n          return _chart.hasFilter() ? !isSelectedRow(d) : false;\n        }).classed('selected', function (d) {\n          return _chart.hasFilter() ? isSelectedRow(d) : false;\n        });\n        dc.transition(rect, _chart.transitionDuration(), _chart.transitionDelay()).attr('width', function (d) {\n          return Math.abs(rootValue() - _x(_chart.valueAccessor()(d)));\n        }).attr('transform', translateX);\n        createTitles(rows);\n        updateLabels(rows);\n      }\n      function createTitles(rows) {\n        if (_chart.renderTitle()) {\n          rows.select('title').remove();\n          rows.append('title').text(_chart.title());\n        }\n      }\n      function createLabels(rowEnter) {\n        if (_chart.renderLabel()) {\n          rowEnter.append('text').on('click', onClick);\n        }\n        if (_chart.renderTitleLabel()) {\n          rowEnter.append('text').attr('class', _titleRowCssClass).on('click', onClick);\n        }\n      }\n      function updateLabels(rows) {\n        if (_chart.renderLabel()) {\n          var lab = rows.select('text').attr('x', _labelOffsetX).attr('y', _labelOffsetY).attr('dy', _dyOffset).on('click', onClick).attr('class', function (d, i) {\n            return _rowCssClass + ' _' + i;\n          }).text(function (d) {\n            return _chart.label()(d);\n          });\n          dc.transition(lab, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', translateX);\n        }\n        if (_chart.renderTitleLabel()) {\n          var titlelab = rows.select('.' + _titleRowCssClass).attr('x', _chart.effectiveWidth() - _titleLabelOffsetX).attr('y', _labelOffsetY).attr('dy', _dyOffset).attr('text-anchor', 'end').on('click', onClick).attr('class', function (d, i) {\n            return _titleRowCssClass + ' _' + i;\n          }).text(function (d) {\n            return _chart.title()(d);\n          });\n          dc.transition(titlelab, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', translateX);\n        }\n      }\n\n      /**\n       * Turn on/off Title label rendering (values) using SVG style of text-anchor 'end'.\n       * @method renderTitleLabel\n       * @memberof dc.rowChart\n       * @instance\n       * @param {Boolean} [renderTitleLabel=false]\n       * @returns {Boolean|dc.rowChart}\n       */\n      _chart.renderTitleLabel = function (renderTitleLabel) {\n        if (!arguments.length) {\n          return _renderTitleLabel;\n        }\n        _renderTitleLabel = renderTitleLabel;\n        return _chart;\n      };\n      function onClick(d) {\n        _chart.onClick(d);\n      }\n      function translateX(d) {\n        var x = _x(_chart.cappedValueAccessor(d)),\n          x0 = rootValue(),\n          s = x > x0 ? x0 : x;\n        return 'translate(' + s + ',0)';\n      }\n      _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n      };\n\n      /**\n       * Get the x axis for the row chart instance.  Note: not settable for row charts.\n       * See the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3 axis object}\n       * documention for more information.\n       * @method xAxis\n       * @memberof dc.rowChart\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n       * @example\n       * // customize x axis tick format\n       * chart.xAxis().tickFormat(function (v) {return v + '%';});\n       * // customize x axis tick values\n       * chart.xAxis().tickValues([0, 100, 200, 300]);\n       * @returns {d3.svg.axis}\n       */\n      _chart.xAxis = function () {\n        return _xAxis;\n      };\n\n      /**\n       * Get or set the fixed bar height. Default is [false] which will auto-scale bars.\n       * For example, if you want to fix the height for a specific number of bars (useful in TopN charts)\n       * you could fix height as follows (where count = total number of bars in your TopN and gap is\n       * your vertical gap space).\n       * @method fixedBarHeight\n       * @memberof dc.rowChart\n       * @instance\n       * @example\n       * chart.fixedBarHeight( chartheight - (count + 1) * gap / count);\n       * @param {Boolean|Number} [fixedBarHeight=false]\n       * @returns {Boolean|Number|dc.rowChart}\n       */\n      _chart.fixedBarHeight = function (fixedBarHeight) {\n        if (!arguments.length) {\n          return _fixedBarHeight;\n        }\n        _fixedBarHeight = fixedBarHeight;\n        return _chart;\n      };\n\n      /**\n       * Get or set the vertical gap space between rows on a particular row chart instance.\n       * @method gap\n       * @memberof dc.rowChart\n       * @instance\n       * @param {Number} [gap=5]\n       * @returns {Number|dc.rowChart}\n       */\n      _chart.gap = function (gap) {\n        if (!arguments.length) {\n          return _gap;\n        }\n        _gap = gap;\n        return _chart;\n      };\n\n      /**\n       * Get or set the elasticity on x axis. If this attribute is set to true, then the x axis will rescle to auto-fit the\n       * data range when filtered.\n       * @method elasticX\n       * @memberof dc.rowChart\n       * @instance\n       * @param {Boolean} [elasticX]\n       * @returns {Boolean|dc.rowChart}\n       */\n      _chart.elasticX = function (elasticX) {\n        if (!arguments.length) {\n          return _elasticX;\n        }\n        _elasticX = elasticX;\n        return _chart;\n      };\n\n      /**\n       * Get or set the x offset (horizontal space to the top left corner of a row) for labels on a particular row chart.\n       * @method labelOffsetX\n       * @memberof dc.rowChart\n       * @instance\n       * @param {Number} [labelOffsetX=10]\n       * @returns {Number|dc.rowChart}\n       */\n      _chart.labelOffsetX = function (labelOffsetX) {\n        if (!arguments.length) {\n          return _labelOffsetX;\n        }\n        _labelOffsetX = labelOffsetX;\n        return _chart;\n      };\n\n      /**\n       * Get or set the y offset (vertical space to the top left corner of a row) for labels on a particular row chart.\n       * @method labelOffsetY\n       * @memberof dc.rowChart\n       * @instance\n       * @param {Number} [labelOffsety=15]\n       * @returns {Number|dc.rowChart}\n       */\n      _chart.labelOffsetY = function (labelOffsety) {\n        if (!arguments.length) {\n          return _labelOffsetY;\n        }\n        _labelOffsetY = labelOffsety;\n        _hasLabelOffsetY = true;\n        return _chart;\n      };\n\n      /**\n       * Get of set the x offset (horizontal space between right edge of row and right edge or text.\n       * @method titleLabelOffsetX\n       * @memberof dc.rowChart\n       * @instance\n       * @param {Number} [titleLabelOffsetX=2]\n       * @returns {Number|dc.rowChart}\n       */\n      _chart.titleLabelOffsetX = function (titleLabelOffsetX) {\n        if (!arguments.length) {\n          return _titleLabelOffsetX;\n        }\n        _titleLabelOffsetX = titleLabelOffsetX;\n        return _chart;\n      };\n      function isSelectedRow(d) {\n        return _chart.hasFilter(_chart.cappedKeyAccessor(d));\n      }\n      return _chart.anchor(parent, chartGroup);\n    };\n\n    /**\n     * Legend is a attachable widget that can be added to other dc charts to render horizontal legend\n     * labels.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n     * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n     * @class legend\n     * @memberof dc\n     * @example\n     * chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\n     * @returns {dc.legend}\n     */\n    dc.legend = function () {\n      var LABEL_GAP = 2;\n      var _legend = {},\n        _parent,\n        _x = 0,\n        _y = 0,\n        _itemHeight = 12,\n        _gap = 5,\n        _horizontal = false,\n        _legendWidth = 560,\n        _itemWidth = 70,\n        _autoItemWidth = false,\n        _legendText = dc.pluck('name'),\n        _maxItems;\n      var _g;\n      _legend.parent = function (p) {\n        if (!arguments.length) {\n          return _parent;\n        }\n        _parent = p;\n        return _legend;\n      };\n      _legend.render = function () {\n        _parent.svg().select('g.dc-legend').remove();\n        _g = _parent.svg().append('g').attr('class', 'dc-legend').attr('transform', 'translate(' + _x + ',' + _y + ')');\n        var legendables = _parent.legendables();\n        if (_maxItems !== undefined) {\n          legendables = legendables.slice(0, _maxItems);\n        }\n        var itemEnter = _g.selectAll('g.dc-legend-item').data(legendables).enter().append('g').attr('class', 'dc-legend-item').on('mouseover', function (d) {\n          _parent.legendHighlight(d);\n        }).on('mouseout', function (d) {\n          _parent.legendReset(d);\n        }).on('click', function (d) {\n          d.chart.legendToggle(d);\n        });\n        _g.selectAll('g.dc-legend-item').classed('fadeout', function (d) {\n          return d.chart.isLegendableHidden(d);\n        });\n        if (legendables.some(dc.pluck('dashstyle'))) {\n          itemEnter.append('line').attr('x1', 0).attr('y1', _itemHeight / 2).attr('x2', _itemHeight).attr('y2', _itemHeight / 2).attr('stroke-width', 2).attr('stroke-dasharray', dc.pluck('dashstyle')).attr('stroke', dc.pluck('color'));\n        } else {\n          itemEnter.append('rect').attr('width', _itemHeight).attr('height', _itemHeight).attr('fill', function (d) {\n            return d ? d.color : 'blue';\n          });\n        }\n        itemEnter.append('text').text(_legendText).attr('x', _itemHeight + LABEL_GAP).attr('y', function () {\n          return _itemHeight / 2 + (this.clientHeight ? this.clientHeight : 13) / 2 - 2;\n        });\n        var _cumulativeLegendTextWidth = 0;\n        var row = 0;\n        itemEnter.attr('transform', function (d, i) {\n          if (_horizontal) {\n            var itemWidth = _autoItemWidth === true ? this.getBBox().width + _gap : _itemWidth;\n            if (_cumulativeLegendTextWidth + itemWidth > _legendWidth && _cumulativeLegendTextWidth > 0) {\n              ++row;\n              _cumulativeLegendTextWidth = 0;\n            }\n            var translateBy = 'translate(' + _cumulativeLegendTextWidth + ',' + row * legendItemHeight() + ')';\n            _cumulativeLegendTextWidth += itemWidth;\n            return translateBy;\n          } else {\n            return 'translate(0,' + i * legendItemHeight() + ')';\n          }\n        });\n      };\n      function legendItemHeight() {\n        return _gap + _itemHeight;\n      }\n\n      /**\n       * Set or get x coordinate for legend widget.\n       * @method x\n       * @memberof dc.legend\n       * @instance\n       * @param  {Number} [x=0]\n       * @returns {Number|dc.legend}\n       */\n      _legend.x = function (x) {\n        if (!arguments.length) {\n          return _x;\n        }\n        _x = x;\n        return _legend;\n      };\n\n      /**\n       * Set or get y coordinate for legend widget.\n       * @method y\n       * @memberof dc.legend\n       * @instance\n       * @param  {Number} [y=0]\n       * @returns {Number|dc.legend}\n       */\n      _legend.y = function (y) {\n        if (!arguments.length) {\n          return _y;\n        }\n        _y = y;\n        return _legend;\n      };\n\n      /**\n       * Set or get gap between legend items.\n       * @method gap\n       * @memberof dc.legend\n       * @instance\n       * @param  {Number} [gap=5]\n       * @returns {Number|dc.legend}\n       */\n      _legend.gap = function (gap) {\n        if (!arguments.length) {\n          return _gap;\n        }\n        _gap = gap;\n        return _legend;\n      };\n\n      /**\n       * Set or get legend item height.\n       * @method itemHeight\n       * @memberof dc.legend\n       * @instance\n       * @param  {Number} [itemHeight=12]\n       * @returns {Number|dc.legend}\n       */\n      _legend.itemHeight = function (itemHeight) {\n        if (!arguments.length) {\n          return _itemHeight;\n        }\n        _itemHeight = itemHeight;\n        return _legend;\n      };\n\n      /**\n       * Position legend horizontally instead of vertically.\n       * @method horizontal\n       * @memberof dc.legend\n       * @instance\n       * @param  {Boolean} [horizontal=false]\n       * @returns {Boolean|dc.legend}\n       */\n      _legend.horizontal = function (horizontal) {\n        if (!arguments.length) {\n          return _horizontal;\n        }\n        _horizontal = horizontal;\n        return _legend;\n      };\n\n      /**\n       * Maximum width for horizontal legend.\n       * @method legendWidth\n       * @memberof dc.legend\n       * @instance\n       * @param  {Number} [legendWidth=500]\n       * @returns {Number|dc.legend}\n       */\n      _legend.legendWidth = function (legendWidth) {\n        if (!arguments.length) {\n          return _legendWidth;\n        }\n        _legendWidth = legendWidth;\n        return _legend;\n      };\n\n      /**\n       * Legend item width for horizontal legend.\n       * @method itemWidth\n       * @memberof dc.legend\n       * @instance\n       * @param  {Number} [itemWidth=70]\n       * @returns {Number|dc.legend}\n       */\n      _legend.itemWidth = function (itemWidth) {\n        if (!arguments.length) {\n          return _itemWidth;\n        }\n        _itemWidth = itemWidth;\n        return _legend;\n      };\n\n      /**\n       * Turn automatic width for legend items on or off. If true, {@link dc.legend#itemWidth itemWidth} is ignored.\n       * This setting takes into account the {@link dc.legend#gap gap}.\n       * @method autoItemWidth\n       * @memberof dc.legend\n       * @instance\n       * @param  {Boolean} [autoItemWidth=false]\n       * @returns {Boolean|dc.legend}\n       */\n      _legend.autoItemWidth = function (autoItemWidth) {\n        if (!arguments.length) {\n          return _autoItemWidth;\n        }\n        _autoItemWidth = autoItemWidth;\n        return _legend;\n      };\n\n      /**\n       * Set or get the legend text function. The legend widget uses this function to render the legend\n       * text for each item. If no function is specified the legend widget will display the names\n       * associated with each group.\n       * @method legendText\n       * @memberof dc.legend\n       * @instance\n       * @param  {Function} [legendText]\n       * @returns {Function|dc.legend}\n       * @example\n       * // default legendText\n       * legend.legendText(dc.pluck('name'))\n       *\n       * // create numbered legend items\n       * chart.legend(dc.legend().legendText(function(d, i) { return i + '. ' + d.name; }))\n       *\n       * // create legend displaying group counts\n       * chart.legend(dc.legend().legendText(function(d) { return d.name + ': ' d.data; }))\n       **/\n      _legend.legendText = function (legendText) {\n        if (!arguments.length) {\n          return _legendText;\n        }\n        _legendText = legendText;\n        return _legend;\n      };\n\n      /**\n       * Maximum number of legend items to display\n       * @method maxItems\n       * @memberof dc.legend\n       * @instance\n       * @param  {Number} [maxItems]\n       * @return {dc.legend}\n       */\n      _legend.maxItems = function (maxItems) {\n        if (!arguments.length) {\n          return _maxItems;\n        }\n        _maxItems = dc.utils.isNumber(maxItems) ? maxItems : undefined;\n        return _legend;\n      };\n      return _legend;\n    };\n\n    /**\n     * A scatter plot chart\n     *\n     * Examples:\n     * - {@link http://dc-js.github.io/dc.js/examples/scatter.html Scatter Chart}\n     * - {@link http://dc-js.github.io/dc.js/examples/multi-scatter.html Multi-Scatter Chart}\n     * @class scatterPlot\n     * @memberof dc\n     * @mixes dc.coordinateGridMixin\n     * @example\n     * // create a scatter plot under #chart-container1 element using the default global chart group\n     * var chart1 = dc.scatterPlot('#chart-container1');\n     * // create a scatter plot under #chart-container2 element using chart group A\n     * var chart2 = dc.scatterPlot('#chart-container2', 'chartGroupA');\n     * // create a sub-chart under a composite parent chart\n     * var chart3 = dc.scatterPlot(compositeChart);\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.scatterPlot}\n     */\n    dc.scatterPlot = function (parent, chartGroup) {\n      var _chart = dc.coordinateGridMixin({});\n      var _symbol = d3.svg.symbol();\n      var _existenceAccessor = function (d) {\n        return d.value;\n      };\n      var originalKeyAccessor = _chart.keyAccessor();\n      _chart.keyAccessor(function (d) {\n        return originalKeyAccessor(d)[0];\n      });\n      _chart.valueAccessor(function (d) {\n        return originalKeyAccessor(d)[1];\n      });\n      _chart.colorAccessor(function () {\n        return _chart._groupName;\n      });\n      _chart.title(function (d) {\n        // this basically just counteracts the setting of its own key/value accessors\n        // see https://github.com/dc-js/dc.js/issues/702\n        return _chart.keyAccessor()(d) + ',' + _chart.valueAccessor()(d) + ': ' + _chart.existenceAccessor()(d);\n      });\n      var _locator = function (d) {\n        return 'translate(' + _chart.x()(_chart.keyAccessor()(d)) + ',' + _chart.y()(_chart.valueAccessor()(d)) + ')';\n      };\n      var _highlightedSize = 7;\n      var _symbolSize = 5;\n      var _excludedSize = 3;\n      var _excludedColor = null;\n      var _excludedOpacity = 1.0;\n      var _emptySize = 0;\n      var _emptyOpacity = 0;\n      var _nonemptyOpacity = 1;\n      var _emptyColor = null;\n      var _filtered = [];\n      function elementSize(d, i) {\n        if (!_existenceAccessor(d)) {\n          return Math.pow(_emptySize, 2);\n        } else if (_filtered[i]) {\n          return Math.pow(_symbolSize, 2);\n        } else {\n          return Math.pow(_excludedSize, 2);\n        }\n      }\n      _symbol.size(elementSize);\n      dc.override(_chart, '_filter', function (filter) {\n        if (!arguments.length) {\n          return _chart.__filter();\n        }\n        return _chart.__filter(dc.filters.RangedTwoDimensionalFilter(filter));\n      });\n      _chart.plotData = function () {\n        var symbols = _chart.chartBodyG().selectAll('path.symbol').data(_chart.data());\n        symbols.enter().append('path').attr('class', 'symbol').attr('opacity', 0).attr('fill', _chart.getColor).attr('transform', _locator);\n        symbols.call(renderTitles, _chart.data());\n        symbols.each(function (d, i) {\n          _filtered[i] = !_chart.filter() || _chart.filter().isFiltered([d.key[0], d.key[1]]);\n        });\n        dc.transition(symbols, _chart.transitionDuration(), _chart.transitionDelay()).attr('opacity', function (d, i) {\n          if (!_existenceAccessor(d)) {\n            return _emptyOpacity;\n          } else if (_filtered[i]) {\n            return _nonemptyOpacity;\n          } else {\n            return _chart.excludedOpacity();\n          }\n        }).attr('fill', function (d, i) {\n          if (_emptyColor && !_existenceAccessor(d)) {\n            return _emptyColor;\n          } else if (_chart.excludedColor() && !_filtered[i]) {\n            return _chart.excludedColor();\n          } else {\n            return _chart.getColor(d);\n          }\n        }).attr('transform', _locator).attr('d', _symbol);\n        dc.transition(symbols.exit(), _chart.transitionDuration(), _chart.transitionDelay()).attr('opacity', 0).remove();\n      };\n      function renderTitles(symbol, d) {\n        if (_chart.renderTitle()) {\n          symbol.selectAll('title').remove();\n          symbol.append('title').text(function (d) {\n            return _chart.title()(d);\n          });\n        }\n      }\n\n      /**\n       * Get or set the existence accessor.  If a point exists, it is drawn with\n       * {@link dc.scatterPlot#symbolSize symbolSize} radius and\n       * opacity 1; if it does not exist, it is drawn with\n       * {@link dc.scatterPlot#emptySize emptySize} radius and opacity 0. By default,\n       * the existence accessor checks if the reduced value is truthy.\n       * @method existenceAccessor\n       * @memberof dc.scatterPlot\n       * @instance\n       * @see {@link dc.scatterPlot#symbolSize symbolSize}\n       * @see {@link dc.scatterPlot#emptySize emptySize}\n       * @example\n       * // default accessor\n       * chart.existenceAccessor(function (d) { return d.value; });\n       * @param {Function} [accessor]\n       * @returns {Function|dc.scatterPlot}\n       */\n      _chart.existenceAccessor = function (accessor) {\n        if (!arguments.length) {\n          return _existenceAccessor;\n        }\n        _existenceAccessor = accessor;\n        return this;\n      };\n\n      /**\n       * Get or set the symbol type used for each point. By default the symbol is a circle.\n       * Type can be a constant or an accessor.\n       * @method symbol\n       * @memberof dc.scatterPlot\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_type d3.svg.symbol.type}\n       * @example\n       * // Circle type\n       * chart.symbol('circle');\n       * // Square type\n       * chart.symbol('square');\n       * @param {String|Function} [type='circle']\n       * @returns {String|Function|dc.scatterPlot}\n       */\n      _chart.symbol = function (type) {\n        if (!arguments.length) {\n          return _symbol.type();\n        }\n        _symbol.type(type);\n        return _chart;\n      };\n\n      /**\n       * Get or set the symbol generator. By default `dc.scatterPlot` will use\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol d3.svg.symbol()}\n       * to generate symbols. `dc.scatterPlot` will set the\n       * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size size accessor}\n       * on the symbol generator.\n       * @method customSymbol\n       * @memberof dc.scatterPlot\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol d3.svg.symbol}\n       * @see {@link https://stackoverflow.com/questions/25332120/create-additional-d3-js-symbols Create additional D3.js symbols}\n       * @param {String|Function} [customSymbol=d3.svg.symbol()]\n       * @returns {String|Function|dc.scatterPlot}\n       */\n      _chart.customSymbol = function (customSymbol) {\n        if (!arguments.length) {\n          return _symbol;\n        }\n        _symbol = customSymbol;\n        _symbol.size(elementSize);\n        return _chart;\n      };\n\n      /**\n       * Set or get radius for symbols.\n       * @method symbolSize\n       * @memberof dc.scatterPlot\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n       * @param {Number} [symbolSize=3]\n       * @returns {Number|dc.scatterPlot}\n       */\n      _chart.symbolSize = function (symbolSize) {\n        if (!arguments.length) {\n          return _symbolSize;\n        }\n        _symbolSize = symbolSize;\n        return _chart;\n      };\n\n      /**\n       * Set or get radius for highlighted symbols.\n       * @method highlightedSize\n       * @memberof dc.scatterPlot\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n       * @param {Number} [highlightedSize=5]\n       * @returns {Number|dc.scatterPlot}\n       */\n      _chart.highlightedSize = function (highlightedSize) {\n        if (!arguments.length) {\n          return _highlightedSize;\n        }\n        _highlightedSize = highlightedSize;\n        return _chart;\n      };\n\n      /**\n       * Set or get size for symbols excluded from this chart's filter. If null, no\n       * special size is applied for symbols based on their filter status.\n       * @method excludedSize\n       * @memberof dc.scatterPlot\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n       * @param {Number} [excludedSize=null]\n       * @returns {Number|dc.scatterPlot}\n       */\n      _chart.excludedSize = function (excludedSize) {\n        if (!arguments.length) {\n          return _excludedSize;\n        }\n        _excludedSize = excludedSize;\n        return _chart;\n      };\n\n      /**\n       * Set or get color for symbols excluded from this chart's filter. If null, no\n       * special color is applied for symbols based on their filter status.\n       * @method excludedColor\n       * @memberof dc.scatterPlot\n       * @instance\n       * @param {Number} [excludedColor=null]\n       * @returns {Number|dc.scatterPlot}\n       */\n      _chart.excludedColor = function (excludedColor) {\n        if (!arguments.length) {\n          return _excludedColor;\n        }\n        _excludedColor = excludedColor;\n        return _chart;\n      };\n\n      /**\n       * Set or get opacity for symbols excluded from this chart's filter.\n       * @method excludedOpacity\n       * @memberof dc.scatterPlot\n       * @instance\n       * @param {Number} [excludedOpacity=1.0]\n       * @returns {Number|dc.scatterPlot}\n       */\n      _chart.excludedOpacity = function (excludedOpacity) {\n        if (!arguments.length) {\n          return _excludedOpacity;\n        }\n        _excludedOpacity = excludedOpacity;\n        return _chart;\n      };\n\n      /**\n       * Set or get radius for symbols when the group is empty.\n       * @method emptySize\n       * @memberof dc.scatterPlot\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n       * @param {Number} [emptySize=0]\n       * @returns {Number|dc.scatterPlot}\n       */\n      _chart.hiddenSize = _chart.emptySize = function (emptySize) {\n        if (!arguments.length) {\n          return _emptySize;\n        }\n        _emptySize = emptySize;\n        return _chart;\n      };\n\n      /**\n       * Set or get color for symbols when the group is empty. If null, just use the\n       * {@link dc.colorMixin#colors colorMixin.colors} color scale zero value.\n       * @name emptyColor\n       * @memberof dc.scatterPlot\n       * @instance\n       * @param {String} [emptyColor=null]\n       * @return {String}\n       * @return {dc.scatterPlot}/\n       */\n      _chart.emptyColor = function (emptyColor) {\n        if (!arguments.length) {\n          return _emptyColor;\n        }\n        _emptyColor = emptyColor;\n        return _chart;\n      };\n\n      /**\n       * Set or get opacity for symbols when the group is empty.\n       * @name emptyOpacity\n       * @memberof dc.scatterPlot\n       * @instance\n       * @param {Number} [emptyOpacity=0]\n       * @return {Number}\n       * @return {dc.scatterPlot}\n       */\n      _chart.emptyOpacity = function (emptyOpacity) {\n        if (!arguments.length) {\n          return _emptyOpacity;\n        }\n        _emptyOpacity = emptyOpacity;\n        return _chart;\n      };\n\n      /**\n       * Set or get opacity for symbols when the group is not empty.\n       * @name nonemptyOpacity\n       * @memberof dc.scatterPlot\n       * @instance\n       * @param {Number} [nonemptyOpacity=1]\n       * @return {Number}\n       * @return {dc.scatterPlot}\n       */\n      _chart.nonemptyOpacity = function (nonemptyOpacity) {\n        if (!arguments.length) {\n          return _emptyOpacity;\n        }\n        _nonemptyOpacity = nonemptyOpacity;\n        return _chart;\n      };\n      _chart.legendables = function () {\n        return [{\n          chart: _chart,\n          name: _chart._groupName,\n          color: _chart.getColor()\n        }];\n      };\n      _chart.legendHighlight = function (d) {\n        resizeSymbolsWhere(function (symbol) {\n          return symbol.attr('fill') === d.color;\n        }, _highlightedSize);\n        _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n          return d3.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', true);\n      };\n      _chart.legendReset = function (d) {\n        resizeSymbolsWhere(function (symbol) {\n          return symbol.attr('fill') === d.color;\n        }, _symbolSize);\n        _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n          return d3.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', false);\n      };\n      function resizeSymbolsWhere(condition, size) {\n        var symbols = _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n          return condition(d3.select(this));\n        });\n        var oldSize = _symbol.size();\n        _symbol.size(Math.pow(size, 2));\n        dc.transition(symbols, _chart.transitionDuration(), _chart.transitionDelay()).attr('d', _symbol);\n        _symbol.size(oldSize);\n      }\n      _chart.setHandlePaths = function () {\n        // no handle paths for poly-brushes\n      };\n      _chart.extendBrush = function () {\n        var extent = _chart.brush().extent();\n        if (_chart.round()) {\n          extent[0] = extent[0].map(_chart.round());\n          extent[1] = extent[1].map(_chart.round());\n          _chart.g().select('.brush').call(_chart.brush().extent(extent));\n        }\n        return extent;\n      };\n      _chart.brushIsEmpty = function (extent) {\n        return _chart.brush().empty() || !extent || extent[0][0] >= extent[1][0] || extent[0][1] >= extent[1][1];\n      };\n      _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n        _chart.redrawBrush(_chart.g());\n        if (_chart.brushIsEmpty(extent)) {\n          dc.events.trigger(function () {\n            _chart.filter(null);\n            _chart.redrawGroup();\n          });\n        } else {\n          var ranged2DFilter = dc.filters.RangedTwoDimensionalFilter(extent);\n          dc.events.trigger(function () {\n            _chart.filter(null);\n            _chart.filter(ranged2DFilter);\n            _chart.redrawGroup();\n          }, dc.constants.EVENT_DELAY);\n        }\n      };\n      _chart.setBrushY = function (gBrush) {\n        gBrush.call(_chart.brush().y(_chart.y()));\n      };\n      return _chart.anchor(parent, chartGroup);\n    };\n\n    /**\n     * A display of a single numeric value.\n     * Unlike other charts, you do not need to set a dimension. Instead a group object must be provided and\n     * a valueAccessor that returns a single value.\n     * @class numberDisplay\n     * @memberof dc\n     * @mixes dc.baseMixin\n     * @example\n     * // create a number display under #chart-container1 element using the default global chart group\n     * var display1 = dc.numberDisplay('#chart-container1');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.numberDisplay}\n     */\n    dc.numberDisplay = function (parent, chartGroup) {\n      var SPAN_CLASS = 'number-display';\n      var _formatNumber = d3.format('.2s');\n      var _chart = dc.baseMixin({});\n      var _html = {\n        one: '',\n        some: '',\n        none: ''\n      };\n      var _lastValue;\n\n      // dimension not required\n      _chart._mandatoryAttributes(['group']);\n\n      // default to ordering by value, to emulate old group.top(1) behavior when multiple groups\n      _chart.ordering(function (kv) {\n        return kv.value;\n      });\n\n      /**\n       * Gets or sets an optional object specifying HTML templates to use depending on the number\n       * displayed.  The text `%number` will be replaced with the current value.\n       * - one: HTML template to use if the number is 1\n       * - zero: HTML template to use if the number is 0\n       * - some: HTML template to use otherwise\n       * @method html\n       * @memberof dc.numberDisplay\n       * @instance\n       * @example\n       * numberWidget.html({\n       *      one:'%number record',\n       *      some:'%number records',\n       *      none:'no records'})\n       * @param {{one:String, some:String, none:String}} [html={one: '', some: '', none: ''}]\n       * @returns {{one:String, some:String, none:String}|dc.numberDisplay}\n       */\n      _chart.html = function (html) {\n        if (!arguments.length) {\n          return _html;\n        }\n        if (html.none) {\n          _html.none = html.none; //if none available\n        } else if (html.one) {\n          _html.none = html.one; //if none not available use one\n        } else if (html.some) {\n          _html.none = html.some; //if none and one not available use some\n        }\n\n        if (html.one) {\n          _html.one = html.one; //if one available\n        } else if (html.some) {\n          _html.one = html.some; //if one not available use some\n        }\n\n        if (html.some) {\n          _html.some = html.some; //if some available\n        } else if (html.one) {\n          _html.some = html.one; //if some not available use one\n        }\n\n        return _chart;\n      };\n\n      /**\n       * Calculate and return the underlying value of the display.\n       * @method value\n       * @memberof dc.numberDisplay\n       * @instance\n       * @returns {Number}\n       */\n      _chart.value = function () {\n        return _chart.data();\n      };\n      function maxBin(all) {\n        if (!all.length) {\n          return null;\n        }\n        var sorted = _chart._computeOrderedGroups(all);\n        return sorted[sorted.length - 1];\n      }\n      _chart.data(function (group) {\n        var valObj = group.value ? group.value() : maxBin(group.all());\n        return _chart.valueAccessor()(valObj);\n      });\n      _chart.transitionDuration(250); // good default\n      _chart.transitionDelay(0);\n      _chart._doRender = function () {\n        var newValue = _chart.value(),\n          span = _chart.selectAll('.' + SPAN_CLASS);\n        if (span.empty()) {\n          span = span.data([0]).enter().append('span').attr('class', SPAN_CLASS);\n        }\n        span.transition().duration(_chart.transitionDuration()).delay(_chart.transitionDelay()).ease('quad-out-in').tween('text', function () {\n          // [XA] don't try and interpolate from Infinity, else this breaks.\n          var interpStart = isFinite(_lastValue) ? _lastValue : 0;\n          var interp = d3.interpolateNumber(interpStart || 0, newValue);\n          _lastValue = newValue;\n          return function (t) {\n            var html = null,\n              num = _chart.formatNumber()(interp(t));\n            if (newValue === 0 && _html.none !== '') {\n              html = _html.none;\n            } else if (newValue === 1 && _html.one !== '') {\n              html = _html.one;\n            } else if (_html.some !== '') {\n              html = _html.some;\n            }\n            this.innerHTML = html ? html.replace('%number', num) : num;\n          };\n        });\n      };\n      _chart._doRedraw = function () {\n        return _chart._doRender();\n      };\n\n      /**\n       * Get or set a function to format the value for the display.\n       * @method formatNumber\n       * @memberof dc.numberDisplay\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md d3.format}\n       * @param {Function} [formatter=d3.format('.2s')]\n       * @returns {Function|dc.numberDisplay}\n       */\n      _chart.formatNumber = function (formatter) {\n        if (!arguments.length) {\n          return _formatNumber;\n        }\n        _formatNumber = formatter;\n        return _chart;\n      };\n      return _chart.anchor(parent, chartGroup);\n    };\n\n    /**\n     * A heat map is matrix that represents the values of two dimensions of data using colors.\n     * @class heatMap\n     * @memberof dc\n     * @mixes dc.colorMixin\n     * @mixes dc.marginMixin\n     * @mixes dc.baseMixin\n     * @example\n     * // create a heat map under #chart-container1 element using the default global chart group\n     * var heatMap1 = dc.heatMap('#chart-container1');\n     * // create a heat map under #chart-container2 element using chart group A\n     * var heatMap2 = dc.heatMap('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.heatMap}\n     */\n    dc.heatMap = function (parent, chartGroup) {\n      var DEFAULT_BORDER_RADIUS = 6.75;\n      var _chartBody;\n      var _cols;\n      var _rows;\n      var _colOrdering = d3.ascending;\n      var _rowOrdering = d3.ascending;\n      var _colScale = d3.scale.ordinal();\n      var _rowScale = d3.scale.ordinal();\n      var _xBorderRadius = DEFAULT_BORDER_RADIUS;\n      var _yBorderRadius = DEFAULT_BORDER_RADIUS;\n      var _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin({})));\n      _chart._mandatoryAttributes(['group']);\n      _chart.title(_chart.colorAccessor());\n      var _colsLabel = function (d) {\n        return d;\n      };\n      var _rowsLabel = function (d) {\n        return d;\n      };\n\n      /**\n       * Set or get the column label function. The chart class uses this function to render\n       * column labels on the X axis. It is passed the column name.\n       * @method colsLabel\n       * @memberof dc.heatMap\n       * @instance\n       * @example\n       * // the default label function just returns the name\n       * chart.colsLabel(function(d) { return d; });\n       * @param  {Function} [labelFunction=function(d) { return d; }]\n       * @returns {Function|dc.heatMap}\n       */\n      _chart.colsLabel = function (labelFunction) {\n        if (!arguments.length) {\n          return _colsLabel;\n        }\n        _colsLabel = labelFunction;\n        return _chart;\n      };\n\n      /**\n       * Set or get the row label function. The chart class uses this function to render\n       * row labels on the Y axis. It is passed the row name.\n       * @method rowsLabel\n       * @memberof dc.heatMap\n       * @instance\n       * @example\n       * // the default label function just returns the name\n       * chart.rowsLabel(function(d) { return d; });\n       * @param  {Function} [labelFunction=function(d) { return d; }]\n       * @returns {Function|dc.heatMap}\n       */\n      _chart.rowsLabel = function (labelFunction) {\n        if (!arguments.length) {\n          return _rowsLabel;\n        }\n        _rowsLabel = labelFunction;\n        return _chart;\n      };\n      var _xAxisOnClick = function (d) {\n        filterAxis(0, d);\n      };\n      var _yAxisOnClick = function (d) {\n        filterAxis(1, d);\n      };\n      var _boxOnClick = function (d) {\n        var filter = d.key;\n        dc.events.trigger(function () {\n          _chart.filter(filter);\n          _chart.redrawGroup();\n        });\n      };\n      function filterAxis(axis, value) {\n        var cellsOnAxis = _chart.selectAll('.box-group').filter(function (d) {\n          return d.key[axis] === value;\n        });\n        var unfilteredCellsOnAxis = cellsOnAxis.filter(function (d) {\n          return !_chart.hasFilter(d.key);\n        });\n        dc.events.trigger(function () {\n          var selection = unfilteredCellsOnAxis.empty() ? cellsOnAxis : unfilteredCellsOnAxis;\n          var filters = selection.data().map(function (kv) {\n            return dc.filters.TwoDimensionalFilter(kv.key);\n          });\n          _chart._filter([filters]);\n          _chart.redrawGroup();\n        });\n      }\n      dc.override(_chart, 'filter', function (filter) {\n        if (!arguments.length) {\n          return _chart._filter();\n        }\n        return _chart._filter(dc.filters.TwoDimensionalFilter(filter));\n      });\n\n      /**\n       * Gets or sets the values used to create the rows of the heatmap, as an array. By default, all\n       * the values will be fetched from the data using the value accessor.\n       * @method rows\n       * @memberof dc.heatMap\n       * @instance\n       * @param  {Array<String|Number>} [rows]\n       * @returns {Array<String|Number>|dc.heatMap}\n       */\n\n      _chart.rows = function (rows) {\n        if (!arguments.length) {\n          return _rows;\n        }\n        _rows = rows;\n        return _chart;\n      };\n\n      /**\n       #### .rowOrdering([orderFunction])\n       Get or set an accessor to order the rows.  Default is d3.ascending.\n       */\n      _chart.rowOrdering = function (_) {\n        if (!arguments.length) {\n          return _rowOrdering;\n        }\n        _rowOrdering = _;\n        return _chart;\n      };\n\n      /**\n       * Gets or sets the keys used to create the columns of the heatmap, as an array. By default, all\n       * the values will be fetched from the data using the key accessor.\n       * @method cols\n       * @memberof dc.heatMap\n       * @instance\n       * @param  {Array<String|Number>} [cols]\n       * @returns {Array<String|Number>|dc.heatMap}\n       */\n      _chart.cols = function (cols) {\n        if (!arguments.length) {\n          return _cols;\n        }\n        _cols = cols;\n        return _chart;\n      };\n\n      /**\n       #### .colOrdering([orderFunction])\n       Get or set an accessor to order the cols.  Default is ascending.\n       */\n      _chart.colOrdering = function (_) {\n        if (!arguments.length) {\n          return _colOrdering;\n        }\n        _colOrdering = _;\n        return _chart;\n      };\n      _chart._doRender = function () {\n        _chart.resetSvg();\n        _chartBody = _chart.svg().append('g').attr('class', 'heatmap').attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n        return _chart._doRedraw();\n      };\n      _chart._doRedraw = function () {\n        var data = _chart.data(),\n          rows = _chart.rows() || data.map(_chart.valueAccessor()),\n          cols = _chart.cols() || data.map(_chart.keyAccessor());\n        if (_rowOrdering) {\n          rows = rows.sort(_rowOrdering);\n        }\n        if (_colOrdering) {\n          cols = cols.sort(_colOrdering);\n        }\n        rows = _rowScale.domain(rows);\n        cols = _colScale.domain(cols);\n        var rowCount = rows.domain().length,\n          colCount = cols.domain().length,\n          boxWidth = Math.floor(_chart.effectiveWidth() / colCount),\n          boxHeight = Math.floor(_chart.effectiveHeight() / rowCount);\n        cols.rangeRoundBands([0, _chart.effectiveWidth()]);\n        rows.rangeRoundBands([_chart.effectiveHeight(), 0]);\n        var boxes = _chartBody.selectAll('g.box-group').data(_chart.data(), function (d, i) {\n          return _chart.keyAccessor()(d, i) + '\\0' + _chart.valueAccessor()(d, i);\n        });\n        var gEnter = boxes.enter().append('g').attr('class', 'box-group');\n        gEnter.append('rect').attr('class', 'heat-box').attr('fill', 'white').on('click', _chart.boxOnClick());\n        if (_chart.renderTitle()) {\n          gEnter.append('title');\n          boxes.select('title').text(_chart.title());\n        }\n        dc.transition(boxes.select('rect'), _chart.transitionDuration(), _chart.transitionDelay()).attr('x', function (d, i) {\n          return cols(_chart.keyAccessor()(d, i));\n        }).attr('y', function (d, i) {\n          return rows(_chart.valueAccessor()(d, i));\n        }).attr('rx', _xBorderRadius).attr('ry', _yBorderRadius).attr('fill', _chart.getColor).attr('width', boxWidth).attr('height', boxHeight);\n        boxes.exit().remove();\n        var gCols = _chartBody.select('g.cols');\n        if (gCols.empty()) {\n          gCols = _chartBody.append('g').attr('class', 'cols axis');\n        }\n        var gColsText = gCols.selectAll('text').data(cols.domain());\n        gColsText.enter().append('text').attr('x', function (d) {\n          return cols(d) + boxWidth / 2;\n        }).style('text-anchor', 'middle').attr('y', _chart.effectiveHeight()).attr('dy', 12).on('click', _chart.xAxisOnClick()).text(_chart.colsLabel());\n        dc.transition(gColsText, _chart.transitionDuration(), _chart.transitionDelay()).text(_chart.colsLabel()).attr('x', function (d) {\n          return cols(d) + boxWidth / 2;\n        }).attr('y', _chart.effectiveHeight());\n        gColsText.exit().remove();\n        var gRows = _chartBody.select('g.rows');\n        if (gRows.empty()) {\n          gRows = _chartBody.append('g').attr('class', 'rows axis');\n        }\n        var gRowsText = gRows.selectAll('text').data(rows.domain());\n        gRowsText.enter().append('text').attr('dy', 6).style('text-anchor', 'end').attr('x', 0).attr('dx', -2).on('click', _chart.yAxisOnClick()).text(_chart.rowsLabel());\n        dc.transition(gRowsText, _chart.transitionDuration(), _chart.transitionDelay()).text(_chart.rowsLabel()).attr('y', function (d) {\n          return rows(d) + boxHeight / 2;\n        });\n        gRowsText.exit().remove();\n        if (_chart.hasFilter()) {\n          _chart.selectAll('g.box-group').each(function (d) {\n            if (_chart.isSelectedNode(d)) {\n              _chart.highlightSelected(this);\n            } else {\n              _chart.fadeDeselected(this);\n            }\n          });\n        } else {\n          _chart.selectAll('g.box-group').each(function () {\n            _chart.resetHighlight(this);\n          });\n        }\n        return _chart;\n      };\n\n      /**\n       * Gets or sets the handler that fires when an individual cell is clicked in the heatmap.\n       * By default, filtering of the cell will be toggled.\n       * @method boxOnClick\n       * @memberof dc.heatMap\n       * @instance\n       * @example\n       * // default box on click handler\n       * chart.boxOnClick(function (d) {\n       *     var filter = d.key;\n       *     dc.events.trigger(function () {\n       *         _chart.filter(filter);\n       *         _chart.redrawGroup();\n       *     });\n       * });\n       * @param  {Function} [handler]\n       * @returns {Function|dc.heatMap}\n       */\n      _chart.boxOnClick = function (handler) {\n        if (!arguments.length) {\n          return _boxOnClick;\n        }\n        _boxOnClick = handler;\n        return _chart;\n      };\n\n      /**\n       * Gets or sets the handler that fires when a column tick is clicked in the x axis.\n       * By default, if any cells in the column are unselected, the whole column will be selected,\n       * otherwise the whole column will be unselected.\n       * @method xAxisOnClick\n       * @memberof dc.heatMap\n       * @instance\n       * @param  {Function} [handler]\n       * @returns {Function|dc.heatMap}\n       */\n      _chart.xAxisOnClick = function (handler) {\n        if (!arguments.length) {\n          return _xAxisOnClick;\n        }\n        _xAxisOnClick = handler;\n        return _chart;\n      };\n\n      /**\n       * Gets or sets the handler that fires when a row tick is clicked in the y axis.\n       * By default, if any cells in the row are unselected, the whole row will be selected,\n       * otherwise the whole row will be unselected.\n       * @method yAxisOnClick\n       * @memberof dc.heatMap\n       * @instance\n       * @param  {Function} [handler]\n       * @returns {Function|dc.heatMap}\n       */\n      _chart.yAxisOnClick = function (handler) {\n        if (!arguments.length) {\n          return _yAxisOnClick;\n        }\n        _yAxisOnClick = handler;\n        return _chart;\n      };\n\n      /**\n       * Gets or sets the X border radius.  Set to 0 to get full rectangles.\n       * @method xBorderRadius\n       * @memberof dc.heatMap\n       * @instance\n       * @param  {Number} [xBorderRadius=6.75]\n       * @returns {Number|dc.heatMap}\n       */\n      _chart.xBorderRadius = function (xBorderRadius) {\n        if (!arguments.length) {\n          return _xBorderRadius;\n        }\n        _xBorderRadius = xBorderRadius;\n        return _chart;\n      };\n\n      /**\n       * Gets or sets the Y border radius.  Set to 0 to get full rectangles.\n       * @method yBorderRadius\n       * @memberof dc.heatMap\n       * @instance\n       * @param  {Number} [yBorderRadius=6.75]\n       * @returns {Number|dc.heatMap}\n       */\n      _chart.yBorderRadius = function (yBorderRadius) {\n        if (!arguments.length) {\n          return _yBorderRadius;\n        }\n        _yBorderRadius = yBorderRadius;\n        return _chart;\n      };\n      _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(d.key);\n      };\n      return _chart.anchor(parent, chartGroup);\n    };\n\n    // https://github.com/d3/d3-plugins/blob/master/box/box.js\n    // * Original source March 22, 2013\n    // * Enhancements integrated on May 13, 2018 for dc.js library only\n\n    // https://github.com/d3/d3-plugins/blob/master/LICENSE\n    // Copyright (c) 2012-2015, Michael Bostock\n    // All rights reserved.\n\n    // Redistribution and use in source and binary forms, with or without\n    // modification, are permitted provided that the following conditions are met:\n    //\n    // * Redistributions of source code must retain the above copyright notice, this\n    //   list of conditions and the following disclaimer.\n    //\n    // * Redistributions in binary form must reproduce the above copyright notice,\n    //   this list of conditions and the following disclaimer in the documentation\n    //   and/or other materials provided with the distribution.\n    //\n    // * The name Michael Bostock may not be used to endorse or promote products\n    //   derived from this software without specific prior written permission.\n    //\n    // THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n    // AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n    // IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n    // DISCLAIMED. IN NO EVENT SHALL MICHAEL BOSTOCK BE LIABLE FOR ANY DIRECT,\n    // INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n    // BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n    // DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n    // OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n    // NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n    // EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n    (function () {\n      // Inspired by http://informationandvisualization.de/blog/box-plot\n      d3.box = function () {\n        var width = 1,\n          height = 1,\n          duration = 0,\n          delay = 0,\n          domain = null,\n          value = Number,\n          whiskers = boxWhiskers,\n          quartiles = boxQuartiles,\n          tickFormat = null,\n          // Enhanced attributes\n          renderDataPoints = false,\n          dataRadius = 3,\n          dataOpacity = 0.3,\n          dataWidthPortion = 0.8,\n          renderTitle = false,\n          showOutliers = true,\n          boldOutlier = false;\n\n        // For each small multiple…\n        function box(g) {\n          /* jshint -W074 */\n          g.each(function (d, i) {\n            d = d.map(value).sort(d3.ascending);\n            var g = d3.select(this),\n              n = d.length,\n              min,\n              max;\n\n            // Leave if there are no items.\n            if (n === 0) {\n              return;\n            }\n\n            // Compute quartiles. Must return exactly 3 elements.\n            var quartileData = d.quartiles = quartiles(d);\n\n            // Compute whiskers. Must return exactly 2 elements, or null.\n            var whiskerIndices = whiskers && whiskers.call(this, d, i),\n              whiskerData = whiskerIndices && whiskerIndices.map(function (i) {\n                return d[i];\n              });\n\n            // Compute outliers. If no whiskers are specified, all data are 'outliers'.\n            // We compute the outliers as indices, so that we can join across transitions!\n            var outlierIndices = whiskerIndices ? d3.range(0, whiskerIndices[0]).concat(d3.range(whiskerIndices[1] + 1, n)) : d3.range(n);\n\n            // Determine the maximum value based on if outliers are shown\n            if (showOutliers) {\n              min = d[0];\n              max = d[n - 1];\n            } else {\n              min = d[whiskerIndices[0]];\n              max = d[whiskerIndices[1]];\n            }\n            var pointIndices = d3.range(whiskerIndices[0], whiskerIndices[1] + 1);\n\n            // Compute the new x-scale.\n            var x1 = d3.scale.linear().domain(domain && domain.call(this, d, i) || [min, max]).range([height, 0]);\n\n            // Retrieve the old x-scale, if this is an update.\n            var x0 = this.__chart__ || d3.scale.linear().domain([0, Infinity]).range(x1.range());\n\n            // Stash the new scale.\n            this.__chart__ = x1;\n\n            // Note: the box, median, and box tick elements are fixed in number,\n            // so we only have to handle enter and update. In contrast, the outliers\n            // and other elements are variable, so we need to exit them! Variable\n            // elements also fade in and out.\n\n            // Update center line: the vertical line spanning the whiskers.\n            var center = g.selectAll('line.center').data(whiskerData ? [whiskerData] : []);\n            center.enter().insert('line', 'rect').attr('class', 'center').attr('x1', width / 2).attr('y1', function (d) {\n              return x0(d[0]);\n            }).attr('x2', width / 2).attr('y2', function (d) {\n              return x0(d[1]);\n            }).style('opacity', 1e-6).transition().duration(duration).delay(delay).style('opacity', 1).attr('y1', function (d) {\n              return x1(d[0]);\n            }).attr('y2', function (d) {\n              return x1(d[1]);\n            });\n            center.transition().duration(duration).delay(delay).style('opacity', 1).attr('x1', width / 2).attr('x2', width / 2).attr('y1', function (d) {\n              return x1(d[0]);\n            }).attr('y2', function (d) {\n              return x1(d[1]);\n            });\n            center.exit().transition().duration(duration).delay(delay).style('opacity', 1e-6).attr('y1', function (d) {\n              return x1(d[0]);\n            }).attr('y2', function (d) {\n              return x1(d[1]);\n            }).remove();\n\n            // Update innerquartile box.\n            var box = g.selectAll('rect.box').data([quartileData]);\n            box.enter().append('rect').attr('class', 'box').attr('x', 0).attr('y', function (d) {\n              return x0(d[2]);\n            }).attr('width', width).attr('height', function (d) {\n              return x0(d[0]) - x0(d[2]);\n            }).style('fill-opacity', renderDataPoints ? 0.1 : 1).transition().duration(duration).delay(delay).attr('y', function (d) {\n              return x1(d[2]);\n            }).attr('height', function (d) {\n              return x1(d[0]) - x1(d[2]);\n            });\n            box.transition().duration(duration).delay(delay).attr('width', width).attr('y', function (d) {\n              return x1(d[2]);\n            }).attr('height', function (d) {\n              return x1(d[0]) - x1(d[2]);\n            });\n\n            // Update median line.\n            var medianLine = g.selectAll('line.median').data([quartileData[1]]);\n            medianLine.enter().append('line').attr('class', 'median').attr('x1', 0).attr('y1', x0).attr('x2', width).attr('y2', x0).transition().duration(duration).delay(delay).attr('y1', x1).attr('y2', x1);\n            medianLine.transition().duration(duration).delay(delay).attr('x1', 0).attr('x2', width).attr('y1', x1).attr('y2', x1);\n\n            // Update whiskers.\n            var whisker = g.selectAll('line.whisker').data(whiskerData || []);\n            whisker.enter().insert('line', 'circle, text').attr('class', 'whisker').attr('x1', 0).attr('y1', x0).attr('x2', width).attr('y2', x0).style('opacity', 1e-6).transition().duration(duration).delay(delay).attr('y1', x1).attr('y2', x1).style('opacity', 1);\n            whisker.transition().duration(duration).delay(delay).attr('x1', 0).attr('x2', width).attr('y1', x1).attr('y2', x1).style('opacity', 1);\n            whisker.exit().transition().duration(duration).delay(delay).attr('y1', x1).attr('y2', x1).style('opacity', 1e-6).remove();\n\n            // Update outliers.\n            if (showOutliers) {\n              var outlierClass = boldOutlier ? 'outlierBold' : 'outlier';\n              var outlierSize = boldOutlier ? 3 : 5;\n              var outlierX = boldOutlier ? function () {\n                return Math.floor(Math.random() * (width * dataWidthPortion) + 1 + (width - width * dataWidthPortion) / 2);\n              } : function () {\n                return width / 2;\n              };\n              var outlier = g.selectAll('circle.' + outlierClass).data(outlierIndices, Number);\n              outlier.enter().insert('circle', 'text').attr('class', outlierClass).attr('r', outlierSize).attr('cx', outlierX).attr('cy', function (i) {\n                return x0(d[i]);\n              }).style('opacity', 1e-6).transition().duration(duration).delay(delay).attr('cy', function (i) {\n                return x1(d[i]);\n              }).style('opacity', 0.6);\n              if (renderTitle) {\n                outlier.selectAll('title').remove();\n                outlier.append('title').text(function (i) {\n                  return d[i];\n                });\n              }\n              outlier.transition().duration(duration).delay(delay).attr('cx', outlierX).attr('cy', function (i) {\n                return x1(d[i]);\n              }).style('opacity', 0.6);\n              outlier.exit().transition().duration(duration).delay(delay).attr('cy', 0) //function (i) { return x1(d[i]); })\n              .style('opacity', 1e-6).remove();\n            }\n\n            // Update Values\n            if (renderDataPoints) {\n              var point = g.selectAll('circle.data').data(pointIndices);\n              point.enter().insert('circle', 'text').attr('class', 'data').attr('r', dataRadius).attr('cx', function () {\n                return Math.floor(Math.random() * (width * dataWidthPortion) + 1 + (width - width * dataWidthPortion) / 2);\n              }).attr('cy', function (i) {\n                return x0(d[i]);\n              }).style('opacity', 1e-6).transition().duration(duration).delay(delay).attr('cy', function (i) {\n                return x1(d[i]);\n              }).style('opacity', dataOpacity);\n              if (renderTitle) {\n                point.selectAll('title').remove();\n                point.append('title').text(function (i) {\n                  return d[i];\n                });\n              }\n              point.transition().duration(duration).delay(delay).attr('cx', function () {\n                return Math.floor(Math.random() * (width * dataWidthPortion) + 1 + (width - width * dataWidthPortion) / 2);\n              }).attr('cy', function (i) {\n                return x1(d[i]);\n              }).style('opacity', dataOpacity);\n              point.exit().transition().duration(duration).delay(delay).attr('cy', 0).style('opacity', 1e-6).remove();\n            }\n\n            // Compute the tick format.\n            var format = tickFormat || x1.tickFormat(8);\n\n            // Update box ticks.\n            var boxTick = g.selectAll('text.box').data(quartileData);\n            boxTick.enter().append('text').attr('class', 'box').attr('dy', '.3em').attr('dx', function (d, i) {\n              return i & 1 ? 6 : -6;\n            }).attr('x', function (d, i) {\n              return i & 1 ? width : 0;\n            }).attr('y', x0).attr('text-anchor', function (d, i) {\n              return i & 1 ? 'start' : 'end';\n            }).text(format).transition().duration(duration).delay(delay).attr('y', x1);\n            boxTick.transition().duration(duration).delay(delay).text(format).attr('x', function (d, i) {\n              return i & 1 ? width : 0;\n            }).attr('y', x1);\n\n            // Update whisker ticks. These are handled separately from the box\n            // ticks because they may or may not exist, and we want don't want\n            // to join box ticks pre-transition with whisker ticks post-.\n            var whiskerTick = g.selectAll('text.whisker').data(whiskerData || []);\n            whiskerTick.enter().append('text').attr('class', 'whisker').attr('dy', '.3em').attr('dx', 6).attr('x', width).attr('y', x0).text(format).style('opacity', 1e-6).transition().duration(duration).delay(delay).attr('y', x1).style('opacity', 1);\n            whiskerTick.transition().duration(duration).delay(delay).text(format).attr('x', width).attr('y', x1).style('opacity', 1);\n            whiskerTick.exit().transition().duration(duration).delay(delay).attr('y', x1).style('opacity', 1e-6).remove();\n\n            // Remove temporary quartiles element from within data array.\n            delete d.quartiles;\n          });\n          /* jshint +W074 */\n          d3.timer.flush();\n        }\n        box.width = function (x) {\n          if (!arguments.length) {\n            return width;\n          }\n          width = x;\n          return box;\n        };\n        box.height = function (x) {\n          if (!arguments.length) {\n            return height;\n          }\n          height = x;\n          return box;\n        };\n        box.tickFormat = function (x) {\n          if (!arguments.length) {\n            return tickFormat;\n          }\n          tickFormat = x;\n          return box;\n        };\n        box.showOutliers = function (x) {\n          if (!arguments.length) {\n            return showOutliers;\n          }\n          showOutliers = x;\n          return box;\n        };\n        box.boldOutlier = function (x) {\n          if (!arguments.length) {\n            return boldOutlier;\n          }\n          boldOutlier = x;\n          return box;\n        };\n        box.renderDataPoints = function (x) {\n          if (!arguments.length) {\n            return renderDataPoints;\n          }\n          renderDataPoints = x;\n          return box;\n        };\n        box.renderTitle = function (x) {\n          if (!arguments.length) {\n            return renderTitle;\n          }\n          renderTitle = x;\n          return box;\n        };\n        box.dataOpacity = function (x) {\n          if (!arguments.length) {\n            return dataOpacity;\n          }\n          dataOpacity = x;\n          return box;\n        };\n        box.dataWidthPortion = function (x) {\n          if (!arguments.length) {\n            return dataWidthPortion;\n          }\n          dataWidthPortion = x;\n          return box;\n        };\n        box.duration = function (x) {\n          if (!arguments.length) {\n            return duration;\n          }\n          duration = x;\n          return box;\n        };\n        box.domain = function (x) {\n          if (!arguments.length) {\n            return domain;\n          }\n          domain = x === null ? x : d3.functor(x);\n          return box;\n        };\n        box.value = function (x) {\n          if (!arguments.length) {\n            return value;\n          }\n          value = x;\n          return box;\n        };\n        box.whiskers = function (x) {\n          if (!arguments.length) {\n            return whiskers;\n          }\n          whiskers = x;\n          return box;\n        };\n        box.quartiles = function (x) {\n          if (!arguments.length) {\n            return quartiles;\n          }\n          quartiles = x;\n          return box;\n        };\n        return box;\n      };\n      function boxWhiskers(d) {\n        return [0, d.length - 1];\n      }\n      function boxQuartiles(d) {\n        return [d3.quantile(d, 0.25), d3.quantile(d, 0.5), d3.quantile(d, 0.75)];\n      }\n    })();\n\n    /**\n     * A box plot is a chart that depicts numerical data via their quartile ranges.\n     *\n     * Examples:\n     * - {@link http://dc-js.github.io/dc.js/examples/box-plot-time.html Box plot time example}\n     * - {@link http://dc-js.github.io/dc.js/examples/box-plot.html Box plot example}\n     * @class boxPlot\n     * @memberof dc\n     * @mixes dc.coordinateGridMixin\n     * @example\n     * // create a box plot under #chart-container1 element using the default global chart group\n     * var boxPlot1 = dc.boxPlot('#chart-container1');\n     * // create a box plot under #chart-container2 element using chart group A\n     * var boxPlot2 = dc.boxPlot('#chart-container2', 'chartGroupA');\n     * @param {String|node|d3.selection} parent - Any valid\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n     * Interaction with a chart will only trigger events and redraws within the chart's group.\n     * @returns {dc.boxPlot}\n     */\n    dc.boxPlot = function (parent, chartGroup) {\n      var _chart = dc.coordinateGridMixin({});\n\n      // Returns a function to compute the interquartile range.\n      function DEFAULT_WHISKERS_IQR(k) {\n        return function (d) {\n          var q1 = d.quartiles[0],\n            q3 = d.quartiles[2],\n            iqr = (q3 - q1) * k,\n            i = -1,\n            j = d.length;\n          do {\n            ++i;\n          } while (d[i] < q1 - iqr);\n          do {\n            --j;\n          } while (d[j] > q3 + iqr);\n          return [i, j];\n        };\n      }\n      var _whiskerIqrFactor = 1.5;\n      var _whiskersIqr = DEFAULT_WHISKERS_IQR;\n      var _whiskers = _whiskersIqr(_whiskerIqrFactor);\n      var _box = d3.box();\n      var _tickFormat = null;\n      var _renderDataPoints = false;\n      var _dataOpacity = 0.3;\n      var _dataWidthPortion = 0.8;\n      var _showOutliers = true;\n      var _boldOutlier = false;\n\n      // Used in yAxisMin and yAxisMax to add padding in pixel coordinates\n      // so the min and max data points/whiskers are within the chart\n      var _yRangePadding = 8;\n      var _boxWidth = function (innerChartWidth, xUnits) {\n        if (_chart.isOrdinal()) {\n          return _chart.x().rangeBand();\n        } else {\n          return innerChartWidth / (1 + _chart.boxPadding()) / xUnits;\n        }\n      };\n\n      // default to ordinal\n      _chart.x(d3.scale.ordinal());\n      _chart.xUnits(dc.units.ordinal);\n\n      // valueAccessor should return an array of values that can be coerced into numbers\n      // or if data is overloaded for a static array of arrays, it should be `Number`.\n      // Empty arrays are not included.\n      _chart.data(function (group) {\n        return group.all().map(function (d) {\n          d.map = function (accessor) {\n            return accessor.call(d, d);\n          };\n          return d;\n        }).filter(function (d) {\n          var values = _chart.valueAccessor()(d);\n          return values.length !== 0;\n        });\n      });\n\n      /**\n       * Get or set the spacing between boxes as a fraction of box size. Valid values are within 0-1.\n       * See the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3 docs}\n       * for a visual description of how the padding is applied.\n       * @method boxPadding\n       * @memberof dc.boxPlot\n       * @instance\n       * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3.scale.ordinal.rangeBands}\n       * @param {Number} [padding=0.8]\n       * @returns {Number|dc.boxPlot}\n       */\n      _chart.boxPadding = _chart._rangeBandPadding;\n      _chart.boxPadding(0.8);\n\n      /**\n       * Get or set the outer padding on an ordinal box chart. This setting has no effect on non-ordinal charts\n       * or on charts with a custom {@link dc.boxPlot#boxWidth .boxWidth}. Will pad the width by\n       * `padding * barWidth` on each side of the chart.\n       * @method outerPadding\n       * @memberof dc.boxPlot\n       * @instance\n       * @param {Number} [padding=0.5]\n       * @returns {Number|dc.boxPlot}\n       */\n      _chart.outerPadding = _chart._outerRangeBandPadding;\n      _chart.outerPadding(0.5);\n\n      /**\n       * Get or set the numerical width of the boxplot box. The width may also be a function taking as\n       * parameters the chart width excluding the right and left margins, as well as the number of x\n       * units.\n       * @example\n       * // Using numerical parameter\n       * chart.boxWidth(10);\n       * // Using function\n       * chart.boxWidth((innerChartWidth, xUnits) { ... });\n       * @method boxWidth\n       * @memberof dc.boxPlot\n       * @instance\n       * @param {Number|Function} [boxWidth=0.5]\n       * @returns {Number|Function|dc.boxPlot}\n       */\n      _chart.boxWidth = function (boxWidth) {\n        if (!arguments.length) {\n          return _boxWidth;\n        }\n        _boxWidth = d3.functor(boxWidth);\n        return _chart;\n      };\n      var boxTransform = function (d, i) {\n        var xOffset = _chart.x()(_chart.keyAccessor()(d, i));\n        return 'translate(' + xOffset + ', 0)';\n      };\n      _chart._preprocessData = function () {\n        if (_chart.elasticX()) {\n          _chart.x().domain([]);\n        }\n      };\n      _chart.plotData = function () {\n        var _calculatedBoxWidth = _boxWidth(_chart.effectiveWidth(), _chart.xUnitCount());\n        _box.whiskers(_whiskers).width(_calculatedBoxWidth).height(_chart.effectiveHeight()).value(_chart.valueAccessor()).domain(_chart.y().domain()).duration(_chart.transitionDuration()).tickFormat(_tickFormat).renderDataPoints(_renderDataPoints).dataOpacity(_dataOpacity).dataWidthPortion(_dataWidthPortion).renderTitle(_chart.renderTitle()).showOutliers(_showOutliers).boldOutlier(_boldOutlier);\n        var boxesG = _chart.chartBodyG().selectAll('g.box').data(_chart.data(), _chart.keyAccessor());\n        renderBoxes(boxesG);\n        updateBoxes(boxesG);\n        removeBoxes(boxesG);\n        _chart.fadeDeselectedArea();\n      };\n      function renderBoxes(boxesG) {\n        var boxesGEnter = boxesG.enter().append('g');\n        boxesGEnter.attr('class', 'box').attr('transform', boxTransform).call(_box).on('click', function (d) {\n          _chart.filter(_chart.keyAccessor()(d));\n          _chart.redrawGroup();\n        });\n      }\n      function updateBoxes(boxesG) {\n        dc.transition(boxesG, _chart.transitionDuration(), _chart.transitionDelay()).attr('transform', boxTransform).call(_box).each(function (d) {\n          var color = _chart.getColor(d, 0);\n          d3.select(this).select('rect.box').attr('fill', color);\n          d3.select(this).selectAll('circle.data').attr('fill', color);\n        });\n      }\n      function removeBoxes(boxesG) {\n        boxesG.exit().remove().call(_box);\n      }\n      function minDataValue() {\n        return d3.min(_chart.data(), function (e) {\n          return d3.min(_chart.valueAccessor()(e));\n        });\n      }\n      function maxDataValue() {\n        return d3.max(_chart.data(), function (e) {\n          return d3.max(_chart.valueAccessor()(e));\n        });\n      }\n      function yAxisRangeRatio() {\n        return (maxDataValue() - minDataValue()) / _chart.effectiveHeight();\n      }\n      _chart.fadeDeselectedArea = function (brushSelection) {\n        if (_chart.hasFilter()) {\n          if (_chart.isOrdinal()) {\n            _chart.g().selectAll('g.box').each(function (d) {\n              if (_chart.isSelectedNode(d)) {\n                _chart.highlightSelected(this);\n              } else {\n                _chart.fadeDeselected(this);\n              }\n            });\n          } else {\n            if (!(_chart.brushOn() || _chart.parentBrushOn())) {\n              return;\n            }\n            var start = brushSelection[0];\n            var end = brushSelection[1];\n            var keyAccessor = _chart.keyAccessor();\n            _chart.g().selectAll('g.box').each(function (d) {\n              var key = keyAccessor(d);\n              if (key < start || key >= end) {\n                _chart.fadeDeselected(this);\n              } else {\n                _chart.highlightSelected(this);\n              }\n            });\n          }\n        } else {\n          _chart.g().selectAll('g.box').each(function () {\n            _chart.resetHighlight(this);\n          });\n        }\n      };\n      _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(_chart.keyAccessor()(d));\n      };\n      _chart.yAxisMin = function () {\n        var padding = _yRangePadding * yAxisRangeRatio();\n        return dc.utils.subtract(minDataValue() - padding, _chart.yAxisPadding());\n      };\n      _chart.yAxisMax = function () {\n        var padding = _yRangePadding * yAxisRangeRatio();\n        return dc.utils.add(maxDataValue() + padding, _chart.yAxisPadding());\n      };\n\n      /**\n       * Get or set the numerical format of the boxplot median, whiskers and quartile labels. Defaults\n       * to integer formatting.\n       * @example\n       * // format ticks to 2 decimal places\n       * chart.tickFormat(d3.format('.2f'));\n       * @method tickFormat\n       * @memberof dc.boxPlot\n       * @instance\n       * @param {Function} [tickFormat]\n       * @returns {Number|Function|dc.boxPlot}\n       */\n      _chart.tickFormat = function (tickFormat) {\n        if (!arguments.length) {\n          return _tickFormat;\n        }\n        _tickFormat = tickFormat;\n        return _chart;\n      };\n\n      /**\n       * Get or set the amount of padding to add, in pixel coordinates, to the top and\n       * bottom of the chart to accommodate box/whisker labels.\n       * @example\n       * // allow more space for a bigger whisker font\n       * chart.yRangePadding(12);\n       * @method yRangePadding\n       * @memberof dc.boxPlot\n       * @instance\n       * @param {Function} [yRangePadding = 8]\n       * @returns {Number|Function|dc.boxPlot}\n       */\n      _chart.yRangePadding = function (yRangePadding) {\n        if (!arguments.length) {\n          return _yRangePadding;\n        }\n        _yRangePadding = yRangePadding;\n        return _chart;\n      };\n\n      /**\n       * Get or set whether individual data points will be rendered.\n       * @example\n       * // Enable rendering of individual data points\n       * chart.renderDataPoints(true);\n       * @method renderDataPoints\n       * @memberof dc.boxPlot\n       * @instance\n       * @param {Boolean} [show=false]\n       * @returns {Boolean|dc.boxPlot}\n       */\n      _chart.renderDataPoints = function (show) {\n        if (!arguments.length) {\n          return _renderDataPoints;\n        }\n        _renderDataPoints = show;\n        return _chart;\n      };\n\n      /**\n       * Get or set the opacity when rendering data.\n       * @example\n       * // If individual data points are rendered increase the opacity.\n       * chart.dataOpacity(0.7);\n       * @method dataOpacity\n       * @memberof dc.boxPlot\n       * @instance\n       * @param {Number} [opacity=0.3]\n       * @returns {Number|dc.boxPlot}\n       */\n      _chart.dataOpacity = function (opacity) {\n        if (!arguments.length) {\n          return _dataOpacity;\n        }\n        _dataOpacity = opacity;\n        return _chart;\n      };\n\n      /**\n       * Get or set the portion of the width of the box to show data points.\n       * @example\n       * // If individual data points are rendered increase the data box.\n       * chart.dataWidthPortion(0.9);\n       * @method dataWidthPortion\n       * @memberof dc.boxPlot\n       * @instance\n       * @param {Number} [percentage=0.8]\n       * @returns {Number|dc.boxPlot}\n       */\n      _chart.dataWidthPortion = function (percentage) {\n        if (!arguments.length) {\n          return _dataWidthPortion;\n        }\n        _dataWidthPortion = percentage;\n        return _chart;\n      };\n\n      /**\n       * Get or set whether outliers will be rendered.\n       * @example\n       * // Disable rendering of outliers\n       * chart.showOutliers(false);\n       * @method showOutliers\n       * @memberof dc.boxPlot\n       * @instance\n       * @param {Boolean} [show=true]\n       * @returns {Boolean|dc.boxPlot}\n       */\n      _chart.showOutliers = function (show) {\n        if (!arguments.length) {\n          return _showOutliers;\n        }\n        _showOutliers = show;\n        return _chart;\n      };\n\n      /**\n       * Get or set whether outliers will be drawn bold.\n       * @example\n       * // If outliers are rendered display as bold\n       * chart.boldOutlier(true);\n       * @method boldOutlier\n       * @memberof dc.boxPlot\n       * @instance\n       * @param {Boolean} [show=false]\n       * @returns {Boolean|dc.boxPlot}\n       */\n      _chart.boldOutlier = function (show) {\n        if (!arguments.length) {\n          return _boldOutlier;\n        }\n        _boldOutlier = show;\n        return _chart;\n      };\n      return _chart.anchor(parent, chartGroup);\n    };\n\n    /**\n     * The select menu is a simple widget designed to filter a dimension by selecting an option from\n     * an HTML `<select/>` menu. The menu can be optionally turned into a multiselect.\n     * @class selectMenu\n     * @memberof dc\n     * @mixes dc.baseMixin\n     * @example\n     * // create a select menu under #select-container using the default global chart group\n     * var select = dc.selectMenu('#select-container')\n     *                .dimension(states)\n     *                .group(stateGroup);\n     * // the option text can be set via the title() function\n     * // by default the option text is '`key`: `value`'\n     * select.title(function (d){\n     *     return 'STATE: ' + d.key;\n     * })\n     * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n     * [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying\n     * a dom block element such as a div; or a dom element or d3 selection.\n     * @param {String} [chartGroup] - The name of the chart group this widget should be placed in.\n     * Interaction with the widget will only trigger events and redraws within its group.\n     * @returns {selectMenu}\n     **/\n    dc.selectMenu = function (parent, chartGroup) {\n      var SELECT_CSS_CLASS = 'dc-select-menu';\n      var OPTION_CSS_CLASS = 'dc-select-option';\n      var _chart = dc.baseMixin({});\n      var _select;\n      var _promptText = 'Select all';\n      var _multiple = false;\n      var _promptValue = null;\n      var _numberVisible = null;\n      var _order = function (a, b) {\n        return _chart.keyAccessor()(a) > _chart.keyAccessor()(b) ? 1 : _chart.keyAccessor()(b) > _chart.keyAccessor()(a) ? -1 : 0;\n      };\n      var _filterDisplayed = function (d) {\n        return _chart.valueAccessor()(d) > 0;\n      };\n      _chart.data(function (group) {\n        return group.all().filter(_filterDisplayed);\n      });\n      _chart._doRender = function () {\n        _chart.select('select').remove();\n        _select = _chart.root().append('select').classed(SELECT_CSS_CLASS, true);\n        _select.append('option').text(_promptText).attr('value', '');\n        _chart._doRedraw();\n        return _chart;\n      };\n      // Fixing IE 11 crash when redrawing the chart\n      // see here for list of IE user Agents :\n      // http://www.useragentstring.com/pages/useragentstring.php?name=Internet+Explorer\n      var ua = window.navigator.userAgent;\n      // test for IE 11 but not a lower version (which contains MSIE in UA)\n      if (ua.indexOf('Trident/') > 0 && ua.indexOf('MSIE') === -1) {\n        _chart.redraw = _chart.render;\n      }\n      _chart._doRedraw = function () {\n        setAttributes();\n        renderOptions();\n        // select the option(s) corresponding to current filter(s)\n        if (_chart.hasFilter() && _multiple) {\n          _select.selectAll('option').property('selected', function (d) {\n            return typeof d !== 'undefined' && _chart.filters().indexOf(String(_chart.keyAccessor()(d))) >= 0;\n          });\n        } else if (_chart.hasFilter()) {\n          _select.property('value', _chart.filter());\n        } else {\n          _select.property('value', '');\n        }\n        return _chart;\n      };\n      function renderOptions() {\n        var options = _select.selectAll('option.' + OPTION_CSS_CLASS).data(_chart.data(), function (d) {\n          return _chart.keyAccessor()(d);\n        });\n        options.enter().append('option').classed(OPTION_CSS_CLASS, true).attr('value', function (d) {\n          return _chart.keyAccessor()(d);\n        });\n        options.text(_chart.title());\n        options.exit().remove();\n        _select.selectAll('option.' + OPTION_CSS_CLASS).sort(_order);\n        _select.on('change', onChange);\n        return options;\n      }\n      function onChange(d, i) {\n        var values;\n        var target = d3.event.target;\n        if (target.selectedOptions) {\n          var selectedOptions = Array.prototype.slice.call(target.selectedOptions);\n          values = selectedOptions.map(function (d) {\n            return d.value;\n          });\n        } else {\n          // IE and other browsers do not support selectedOptions\n          // adapted from this polyfill: https://gist.github.com/brettz9/4212217\n          var options = [].slice.call(d3.event.target.options);\n          values = options.filter(function (option) {\n            return option.selected;\n          }).map(function (option) {\n            return option.value;\n          });\n        }\n        // console.log(values);\n        // check if only prompt option is selected\n        if (values.length === 1 && values[0] === '') {\n          values = _promptValue || null;\n        } else if (!_multiple && values.length === 1) {\n          values = values[0];\n        }\n        _chart.onChange(values);\n      }\n      _chart.onChange = function (val) {\n        if (val && _multiple) {\n          _chart.replaceFilter([val]);\n        } else if (val) {\n          _chart.replaceFilter(val);\n        } else {\n          _chart.filterAll();\n        }\n        dc.events.trigger(function () {\n          _chart.redrawGroup();\n        });\n      };\n      function setAttributes() {\n        if (_multiple) {\n          _select.attr('multiple', true);\n        } else {\n          _select.attr('multiple', null);\n        }\n        if (_numberVisible !== null) {\n          _select.attr('size', _numberVisible);\n        } else {\n          _select.attr('size', null);\n        }\n      }\n\n      /**\n       * Get or set the function that controls the ordering of option tags in the\n       * select menu. By default options are ordered by the group key in ascending\n       * order.\n       * @name order\n       * @memberof dc.selectMenu\n       * @instance\n       * @param {Function} [order]\n       * @example\n       * // order by the group's value\n       * chart.order(function (a,b) {\n       *     return a.value > b.value ? 1 : b.value > a.value ? -1 : 0;\n       * });\n       **/\n      _chart.order = function (order) {\n        if (!arguments.length) {\n          return _order;\n        }\n        _order = order;\n        return _chart;\n      };\n\n      /**\n       * Get or set the text displayed in the options used to prompt selection.\n       * @name promptText\n       * @memberof dc.selectMenu\n       * @instance\n       * @param {String} [promptText='Select all']\n       * @example\n       * chart.promptText('All states');\n       **/\n      _chart.promptText = function (_) {\n        if (!arguments.length) {\n          return _promptText;\n        }\n        _promptText = _;\n        return _chart;\n      };\n\n      /**\n       * Get or set the function that filters option tags prior to display. By default options\n       * with a value of < 1 are not displayed.\n       * @name filterDisplayed\n       * @memberof dc.selectMenu\n       * @instance\n       * @param {function} [filterDisplayed]\n       * @example\n       * // display all options override the `filterDisplayed` function:\n       * chart.filterDisplayed(function () {\n       *     return true;\n       * });\n       **/\n      _chart.filterDisplayed = function (filterDisplayed) {\n        if (!arguments.length) {\n          return _filterDisplayed;\n        }\n        _filterDisplayed = filterDisplayed;\n        return _chart;\n      };\n\n      /**\n       * Controls the type of select menu. Setting it to true converts the underlying\n       * HTML tag into a multiple select.\n       * @name multiple\n       * @memberof dc.selectMenu\n       * @instance\n       * @param {boolean} [multiple=false]\n       * @example\n       * chart.multiple(true);\n       **/\n      _chart.multiple = function (multiple) {\n        if (!arguments.length) {\n          return _multiple;\n        }\n        _multiple = multiple;\n        return _chart;\n      };\n\n      /**\n       * Controls the default value to be used for\n       * [dimension.filter](https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter)\n       * when only the prompt value is selected. If `null` (the default), no filtering will occur when\n       * just the prompt is selected.\n       * @name promptValue\n       * @memberof dc.selectMenu\n       * @instance\n       * @param {?*} [promptValue=null]\n       **/\n      _chart.promptValue = function (promptValue) {\n        if (!arguments.length) {\n          return _promptValue;\n        }\n        _promptValue = promptValue;\n        return _chart;\n      };\n\n      /**\n       * Controls the number of items to show in the select menu, when `.multiple()` is true. This\n       * controls the [`size` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#Attributes) of\n       * the `select` element. If `null` (the default), uses the browser's default height.\n       * @name numberItems\n       * @memberof dc.selectMenu\n       * @instance\n       * @param {?number} [numberVisible=null]\n       * @example\n       * chart.numberVisible(10);\n       **/\n      _chart.numberVisible = function (numberVisible) {\n        if (!arguments.length) {\n          return _numberVisible;\n        }\n        _numberVisible = numberVisible;\n        return _chart;\n      };\n      _chart.size = dc.logger.deprecate(_chart.numberVisible, 'selectMenu.size is ambiguous - use numberVisible instead');\n      return _chart.anchor(parent, chartGroup);\n    };\n\n    // Renamed functions\n\n    dc.abstractBubbleChart = dc.bubbleMixin;\n    dc.baseChart = dc.baseMixin;\n    dc.capped = dc.capMixin;\n    dc.colorChart = dc.colorMixin;\n    dc.coordinateGridChart = dc.coordinateGridMixin;\n    dc.marginable = dc.marginMixin;\n    dc.stackableChart = dc.stackMixin;\n\n    // Expose d3 and crossfilter, so that clients in browserify\n    // case can obtain them if they need them.\n    dc.d3 = d3;\n    dc.crossfilter = crossfilter;\n    return dc;\n  }\n  if (typeof define === \"function\" && define.amd) {\n    define([\"d3\", \"crossfilter2\"], _dc);\n  } else if (typeof module === \"object\" && module.exports) {\n    var _d3 = require('d3');\n    var _crossfilter = require('crossfilter2');\n    // When using npm + browserify, 'crossfilter' is a function,\n    // since package.json specifies index.js as main function, and it\n    // does special handling. When using bower + browserify,\n    // there's no main in bower.json (in fact, there's no bower.json),\n    // so we need to fix it.\n    if (typeof _crossfilter !== \"function\") {\n      _crossfilter = _crossfilter.crossfilter;\n    }\n    module.exports = _dc(_d3, _crossfilter);\n  } else {\n    this.dc = _dc(d3, crossfilter);\n  }\n})();","map":{"version":3,"names":["_dc","d3","crossfilter","dc","version","constants","CHART_CLASS","DEBUG_GROUP_CLASS","STACK_CLASS","DESELECTED_CLASS","SELECTED_CLASS","NODE_INDEX_NAME","GROUP_INDEX_NAME","DEFAULT_CHART_GROUP","EVENT_DELAY","NEGLIGIBLE_NUMBER","_renderlet","chartRegistry","_chartMap","initializeChartGroup","group","has","chart","e","indexOf","register","push","deregister","i","length","anchorName","splice","clear","list","registerChart","deregisterChart","hasChart","deregisterAllCharts","filterAll","charts","refocusAll","focus","renderAll","render","redrawAll","redraw","disableTransitions","transition","selection","duration","delay","name","s","undefined","optionalTransition","enable","afterTransition","callback","empty","call","n","each","units","integers","start","end","Math","abs","ordinal","domain","fp","precision","_f","d","resolution","utils","isNegligible","floor","ceil","round","override","obj","functionName","newFunction","existingFunction","renderlet","_","arguments","instanceOfChart","o","Object","__dcFlag__","errors","Exception","msg","_msg","message","toString","stack","Error","prototype","create","constructor","InvalidStateException","apply","BadArgumentException","dateFormat","time","format","printers","filters","filter","Array","printSingleValue","pluck","f","Date","isFloat","fformat","isInteger","add","l","r","t","replace","getTime","offset","percentage","subtract","isNumber","clamp","val","min","max","_idCounter","uniqueId","nameToId","toLowerCase","appendOrSelect","parent","selector","tag","element","select","append","safeNumber","logger","enableDebugLog","warn","console","log","debug","deprecate","fn","warned","deprecated","events","current","trigger","closure","setTimeout","RangedFilter","low","high","range","isFiltered","value","filterType","TwoDimensionalFilter","RangedTwoDimensionalFilter","fromBottomLeft","Infinity","x","y","baseMixin","_chart","_dimension","_group","_anchor","_root","_svg","_isChild","_minWidth","_defaultWidthCalc","width","getBoundingClientRect","_widthCalc","_minHeight","_defaultHeightCalc","height","_heightCalc","_width","_height","_useViewBoxResizing","_keyAccessor","_valueAccessor","_label","_ordering","_orderSort","_renderLabel","_title","keyAccessor","valueAccessor","_renderTitle","_controlsUseVisibility","_transitionDuration","_transitionDelay","_filterPrinter","_mandatoryAttributes","_chartGroup","_listeners","dispatch","_legend","_commitHandler","_filters","_filterHandler","dimension","filterExact","filterRange","filterFunction","_data","all","node","functor","minWidth","minHeight","useViewBoxResizing","expireCache","data","_groupName","ordering","orderFunction","quicksort","by","_computeOrderedGroups","dataCopy","slice","selectAll","anchor","chartGroup","root","classed","a","id","chartID","rootElement","svg","svgElement","resetSvg","remove","generateSvg","sizeSvg","attr","filterPrinter","filterPrinterFunction","controlsUseVisibility","useVisibility","turnOnControls","attribute","style","text","turnOffControls","transitionDuration","transitionDelay","checkForMandatoryAttributes","preRender","forEach","result","_doRender","_activateRenderlets","event","pretransition","preRedraw","_doRedraw","commitHandler","redrawGroup","error","renderGroup","_invokeFilteredListener","filtered","_invokeZoomedListener","zoomed","_hasFilterHandler","some","hasFilterHandler","hasFilter","_removeFilterHandler","removeFilterHandler","_addFilterHandler","addFilterHandler","_resetFilterHandler","resetFilterHandler","applyFilters","fs","replaceFilter","highlightSelected","fadeDeselected","resetHighlight","onClick","datum","filterHandler","legendables","legendHighlight","legendReset","legendToggle","isLegendableHidden","label","labelFunction","enableLabels","renderLabel","title","titleFunction","renderTitle","renderletFunction","on","legend","options","opts","applyOptions","listener","marginMixin","_margin","top","right","bottom","left","margins","effectiveWidth","effectiveHeight","colorMixin","_colors","scale","category20c","_defaultAccessor","_colorAccessor","_colorCalculator","colors","colorScale","quantize","ordinalColors","linearColors","linear","interpolate","interpolateHcl","colorAccessor","defaultColorAccessor","colorDomain","calculateColorDomain","newDomain","getColor","colorCalculator","coordinateGridMixin","GRID_LINE_CLASS","HORIZONTAL_CLASS","VERTICAL_CLASS","Y_AXIS_LABEL_CLASS","X_AXIS_LABEL_CLASS","DEFAULT_AXIS_LABEL_PADDING","category10","_parent","_g","_chartBodyG","_x","_xOriginalDomain","_xAxis","axis","orient","_xUnits","_xAxisPadding","_xAxisPaddingUnit","_xElasticity","_xAxisLabel","_xAxisLabelPadding","_lastXDomain","_y","_yAxis","_yAxisPadding","_yElasticity","_yAxisLabel","_yAxisLabelPadding","_brush","brush","_brushOn","_round","_renderHorizontalGridLine","_renderVerticalGridLine","_refocused","_resizing","_unitCount","_zoomScale","_zoomOutRestrict","_zoom","behavior","zoom","zoomHandler","_nullZoom","_hasBeenMouseZoomable","_rangeChart","_focusChart","_mouseZoomable","_clipPadding","_outerRangeBandPadding","_rangeBandPadding","_useRightYAxis","rescale","resizing","rangeChart","focusChart","zoomScale","extent","zoomOutRestrict","_generateG","href","window","location","split","getClipPathId","g","gElement","mouseZoomable","chartBodyG","xScale","xOriginalDomain","xUnits","xAxis","elasticX","xAxisPadding","padding","xAxisPaddingUnit","unit","xUnitCount","useRightYAxis","isOrdinal","_useOuterPadding","_ordinalXDomain","groups","map","compareDomains","d1","d2","elem","prepareXAxis","xAxisMin","xAxisMax","xdom","rangeBands","xAxisLength","renderVerticalGridLines","renderXAxis","axisXG","_xAxisY","axisXLab","xAxisLabel","gridLineG","insert","ticks","tickValues","lines","linesGEnter","enter","exit","labelText","_prepareYAxis","elasticY","yAxisMin","yAxisMax","rangeRound","yAxisHeight","_renderHorizontalGridLinesForAxis","renderYAxisLabel","axisClass","rotation","labelXPosition","axisYLab","labelYPosition","renderYAxisAt","position","axisYG","renderYAxis","axisPosition","_yAxisX","labelPosition","yAxisLabel","yScale","yAxis","renderHorizontalGridLines","yAxisPadding","_filter","brushHeight","renderBrush","_brushing","_disableMouseZoom","configureMouseZoom","gBrush","setBrushY","setHandlePaths","redrawBrush","resizeHandlePath","extendBrush","brushIsEmpty","rangedFilter","doTransition","fadeDeselectedArea","clipPadding","generateClipPath","defs","chartBodyClip","_preprocessData","drawChart","plotData","_enableMouseZoom","scaleExtent","size","constraint","intersectExtents","constrained","constrainExtent","domFilter","rangesEqual","ext1","ext2","hasRangeSelected","refocused","c","range1","range2","valueOf","brushOn","stackMixin","prepareValues","layer","layerIdx","valAccessor","accessor","String","values","hidden","domainFilter","_stackLayout","layout","_stack","_titles","_hidableStacks","_evadeDomainFilter","xDomain","p","hidableStacks","findLayerByName","hideStack","stackName","showStack","getValueAccessorByIndex","index","flattenStack","y0","valueses","concat","titleAccessor","stackLayout","evadeDomainFilter","visability","layers","flat","ordered","color","capMixin","_cap","_takeFront","_othersLabel","kv","_othersGrouper","topItems","restItems","restItemsSum","sum","restKeys","others","key","othersLabel","cappedKeyAccessor","cappedValueAccessor","items","rest","cap","count","takeFront","othersGrouper","grouperFunction","_onClick","bubbleMixin","_maxBubbleRelativeSize","_minRadiusWithLabel","_sortBubbleSize","_elasticRadius","BUBBLE_NODE_CLASS","BUBBLE_CLASS","MIN_RADIUS","radiusAccessor","radiusValueAccessor","sort","b","descending","_r","_rValueAccessor","bubbleRadiusScale","elasticRadius","calculateRadiusDomain","rMin","rMax","bubbleR","isNaN","shouldLabel","labelOpacity","labelPointerEvent","_doRenderLabel","bubbleGEnter","doUpdateLabels","labels","_doRenderTitles","doUpdateTitles","sortBubbleSize","minRadius","radius","minRadiusWithLabel","maxBubbleRelativeSize","relativeSize","isSelectedNode","pieChart","DEFAULT_MIN_ANGLE_FOR_LABEL","_sliceCssClass","_labelCssClass","_sliceGroupCssClass","_labelGroupCssClass","_emptyCssClass","_emptyTitle","_radius","_givenRadius","_innerRadius","_externalRadiusPadding","_cx","_cy","_minAngleForLabel","_externalLabelRadius","_drawPaths","slicesCap","cx","cy","maxRadius","arc","buildArcs","pie","pieLayout","pieData","slices","createElements","updateElements","removeElements","highlightFilter","slicesEnter","createSliceNodes","createSlicePath","createTitles","createLabels","slicePath","fill","safeArc","attrTween","tweenPie","_applyLabelText","sliceHasNoData","sliceTooSmall","isSelectedSlice","positionLabels","highlightSlice","whether","labelsEnter","classes","updateLabelPaths","polyline","arc2","outerRadius","innerRadius","_current","startAngle","endAngle","centroid","updateSlicePaths","updateLabels","updateTitles","slicePaths","externalRadiusPadding","minAngleForLabel","angle","isOffCanvas","path","emptyTitle","externalLabels","externalLabelRadius","drawPaths","legendable","highlightSliceFromLegendable","highlighted","barChart","MIN_BAR_WIDTH","DEFAULT_GAP_BETWEEN_BARS","LABEL_PADDING","_gap","_centerBar","_alwaysUseRounding","_barWidth","_rescale","_render","calculateBarWidth","last","renderBars","renderLabels","barHeight","layerIndex","bars","numberOfBars","rangeBand","barPadding","centerBar","outerPadding","gap","alwaysUseRounding","colorFilter","inv","item","match","_xAxisMax","res","lineChart","DEFAULT_DOT_RADIUS","TOOLTIP_G_CLASS","DOT_CIRCLE_CLASS","Y_AXIS_REF_LINE_CLASS","X_AXIS_REF_LINE_CLASS","DEFAULT_DOT_OPACITY","_renderArea","_dotRadius","_dataPointRadius","_dataPointFillOpacity","_dataPointStrokeOpacity","_interpolate","_tension","_defined","_dashStyle","_xyTipsOn","chartBody","layersList","layersEnter","drawLine","drawArea","drawDots","drawLabels","tension","defined","dashStyle","renderArea","line","safeD","area","xyTipsOn","tooltipListClass","tooltips","points","createRefLines","dots","getDotRadius","dot","showDot","showRefLines","hideDot","hideRefLines","yRefLine","xRefLine","yAxisX","yAxisRefPathD","xAxisRefPathD","dotRadius","renderDataPoints","fillOpacity","strokeOpacity","dashstyle","join","_legendables","dataCount","_formatNumber","_html","html","formatNumber","formatter","tot","selected","dataTable","LABEL_CSS_CLASS","ROW_CSS_CLASS","COLUMN_CSS_CLASS","GROUP_CSS_CLASS","HEAD_CSS_CLASS","_size","_columns","_sortBy","_order","ascending","_beginSlice","_endSlice","_showGroups","renderRows","renderGroups","_doColumnValueFormat","v","_doColumnHeaderFormat","_doColumnHeaderFnToString","_doColumnHeaderCapitalize","charAt","toUpperCase","i1","i2","lastIndexOf","substring","i3","bAllFunctions","thead","headrow","headcols","nestEntries","rowGroup","entries","nest","sortKeys","rows","order","rowEnter","beginSlice","endSlice","columns","sortBy","showGroups","dataGrid","ITEM_CSS_CLASS","GRID_CSS_CLASS","JSON","stringify","_htmlGroup","renderItems","itemGroup","htmlGroup","sortByFunction","bubbleChart","bubbleLocator","bubbleX","bubbleY","bubbleG","renderNodes","updateNodes","removeNodes","compositeChart","SUB_CHART_CLASS","DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING","_children","_childOptions","_shareColors","_shareTitle","_alignYAxes","_rightYAxis","_rightYAxisLabel","_rightYAxisLabelPadding","_rightY","_rightAxisGridLines","__generateG","child","generateChildG","leftYAxisChildren","rightYAxisChildren","ranges","calculateYAxisRanges","prepareLeftYAxis","prepareRightYAxis","rightYAxis","rightYAxisLabel","lyAxisMin","lyAxisMax","ryAxisMin","ryAxisMax","rightYAxisMin","rightYAxisMax","alignYAxes","alignYAxisRanges","extentRatio","needDomain","rightY","needRange","useRightAxisGridLines","childOptions","compose","subChartArray","children","shareColors","shareTitle","getYAxisMin","getYAxisMax","getAllXAxisMinFromChildCharts","getAllXAxisMaxFromChildCharts","reduce","j","seriesChart","keySort","_charts","_chartFunction","_seriesAccessor","_seriesSort","_valueSort","keep","childrenChanged","nester","sortValues","nesting","sub","subChart","keys","clearChart","_compose","resetChildren","chartFunction","seriesAccessor","seriesSort","sortFunction","valueSort","geoChoroplethChart","_geoPath","geo","_projectionFlag","_geoJsons","states","regionG","geoJson","generateLayeredData","isDataLayer","renderRegionG","renderPaths","groupAll","layerSelector","isSelected","isDeselected","layerNameClass","regionClass","baseClasses","getKey","paths","currentFill","selectedRegion","overlayGeoJson","json","projection","geoJsons","geoPath","removeGeoJson","bubbleOverlay","BUBBLE_OVERLAY_CLASS","_points","point","initOverlayG","initializeBubbles","mapData","nodeG","getNodeG","circle","bubbleNodeClass","updateBubbles","flag","debugG","debugText","mouse","rowChart","_labelOffsetX","_labelOffsetY","_hasLabelOffsetY","_dyOffset","_titleLabelOffsetX","_fixedBarHeight","_rowCssClass","_titleRowCssClass","_renderTitleLabel","_elasticX","_rowData","rowsCap","calculateAxisScale","drawAxis","axisG","drawGridLines","rootValue","rect","isSelectedRow","translateX","renderTitleLabel","lab","titlelab","x0","fixedBarHeight","labelOffsetX","labelOffsetY","labelOffsety","titleLabelOffsetX","LABEL_GAP","_itemHeight","_horizontal","_legendWidth","_itemWidth","_autoItemWidth","_legendText","_maxItems","itemEnter","clientHeight","_cumulativeLegendTextWidth","row","itemWidth","getBBox","translateBy","legendItemHeight","itemHeight","horizontal","legendWidth","autoItemWidth","legendText","maxItems","scatterPlot","_symbol","symbol","_existenceAccessor","originalKeyAccessor","existenceAccessor","_locator","_highlightedSize","_symbolSize","_excludedSize","_excludedColor","_excludedOpacity","_emptySize","_emptyOpacity","_nonemptyOpacity","_emptyColor","_filtered","elementSize","pow","__filter","symbols","renderTitles","excludedOpacity","excludedColor","type","customSymbol","symbolSize","highlightedSize","excludedSize","hiddenSize","emptySize","emptyColor","emptyOpacity","nonemptyOpacity","resizeSymbolsWhere","condition","oldSize","ranged2DFilter","numberDisplay","SPAN_CLASS","one","none","_lastValue","maxBin","sorted","valObj","newValue","span","ease","tween","interpStart","isFinite","interp","interpolateNumber","num","innerHTML","heatMap","DEFAULT_BORDER_RADIUS","_chartBody","_cols","_rows","_colOrdering","_rowOrdering","_colScale","_rowScale","_xBorderRadius","_yBorderRadius","_colsLabel","_rowsLabel","colsLabel","rowsLabel","_xAxisOnClick","filterAxis","_yAxisOnClick","_boxOnClick","cellsOnAxis","unfilteredCellsOnAxis","rowOrdering","cols","colOrdering","rowCount","colCount","boxWidth","boxHeight","rangeRoundBands","boxes","gEnter","boxOnClick","gCols","gColsText","xAxisOnClick","gRows","gRowsText","yAxisOnClick","handler","xBorderRadius","yBorderRadius","box","Number","whiskers","boxWhiskers","quartiles","boxQuartiles","tickFormat","dataRadius","dataOpacity","dataWidthPortion","showOutliers","boldOutlier","quartileData","whiskerIndices","whiskerData","outlierIndices","pointIndices","x1","__chart__","center","medianLine","whisker","outlierClass","outlierSize","outlierX","random","outlier","boxTick","whiskerTick","timer","flush","quantile","boxPlot","DEFAULT_WHISKERS_IQR","k","q1","q3","iqr","_whiskerIqrFactor","_whiskersIqr","_whiskers","_box","_tickFormat","_renderDataPoints","_dataOpacity","_dataWidthPortion","_showOutliers","_boldOutlier","_yRangePadding","_boxWidth","innerChartWidth","boxPadding","boxTransform","xOffset","_calculatedBoxWidth","boxesG","renderBoxes","updateBoxes","removeBoxes","boxesGEnter","minDataValue","maxDataValue","yAxisRangeRatio","brushSelection","parentBrushOn","yRangePadding","show","opacity","selectMenu","SELECT_CSS_CLASS","OPTION_CSS_CLASS","_select","_promptText","_multiple","_promptValue","_numberVisible","_filterDisplayed","ua","navigator","userAgent","setAttributes","renderOptions","property","onChange","target","selectedOptions","option","promptText","filterDisplayed","multiple","promptValue","numberVisible","abstractBubbleChart","baseChart","capped","colorChart","coordinateGridChart","marginable","stackableChart","define","amd","module","exports","_d3","require","_crossfilter"],"sources":["src/banner.js","src/core.js","src/errors.js","src/utils.js","src/logger.js","src/events.js","src/filters.js","src/base-mixin.js","src/margin-mixin.js","src/color-mixin.js","src/coordinate-grid-mixin.js","src/stack-mixin.js","src/cap-mixin.js","src/bubble-mixin.js","src/pie-chart.js","src/bar-chart.js","src/line-chart.js","src/data-count.js","src/data-table.js","src/data-grid.js","src/bubble-chart.js","src/composite-chart.js","src/series-chart.js","src/geo-choropleth-chart.js","src/bubble-overlay.js","src/row-chart.js","src/legend.js","src/scatter-plot.js","src/number-display.js","src/heatmap.js","src/d3.box.js","src/box-plot.js","src/select-menu.js","src/footer.js"],"sourcesContent":["(function() { function _dc(d3, crossfilter) {\n'use strict';\n","/**\n * The entire dc.js library is scoped under the **dc** name space. It does not introduce\n * anything else into the global name space.\n *\n * Most `dc` functions are designed to allow function chaining, meaning they return the current chart\n * instance whenever it is appropriate.  The getter forms of functions do not participate in function\n * chaining because they return values that are not the chart, although some,\n * such as {@link dc.baseMixin#svg .svg} and {@link dc.coordinateGridMixin#xAxis .xAxis},\n * return values that are themselves chainable d3 objects.\n * @namespace dc\n * @version 2.2.2\n * @example\n * // Example chaining\n * chart.width(300)\n *      .height(300)\n *      .filter('sunday');\n */\n/*jshint -W079*/\nvar dc = {\n    version: '2.2.2',\n    constants: {\n        CHART_CLASS: 'dc-chart',\n        DEBUG_GROUP_CLASS: 'debug',\n        STACK_CLASS: 'stack',\n        DESELECTED_CLASS: 'deselected',\n        SELECTED_CLASS: 'selected',\n        NODE_INDEX_NAME: '__index__',\n        GROUP_INDEX_NAME: '__group_index__',\n        DEFAULT_CHART_GROUP: '__default_chart_group__',\n        EVENT_DELAY: 40,\n        NEGLIGIBLE_NUMBER: 1e-10\n    },\n    _renderlet: null\n};\n/*jshint +W079*/\n\n/**\n * The dc.chartRegistry object maintains sets of all instantiated dc.js charts under named groups\n * and the default group.\n *\n * A chart group often corresponds to a crossfilter instance. It specifies\n * the set of charts which should be updated when a filter changes on one of the charts or when the\n * global functions {@link dc.filterAll dc.filterAll}, {@link dc.refocusAll dc.refocusAll},\n * {@link dc.renderAll dc.renderAll}, {@link dc.redrawAll dc.redrawAll}, or chart functions\n * {@link dc.baseMixin#renderGroup baseMixin.renderGroup},\n * {@link dc.baseMixin#redrawGroup baseMixin.redrawGroup} are called.\n *\n * @namespace chartRegistry\n * @memberof dc\n * @type {{has, register, deregister, clear, list}}\n */\ndc.chartRegistry = (function () {\n    // chartGroup:string => charts:array\n    var _chartMap = {};\n\n    function initializeChartGroup (group) {\n        if (!group) {\n            group = dc.constants.DEFAULT_CHART_GROUP;\n        }\n\n        if (!_chartMap[group]) {\n            _chartMap[group] = [];\n        }\n\n        return group;\n    }\n\n    return {\n        /**\n         * Determine if a given chart instance resides in any group in the registry.\n         * @method has\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @returns {Boolean}\n         */\n        has: function (chart) {\n            for (var e in _chartMap) {\n                if (_chartMap[e].indexOf(chart) >= 0) {\n                    return true;\n                }\n            }\n            return false;\n        },\n\n        /**\n         * Add given chart instance to the given group, creating the group if necessary.\n         * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n         * @method register\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @param {String} [group] Group name\n         */\n        register: function (chart, group) {\n            group = initializeChartGroup(group);\n            _chartMap[group].push(chart);\n        },\n\n        /**\n         * Remove given chart instance from the given group, creating the group if necessary.\n         * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n         * @method deregister\n         * @memberof dc.chartRegistry\n         * @param {Object} chart dc.js chart instance\n         * @param {String} [group] Group name\n         */\n        deregister: function (chart, group) {\n            group = initializeChartGroup(group);\n            for (var i = 0; i < _chartMap[group].length; i++) {\n                if (_chartMap[group][i].anchorName() === chart.anchorName()) {\n                    _chartMap[group].splice(i, 1);\n                    break;\n                }\n            }\n        },\n\n        /**\n         * Clear given group if one is provided, otherwise clears all groups.\n         * @method clear\n         * @memberof dc.chartRegistry\n         * @param {String} group Group name\n         */\n        clear: function (group) {\n            if (group) {\n                delete _chartMap[group];\n            } else {\n                _chartMap = {};\n            }\n        },\n\n        /**\n         * Get an array of each chart instance in the given group.\n         * If no group is provided, the charts in the default group are returned.\n         * @method list\n         * @memberof dc.chartRegistry\n         * @param {String} [group] Group name\n         * @returns {Array<Object>}\n         */\n        list: function (group) {\n            group = initializeChartGroup(group);\n            return _chartMap[group];\n        }\n    };\n})();\n\n/**\n * Add given chart instance to the given group, creating the group if necessary.\n * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n * @memberof dc\n * @method registerChart\n * @param {Object} chart dc.js chart instance\n * @param {String} [group] Group name\n */\ndc.registerChart = function (chart, group) {\n    dc.chartRegistry.register(chart, group);\n};\n\n/**\n * Remove given chart instance from the given group, creating the group if necessary.\n * If no group is provided, the default group `dc.constants.DEFAULT_CHART_GROUP` will be used.\n * @memberof dc\n * @method deregisterChart\n * @param {Object} chart dc.js chart instance\n * @param {String} [group] Group name\n */\ndc.deregisterChart = function (chart, group) {\n    dc.chartRegistry.deregister(chart, group);\n};\n\n/**\n * Determine if a given chart instance resides in any group in the registry.\n * @memberof dc\n * @method hasChart\n * @param {Object} chart dc.js chart instance\n * @returns {Boolean}\n */\ndc.hasChart = function (chart) {\n    return dc.chartRegistry.has(chart);\n};\n\n/**\n * Clear given group if one is provided, otherwise clears all groups.\n * @memberof dc\n * @method deregisterAllCharts\n * @param {String} group Group name\n */\ndc.deregisterAllCharts = function (group) {\n    dc.chartRegistry.clear(group);\n};\n\n/**\n * Clear all filters on all charts within the given chart group. If the chart group is not given then\n * only charts that belong to the default chart group will be reset.\n * @memberof dc\n * @method filterAll\n * @param {String} [group]\n */\ndc.filterAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].filterAll();\n    }\n};\n\n/**\n * Reset zoom level / focus on all charts that belong to the given chart group. If the chart group is\n * not given then only charts that belong to the default chart group will be reset.\n * @memberof dc\n * @method refocusAll\n * @param {String} [group]\n */\ndc.refocusAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        if (charts[i].focus) {\n            charts[i].focus();\n        }\n    }\n};\n\n/**\n * Re-render all charts belong to the given chart group. If the chart group is not given then only\n * charts that belong to the default chart group will be re-rendered.\n * @memberof dc\n * @method renderAll\n * @param {String} [group]\n */\ndc.renderAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].render();\n    }\n\n    if (dc._renderlet !== null) {\n        dc._renderlet(group);\n    }\n};\n\n/**\n * Redraw all charts belong to the given chart group. If the chart group is not given then only charts\n * that belong to the default chart group will be re-drawn. Redraw is different from re-render since\n * when redrawing dc tries to update the graphic incrementally, using transitions, instead of starting\n * from scratch.\n * @memberof dc\n * @method redrawAll\n * @param {String} [group]\n */\ndc.redrawAll = function (group) {\n    var charts = dc.chartRegistry.list(group);\n    for (var i = 0; i < charts.length; ++i) {\n        charts[i].redraw();\n    }\n\n    if (dc._renderlet !== null) {\n        dc._renderlet(group);\n    }\n};\n\n/**\n * If this boolean is set truthy, all transitions will be disabled, and changes to the charts will happen\n * immediately.\n * @memberof dc\n * @member disableTransitions\n * @type {Boolean}\n * @default false\n */\ndc.disableTransitions = false;\n\n/**\n * Start a transition on a selection if transitions are globally enabled\n * ({@link dc.disableTransitions} is false) and the duration is greater than zero; otherwise return\n * the selection. Since most operations are the same on a d3 selection and a d3 transition, this\n * allows a common code path for both cases.\n * @memberof dc\n * @method transition\n * @param {d3.selection} selection - the selection to be transitioned\n * @param {Number|Function} [duration=250] - the duration of the transition in milliseconds, a\n * function returning the duration, or 0 for no transition\n * @param {Number|Function} [delay] - the delay of the transition in milliseconds, or a function\n * returning the delay, or 0 for no delay\n * @param {String} [name] - the name of the transition (if concurrent transitions on the same\n * elements are needed)\n * @returns {d3.transition|d3.selection}\n */\ndc.transition = function (selection, duration, delay, name) {\n    if (dc.disableTransitions || duration <= 0) {\n        return selection;\n    }\n\n    var s = selection.transition(name);\n\n    if (duration >= 0 || duration !== undefined) {\n        s = s.duration(duration);\n    }\n    if (delay >= 0 || delay !== undefined) {\n        s = s.delay(delay);\n    }\n\n    return s;\n};\n\n/* somewhat silly, but to avoid duplicating logic */\ndc.optionalTransition = function (enable, duration, delay, name) {\n    if (enable) {\n        return function (selection) {\n            return dc.transition(selection, duration, delay, name);\n        };\n    } else {\n        return function (selection) {\n            return selection;\n        };\n    }\n};\n\n// See http://stackoverflow.com/a/20773846\ndc.afterTransition = function (transition, callback) {\n    if (transition.empty() || !transition.duration) {\n        callback.call(transition);\n    } else {\n        var n = 0;\n        transition\n            .each(function () { ++n; })\n            .each('end', function () {\n                if (!--n) {\n                    callback.call(transition);\n                }\n            });\n    }\n};\n\n/**\n * @namespace units\n * @memberof dc\n * @type {{}}\n */\ndc.units = {};\n\n/**\n * The default value for {@link dc.coordinateGridMixin#xUnits .xUnits} for the\n * {@link dc.coordinateGridMixin Coordinate Grid Chart} and should\n * be used when the x values are a sequence of integers.\n * It is a function that counts the number of integers in the range supplied in its start and end parameters.\n * @method integers\n * @memberof dc.units\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @example\n * chart.xUnits(dc.units.integers) // already the default\n * @param {Number} start\n * @param {Number} end\n * @returns {Number}\n */\ndc.units.integers = function (start, end) {\n    return Math.abs(end - start);\n};\n\n/**\n * This argument can be passed to the {@link dc.coordinateGridMixin#xUnits .xUnits} function of the to\n * specify ordinal units for the x axis. Usually this parameter is used in combination with passing\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md d3.scale.ordinal} to\n * {@link dc.coordinateGridMixin#x .x}.\n * It just returns the domain passed to it, which for ordinal charts is an array of all values.\n * @method ordinal\n * @memberof dc.units\n * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md d3.scale.ordinal}\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @see {@link dc.coordinateGridMixin#x coordinateGridMixin.x}\n * @example\n * chart.xUnits(dc.units.ordinal)\n *      .x(d3.scale.ordinal())\n * @param {*} start\n * @param {*} end\n * @param {Array<String>} domain\n * @returns {Array<String>}\n */\ndc.units.ordinal = function (start, end, domain) {\n    return domain;\n};\n\n/**\n * @namespace fp\n * @memberof dc.units\n * @type {{}}\n */\ndc.units.fp = {};\n/**\n * This function generates an argument for the {@link dc.coordinateGridMixin Coordinate Grid Chart}\n * {@link dc.coordinateGridMixin#xUnits .xUnits} function specifying that the x values are floating-point\n * numbers with the given precision.\n * The returned function determines how many values at the given precision will fit into the range\n * supplied in its start and end parameters.\n * @method precision\n * @memberof dc.units.fp\n * @see {@link dc.coordinateGridMixin#xUnits coordinateGridMixin.xUnits}\n * @example\n * // specify values (and ticks) every 0.1 units\n * chart.xUnits(dc.units.fp.precision(0.1)\n * // there are 500 units between 0.5 and 1 if the precision is 0.001\n * var thousandths = dc.units.fp.precision(0.001);\n * thousandths(0.5, 1.0) // returns 500\n * @param {Number} precision\n * @returns {Function} start-end unit function\n */\ndc.units.fp.precision = function (precision) {\n    var _f = function (s, e) {\n        var d = Math.abs((e - s) / _f.resolution);\n        if (dc.utils.isNegligible(d - Math.floor(d))) {\n            return Math.floor(d);\n        } else {\n            return Math.ceil(d);\n        }\n    };\n    _f.resolution = precision;\n    return _f;\n};\n\ndc.round = {};\ndc.round.floor = function (n) {\n    return Math.floor(n);\n};\ndc.round.ceil = function (n) {\n    return Math.ceil(n);\n};\ndc.round.round = function (n) {\n    return Math.round(n);\n};\n\ndc.override = function (obj, functionName, newFunction) {\n    var existingFunction = obj[functionName];\n    obj['_' + functionName] = existingFunction;\n    obj[functionName] = newFunction;\n};\n\ndc.renderlet = function (_) {\n    if (!arguments.length) {\n        return dc._renderlet;\n    }\n    dc._renderlet = _;\n    return dc;\n};\n\ndc.instanceOfChart = function (o) {\n    return o instanceof Object && o.__dcFlag__ && true;\n};\n","dc.errors = {};\n\ndc.errors.Exception = function (msg) {\n    var _msg = msg || 'Unexpected internal error';\n\n    this.message = _msg;\n\n    this.toString = function () {\n        return _msg;\n    };\n    this.stack = (new Error()).stack;\n};\ndc.errors.Exception.prototype = Object.create(Error.prototype);\ndc.errors.Exception.prototype.constructor = dc.errors.Exception;\n\ndc.errors.InvalidStateException = function () {\n    dc.errors.Exception.apply(this, arguments);\n};\n\ndc.errors.InvalidStateException.prototype = Object.create(dc.errors.Exception.prototype);\ndc.errors.InvalidStateException.prototype.constructor = dc.errors.InvalidStateException;\n\ndc.errors.BadArgumentException = function () {\n    dc.errors.Exception.apply(this, arguments);\n};\n\ndc.errors.BadArgumentException.prototype = Object.create(dc.errors.Exception.prototype);\ndc.errors.BadArgumentException.prototype.constructor = dc.errors.BadArgumentException;\n","/**\n * The default date format for dc.js\n * @name dateFormat\n * @memberof dc\n * @type {Function}\n * @default d3.time.format('%m/%d/%Y')\n */\ndc.dateFormat = d3.time.format('%m/%d/%Y');\n\n/**\n * @namespace printers\n * @memberof dc\n * @type {{}}\n */\ndc.printers = {};\n\n/**\n * Converts a list of filters into a readable string.\n * @method filters\n * @memberof dc.printers\n * @param {Array<dc.filters>} filters\n * @returns {String}\n */\ndc.printers.filters = function (filters) {\n    var s = '';\n\n    for (var i = 0; i < filters.length; ++i) {\n        if (i > 0) {\n            s += ', ';\n        }\n        s += dc.printers.filter(filters[i]);\n    }\n\n    return s;\n};\n\n/**\n * Converts a filter into a readable string.\n * @method filter\n * @memberof dc.printers\n * @param {dc.filters|any|Array<any>} filter\n * @returns {String}\n */\ndc.printers.filter = function (filter) {\n    var s = '';\n\n    if (typeof filter !== 'undefined' && filter !== null) {\n        if (filter instanceof Array) {\n            if (filter.length >= 2) {\n                s = '[' + dc.utils.printSingleValue(filter[0]) + ' -> ' + dc.utils.printSingleValue(filter[1]) + ']';\n            } else if (filter.length >= 1) {\n                s = dc.utils.printSingleValue(filter[0]);\n            }\n        } else {\n            s = dc.utils.printSingleValue(filter);\n        }\n    }\n\n    return s;\n};\n\n/**\n * Returns a function that given a string property name, can be used to pluck the property off an object.  A function\n * can be passed as the second argument to also alter the data being returned.\n *\n * This can be a useful shorthand method to create accessor functions.\n * @method pluck\n * @memberof dc\n * @example\n * var xPluck = dc.pluck('x');\n * var objA = {x: 1};\n * xPluck(objA) // 1\n * @example\n * var xPosition = dc.pluck('x', function (x, i) {\n *     // `this` is the original datum,\n *     // `x` is the x property of the datum,\n *     // `i` is the position in the array\n *     return this.radius + x;\n * });\n * dc.selectAll('.circle').data(...).x(xPosition);\n * @param {String} n\n * @param {Function} [f]\n * @returns {Function}\n */\ndc.pluck = function (n, f) {\n    if (!f) {\n        return function (d) { return d[n]; };\n    }\n    return function (d, i) { return f.call(d, d[n], i); };\n};\n\n/**\n * @namespace utils\n * @memberof dc\n * @type {{}}\n */\ndc.utils = {};\n\n/**\n * Print a single value filter.\n * @method printSingleValue\n * @memberof dc.utils\n * @param {any} filter\n * @returns {String}\n */\ndc.utils.printSingleValue = function (filter) {\n    var s = '' + filter;\n\n    if (filter instanceof Date) {\n        s = dc.dateFormat(filter);\n    } else if (typeof(filter) === 'string') {\n        s = filter;\n    } else if (dc.utils.isFloat(filter)) {\n        s = dc.utils.printSingleValue.fformat(filter);\n    } else if (dc.utils.isInteger(filter)) {\n        s = Math.round(filter);\n    }\n\n    return s;\n};\ndc.utils.printSingleValue.fformat = d3.format('.2f');\n\n/**\n * Arbitrary add one value to another.\n * @method add\n * @memberof dc.utils\n * @todo\n * These assume than any string r is a percentage (whether or not it includes %).\n * They also generate strange results if l is a string.\n * @param {String|Date|Number} l the value to modify\n * @param {Number} r the amount by which to modify the value\n * @param {String} [t] if `l` is a `Date`, the\n * [interval](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval) in\n * the `d3.time` namespace\n * @returns {String|Date|Number}\n */\ndc.utils.add = function (l, r, t) {\n    if (typeof r === 'string') {\n        r = r.replace('%', '');\n    }\n\n    if (l instanceof Date) {\n        if (typeof r === 'string') {\n            r = +r;\n        }\n        if (t === 'millis') {\n            return new Date(l.getTime() + r);\n        }\n        t = t || 'day';\n        return d3.time[t].offset(l, r);\n    } else if (typeof r === 'string') {\n        var percentage = (+r / 100);\n        return l > 0 ? l * (1 + percentage) : l * (1 - percentage);\n    } else {\n        return l + r;\n    }\n};\n\n/**\n * Arbitrary subtract one value from another.\n * @method subtract\n * @memberof dc.utils\n * @todo\n * These assume than any string r is a percentage (whether or not it includes %).\n * They also generate strange results if l is a string.\n * @param {String|Date|Number} l the value to modify\n * @param {Number} r the amount by which to modify the value\n * @param {String} [t] if `l` is a `Date`, the\n * [interval](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval) in\n * the `d3.time` namespace\n * @returns {String|Date|Number}\n */\ndc.utils.subtract = function (l, r, t) {\n    if (typeof r === 'string') {\n        r = r.replace('%', '');\n    }\n\n    if (l instanceof Date) {\n        if (typeof r === 'string') {\n            r = +r;\n        }\n        if (t === 'millis') {\n            return new Date(l.getTime() - r);\n        }\n        t = t || 'day';\n        return d3.time[t].offset(l, -r);\n    } else if (typeof r === 'string') {\n        var percentage = (+r / 100);\n        return l < 0 ? l * (1 + percentage) : l * (1 - percentage);\n    } else {\n        return l - r;\n    }\n};\n\n/**\n * Is the value a number?\n * @method isNumber\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isNumber = function (n) {\n    return n === +n;\n};\n\n/**\n * Is the value a float?\n * @method isFloat\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isFloat = function (n) {\n    return n === +n && n !== (n | 0);\n};\n\n/**\n * Is the value an integer?\n * @method isInteger\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isInteger = function (n) {\n    return n === +n && n === (n | 0);\n};\n\n/**\n * Is the value very close to zero?\n * @method isNegligible\n * @memberof dc.utils\n * @param {any} n\n * @returns {Boolean}\n */\ndc.utils.isNegligible = function (n) {\n    return !dc.utils.isNumber(n) || (n < dc.constants.NEGLIGIBLE_NUMBER && n > -dc.constants.NEGLIGIBLE_NUMBER);\n};\n\n/**\n * Ensure the value is no greater or less than the min/max values.  If it is return the boundary value.\n * @method clamp\n * @memberof dc.utils\n * @param {any} val\n * @param {any} min\n * @param {any} max\n * @returns {any}\n */\ndc.utils.clamp = function (val, min, max) {\n    return val < min ? min : (val > max ? max : val);\n};\n\n/**\n * Using a simple static counter, provide a unique integer id.\n * @method uniqueId\n * @memberof dc.utils\n * @returns {Number}\n */\nvar _idCounter = 0;\ndc.utils.uniqueId = function () {\n    return ++_idCounter;\n};\n\n/**\n * Convert a name to an ID.\n * @method nameToId\n * @memberof dc.utils\n * @param {String} name\n * @returns {String}\n */\ndc.utils.nameToId = function (name) {\n    return name.toLowerCase().replace(/[\\s]/g, '_').replace(/[\\.']/g, '');\n};\n\n/**\n * Append or select an item on a parent element.\n * @method appendOrSelect\n * @memberof dc.utils\n * @param {d3.selection} parent\n * @param {String} selector\n * @param {String} tag\n * @returns {d3.selection}\n */\ndc.utils.appendOrSelect = function (parent, selector, tag) {\n    tag = tag || selector;\n    var element = parent.select(selector);\n    if (element.empty()) {\n        element = parent.append(tag);\n    }\n    return element;\n};\n\n/**\n * Return the number if the value is a number; else 0.\n * @method safeNumber\n * @memberof dc.utils\n * @param {Number|any} n\n * @returns {Number}\n */\ndc.utils.safeNumber = function (n) { return dc.utils.isNumber(+n) ? +n : 0;};\n","dc.logger = {};\n\ndc.logger.enableDebugLog = false;\n\ndc.logger.warn = function (msg) {\n    if (console) {\n        if (console.warn) {\n            console.warn(msg);\n        } else if (console.log) {\n            console.log(msg);\n        }\n    }\n\n    return dc.logger;\n};\n\ndc.logger.debug = function (msg) {\n    if (dc.logger.enableDebugLog && console) {\n        if (console.debug) {\n            console.debug(msg);\n        } else if (console.log) {\n            console.log(msg);\n        }\n    }\n\n    return dc.logger;\n};\n\ndc.logger.deprecate = function (fn, msg) {\n    // Allow logging of deprecation\n    var warned = false;\n    function deprecated () {\n        if (!warned) {\n            dc.logger.warn(msg);\n            warned = true;\n        }\n        return fn.apply(this, arguments);\n    }\n    return deprecated;\n};\n","dc.events = {\n    current: null\n};\n\n/**\n * This function triggers a throttled event function with a specified delay (in milli-seconds).  Events\n * that are triggered repetitively due to user interaction such brush dragging might flood the library\n * and invoke more renders than can be executed in time. Using this function to wrap your event\n * function allows the library to smooth out the rendering by throttling events and only responding to\n * the most recent event.\n * @name events.trigger\n * @memberof dc\n * @example\n * chart.on('renderlet', function(chart) {\n *     // smooth the rendering through event throttling\n *     dc.events.trigger(function(){\n *         // focus some other chart to the range selected by user on this chart\n *         someOtherChart.focus(chart.filter());\n *     });\n * })\n * @param {Function} closure\n * @param {Number} [delay]\n */\ndc.events.trigger = function (closure, delay) {\n    if (!delay) {\n        closure();\n        return;\n    }\n\n    dc.events.current = closure;\n\n    setTimeout(function () {\n        if (closure === dc.events.current) {\n            closure();\n        }\n    }, delay);\n};\n","/**\n * The dc.js filters are functions which are passed into crossfilter to chose which records will be\n * accumulated to produce values for the charts.  In the crossfilter model, any filters applied on one\n * dimension will affect all the other dimensions but not that one.  dc always applies a filter\n * function to the dimension; the function combines multiple filters and if any of them accept a\n * record, it is filtered in.\n *\n * These filter constructors are used as appropriate by the various charts to implement brushing.  We\n * mention below which chart uses which filter.  In some cases, many instances of a filter will be added.\n *\n * Each of the dc.js filters is an object with the following properties:\n * * `isFiltered` - a function that returns true if a value is within the filter\n * * `filterType` - a string identifying the filter, here the name of the constructor\n *\n * Currently these filter objects are also arrays, but this is not a requirement. Custom filters\n * can be used as long as they have the properties above.\n * @namespace filters\n * @memberof dc\n * @type {{}}\n */\ndc.filters = {};\n\n/**\n * RangedFilter is a filter which accepts keys between `low` and `high`.  It is used to implement X\n * axis brushing for the {@link dc.coordinateGridMixin coordinate grid charts}.\n *\n * Its `filterType` is 'RangedFilter'\n * @name RangedFilter\n * @memberof dc.filters\n * @param {Number} low\n * @param {Number} high\n * @returns {Array<Number>}\n * @constructor\n */\ndc.filters.RangedFilter = function (low, high) {\n    var range = new Array(low, high);\n    range.isFiltered = function (value) {\n        return value >= this[0] && value < this[1];\n    };\n    range.filterType = 'RangedFilter';\n\n    return range;\n};\n\n/**\n * TwoDimensionalFilter is a filter which accepts a single two-dimensional value.  It is used by the\n * {@link dc.heatMap heat map chart} to include particular cells as they are clicked.  (Rows and columns are\n * filtered by filtering all the cells in the row or column.)\n *\n * Its `filterType` is 'TwoDimensionalFilter'\n * @name TwoDimensionalFilter\n * @memberof dc.filters\n * @param {Array<Number>} filter\n * @returns {Array<Number>}\n * @constructor\n */\ndc.filters.TwoDimensionalFilter = function (filter) {\n    if (filter === null) { return null; }\n\n    var f = filter;\n    f.isFiltered = function (value) {\n        return value.length && value.length === f.length &&\n               value[0] === f[0] && value[1] === f[1];\n    };\n    f.filterType = 'TwoDimensionalFilter';\n\n    return f;\n};\n\n/**\n * The RangedTwoDimensionalFilter allows filtering all values which fit within a rectangular\n * region. It is used by the {@link dc.scatterPlot scatter plot} to implement rectangular brushing.\n *\n * It takes two two-dimensional points in the form `[[x1,y1],[x2,y2]]`, and normalizes them so that\n * `x1 <= x2` and `y1 <= y2`. It then returns a filter which accepts any points which are in the\n * rectangular range including the lower values but excluding the higher values.\n *\n * If an array of two values are given to the RangedTwoDimensionalFilter, it interprets the values as\n * two x coordinates `x1` and `x2` and returns a filter which accepts any points for which `x1 <= x <\n * x2`.\n *\n * Its `filterType` is 'RangedTwoDimensionalFilter'\n * @name RangedTwoDimensionalFilter\n * @memberof dc.filters\n * @param {Array<Array<Number>>} filter\n * @returns {Array<Array<Number>>}\n * @constructor\n */\ndc.filters.RangedTwoDimensionalFilter = function (filter) {\n    if (filter === null) { return null; }\n\n    var f = filter;\n    var fromBottomLeft;\n\n    if (f[0] instanceof Array) {\n        fromBottomLeft = [\n            [Math.min(filter[0][0], filter[1][0]), Math.min(filter[0][1], filter[1][1])],\n            [Math.max(filter[0][0], filter[1][0]), Math.max(filter[0][1], filter[1][1])]\n        ];\n    } else {\n        fromBottomLeft = [[filter[0], -Infinity], [filter[1], Infinity]];\n    }\n\n    f.isFiltered = function (value) {\n        var x, y;\n\n        if (value instanceof Array) {\n            x = value[0];\n            y = value[1];\n        } else {\n            x = value;\n            y = fromBottomLeft[0][1];\n        }\n\n        return x >= fromBottomLeft[0][0] && x < fromBottomLeft[1][0] &&\n               y >= fromBottomLeft[0][1] && y < fromBottomLeft[1][1];\n    };\n    f.filterType = 'RangedTwoDimensionalFilter';\n\n    return f;\n};\n","/**\n * `dc.baseMixin` is an abstract functional object representing a basic `dc` chart object\n * for all chart and widget implementations. Methods from the {@link #dc.baseMixin dc.baseMixin} are inherited\n * and available on all chart implementations in the `dc` library.\n * @name baseMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.baseMixin}\n */\ndc.baseMixin = function (_chart) {\n    _chart.__dcFlag__ = dc.utils.uniqueId();\n\n    var _dimension;\n    var _group;\n\n    var _anchor;\n    var _root;\n    var _svg;\n    var _isChild;\n\n    var _minWidth = 200;\n    var _defaultWidthCalc = function (element) {\n        var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n        return (width && width > _minWidth) ? width : _minWidth;\n    };\n    var _widthCalc = _defaultWidthCalc;\n\n    var _minHeight = 200;\n    var _defaultHeightCalc = function (element) {\n        var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n        return (height && height > _minHeight) ? height : _minHeight;\n    };\n    var _heightCalc = _defaultHeightCalc;\n    var _width, _height;\n    var _useViewBoxResizing = false;\n\n    var _keyAccessor = dc.pluck('key');\n    var _valueAccessor = dc.pluck('value');\n    var _label = dc.pluck('key');\n\n    var _ordering = dc.pluck('key');\n    var _orderSort;\n\n    var _renderLabel = false;\n\n    var _title = function (d) {\n        return _chart.keyAccessor()(d) + ': ' + _chart.valueAccessor()(d);\n    };\n    var _renderTitle = true;\n    var _controlsUseVisibility = false;\n\n    var _transitionDuration = 750;\n\n    var _transitionDelay = 0;\n\n    var _filterPrinter = dc.printers.filters;\n\n    var _mandatoryAttributes = ['dimension', 'group'];\n\n    var _chartGroup = dc.constants.DEFAULT_CHART_GROUP;\n\n    var _listeners = d3.dispatch(\n        'preRender',\n        'postRender',\n        'preRedraw',\n        'postRedraw',\n        'filtered',\n        'zoomed',\n        'renderlet',\n        'pretransition');\n\n    var _legend;\n    var _commitHandler;\n\n    var _filters = [];\n    var _filterHandler = function (dimension, filters) {\n        if (filters.length === 0) {\n            dimension.filter(null);\n        } else if (filters.length === 1 && !filters[0].isFiltered) {\n            // single value and not a function-based filter\n            dimension.filterExact(filters[0]);\n        } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n            // single range-based filter\n            dimension.filterRange(filters[0]);\n        } else {\n            dimension.filterFunction(function (d) {\n                for (var i = 0; i < filters.length; i++) {\n                    var filter = filters[i];\n                    if (filter.isFiltered && filter.isFiltered(d)) {\n                        return true;\n                    } else if (filter <= d && filter >= d) {\n                        return true;\n                    }\n                }\n                return false;\n            });\n        }\n        return filters;\n    };\n\n    var _data = function (group) {\n        return group.all();\n    };\n\n    /**\n     * Set or get the height attribute of a chart. The height is applied to the SVGElement generated by\n     * the chart when rendered (or re-rendered). If a value is given, then it will be used to calculate\n     * the new height and the chart returned for method chaining.  The value can either be a numeric, a\n     * function, or falsy. If no value is specified then the value of the current height attribute will\n     * be returned.\n     *\n     * By default, without an explicit height being given, the chart will select the width of its\n     * anchor element. If that isn't possible it defaults to 200 (provided by the\n     * {@link dc.baseMixin#minHeight minHeight} property). Setting the value falsy will return\n     * the chart to the default behavior.\n     * @method height\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#minHeight minHeight}\n     * @example\n     * // Default height\n     * chart.height(function (element) {\n     *     var height = element && element.getBoundingClientRect && element.getBoundingClientRect().height;\n     *     return (height && height > chart.minHeight()) ? height : chart.minHeight();\n     * });\n     *\n     * chart.height(250); // Set the chart's height to 250px;\n     * chart.height(function(anchor) { return doSomethingWith(anchor); }); // set the chart's height with a function\n     * chart.height(null); // reset the height to the default auto calculation\n     * @param {Number|Function} [height]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.height = function (height) {\n        if (!arguments.length) {\n            if (!dc.utils.isNumber(_height)) {\n                // only calculate once\n                _height = _heightCalc(_root.node());\n            }\n            return _height;\n        }\n        _heightCalc = d3.functor(height || _defaultHeightCalc);\n        _height = undefined;\n        return _chart;\n    };\n\n    /**\n     * Set or get the width attribute of a chart.\n     * @method width\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#height height}\n     * @see {@link dc.baseMixin#minWidth minWidth}\n     * @example\n     * // Default width\n     * chart.width(function (element) {\n     *     var width = element && element.getBoundingClientRect && element.getBoundingClientRect().width;\n     *     return (width && width > chart.minWidth()) ? width : chart.minWidth();\n     * });\n     * @param {Number|Function} [width]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.width = function (width) {\n        if (!arguments.length) {\n            if (!dc.utils.isNumber(_width)) {\n                // only calculate once\n                _width = _widthCalc(_root.node());\n            }\n            return _width;\n        }\n        _widthCalc = d3.functor(width || _defaultWidthCalc);\n        _width = undefined;\n        return _chart;\n    };\n\n    /**\n     * Set or get the minimum width attribute of a chart. This only has effect when used with the default\n     * {@link dc.baseMixin#width width} function.\n     * @method minWidth\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#width width}\n     * @param {Number} [minWidth=200]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.minWidth = function (minWidth) {\n        if (!arguments.length) {\n            return _minWidth;\n        }\n        _minWidth = minWidth;\n        return _chart;\n    };\n\n    /**\n     * Set or get the minimum height attribute of a chart. This only has effect when used with the default\n     * {@link dc.baseMixin#height height} function.\n     * @method minHeight\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#height height}\n     * @param {Number} [minHeight=200]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.minHeight = function (minHeight) {\n        if (!arguments.length) {\n            return _minHeight;\n        }\n        _minHeight = minHeight;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off using the SVG\n     * {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/viewBox `viewBox` attribute}.\n     * When enabled, `viewBox` will be set on the svg root element instead of `width` and `height`.\n     * Requires that the chart aspect ratio be defined using chart.width(w) and chart.height(h).\n     *\n     * This will maintain the aspect ratio while enabling the chart to resize responsively to the\n     * space given to the chart using CSS. For example, the chart can use `width: 100%; height:\n     * 100%` or absolute positioning to resize to its parent div.\n     *\n     * Since the text will be sized as if the chart is drawn according to the width and height, and\n     * will be resized if the chart is any other size, you need to set the chart width and height so\n     * that the text looks good. In practice, 600x400 seems to work pretty well for most charts.\n     *\n     * You can see examples of this resizing strategy in the [Chart Resizing\n     * Examples](http://dc-js.github.io/dc.js/resizing/); just add `?resize=viewbox` to any of the\n     * one-chart examples to enable `useViewBoxResizing`.\n     * @method useViewBoxResizing\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [useViewBoxResizing=false]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.useViewBoxResizing = function (useViewBoxResizing) {\n        if (!arguments.length) {\n            return _useViewBoxResizing;\n        }\n        _useViewBoxResizing = useViewBoxResizing;\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Set or get the dimension attribute of a chart. In `dc`, a dimension can be any valid\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter dimension}\n     *\n     * If a value is given, then it will be used as the new dimension. If no value is specified then\n     * the current dimension will be returned.\n     * @method dimension\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension crossfilter.dimension}\n     * @example\n     * var index = crossfilter([]);\n     * var dimension = index.dimension(dc.pluck('key'));\n     * chart.dimension(dimension);\n     * @param {crossfilter.dimension} [dimension]\n     * @returns {crossfilter.dimension|dc.baseMixin}\n     */\n    _chart.dimension = function (dimension) {\n        if (!arguments.length) {\n            return _dimension;\n        }\n        _dimension = dimension;\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * Set the data callback or retrieve the chart's data set. The data callback is passed the chart's\n     * group and by default will return\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all}.\n     * This behavior may be modified to, for instance, return only the top 5 groups.\n     * @method data\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // Default data function\n     * chart.data(function (group) { return group.all(); });\n     *\n     * chart.data(function (group) { return group.top(5); });\n     * @param {Function} [callback]\n     * @returns {*|dc.baseMixin}\n     */\n    _chart.data = function (callback) {\n        if (!arguments.length) {\n            return _data.call(_chart, _group);\n        }\n        _data = d3.functor(callback);\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Set or get the group attribute of a chart. In `dc` a group is a\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter group}.\n     * Usually the group should be created from the particular dimension associated with the same chart. If a value is\n     * given, then it will be used as the new group.\n     *\n     * If no value specified then the current group will be returned.\n     * If `name` is specified then it will be used to generate legend label.\n     * @method group\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n     * @example\n     * var index = crossfilter([]);\n     * var dimension = index.dimension(dc.pluck('key'));\n     * chart.dimension(dimension);\n     * chart.group(dimension.group(crossfilter.reduceSum()));\n     * @param {crossfilter.group} [group]\n     * @param {String} [name]\n     * @returns {crossfilter.group|dc.baseMixin}\n     */\n    _chart.group = function (group, name) {\n        if (!arguments.length) {\n            return _group;\n        }\n        _group = group;\n        _chart._groupName = name;\n        _chart.expireCache();\n        return _chart;\n    };\n\n    /**\n     * Get or set an accessor to order ordinal dimensions.  The chart uses\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#quicksort_by crossfilter.quicksort.by}\n     * to sort elements; this accessor returns the value to order on.\n     * @method ordering\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#quicksort_by crossfilter.quicksort.by}\n     * @example\n     * // Default ordering accessor\n     * _chart.ordering(dc.pluck('key'));\n     * @param {Function} [orderFunction]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.ordering = function (orderFunction) {\n        if (!arguments.length) {\n            return _ordering;\n        }\n        _ordering = orderFunction;\n        _orderSort = crossfilter.quicksort.by(_ordering);\n        _chart.expireCache();\n        return _chart;\n    };\n\n    _chart._computeOrderedGroups = function (data) {\n        var dataCopy = data.slice(0);\n\n        if (dataCopy.length <= 1) {\n            return dataCopy;\n        }\n\n        if (!_orderSort) {\n            _orderSort = crossfilter.quicksort.by(_ordering);\n        }\n\n        return _orderSort(dataCopy, 0, dataCopy.length);\n    };\n\n    /**\n     * Clear all filters associated with this chart. The same effect can be achieved by calling\n     * {@link dc.baseMixin#filter chart.filter(null)}.\n     * @method filterAll\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.filterAll = function () {\n        return _chart.filter(null);\n    };\n\n    /**\n     * Execute d3 single selection in the chart's scope using the given selector and return the d3\n     * selection.\n     *\n     * This function is **not chainable** since it does not return a chart instance; however the d3\n     * selection result can be chained to d3 function calls.\n     * @method select\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#d3_select d3.select}\n     * @example\n     * // Has the same effect as d3.select('#chart-id').select(selector)\n     * chart.select(selector)\n     * @returns {d3.selection}\n     */\n    _chart.select = function (s) {\n        return _root.select(s);\n    };\n\n    /**\n     * Execute in scope d3 selectAll using the given selector and return d3 selection result.\n     *\n     * This function is **not chainable** since it does not return a chart instance; however the d3\n     * selection result can be chained to d3 function calls.\n     * @method selectAll\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#d3_selectAll d3.selectAll}\n     * @example\n     * // Has the same effect as d3.select('#chart-id').selectAll(selector)\n     * chart.selectAll(selector)\n     * @returns {d3.selection}\n     */\n    _chart.selectAll = function (s) {\n        return _root ? _root.selectAll(s) : null;\n    };\n\n    /**\n     * Set the root SVGElement to either be an existing chart's root; or any valid [d3 single\n     * selector](https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements) specifying a dom\n     * block element such as a div; or a dom element or d3 selection. Optionally registers the chart\n     * within the chartGroup. This class is called internally on chart initialization, but be called\n     * again to relocate the chart. However, it will orphan any previously created SVGElements.\n     * @method anchor\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {anchorChart|anchorSelector|anchorNode} [parent]\n     * @param {String} [chartGroup]\n     * @returns {String|node|d3.selection|dc.baseMixin}\n     */\n    _chart.anchor = function (parent, chartGroup) {\n        if (!arguments.length) {\n            return _anchor;\n        }\n        if (dc.instanceOfChart(parent)) {\n            _anchor = parent.anchor();\n            _root = parent.root();\n            _isChild = true;\n        } else if (parent) {\n            if (parent.select && parent.classed) { // detect d3 selection\n                _anchor = parent.node();\n            } else {\n                _anchor = parent;\n            }\n            _root = d3.select(_anchor);\n            _root.classed(dc.constants.CHART_CLASS, true);\n            dc.registerChart(_chart, chartGroup);\n            _isChild = false;\n        } else {\n            throw new dc.errors.BadArgumentException('parent must be defined');\n        }\n        _chartGroup = chartGroup;\n        return _chart;\n    };\n\n    /**\n     * Returns the DOM id for the chart's anchored location.\n     * @method anchorName\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {String}\n     */\n    _chart.anchorName = function () {\n        var a = _chart.anchor();\n        if (a && a.id) {\n            return a.id;\n        }\n        if (a && a.replace) {\n            return a.replace('#', '');\n        }\n        return 'dc-chart' + _chart.chartID();\n    };\n\n    /**\n     * Returns the root element where a chart resides. Usually it will be the parent div element where\n     * the SVGElement was created. You can also pass in a new root element however this is usually handled by\n     * dc internally. Resetting the root element on a chart outside of dc internals may have\n     * unexpected consequences.\n     * @method root\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement HTMLElement}\n     * @param {HTMLElement} [rootElement]\n     * @returns {HTMLElement|dc.baseMixin}\n     */\n    _chart.root = function (rootElement) {\n        if (!arguments.length) {\n            return _root;\n        }\n        _root = rootElement;\n        return _chart;\n    };\n\n    /**\n     * Returns the top SVGElement for this specific chart. You can also pass in a new SVGElement,\n     * however this is usually handled by dc internally. Resetting the SVGElement on a chart outside\n     * of dc internals may have unexpected consequences.\n     * @method svg\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n     * @param {SVGElement|d3.selection} [svgElement]\n     * @returns {SVGElement|d3.selection|dc.baseMixin}\n     */\n    _chart.svg = function (svgElement) {\n        if (!arguments.length) {\n            return _svg;\n        }\n        _svg = svgElement;\n        return _chart;\n    };\n\n    /**\n     * Remove the chart's SVGElements from the dom and recreate the container SVGElement.\n     * @method resetSvg\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/API/SVGElement SVGElement}\n     * @returns {SVGElement}\n     */\n    _chart.resetSvg = function () {\n        _chart.select('svg').remove();\n        return generateSvg();\n    };\n\n    function sizeSvg () {\n        if (_svg) {\n            if (!_useViewBoxResizing) {\n                _svg\n                    .attr('width', _chart.width())\n                    .attr('height', _chart.height());\n            } else if (!_svg.attr('viewBox')) {\n                _svg\n                    .attr('viewBox', '0 0 ' + _chart.width() + ' ' + _chart.height());\n            }\n        }\n    }\n\n    function generateSvg () {\n        _svg = _chart.root().append('svg');\n        sizeSvg();\n        return _svg;\n    }\n\n    /**\n     * Set or get the filter printer function. The filter printer function is used to generate human\n     * friendly text for filter value(s) associated with the chart instance. The text will get shown\n     * in the `.filter element; see {@link dc.baseMixin#turnOnControls turnOnControls}.\n     *\n     * By default dc charts use a default filter printer {@link dc.printers.filters dc.printers.filters}\n     * that provides simple printing support for both single value and ranged filters.\n     * @method filterPrinter\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // for a chart with an ordinal brush, print the filters in upper case\n     * chart.filterPrinter(function(filters) {\n     *   return filters.map(function(f) { return f.toUpperCase(); }).join(', ');\n     * });\n     * // for a chart with a range brush, print the filter as start and extent\n     * chart.filterPrinter(function(filters) {\n     *   return 'start ' + dc.utils.printSingleValue(filters[0][0]) +\n     *     ' extent ' + dc.utils.printSingleValue(filters[0][1] - filters[0][0]);\n     * });\n     * @param {Function} [filterPrinterFunction=dc.printers.filters]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.filterPrinter = function (filterPrinterFunction) {\n        if (!arguments.length) {\n            return _filterPrinter;\n        }\n        _filterPrinter = filterPrinterFunction;\n        return _chart;\n    };\n\n    /**\n     * If set, use the `visibility` attribute instead of the `display` attribute for showing/hiding\n     * chart reset and filter controls, for less disruption to the layout.\n     * @method controlsUseVisibility\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [controlsUseVisibility=false]\n     * @returns {Boolean|dc.baseMixin}\n     **/\n    _chart.controlsUseVisibility = function (useVisibility) {\n        if (!arguments.length) {\n            return _controlsUseVisibility;\n        }\n        _controlsUseVisibility = useVisibility;\n        return _chart;\n    };\n\n    /**\n     * Turn on optional control elements within the root element. dc currently supports the\n     * following html control elements.\n     * * root.selectAll('.reset') - elements are turned on if the chart has an active filter. This type\n     * of control element is usually used to store a reset link to allow user to reset filter on a\n     * certain chart. This element will be turned off automatically if the filter is cleared.\n     * * root.selectAll('.filter') elements are turned on if the chart has an active filter. The text\n     * content of this element is then replaced with the current filter value using the filter printer\n     * function. This type of element will be turned off automatically if the filter is cleared.\n     * @method turnOnControls\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.turnOnControls = function () {\n        if (_root) {\n            var attribute = _chart.controlsUseVisibility() ? 'visibility' : 'display';\n            _chart.selectAll('.reset').style(attribute, null);\n            _chart.selectAll('.filter').text(_filterPrinter(_chart.filters())).style(attribute, null);\n        }\n        return _chart;\n    };\n\n    /**\n     * Turn off optional control elements within the root element.\n     * @method turnOffControls\n     * @memberof dc.baseMixin\n     * @see {@link dc.baseMixin#turnOnControls turnOnControls}\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.turnOffControls = function () {\n        if (_root) {\n            var attribute = _chart.controlsUseVisibility() ? 'visibility' : 'display';\n            var value = _chart.controlsUseVisibility() ? 'hidden' : 'none';\n            _chart.selectAll('.reset').style(attribute, value);\n            _chart.selectAll('.filter').style(attribute, value).text(_chart.filter());\n        }\n        return _chart;\n    };\n\n    /**\n     * Set or get the animation transition duration (in milliseconds) for this chart instance.\n     * @method transitionDuration\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Number} [duration=750]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.transitionDuration = function (duration) {\n        if (!arguments.length) {\n            return _transitionDuration;\n        }\n        _transitionDuration = duration;\n        return _chart;\n    };\n\n    /**\n     * Set or get the animation transition delay (in milliseconds) for this chart instance.\n     * @method transitionDelay\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Number} [delay=0]\n     * @returns {Number|dc.baseMixin}\n     */\n    _chart.transitionDelay = function (delay) {\n        if (!arguments.length) {\n            return _transitionDelay;\n        }\n        _transitionDelay = delay;\n        return _chart;\n    };\n\n    _chart._mandatoryAttributes = function (_) {\n        if (!arguments.length) {\n            return _mandatoryAttributes;\n        }\n        _mandatoryAttributes = _;\n        return _chart;\n    };\n\n    function checkForMandatoryAttributes (a) {\n        if (!_chart[a] || !_chart[a]()) {\n            throw new dc.errors.InvalidStateException('Mandatory attribute chart.' + a +\n                ' is missing on chart[#' + _chart.anchorName() + ']');\n        }\n    }\n\n    /**\n     * Invoking this method will force the chart to re-render everything from scratch. Generally it\n     * should only be used to render the chart for the first time on the page or if you want to make\n     * sure everything is redrawn from scratch instead of relying on the default incremental redrawing\n     * behaviour.\n     * @method render\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.render = function () {\n        _height = _width = undefined; // force recalculate\n        _listeners.preRender(_chart);\n\n        if (_mandatoryAttributes) {\n            _mandatoryAttributes.forEach(checkForMandatoryAttributes);\n        }\n\n        var result = _chart._doRender();\n\n        if (_legend) {\n            _legend.render();\n        }\n\n        _chart._activateRenderlets('postRender');\n\n        return result;\n    };\n\n    _chart._activateRenderlets = function (event) {\n        _listeners.pretransition(_chart);\n        if (_chart.transitionDuration() > 0 && _svg) {\n            _svg.transition().duration(_chart.transitionDuration()).delay(_chart.transitionDelay())\n                .each('end', function () {\n                    _listeners.renderlet(_chart);\n                    if (event) {\n                        _listeners[event](_chart);\n                    }\n                });\n        } else {\n            _listeners.renderlet(_chart);\n            if (event) {\n                _listeners[event](_chart);\n            }\n        }\n    };\n\n    /**\n     * Calling redraw will cause the chart to re-render data changes incrementally. If there is no\n     * change in the underlying data dimension then calling this method will have no effect on the\n     * chart. Most chart interaction in dc will automatically trigger this method through internal\n     * events (in particular {@link dc.redrawAll dc.redrawAll}); therefore, you only need to\n     * manually invoke this function if data is manipulated outside of dc's control (for example if\n     * data is loaded in the background using\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}).\n     * @method redraw\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.redraw = function () {\n        sizeSvg();\n        _listeners.preRedraw(_chart);\n\n        var result = _chart._doRedraw();\n\n        if (_legend) {\n            _legend.render();\n        }\n\n        _chart._activateRenderlets('postRedraw');\n\n        return result;\n    };\n\n    /**\n     * Gets/sets the commit handler. If the chart has a commit handler, the handler will be called when\n     * the chart's filters have changed, in order to send the filter data asynchronously to a server.\n     *\n     * Unlike other functions in dc.js, the commit handler is asynchronous. It takes two arguments:\n     * a flag indicating whether this is a render (true) or a redraw (false), and a callback to be\n     * triggered once the commit is filtered. The callback has the standard node.js continuation signature\n     * with error first and result second.\n     * @method commitHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.commitHandler = function (commitHandler) {\n        if (!arguments.length) {\n            return _commitHandler;\n        }\n        _commitHandler = commitHandler;\n        return _chart;\n    };\n\n    /**\n     * Redraws all charts in the same group as this chart, typically in reaction to a filter\n     * change. If the chart has a {@link dc.baseMixin.commitFilter commitHandler}, it will\n     * be executed and waited for.\n     * @method redrawGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.redrawGroup = function () {\n        if (_commitHandler) {\n            _commitHandler(false, function (error, result) {\n                if (error) {\n                    console.log(error);\n                } else {\n                    dc.redrawAll(_chart.chartGroup());\n                }\n            });\n        } else {\n            dc.redrawAll(_chart.chartGroup());\n        }\n        return _chart;\n    };\n\n    /**\n     * Renders all charts in the same group as this chart. If the chart has a\n     * {@link dc.baseMixin.commitFilter commitHandler}, it will be executed and waited for\n     * @method renderGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.renderGroup = function () {\n        if (_commitHandler) {\n            _commitHandler(false, function (error, result) {\n                if (error) {\n                    console.log(error);\n                } else {\n                    dc.renderAll(_chart.chartGroup());\n                }\n            });\n        } else {\n            dc.renderAll(_chart.chartGroup());\n        }\n        return _chart;\n    };\n\n    _chart._invokeFilteredListener = function (f) {\n        if (f !== undefined) {\n            _listeners.filtered(_chart, f);\n        }\n    };\n\n    _chart._invokeZoomedListener = function () {\n        _listeners.zoomed(_chart);\n    };\n\n    var _hasFilterHandler = function (filters, filter) {\n        if (filter === null || typeof(filter) === 'undefined') {\n            return filters.length > 0;\n        }\n        return filters.some(function (f) {\n            return filter <= f && filter >= f;\n        });\n    };\n\n    /**\n     * Set or get the has-filter handler. The has-filter handler is a function that checks to see if\n     * the chart's current filters (first argument) include a specific filter (second argument).  Using a custom has-filter handler allows\n     * you to change the way filters are checked for and replaced.\n     * @method hasFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default has-filter handler\n     * chart.hasFilterHandler(function (filters, filter) {\n     *     if (filter === null || typeof(filter) === 'undefined') {\n     *         return filters.length > 0;\n     *     }\n     *     return filters.some(function (f) {\n     *         return filter <= f && filter >= f;\n     *     });\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.hasFilterHandler(function(filters, filter) {\n     *     return false;\n     * });\n     * @param {Function} [hasFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.hasFilterHandler = function (hasFilterHandler) {\n        if (!arguments.length) {\n            return _hasFilterHandler;\n        }\n        _hasFilterHandler = hasFilterHandler;\n        return _chart;\n    };\n\n    /**\n     * Check whether any active filter or a specific filter is associated with particular chart instance.\n     * This function is **not chainable**.\n     * @method hasFilter\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#hasFilterHandler hasFilterHandler}\n     * @param {*} [filter]\n     * @returns {Boolean}\n     */\n    _chart.hasFilter = function (filter) {\n        return _hasFilterHandler(_filters, filter);\n    };\n\n    var _removeFilterHandler = function (filters, filter) {\n        for (var i = 0; i < filters.length; i++) {\n            if (filters[i] <= filter && filters[i] >= filter) {\n                filters.splice(i, 1);\n                break;\n            }\n        }\n        return filters;\n    };\n\n    /**\n     * Set or get the remove filter handler. The remove filter handler is a function that removes a\n     * filter from the chart's current filters. Using a custom remove filter handler allows you to\n     * change how filters are removed or perform additional work when removing a filter, e.g. when\n     * using a filter server other than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method removeFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default remove filter handler\n     * chart.removeFilterHandler(function (filters, filter) {\n     *     for (var i = 0; i < filters.length; i++) {\n     *         if (filters[i] <= filter && filters[i] >= filter) {\n     *             filters.splice(i, 1);\n     *             break;\n     *         }\n     *     }\n     *     return filters;\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.removeFilterHandler(function(filters, filter) {\n     *     return filters;\n     * });\n     * @param {Function} [removeFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.removeFilterHandler = function (removeFilterHandler) {\n        if (!arguments.length) {\n            return _removeFilterHandler;\n        }\n        _removeFilterHandler = removeFilterHandler;\n        return _chart;\n    };\n\n    var _addFilterHandler = function (filters, filter) {\n        filters.push(filter);\n        return filters;\n    };\n\n    /**\n     * Set or get the add filter handler. The add filter handler is a function that adds a filter to\n     * the chart's filter list. Using a custom add filter handler allows you to change the way filters\n     * are added or perform additional work when adding a filter, e.g. when using a filter server other\n     * than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method addFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default add filter handler\n     * chart.addFilterHandler(function (filters, filter) {\n     *     filters.push(filter);\n     *     return filters;\n     * });\n     *\n     * // custom filter handler (no-op)\n     * chart.addFilterHandler(function(filters, filter) {\n     *     return filters;\n     * });\n     * @param {Function} [addFilterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.addFilterHandler = function (addFilterHandler) {\n        if (!arguments.length) {\n            return _addFilterHandler;\n        }\n        _addFilterHandler = addFilterHandler;\n        return _chart;\n    };\n\n    var _resetFilterHandler = function (filters) {\n        return [];\n    };\n\n    /**\n     * Set or get the reset filter handler. The reset filter handler is a function that resets the\n     * chart's filter list by returning a new list. Using a custom reset filter handler allows you to\n     * change the way filters are reset, or perform additional work when resetting the filters,\n     * e.g. when using a filter server other than crossfilter.\n     *\n     * The handler should return a new or modified array as the result.\n     * @method resetFilterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default remove filter handler\n     * function (filters) {\n     *     return [];\n     * }\n     *\n     * // custom filter handler (no-op)\n     * chart.resetFilterHandler(function(filters) {\n     *     return filters;\n     * });\n     * @param {Function} [resetFilterHandler]\n     * @returns {dc.baseMixin}\n     */\n    _chart.resetFilterHandler = function (resetFilterHandler) {\n        if (!arguments.length) {\n            return _resetFilterHandler;\n        }\n        _resetFilterHandler = resetFilterHandler;\n        return _chart;\n    };\n\n    function applyFilters (filters) {\n        if (_chart.dimension() && _chart.dimension().filter) {\n            var fs = _filterHandler(_chart.dimension(), filters);\n            if (fs) {\n                filters = fs;\n            }\n        }\n        return filters;\n    }\n\n    /**\n     * Replace the chart filter. This is equivalent to calling `chart.filter(null).filter(filter)`\n     * but more efficient because the filter is only applied once.\n     *\n     * @method replaceFilter\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {*} [filter]\n     * @returns {dc.baseMixin}\n     **/\n    _chart.replaceFilter = function (filter) {\n        _filters = _resetFilterHandler(_filters);\n        _chart.filter(filter);\n        return _chart;\n    };\n\n    /**\n     * Filter the chart by the given parameter, or return the current filter if no input parameter\n     * is given.\n     *\n     * The filter parameter can take one of these forms:\n     * * A single value: the value will be toggled (added if it is not present in the current\n     * filters, removed if it is present)\n     * * An array containing a single array of values (`[[value,value,value]]`): each value is\n     * toggled\n     * * When appropriate for the chart, a {@link dc.filters dc filter object} such as\n     *   * {@link dc.filters.RangedFilter `dc.filters.RangedFilter`} for the\n     * {@link dc.coordinateGridMixin dc.coordinateGridMixin} charts\n     *   * {@link dc.filters.TwoDimensionalFilter `dc.filters.TwoDimensionalFilter`} for the\n     * {@link dc.heatMap heat map}\n     *   * {@link dc.filters.RangedTwoDimensionalFilter `dc.filters.RangedTwoDimensionalFilter`}\n     * for the {@link dc.scatterPlot scatter plot}\n     * * `null`: the filter will be reset using the\n     * {@link dc.baseMixin#resetFilterHandler resetFilterHandler}\n     *\n     * Note that this is always a toggle (even when it doesn't make sense for the filter type). If\n     * you wish to replace the current filter, either call `chart.filter(null)` first - or it's more\n     * efficient to call {@link dc.baseMixin#replaceFilter `chart.replaceFilter(filter)`} instead.\n     *\n     * Each toggle is executed by checking if the value is already present using the\n     * {@link dc.baseMixin#hasFilterHandler hasFilterHandler}; if it is not present, it is added\n     * using the {@link dc.baseMixin#addFilterHandler addFilterHandler}; if it is already present,\n     * it is removed using the {@link dc.baseMixin#removeFilterHandler removeFilterHandler}.\n     *\n     * Once the filters array has been updated, the filters are applied to the\n     * crossfilter dimension, using the {@link dc.baseMixin#filterHandler filterHandler}.\n     *\n     * Once you have set the filters, call {@link dc.baseMixin#redrawGroup `chart.redrawGroup()`}\n     * (or {@link dc.redrawAll `dc.redrawAll()`}) to redraw the chart's group.\n     * @method filter\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link dc.baseMixin#addFilterHandler addFilterHandler}\n     * @see {@link dc.baseMixin#removeFilterHandler removeFilterHandler}\n     * @see {@link dc.baseMixin#resetFilterHandler resetFilterHandler}\n     * @see {@link dc.baseMixin#filterHandler filterHandler}\n     * @example\n     * // filter by a single string\n     * chart.filter('Sunday');\n     * // filter by a single age\n     * chart.filter(18);\n     * // filter by a set of states\n     * chart.filter([['MA', 'TX', 'ND', 'WA']]);\n     * // filter by range -- note the use of dc.filters.RangedFilter, which is different\n     * // from the syntax for filtering a crossfilter dimension directly, dimension.filter([15,20])\n     * chart.filter(dc.filters.RangedFilter(15,20));\n     * @param {*} [filter]\n     * @returns {dc.baseMixin}\n     */\n    _chart.filter = function (filter) {\n        if (!arguments.length) {\n            return _filters.length > 0 ? _filters[0] : null;\n        }\n        var filters = _filters;\n        if (filter instanceof Array && filter[0] instanceof Array && !filter.isFiltered) {\n            // toggle each filter\n            filter[0].forEach(function (f) {\n                if (_hasFilterHandler(filters, f)) {\n                    filters = _removeFilterHandler(filters, f);\n                } else {\n                    filters = _addFilterHandler(filters, f);\n                }\n            });\n        } else if (filter === null) {\n            filters = _resetFilterHandler(filters);\n        } else {\n            if (_hasFilterHandler(filters, filter)) {\n                filters = _removeFilterHandler(filters, filter);\n            } else {\n                filters = _addFilterHandler(filters, filter);\n            }\n        }\n        _filters = applyFilters(filters);\n        _chart._invokeFilteredListener(filter);\n\n        if (_root !== null && _chart.hasFilter()) {\n            _chart.turnOnControls();\n        } else {\n            _chart.turnOffControls();\n        }\n\n        return _chart;\n    };\n\n    /**\n     * Returns all current filters. This method does not perform defensive cloning of the internal\n     * filter array before returning, therefore any modification of the returned array will effect the\n     * chart's internal filter storage.\n     * @method filters\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {Array<*>}\n     */\n    _chart.filters = function () {\n        return _filters;\n    };\n\n    _chart.highlightSelected = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, true);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);\n    };\n\n    _chart.fadeDeselected = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, false);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, true);\n    };\n\n    _chart.resetHighlight = function (e) {\n        d3.select(e).classed(dc.constants.SELECTED_CLASS, false);\n        d3.select(e).classed(dc.constants.DESELECTED_CLASS, false);\n    };\n\n    /**\n     * This function is passed to d3 as the onClick handler for each chart. The default behavior is to\n     * filter on the clicked datum (passed to the callback) and redraw the chart group.\n     * @method onClick\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {*} datum\n     */\n    _chart.onClick = function (datum) {\n        var filter = _chart.keyAccessor()(datum);\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    /**\n     * Set or get the filter handler. The filter handler is a function that performs the filter action\n     * on a specific dimension. Using a custom filter handler allows you to perform additional logic\n     * before or after filtering.\n     * @method filterHandler\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter crossfilter.dimension.filter}\n     * @example\n     * // the default filter handler handles all possible cases for the charts in dc.js\n     * // you can replace it with something more specialized for your own chart\n     * chart.filterHandler(function (dimension, filters) {\n     *     if (filters.length === 0) {\n     *         // the empty case (no filtering)\n     *         dimension.filter(null);\n     *     } else if (filters.length === 1 && !filters[0].isFiltered) {\n     *         // single value and not a function-based filter\n     *         dimension.filterExact(filters[0]);\n     *     } else if (filters.length === 1 && filters[0].filterType === 'RangedFilter') {\n     *         // single range-based filter\n     *         dimension.filterRange(filters[0]);\n     *     } else {\n     *         // an array of values, or an array of filter objects\n     *         dimension.filterFunction(function (d) {\n     *             for (var i = 0; i < filters.length; i++) {\n     *                 var filter = filters[i];\n     *                 if (filter.isFiltered && filter.isFiltered(d)) {\n     *                     return true;\n     *                 } else if (filter <= d && filter >= d) {\n     *                     return true;\n     *                 }\n     *             }\n     *             return false;\n     *         });\n     *     }\n     *     return filters;\n     * });\n     *\n     * // custom filter handler\n     * chart.filterHandler(function(dimension, filter){\n     *     var newFilter = filter + 10;\n     *     dimension.filter(newFilter);\n     *     return newFilter; // set the actual filter value to the new value\n     * });\n     * @param {Function} [filterHandler]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.filterHandler = function (filterHandler) {\n        if (!arguments.length) {\n            return _filterHandler;\n        }\n        _filterHandler = filterHandler;\n        return _chart;\n    };\n\n    // abstract function stub\n    _chart._doRender = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    _chart.legendables = function () {\n        // do nothing in base, should be overridden by sub-function\n        return [];\n    };\n\n    _chart.legendHighlight = function () {\n        // do nothing in base, should be overridden by sub-function\n    };\n\n    _chart.legendReset = function () {\n        // do nothing in base, should be overridden by sub-function\n    };\n\n    _chart.legendToggle = function () {\n        // do nothing in base, should be overriden by sub-function\n    };\n\n    _chart.isLegendableHidden = function () {\n        // do nothing in base, should be overridden by sub-function\n        return false;\n    };\n\n    /**\n     * Set or get the key accessor function. The key accessor function is used to retrieve the key\n     * value from the crossfilter group. Key values are used differently in different charts, for\n     * example keys correspond to slices in a pie chart and x axis positions in a grid coordinate chart.\n     * @method keyAccessor\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default key accessor\n     * chart.keyAccessor(function(d) { return d.key; });\n     * // custom key accessor for a multi-value crossfilter reduction\n     * chart.keyAccessor(function(p) { return p.value.absGain; });\n     * @param {Function} [keyAccessor]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.keyAccessor = function (keyAccessor) {\n        if (!arguments.length) {\n            return _keyAccessor;\n        }\n        _keyAccessor = keyAccessor;\n        return _chart;\n    };\n\n    /**\n     * Set or get the value accessor function. The value accessor function is used to retrieve the\n     * value from the crossfilter group. Group values are used differently in different charts, for\n     * example values correspond to slice sizes in a pie chart and y axis positions in a grid\n     * coordinate chart.\n     * @method valueAccessor\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default value accessor\n     * chart.valueAccessor(function(d) { return d.value; });\n     * // custom value accessor for a multi-value crossfilter reduction\n     * chart.valueAccessor(function(p) { return p.value.percentageGain; });\n     * @param {Function} [valueAccessor]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.valueAccessor = function (valueAccessor) {\n        if (!arguments.length) {\n            return _valueAccessor;\n        }\n        _valueAccessor = valueAccessor;\n        return _chart;\n    };\n\n    /**\n     * Set or get the label function. The chart class will use this function to render labels for each\n     * child element in the chart, e.g. slices in a pie chart or bubbles in a bubble chart. Not every\n     * chart supports the label function, for example line chart does not use this function\n     * at all. By default, enables labels; pass false for the second parameter if this is not desired.\n     * @method label\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default label function just return the key\n     * chart.label(function(d) { return d.key; });\n     * // label function has access to the standard d3 data binding and can get quite complicated\n     * chart.label(function(d) { return d.data.key + '(' + Math.floor(d.data.value / all.value() * 100) + '%)'; });\n     * @param {Function} [labelFunction]\n     * @param {Boolean} [enableLabels=true]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.label = function (labelFunction, enableLabels) {\n        if (!arguments.length) {\n            return _label;\n        }\n        _label = labelFunction;\n        if ((enableLabels === undefined) || enableLabels) {\n            _renderLabel = true;\n        }\n        return _chart;\n    };\n\n    /**\n     * Turn on/off label rendering\n     * @method renderLabel\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [renderLabel=false]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.renderLabel = function (renderLabel) {\n        if (!arguments.length) {\n            return _renderLabel;\n        }\n        _renderLabel = renderLabel;\n        return _chart;\n    };\n\n    /**\n     * Set or get the title function. The chart class will use this function to render the SVGElement title\n     * (usually interpreted by browser as tooltips) for each child element in the chart, e.g. a slice\n     * in a pie chart or a bubble in a bubble chart. Almost every chart supports the title function;\n     * however in grid coordinate charts you need to turn off the brush in order to see titles, because\n     * otherwise the brush layer will block tooltip triggering.\n     * @method title\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * // default title function shows \"key: value\"\n     * chart.title(function(d) { return d.key + ': ' + d.value; });\n     * // title function has access to the standard d3 data binding and can get quite complicated\n     * chart.title(function(p) {\n     *    return p.key.getFullYear()\n     *        + '\\n'\n     *        + 'Index Gain: ' + numberFormat(p.value.absGain) + '\\n'\n     *        + 'Index Gain in Percentage: ' + numberFormat(p.value.percentageGain) + '%\\n'\n     *        + 'Fluctuation / Index Ratio: ' + numberFormat(p.value.fluctuationPercentage) + '%';\n     * });\n     * @param {Function} [titleFunction]\n     * @returns {Function|dc.baseMixin}\n     */\n    _chart.title = function (titleFunction) {\n        if (!arguments.length) {\n            return _title;\n        }\n        _title = titleFunction;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off title rendering, or return the state of the render title flag if no arguments are\n     * given.\n     * @method renderTitle\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {Boolean} [renderTitle=true]\n     * @returns {Boolean|dc.baseMixin}\n     */\n    _chart.renderTitle = function (renderTitle) {\n        if (!arguments.length) {\n            return _renderTitle;\n        }\n        _renderTitle = renderTitle;\n        return _chart;\n    };\n\n    /**\n     * A renderlet is similar to an event listener on rendering event. Multiple renderlets can be added\n     * to an individual chart.  Each time a chart is rerendered or redrawn the renderlets are invoked\n     * right after the chart finishes its transitions, giving you a way to modify the SVGElements.\n     * Renderlet functions take the chart instance as the only input parameter and you can\n     * use the dc API or use raw d3 to achieve pretty much any effect.\n     *\n     * Use {@link dc.baseMixin#on on} with a 'renderlet' prefix.\n     * Generates a random key for the renderlet, which makes it hard to remove.\n     * @method renderlet\n     * @memberof dc.baseMixin\n     * @instance\n     * @deprecated\n     * @example\n     * // do this instead of .renderlet(function(chart) { ... })\n     * chart.on(\"renderlet\", function(chart){\n     *     // mix of dc API and d3 manipulation\n     *     chart.select('g.y').style('display', 'none');\n     *     // its a closure so you can also access other chart variable available in the closure scope\n     *     moveChart.filter(chart.filter());\n     * });\n     * @param {Function} renderletFunction\n     * @returns {dc.baseMixin}\n     */\n    _chart.renderlet = dc.logger.deprecate(function (renderletFunction) {\n        _chart.on('renderlet.' + dc.utils.uniqueId(), renderletFunction);\n        return _chart;\n    }, 'chart.renderlet has been deprecated.  Please use chart.on(\"renderlet.<renderletKey>\", renderletFunction)');\n\n    /**\n     * Get or set the chart group to which this chart belongs. Chart groups are rendered or redrawn\n     * together since it is expected they share the same underlying crossfilter data set.\n     * @method chartGroup\n     * @memberof dc.baseMixin\n     * @instance\n     * @param {String} [chartGroup]\n     * @returns {String|dc.baseMixin}\n     */\n    _chart.chartGroup = function (chartGroup) {\n        if (!arguments.length) {\n            return _chartGroup;\n        }\n        if (!_isChild) {\n            dc.deregisterChart(_chart, _chartGroup);\n        }\n        _chartGroup = chartGroup;\n        if (!_isChild) {\n            dc.registerChart(_chart, _chartGroup);\n        }\n        return _chart;\n    };\n\n    /**\n     * Expire the internal chart cache. dc charts cache some data internally on a per chart basis to\n     * speed up rendering and avoid unnecessary calculation; however it might be useful to clear the\n     * cache if you have changed state which will affect rendering.  For example, if you invoke\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#crossfilter_add crossfilter.add}\n     * function or reset group or dimension after rendering, it is a good idea to\n     * clear the cache to make sure charts are rendered properly.\n     * @method expireCache\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {dc.baseMixin}\n     */\n    _chart.expireCache = function () {\n        // do nothing in base, should be overridden by sub-function\n        return _chart;\n    };\n\n    /**\n     * Attach a dc.legend widget to this chart. The legend widget will automatically draw legend labels\n     * based on the color setting and names associated with each group.\n     * @method legend\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\n     * @param {dc.legend} [legend]\n     * @returns {dc.legend|dc.baseMixin}\n     */\n    _chart.legend = function (legend) {\n        if (!arguments.length) {\n            return _legend;\n        }\n        _legend = legend;\n        _legend.parent(_chart);\n        return _chart;\n    };\n\n    /**\n     * Returns the internal numeric ID of the chart.\n     * @method chartID\n     * @memberof dc.baseMixin\n     * @instance\n     * @returns {String}\n     */\n    _chart.chartID = function () {\n        return _chart.__dcFlag__;\n    };\n\n    /**\n     * Set chart options using a configuration object. Each key in the object will cause the method of\n     * the same name to be called with the value to set that attribute for the chart.\n     * @method options\n     * @memberof dc.baseMixin\n     * @instance\n     * @example\n     * chart.options({dimension: myDimension, group: myGroup});\n     * @param {{}} opts\n     * @returns {dc.baseMixin}\n     */\n    _chart.options = function (opts) {\n        var applyOptions = [\n            'anchor',\n            'group',\n            'xAxisLabel',\n            'yAxisLabel',\n            'stack',\n            'title',\n            'point',\n            'getColor',\n            'overlayGeoJson'\n        ];\n\n        for (var o in opts) {\n            if (typeof(_chart[o]) === 'function') {\n                if (opts[o] instanceof Array && applyOptions.indexOf(o) !== -1) {\n                    _chart[o].apply(_chart, opts[o]);\n                } else {\n                    _chart[o].call(_chart, opts[o]);\n                }\n            } else {\n                dc.logger.debug('Not a valid option setter name: ' + o);\n            }\n        }\n        return _chart;\n    };\n\n    /**\n     * All dc chart instance supports the following listeners.\n     * Supports the following events:\n     * * `renderlet` - This listener function will be invoked after transitions after redraw and render. Replaces the\n     * deprecated {@link dc.baseMixin#renderlet renderlet} method.\n     * * `pretransition` - Like `.on('renderlet', ...)` but the event is fired before transitions start.\n     * * `preRender` - This listener function will be invoked before chart rendering.\n     * * `postRender` - This listener function will be invoked after chart finish rendering including\n     * all renderlets' logic.\n     * * `preRedraw` - This listener function will be invoked before chart redrawing.\n     * * `postRedraw` - This listener function will be invoked after chart finish redrawing\n     * including all renderlets' logic.\n     * * `filtered` - This listener function will be invoked after a filter is applied, added or removed.\n     * * `zoomed` - This listener function will be invoked after a zoom is triggered.\n     * @method on\n     * @memberof dc.baseMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Internals.md#dispatch_on d3.dispatch.on}\n     * @example\n     * .on('renderlet', function(chart, filter){...})\n     * .on('pretransition', function(chart, filter){...})\n     * .on('preRender', function(chart){...})\n     * .on('postRender', function(chart){...})\n     * .on('preRedraw', function(chart){...})\n     * .on('postRedraw', function(chart){...})\n     * .on('filtered', function(chart, filter){...})\n     * .on('zoomed', function(chart, filter){...})\n     * @param {String} event\n     * @param {Function} listener\n     * @returns {dc.baseMixin}\n     */\n    _chart.on = function (event, listener) {\n        _listeners.on(event, listener);\n        return _chart;\n    };\n\n    return _chart;\n};\n","/**\n * Margin is a mixin that provides margin utility functions for both the Row Chart and Coordinate Grid\n * Charts.\n * @name marginMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.marginMixin}\n */\ndc.marginMixin = function (_chart) {\n    var _margin = {top: 10, right: 50, bottom: 30, left: 30};\n\n    /**\n     * Get or set the margins for a particular coordinate grid chart instance. The margins is stored as\n     * an associative Javascript array.\n     * @method margins\n     * @memberof dc.marginMixin\n     * @instance\n     * @example\n     * var leftMargin = chart.margins().left; // 30 by default\n     * chart.margins().left = 50;\n     * leftMargin = chart.margins().left; // now 50\n     * @param {{top: Number, right: Number, left: Number, bottom: Number}} [margins={top: 10, right: 50, bottom: 30, left: 30}]\n     * @returns {{top: Number, right: Number, left: Number, bottom: Number}|dc.marginMixin}\n     */\n    _chart.margins = function (margins) {\n        if (!arguments.length) {\n            return _margin;\n        }\n        _margin = margins;\n        return _chart;\n    };\n\n    _chart.effectiveWidth = function () {\n        return _chart.width() - _chart.margins().left - _chart.margins().right;\n    };\n\n    _chart.effectiveHeight = function () {\n        return _chart.height() - _chart.margins().top - _chart.margins().bottom;\n    };\n\n    return _chart;\n};\n","/**\n * The Color Mixin is an abstract chart functional class providing universal coloring support\n * as a mix-in for any concrete chart implementation.\n * @name colorMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.colorMixin}\n */\ndc.colorMixin = function (_chart) {\n    var _colors = d3.scale.category20c();\n    var _defaultAccessor = true;\n\n    var _colorAccessor = function (d) { return _chart.keyAccessor()(d); };\n    var _colorCalculator;\n\n    /**\n     * Retrieve current color scale or set a new color scale. This methods accepts any function that\n     * operates like a d3 scale.\n     * @method colors\n     * @memberof dc.colorMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @example\n     * // alternate categorical scale\n     * chart.colors(d3.scale.category20b());\n     * // ordinal scale\n     * chart.colors(d3.scale.ordinal().range(['red','green','blue']));\n     * // convenience method, the same as above\n     * chart.ordinalColors(['red','green','blue']);\n     * // set a linear scale\n     * chart.linearColors([\"#4575b4\", \"#ffffbf\", \"#a50026\"]);\n     * @param {d3.scale} [colorScale=d3.scale.category20c()]\n     * @returns {d3.scale|dc.colorMixin}\n     */\n    _chart.colors = function (colorScale) {\n        if (!arguments.length) {\n            return _colors;\n        }\n        if (colorScale instanceof Array) {\n            _colors = d3.scale.quantize().range(colorScale); // deprecated legacy support, note: this fails for ordinal domains\n        } else {\n            _colors = d3.functor(colorScale);\n        }\n        return _chart;\n    };\n\n    /**\n     * Convenience method to set the color scale to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal d3.scale.ordinal} with\n     * range `r`.\n     * @method ordinalColors\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<String>} r\n     * @returns {dc.colorMixin}\n     */\n    _chart.ordinalColors = function (r) {\n        return _chart.colors(d3.scale.ordinal().range(r));\n    };\n\n    /**\n     * Convenience method to set the color scale to an Hcl interpolated linear scale with range `r`.\n     * @method linearColors\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<Number>} r\n     * @returns {dc.colorMixin}\n     */\n    _chart.linearColors = function (r) {\n        return _chart.colors(d3.scale.linear()\n                             .range(r)\n                             .interpolate(d3.interpolateHcl));\n    };\n\n    /**\n     * Set or the get color accessor function. This function will be used to map a data point in a\n     * crossfilter group to a color value on the color scale. The default function uses the key\n     * accessor.\n     * @method colorAccessor\n     * @memberof dc.colorMixin\n     * @instance\n     * @example\n     * // default index based color accessor\n     * .colorAccessor(function (d, i){return i;})\n     * // color accessor for a multi-value crossfilter reduction\n     * .colorAccessor(function (d){return d.value.absGain;})\n     * @param {Function} [colorAccessor]\n     * @returns {Function|dc.colorMixin}\n     */\n    _chart.colorAccessor = function (colorAccessor) {\n        if (!arguments.length) {\n            return _colorAccessor;\n        }\n        _colorAccessor = colorAccessor;\n        _defaultAccessor = false;\n        return _chart;\n    };\n\n    // what is this?\n    _chart.defaultColorAccessor = function () {\n        return _defaultAccessor;\n    };\n\n    /**\n     * Set or get the current domain for the color mapping function. The domain must be supplied as an\n     * array.\n     *\n     * Note: previously this method accepted a callback function. Instead you may use a custom scale\n     * set by {@link dc.colorMixin#colors .colors}.\n     * @method colorDomain\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {Array<String>} [domain]\n     * @returns {Array<String>|dc.colorMixin}\n     */\n    _chart.colorDomain = function (domain) {\n        if (!arguments.length) {\n            return _colors.domain();\n        }\n        _colors.domain(domain);\n        return _chart;\n    };\n\n    /**\n     * Set the domain by determining the min and max values as retrieved by\n     * {@link dc.colorMixin#colorAccessor .colorAccessor} over the chart's dataset.\n     * @method calculateColorDomain\n     * @memberof dc.colorMixin\n     * @instance\n     * @returns {dc.colorMixin}\n     */\n    _chart.calculateColorDomain = function () {\n        var newDomain = [d3.min(_chart.data(), _chart.colorAccessor()),\n                         d3.max(_chart.data(), _chart.colorAccessor())];\n        _colors.domain(newDomain);\n        return _chart;\n    };\n\n    /**\n     * Get the color for the datum d and counter i. This is used internally by charts to retrieve a color.\n     * @method getColor\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {*} d\n     * @param {Number} [i]\n     * @returns {String}\n     */\n    _chart.getColor = function (d, i) {\n        return _colorCalculator ? _colorCalculator.call(this, d, i) : _colors(_colorAccessor.call(this, d, i));\n    };\n\n    /**\n     * Overrides the color selection algorithm, replacing it with a simple function.\n     *\n     * Normally colors will be determined by calling the `colorAccessor` to get a value, and then passing that\n     * value through the `colorScale`.\n     *\n     * But sometimes it is difficult to get a color scale to produce the desired effect. The `colorCalculator`\n     * takes the datum and index and returns a color directly.\n     * @method colorCalculator\n     * @memberof dc.colorMixin\n     * @instance\n     * @param {*} [colorCalculator]\n     * @returns {Function|dc.colorMixin}\n     */\n    _chart.colorCalculator = function (colorCalculator) {\n        if (!arguments.length) {\n            return _colorCalculator || _chart.getColor;\n        }\n        _colorCalculator = colorCalculator;\n        return _chart;\n    };\n\n    return _chart;\n};\n","/**\n * Coordinate Grid is an abstract base chart designed to support a number of coordinate grid based\n * concrete chart types, e.g. bar chart, line chart, and bubble chart.\n * @name coordinateGridMixin\n * @memberof dc\n * @mixin\n * @mixes dc.colorMixin\n * @mixes dc.marginMixin\n * @mixes dc.baseMixin\n * @param {Object} _chart\n * @returns {dc.coordinateGridMixin}\n */\ndc.coordinateGridMixin = function (_chart) {\n    var GRID_LINE_CLASS = 'grid-line';\n    var HORIZONTAL_CLASS = 'horizontal';\n    var VERTICAL_CLASS = 'vertical';\n    var Y_AXIS_LABEL_CLASS = 'y-axis-label';\n    var X_AXIS_LABEL_CLASS = 'x-axis-label';\n    var DEFAULT_AXIS_LABEL_PADDING = 12;\n\n    _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin(_chart)));\n\n    _chart.colors(d3.scale.category10());\n    _chart._mandatoryAttributes().push('x');\n    var _parent;\n    var _g;\n    var _chartBodyG;\n\n    var _x;\n    var _xOriginalDomain;\n    var _xAxis = d3.svg.axis().orient('bottom');\n    var _xUnits = dc.units.integers;\n    var _xAxisPadding = 0;\n    var _xAxisPaddingUnit = 'day';\n    var _xElasticity = false;\n    var _xAxisLabel;\n    var _xAxisLabelPadding = 0;\n    var _lastXDomain;\n\n    var _y;\n    var _yAxis = d3.svg.axis().orient('left');\n    var _yAxisPadding = 0;\n    var _yElasticity = false;\n    var _yAxisLabel;\n    var _yAxisLabelPadding = 0;\n\n    var _brush = d3.svg.brush();\n    var _brushOn = true;\n    var _round;\n\n    var _renderHorizontalGridLine = false;\n    var _renderVerticalGridLine = false;\n\n    var _refocused = false, _resizing = false;\n    var _unitCount;\n\n    var _zoomScale = [1, Infinity];\n    var _zoomOutRestrict = true;\n\n    var _zoom = d3.behavior.zoom().on('zoom', zoomHandler);\n    var _nullZoom = d3.behavior.zoom().on('zoom', null);\n    var _hasBeenMouseZoomable = false;\n\n    var _rangeChart;\n    var _focusChart;\n\n    var _mouseZoomable = false;\n    var _clipPadding = 0;\n\n    var _outerRangeBandPadding = 0.5;\n    var _rangeBandPadding = 0;\n\n    var _useRightYAxis = false;\n\n    /**\n     * When changing the domain of the x or y scale, it is necessary to tell the chart to recalculate\n     * and redraw the axes. (`.rescale()` is called automatically when the x or y scale is replaced\n     * with {@link dc.coordinateGridMixin+x .x()} or {@link dc.coordinateGridMixin#y .y()}, and has\n     * no effect on elastic scales.)\n     * @method rescale\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {dc.coordinateGridMixin}\n     */\n    _chart.rescale = function () {\n        _unitCount = undefined;\n        _resizing = true;\n        return _chart;\n    };\n\n    _chart.resizing = function () {\n        return _resizing;\n    };\n\n    /**\n     * Get or set the range selection chart associated with this instance. Setting the range selection\n     * chart using this function will automatically update its selection brush when the current chart\n     * zooms in. In return the given range chart will also automatically attach this chart as its focus\n     * chart hence zoom in when range brush updates.\n     *\n     * Usually the range and focus charts will share a dimension. The range chart will set the zoom\n     * boundaries for the focus chart, so its dimension values must be compatible with the domain of\n     * the focus chart.\n     *\n     * See the [Nasdaq 100 Index](http://dc-js.github.com/dc.js/) example for this effect in action.\n     * @method rangeChart\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {dc.coordinateGridMixin} [rangeChart]\n     * @returns {dc.coordinateGridMixin}\n     */\n    _chart.rangeChart = function (rangeChart) {\n        if (!arguments.length) {\n            return _rangeChart;\n        }\n        _rangeChart = rangeChart;\n        _rangeChart.focusChart(_chart);\n        return _chart;\n    };\n\n    /**\n     * Get or set the scale extent for mouse zooms.\n     * @method zoomScale\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Array<Number|Date>} [extent=[1, Infinity]]\n     * @returns {Array<Number|Date>|dc.coordinateGridMixin}\n     */\n    _chart.zoomScale = function (extent) {\n        if (!arguments.length) {\n            return _zoomScale;\n        }\n        _zoomScale = extent;\n        return _chart;\n    };\n\n    /**\n     * Get or set the zoom restriction for the chart. If true limits the zoom to origional domain of the chart.\n     * @method zoomOutRestrict\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [zoomOutRestrict=true]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.zoomOutRestrict = function (zoomOutRestrict) {\n        if (!arguments.length) {\n            return _zoomOutRestrict;\n        }\n        _zoomScale[0] = zoomOutRestrict ? 1 : 0;\n        _zoomOutRestrict = zoomOutRestrict;\n        return _chart;\n    };\n\n    _chart._generateG = function (parent) {\n        if (parent === undefined) {\n            _parent = _chart.svg();\n        } else {\n            _parent = parent;\n        }\n\n        var href = window.location.href.split('#')[0];\n\n        _g = _parent.append('g');\n\n        _chartBodyG = _g.append('g').attr('class', 'chart-body')\n            .attr('transform', 'translate(' + _chart.margins().left + ', ' + _chart.margins().top + ')')\n            .attr('clip-path', 'url(' + href + '#' + getClipPathId() + ')');\n\n        return _g;\n    };\n\n    /**\n     * Get or set the root g element. This method is usually used to retrieve the g element in order to\n     * overlay custom svg drawing programatically. **Caution**: The root g element is usually generated\n     * by dc.js internals, and resetting it might produce unpredictable result.\n     * @method g\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {SVGElement} [gElement]\n     * @returns {SVGElement|dc.coordinateGridMixin}\n     */\n    _chart.g = function (gElement) {\n        if (!arguments.length) {\n            return _g;\n        }\n        _g = gElement;\n        return _chart;\n    };\n\n    /**\n     * Set or get mouse zoom capability flag (default: false). When turned on the chart will be\n     * zoomable using the mouse wheel. If the range selector chart is attached zooming will also update\n     * the range selection brush on the associated range selector chart.\n     * @method mouseZoomable\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [mouseZoomable=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.mouseZoomable = function (mouseZoomable) {\n        if (!arguments.length) {\n            return _mouseZoomable;\n        }\n        _mouseZoomable = mouseZoomable;\n        return _chart;\n    };\n\n    /**\n     * Retrieve the svg group for the chart body.\n     * @method chartBodyG\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {SVGElement} [chartBodyG]\n     * @returns {SVGElement}\n     */\n    _chart.chartBodyG = function (chartBodyG) {\n        if (!arguments.length) {\n            return _chartBodyG;\n        }\n        _chartBodyG = chartBodyG;\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Get or set the x scale. The x scale can be any d3\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale} or\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md ordinal scale}.\n     * @method x\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @example\n     * // set x to a linear scale\n     * chart.x(d3.scale.linear().domain([-2500, 2500]))\n     * // set x to a time scale to generate histogram\n     * chart.x(d3.time.scale().domain([new Date(1985, 0, 1), new Date(2012, 11, 31)]))\n     * @param {d3.scale} [xScale]\n     * @returns {d3.scale|dc.coordinateGridMixin}\n     */\n    _chart.x = function (xScale) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = xScale;\n        _xOriginalDomain = _x.domain();\n        _chart.rescale();\n        return _chart;\n    };\n\n    _chart.xOriginalDomain = function () {\n        return _xOriginalDomain;\n    };\n\n    /**\n     * Set or get the xUnits function. The coordinate grid chart uses the xUnits function to calculate\n     * the number of data projections on x axis such as the number of bars for a bar chart or the\n     * number of dots for a line chart. This function is expected to return a Javascript array of all\n     * data points on x axis, or the number of points on the axis. [d3 time range functions\n     * d3.time.days, d3.time.months, and\n     * d3.time.years](https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#aliases) are all valid xUnits\n     * function. dc.js also provides a few units function, see the {@link dc.units Units Namespace} for\n     * a list of built-in units functions.\n     * @method xUnits\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @todo Add docs for utilities\n     * @example\n     * // set x units to count days\n     * chart.xUnits(d3.time.days);\n     * // set x units to count months\n     * chart.xUnits(d3.time.months);\n     *\n     * // A custom xUnits function can be used as long as it follows the following interface:\n     * // units in integer\n     * function(start, end, xDomain) {\n     *      // simply calculates how many integers in the domain\n     *      return Math.abs(end - start);\n     * };\n     *\n     * // fixed units\n     * function(start, end, xDomain) {\n     *      // be aware using fixed units will disable the focus/zoom ability on the chart\n     *      return 1000;\n     * @param {Function} [xUnits=dc.units.integers]\n     * @returns {Function|dc.coordinateGridMixin}\n     */\n    _chart.xUnits = function (xUnits) {\n        if (!arguments.length) {\n            return _xUnits;\n        }\n        _xUnits = xUnits;\n        return _chart;\n    };\n\n    /**\n     * Set or get the x axis used by a particular coordinate grid chart instance. This function is most\n     * useful when x axis customization is required. The x axis in dc.js is an instance of a\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3 axis object};\n     * therefore it supports any valid d3 axis manipulation.\n     *\n     * **Caution**: The x axis is usually generated internally by dc; resetting it may cause\n     * unexpected results. Note also that when used as a getter, this function is not chainable:\n     * it returns the axis, not the chart,\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n     * so attempting to call chart functions after calling `.xAxis()` will fail}.\n     * @method xAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize x axis tick format\n     * chart.xAxis().tickFormat(function(v) {return v + '%';});\n     * // customize x axis tick values\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [xAxis=d3.svg.axis().orient('bottom')]\n     * @returns {d3.svg.axis|dc.coordinateGridMixin}\n     */\n    _chart.xAxis = function (xAxis) {\n        if (!arguments.length) {\n            return _xAxis;\n        }\n        _xAxis = xAxis;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off elastic x axis behavior. If x axis elasticity is turned on, then the grid chart will\n     * attempt to recalculate the x axis range whenever a redraw event is triggered.\n     * @method elasticX\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [elasticX=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.elasticX = function (elasticX) {\n        if (!arguments.length) {\n            return _xElasticity;\n        }\n        _xElasticity = elasticX;\n        return _chart;\n    };\n\n    /**\n     * Set or get x axis padding for the elastic x axis. The padding will be added to both end of the x\n     * axis if elasticX is turned on; otherwise it is ignored.\n     *\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n     * number or date x axes.  When padding a date axis, an integer represents number of units being padded\n     * and a percentage string will be treated the same as an integer. The unit will be determined by the\n     * xAxisPaddingUnit variable.\n     * @method xAxisPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number|String} [padding=0]\n     * @returns {Number|String|dc.coordinateGridMixin}\n     */\n    _chart.xAxisPadding = function (padding) {\n        if (!arguments.length) {\n            return _xAxisPadding;\n        }\n        _xAxisPadding = padding;\n        return _chart;\n    };\n\n    /**\n     * Set or get x axis padding unit for the elastic x axis. The padding unit will determine which unit to\n     * use when applying xAxis padding if elasticX is turned on and if x-axis uses a time dimension;\n     * otherwise it is ignored.\n     *\n     * Padding unit is a string that will be used when the padding is calculated. Available parameters are\n     * the available d3 time intervals; see\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Time-Intervals.md#interval d3.time.interval}.\n     * @method xAxisPaddingUnit\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [unit='days']\n     * @returns {String|dc.coordinateGridMixin}\n     */\n    _chart.xAxisPaddingUnit = function (unit) {\n        if (!arguments.length) {\n            return _xAxisPaddingUnit;\n        }\n        _xAxisPaddingUnit = unit;\n        return _chart;\n    };\n\n    /**\n     * Returns the number of units displayed on the x axis using the unit measure configured by\n     * {@link dc.coordinateGridMixin#xUnits xUnits}.\n     * @method xUnitCount\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {Number}\n     */\n    _chart.xUnitCount = function () {\n        if (_unitCount === undefined) {\n            var units = _chart.xUnits()(_chart.x().domain()[0], _chart.x().domain()[1], _chart.x().domain());\n\n            if (units instanceof Array) {\n                _unitCount = units.length;\n            } else {\n                _unitCount = units;\n            }\n        }\n\n        return _unitCount;\n    };\n\n    /**\n     * Gets or sets whether the chart should be drawn with a right axis instead of a left axis. When\n     * used with a chart in a composite chart, allows both left and right Y axes to be shown on a\n     * chart.\n     * @method useRightYAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [useRightYAxis=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.useRightYAxis = function (useRightYAxis) {\n        if (!arguments.length) {\n            return _useRightYAxis;\n        }\n        _useRightYAxis = useRightYAxis;\n        return _chart;\n    };\n\n    /**\n     * Returns true if the chart is using ordinal xUnits ({@link dc.units.ordinal dc.units.ordinal}, or false\n     * otherwise. Most charts behave differently with ordinal data and use the result of this method to\n     * trigger the appropriate logic.\n     * @method isOrdinal\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {Boolean}\n     */\n    _chart.isOrdinal = function () {\n        return _chart.xUnits() === dc.units.ordinal;\n    };\n\n    _chart._useOuterPadding = function () {\n        return true;\n    };\n\n    _chart._ordinalXDomain = function () {\n        var groups = _chart._computeOrderedGroups(_chart.data());\n        return groups.map(_chart.keyAccessor());\n    };\n\n    function compareDomains (d1, d2) {\n        return !d1 || !d2 || d1.length !== d2.length ||\n            d1.some(function (elem, i) { return (elem && d2[i]) ? elem.toString() !== d2[i].toString() : elem === d2[i]; });\n    }\n\n    function prepareXAxis (g, render) {\n        if (!_chart.isOrdinal()) {\n            if (_chart.elasticX()) {\n                _x.domain([_chart.xAxisMin(), _chart.xAxisMax()]);\n            }\n        } else { // _chart.isOrdinal()\n            if (_chart.elasticX() || _x.domain().length === 0) {\n                _x.domain(_chart._ordinalXDomain());\n            }\n        }\n\n        // has the domain changed?\n        var xdom = _x.domain();\n        if (render || compareDomains(_lastXDomain, xdom)) {\n            _chart.rescale();\n        }\n        _lastXDomain = xdom;\n\n        // please can't we always use rangeBands for bar charts?\n        if (_chart.isOrdinal()) {\n            _x.rangeBands([0, _chart.xAxisLength()], _rangeBandPadding,\n                          _chart._useOuterPadding() ? _outerRangeBandPadding : 0);\n        } else {\n            _x.range([0, _chart.xAxisLength()]);\n        }\n\n        _xAxis = _xAxis.scale(_chart.x());\n\n        renderVerticalGridLines(g);\n    }\n\n    _chart.renderXAxis = function (g) {\n        var axisXG = g.select('g.x');\n\n        if (axisXG.empty()) {\n            axisXG = g.append('g')\n                .attr('class', 'axis x')\n                .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart._xAxisY() + ')');\n        }\n\n        var axisXLab = g.select('text.' + X_AXIS_LABEL_CLASS);\n        if (axisXLab.empty() && _chart.xAxisLabel()) {\n            axisXLab = g.append('text')\n                .attr('class', X_AXIS_LABEL_CLASS)\n                .attr('transform', 'translate(' + (_chart.margins().left + _chart.xAxisLength() / 2) + ',' +\n                      (_chart.height() - _xAxisLabelPadding) + ')')\n                .attr('text-anchor', 'middle');\n        }\n        if (_chart.xAxisLabel() && axisXLab.text() !== _chart.xAxisLabel()) {\n            axisXLab.text(_chart.xAxisLabel());\n        }\n\n        dc.transition(axisXG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart._xAxisY() + ')')\n            .call(_xAxis);\n        dc.transition(axisXLab, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + (_chart.margins().left + _chart.xAxisLength() / 2) + ',' +\n                  (_chart.height() - _xAxisLabelPadding) + ')');\n    };\n\n    function renderVerticalGridLines (g) {\n        var gridLineG = g.select('g.' + VERTICAL_CLASS);\n\n        if (_renderVerticalGridLine) {\n            if (gridLineG.empty()) {\n                gridLineG = g.insert('g', ':first-child')\n                    .attr('class', GRID_LINE_CLASS + ' ' + VERTICAL_CLASS)\n                    .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n            }\n\n            var ticks = _xAxis.tickValues() ? _xAxis.tickValues() :\n                    (typeof _x.ticks === 'function' ? _x.ticks(_xAxis.ticks()[0]) : _x.domain());\n\n            var lines = gridLineG.selectAll('line')\n                .data(ticks);\n\n            // enter\n            var linesGEnter = lines.enter()\n                .append('line')\n                .attr('x1', function (d) {\n                    return _x(d);\n                })\n                .attr('y1', _chart._xAxisY() - _chart.margins().top)\n                .attr('x2', function (d) {\n                    return _x(d);\n                })\n                .attr('y2', 0)\n                .attr('opacity', 0);\n            dc.transition(linesGEnter, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', 1);\n\n            // update\n            dc.transition(lines, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('x1', function (d) {\n                    return _x(d);\n                })\n                .attr('y1', _chart._xAxisY() - _chart.margins().top)\n                .attr('x2', function (d) {\n                    return _x(d);\n                })\n                .attr('y2', 0);\n\n            // exit\n            lines.exit().remove();\n        } else {\n            gridLineG.selectAll('line').remove();\n        }\n    }\n\n    _chart._xAxisY = function () {\n        return (_chart.height() - _chart.margins().bottom);\n    };\n\n    _chart.xAxisLength = function () {\n        return _chart.effectiveWidth();\n    };\n\n    /**\n     * Set or get the x axis label. If setting the label, you may optionally include additional padding to\n     * the margin to make room for the label. By default the padded is set to 12 to accomodate the text height.\n     * @method xAxisLabel\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [labelText]\n     * @param {Number} [padding=12]\n     * @returns {String}\n     */\n    _chart.xAxisLabel = function (labelText, padding) {\n        if (!arguments.length) {\n            return _xAxisLabel;\n        }\n        _xAxisLabel = labelText;\n        _chart.margins().bottom -= _xAxisLabelPadding;\n        _xAxisLabelPadding = (padding === undefined) ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        _chart.margins().bottom += _xAxisLabelPadding;\n        return _chart;\n    };\n\n    _chart._prepareYAxis = function (g) {\n        if (_y === undefined || _chart.elasticY()) {\n            if (_y === undefined) {\n                _y = d3.scale.linear();\n            }\n            var min = _chart.yAxisMin() || 0,\n                max = _chart.yAxisMax() || 0;\n            _y.domain([min, max]).rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _y.range([_chart.yAxisHeight(), 0]);\n        _yAxis = _yAxis.scale(_y);\n\n        if (_useRightYAxis) {\n            _yAxis.orient('right');\n        }\n\n        _chart._renderHorizontalGridLinesForAxis(g, _y, _yAxis);\n    };\n\n    _chart.renderYAxisLabel = function (axisClass, text, rotation, labelXPosition) {\n        labelXPosition = labelXPosition || _yAxisLabelPadding;\n\n        var axisYLab = _chart.g().select('text.' + Y_AXIS_LABEL_CLASS + '.' + axisClass + '-label');\n        var labelYPosition = (_chart.margins().top + _chart.yAxisHeight() / 2);\n        if (axisYLab.empty() && text) {\n            axisYLab = _chart.g().append('text')\n                .attr('transform', 'translate(' + labelXPosition + ',' + labelYPosition + '),rotate(' + rotation + ')')\n                .attr('class', Y_AXIS_LABEL_CLASS + ' ' + axisClass + '-label')\n                .attr('text-anchor', 'middle')\n                .text(text);\n        }\n        if (text && axisYLab.text() !== text) {\n            axisYLab.text(text);\n        }\n        dc.transition(axisYLab, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + labelXPosition + ',' + labelYPosition + '),rotate(' + rotation + ')');\n    };\n\n    _chart.renderYAxisAt = function (axisClass, axis, position) {\n        var axisYG = _chart.g().select('g.' + axisClass);\n        if (axisYG.empty()) {\n            axisYG = _chart.g().append('g')\n                .attr('class', 'axis ' + axisClass)\n                .attr('transform', 'translate(' + position + ',' + _chart.margins().top + ')');\n        }\n\n        dc.transition(axisYG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', 'translate(' + position + ',' + _chart.margins().top + ')')\n            .call(axis);\n    };\n\n    _chart.renderYAxis = function () {\n        var axisPosition = _useRightYAxis ? (_chart.width() - _chart.margins().right) : _chart._yAxisX();\n        _chart.renderYAxisAt('y', _yAxis, axisPosition);\n        var labelPosition = _useRightYAxis ? (_chart.width() - _yAxisLabelPadding) : _yAxisLabelPadding;\n        var rotation = _useRightYAxis ? 90 : -90;\n        _chart.renderYAxisLabel('y', _chart.yAxisLabel(), rotation, labelPosition);\n    };\n\n    _chart._renderHorizontalGridLinesForAxis = function (g, scale, axis) {\n        var gridLineG = g.select('g.' + HORIZONTAL_CLASS);\n\n        if (_renderHorizontalGridLine) {\n            var ticks = axis.tickValues() ? axis.tickValues() : scale.ticks(axis.ticks()[0]);\n\n            if (gridLineG.empty()) {\n                gridLineG = g.insert('g', ':first-child')\n                    .attr('class', GRID_LINE_CLASS + ' ' + HORIZONTAL_CLASS)\n                    .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n            }\n\n            var lines = gridLineG.selectAll('line')\n                .data(ticks);\n\n            // enter\n            var linesGEnter = lines.enter()\n                .append('line')\n                .attr('x1', 1)\n                .attr('y1', function (d) {\n                    return scale(d);\n                })\n                .attr('x2', _chart.xAxisLength())\n                .attr('y2', function (d) {\n                    return scale(d);\n                })\n                .attr('opacity', 0);\n            dc.transition(linesGEnter, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', 1);\n\n            // update\n            dc.transition(lines, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('x1', 1)\n                .attr('y1', function (d) {\n                    return scale(d);\n                })\n                .attr('x2', _chart.xAxisLength())\n                .attr('y2', function (d) {\n                    return scale(d);\n                });\n\n            // exit\n            lines.exit().remove();\n        } else {\n            gridLineG.selectAll('line').remove();\n        }\n    };\n\n    _chart._yAxisX = function () {\n        return _chart.useRightYAxis() ? _chart.width() - _chart.margins().right : _chart.margins().left;\n    };\n\n    /**\n     * Set or get the y axis label. If setting the label, you may optionally include additional padding\n     * to the margin to make room for the label. By default the padding is set to 12 to accommodate the\n     * text height.\n     * @method yAxisLabel\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {String} [labelText]\n     * @param {Number} [padding=12]\n     * @returns {String|dc.coordinateGridMixin}\n     */\n    _chart.yAxisLabel = function (labelText, padding) {\n        if (!arguments.length) {\n            return _yAxisLabel;\n        }\n        _yAxisLabel = labelText;\n        _chart.margins().left -= _yAxisLabelPadding;\n        _yAxisLabelPadding = (padding === undefined) ? DEFAULT_AXIS_LABEL_PADDING : padding;\n        _chart.margins().left += _yAxisLabelPadding;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y scale. The y scale is typically automatically determined by the chart implementation.\n     * @method y\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [yScale]\n     * @returns {d3.scale|dc.coordinateGridMixin}\n     */\n    _chart.y = function (yScale) {\n        if (!arguments.length) {\n            return _y;\n        }\n        _y = yScale;\n        _chart.rescale();\n        return _chart;\n    };\n\n    /**\n     * Set or get the y axis used by the coordinate grid chart instance. This function is most useful\n     * when y axis customization is required. The y axis in dc.js is simply an instance of a [d3 axis\n     * object](https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis); therefore it supports any\n     * valid d3 axis manipulation.\n     *\n     * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\n     * unexpected results.  Note also that when used as a getter, this function is not chainable: it\n     * returns the axis, not the chart,\n     * {@link https://github.com/dc-js/dc.js/wiki/FAQ#why-does-everything-break-after-a-call-to-xaxis-or-yaxis\n     * so attempting to call chart functions after calling `.yAxis()` will fail}.\n     * @method yAxis\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize y axis tick format\n     * chart.yAxis().tickFormat(function(v) {return v + '%';});\n     * // customize y axis tick values\n     * chart.yAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [yAxis=d3.svg.axis().orient('left')]\n     * @returns {d3.svg.axis|dc.coordinateGridMixin}\n     */\n    _chart.yAxis = function (yAxis) {\n        if (!arguments.length) {\n            return _yAxis;\n        }\n        _yAxis = yAxis;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off elastic y axis behavior. If y axis elasticity is turned on, then the grid chart will\n     * attempt to recalculate the y axis range whenever a redraw event is triggered.\n     * @method elasticY\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [elasticY=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.elasticY = function (elasticY) {\n        if (!arguments.length) {\n            return _yElasticity;\n        }\n        _yElasticity = elasticY;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off horizontal grid lines.\n     * @method renderHorizontalGridLines\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [renderHorizontalGridLines=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.renderHorizontalGridLines = function (renderHorizontalGridLines) {\n        if (!arguments.length) {\n            return _renderHorizontalGridLine;\n        }\n        _renderHorizontalGridLine = renderHorizontalGridLines;\n        return _chart;\n    };\n\n    /**\n     * Turn on/off vertical grid lines.\n     * @method renderVerticalGridLines\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [renderVerticalGridLines=false]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.renderVerticalGridLines = function (renderVerticalGridLines) {\n        if (!arguments.length) {\n            return _renderVerticalGridLine;\n        }\n        _renderVerticalGridLine = renderVerticalGridLines;\n        return _chart;\n    };\n\n    /**\n     * Calculates the minimum x value to display in the chart. Includes xAxisPadding if set.\n     * @method xAxisMin\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.xAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.keyAccessor()(e);\n        });\n        return dc.utils.subtract(min, _xAxisPadding, _xAxisPaddingUnit);\n    };\n\n    /**\n     * Calculates the maximum x value to display in the chart. Includes xAxisPadding if set.\n     * @method xAxisMax\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.xAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.keyAccessor()(e);\n        });\n        return dc.utils.add(max, _xAxisPadding, _xAxisPaddingUnit);\n    };\n\n    /**\n     * Calculates the minimum y value to display in the chart. Includes yAxisPadding if set.\n     * @method yAxisMin\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.yAxisMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.valueAccessor()(e);\n        });\n        return dc.utils.subtract(min, _yAxisPadding);\n    };\n\n    /**\n     * Calculates the maximum y value to display in the chart. Includes yAxisPadding if set.\n     * @method yAxisMax\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @returns {*}\n     */\n    _chart.yAxisMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.valueAccessor()(e);\n        });\n        return dc.utils.add(max, _yAxisPadding);\n    };\n\n    /**\n     * Set or get y axis padding for the elastic y axis. The padding will be added to the top and\n     * bottom of the y axis if elasticY is turned on; otherwise it is ignored.\n     *\n     * Padding can be an integer or percentage in string (e.g. '10%'). Padding can be applied to\n     * number or date axes. When padding a date axis, an integer represents number of days being padded\n     * and a percentage string will be treated the same as an integer.\n     * @method yAxisPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number|String} [padding=0]\n     * @returns {Number|dc.coordinateGridMixin}\n     */\n    _chart.yAxisPadding = function (padding) {\n        if (!arguments.length) {\n            return _yAxisPadding;\n        }\n        _yAxisPadding = padding;\n        return _chart;\n    };\n\n    _chart.yAxisHeight = function () {\n        return _chart.effectiveHeight();\n    };\n\n    /**\n     * Set or get the rounding function used to quantize the selection when brushing is enabled.\n     * @method round\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @example\n     * // set x unit round to by month, this will make sure range selection brush will\n     * // select whole months\n     * chart.round(d3.time.month.round);\n     * @param {Function} [round]\n     * @returns {Function|dc.coordinateGridMixin}\n     */\n    _chart.round = function (round) {\n        if (!arguments.length) {\n            return _round;\n        }\n        _round = round;\n        return _chart;\n    };\n\n    _chart._rangeBandPadding = function (_) {\n        if (!arguments.length) {\n            return _rangeBandPadding;\n        }\n        _rangeBandPadding = _;\n        return _chart;\n    };\n\n    _chart._outerRangeBandPadding = function (_) {\n        if (!arguments.length) {\n            return _outerRangeBandPadding;\n        }\n        _outerRangeBandPadding = _;\n        return _chart;\n    };\n\n    dc.override(_chart, 'filter', function (_) {\n        if (!arguments.length) {\n            return _chart._filter();\n        }\n\n        _chart._filter(_);\n\n        if (_) {\n            _chart.brush().extent(_);\n        } else {\n            _chart.brush().clear();\n        }\n\n        return _chart;\n    });\n\n    _chart.brush = function (_) {\n        if (!arguments.length) {\n            return _brush;\n        }\n        _brush = _;\n        return _chart;\n    };\n\n    function brushHeight () {\n        return _chart._xAxisY() - _chart.margins().top;\n    }\n\n    _chart.renderBrush = function (g) {\n        if (_brushOn) {\n            _brush.on('brush', _chart._brushing);\n            _brush.on('brushstart', _chart._disableMouseZoom);\n            _brush.on('brushend', configureMouseZoom);\n\n            var gBrush = g.append('g')\n                .attr('class', 'brush')\n                .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')')\n                .call(_brush.x(_chart.x()));\n            _chart.setBrushY(gBrush, false);\n            _chart.setHandlePaths(gBrush);\n\n            if (_chart.hasFilter()) {\n                _chart.redrawBrush(g, false);\n            }\n        }\n    };\n\n    _chart.setHandlePaths = function (gBrush) {\n        gBrush.selectAll('.resize').append('path').attr('d', _chart.resizeHandlePath);\n    };\n\n    _chart.setBrushY = function (gBrush) {\n        gBrush.selectAll('rect')\n            .attr('height', brushHeight());\n        gBrush.selectAll('.resize path')\n            .attr('d', _chart.resizeHandlePath);\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _brush.extent();\n        if (_chart.round()) {\n            extent[0] = extent.map(_chart.round())[0];\n            extent[1] = extent.map(_chart.round())[1];\n\n            _g.select('.brush')\n                .call(_brush.extent(extent));\n        }\n        return extent;\n    };\n\n    _chart.brushIsEmpty = function (extent) {\n        return _brush.empty() || !extent || extent[1] <= extent[0];\n    };\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n\n        _chart.redrawBrush(_g, false);\n\n        if (_chart.brushIsEmpty(extent)) {\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n        } else {\n            var rangedFilter = dc.filters.RangedFilter(extent[0], extent[1]);\n\n            dc.events.trigger(function () {\n                _chart.replaceFilter(rangedFilter);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n        }\n    };\n\n    _chart.redrawBrush = function (g, doTransition) {\n        if (_brushOn) {\n            if (_chart.filter() && _chart.brush().empty()) {\n                _chart.brush().extent(_chart.filter());\n            }\n\n            var gBrush = dc.optionalTransition(doTransition, _chart.transitionDuration(), _chart.transitionDelay())(g.select('g.brush'));\n            _chart.setBrushY(gBrush);\n            gBrush.call(_chart.brush()\n                      .x(_chart.x())\n                      .extent(_chart.brush().extent()));\n        }\n\n        _chart.fadeDeselectedArea();\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        // do nothing, sub-chart should override this function\n    };\n\n    // borrowed from Crossfilter example\n    _chart.resizeHandlePath = function (d) {\n        var e = +(d === 'e'), x = e ? 1 : -1, y = brushHeight() / 3;\n        return 'M' + (0.5 * x) + ',' + y +\n            'A6,6 0 0 ' + e + ' ' + (6.5 * x) + ',' + (y + 6) +\n            'V' + (2 * y - 6) +\n            'A6,6 0 0 ' + e + ' ' + (0.5 * x) + ',' + (2 * y) +\n            'Z' +\n            'M' + (2.5 * x) + ',' + (y + 8) +\n            'V' + (2 * y - 8) +\n            'M' + (4.5 * x) + ',' + (y + 8) +\n            'V' + (2 * y - 8);\n    };\n\n    function getClipPathId () {\n        return _chart.anchorName().replace(/[ .#=\\[\\]\"]/g, '-') + '-clip';\n    }\n\n    /**\n     * Get or set the padding in pixels for the clip path. Once set padding will be applied evenly to\n     * the top, left, right, and bottom when the clip path is generated. If set to zero, the clip area\n     * will be exactly the chart body area minus the margins.\n     * @method clipPadding\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Number} [padding=5]\n     * @returns {Number|dc.coordinateGridMixin}\n     */\n    _chart.clipPadding = function (padding) {\n        if (!arguments.length) {\n            return _clipPadding;\n        }\n        _clipPadding = padding;\n        return _chart;\n    };\n\n    function generateClipPath () {\n        var defs = dc.utils.appendOrSelect(_parent, 'defs');\n        // cannot select <clippath> elements; bug in WebKit, must select by id\n        // https://groups.google.com/forum/#!topic/d3-js/6EpAzQ2gU9I\n        var id = getClipPathId();\n        var chartBodyClip = dc.utils.appendOrSelect(defs, '#' + id, 'clipPath').attr('id', id);\n\n        var padding = _clipPadding * 2;\n\n        dc.utils.appendOrSelect(chartBodyClip, 'rect')\n            .attr('width', _chart.xAxisLength() + padding)\n            .attr('height', _chart.yAxisHeight() + padding)\n            .attr('transform', 'translate(-' + _clipPadding + ', -' + _clipPadding + ')');\n    }\n\n    _chart._preprocessData = function () {};\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _chart._preprocessData();\n\n        _chart._generateG();\n        generateClipPath();\n\n        drawChart(true);\n\n        configureMouseZoom();\n\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        _chart._preprocessData();\n\n        drawChart(false);\n        generateClipPath();\n\n        return _chart;\n    };\n\n    function drawChart (render) {\n        if (_chart.isOrdinal()) {\n            _brushOn = false;\n        }\n\n        prepareXAxis(_chart.g(), render);\n        _chart._prepareYAxis(_chart.g());\n\n        _chart.plotData();\n\n        if (_chart.elasticX() || _resizing || render) {\n            _chart.renderXAxis(_chart.g());\n        }\n\n        if (_chart.elasticY() || _resizing || render) {\n            _chart.renderYAxis(_chart.g());\n        }\n\n        if (render) {\n            _chart.renderBrush(_chart.g(), false);\n        } else {\n            _chart.redrawBrush(_chart.g(), _resizing);\n        }\n        _chart.fadeDeselectedArea();\n        _resizing = false;\n    }\n\n    function configureMouseZoom () {\n        if (_mouseZoomable) {\n            _chart._enableMouseZoom();\n        } else if (_hasBeenMouseZoomable) {\n            _chart._disableMouseZoom();\n        }\n    }\n\n    _chart._enableMouseZoom = function () {\n        _hasBeenMouseZoomable = true;\n        _zoom.x(_chart.x())\n            .scaleExtent(_zoomScale)\n            .size([_chart.width(), _chart.height()])\n            .duration(_chart.transitionDuration());\n        _chart.root().call(_zoom);\n    };\n\n    _chart._disableMouseZoom = function () {\n        _chart.root().call(_nullZoom);\n    };\n\n    function zoomHandler () {\n        _refocused = true;\n        if (_zoomOutRestrict) {\n            var constraint = _xOriginalDomain;\n            if (_rangeChart) {\n                constraint = intersectExtents(constraint, _rangeChart.x().domain());\n            }\n            var constrained = constrainExtent(_chart.x().domain(), constraint);\n            if (constrained) {\n                _chart.x().domain(constrained);\n            }\n        }\n\n        var domain = _chart.x().domain();\n        var domFilter = dc.filters.RangedFilter(domain[0], domain[1]);\n\n        _chart.replaceFilter(domFilter);\n        _chart.rescale();\n        _chart.redraw();\n\n        if (_rangeChart && !rangesEqual(_chart.filter(), _rangeChart.filter())) {\n            dc.events.trigger(function () {\n                _rangeChart.replaceFilter(domFilter);\n                _rangeChart.redraw();\n            });\n        }\n\n        _chart._invokeZoomedListener();\n\n        dc.events.trigger(function () {\n            _chart.redrawGroup();\n        }, dc.constants.EVENT_DELAY);\n\n        _refocused = !rangesEqual(domain, _xOriginalDomain);\n    }\n\n    function intersectExtents (ext1, ext2) {\n        if (ext1[0] > ext2[1] || ext1[1] < ext2[0]) {\n            console.warn('could not intersect extents');\n        }\n        return [Math.max(ext1[0], ext2[0]), Math.min(ext1[1], ext2[1])];\n    }\n\n    function constrainExtent (extent, constraint) {\n        var size = extent[1] - extent[0];\n        if (extent[0] < constraint[0]) {\n            return [constraint[0], Math.min(constraint[1], dc.utils.add(constraint[0], size, 'millis'))];\n        } else if (extent[1] > constraint[1]) {\n            return [Math.max(constraint[0], dc.utils.subtract(constraint[1], size, 'millis')), constraint[1]];\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Zoom this chart to focus on the given range. The given range should be an array containing only\n     * 2 elements (`[start, end]`) defining a range in the x domain. If the range is not given or set\n     * to null, then the zoom will be reset. _For focus to work elasticX has to be turned off;\n     * otherwise focus will be ignored.\n     * @method focus\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @example\n     * chart.on('renderlet', function(chart) {\n     *     // smooth the rendering through event throttling\n     *     dc.events.trigger(function(){\n     *          // focus some other chart to the range selected by user on this chart\n     *          someOtherChart.focus(chart.filter());\n     *     });\n     * })\n     * @param {Array<Number>} [range]\n     */\n    _chart.focus = function (range) {\n        if (hasRangeSelected(range)) {\n            _chart.x().domain(range);\n        } else {\n            _chart.x().domain(_xOriginalDomain);\n        }\n\n        _zoom.x(_chart.x());\n        zoomHandler();\n    };\n\n    _chart.refocused = function () {\n        return _refocused;\n    };\n\n    _chart.focusChart = function (c) {\n        if (!arguments.length) {\n            return _focusChart;\n        }\n        _focusChart = c;\n        _chart.on('filtered', function (chart) {\n            if (!chart.filter()) {\n                dc.events.trigger(function () {\n                    _focusChart.x().domain(_focusChart.xOriginalDomain());\n                });\n            } else if (!rangesEqual(chart.filter(), _focusChart.filter())) {\n                dc.events.trigger(function () {\n                    _focusChart.focus(chart.filter());\n                });\n            }\n        });\n        return _chart;\n    };\n\n    function rangesEqual (range1, range2) {\n        if (!range1 && !range2) {\n            return true;\n        } else if (!range1 || !range2) {\n            return false;\n        } else if (range1.length === 0 && range2.length === 0) {\n            return true;\n        } else if (range1[0].valueOf() === range2[0].valueOf() &&\n            range1[1].valueOf() === range2[1].valueOf()) {\n            return true;\n        }\n        return false;\n    }\n\n    /**\n     * Turn on/off the brush-based range filter. When brushing is on then user can drag the mouse\n     * across a chart with a quantitative scale to perform range filtering based on the extent of the\n     * brush, or click on the bars of an ordinal bar chart or slices of a pie chart to filter and\n     * un-filter them. However turning on the brush filter will disable other interactive elements on\n     * the chart such as highlighting, tool tips, and reference lines. Zooming will still be possible\n     * if enabled, but only via scrolling (panning will be disabled.)\n     * @method brushOn\n     * @memberof dc.coordinateGridMixin\n     * @instance\n     * @param {Boolean} [brushOn=true]\n     * @returns {Boolean|dc.coordinateGridMixin}\n     */\n    _chart.brushOn = function (brushOn) {\n        if (!arguments.length) {\n            return _brushOn;\n        }\n        _brushOn = brushOn;\n        return _chart;\n    };\n\n    function hasRangeSelected (range) {\n        return range instanceof Array && range.length > 1;\n    }\n\n    return _chart;\n};\n","/**\n * Stack Mixin is an mixin that provides cross-chart support of stackability using d3.layout.stack.\n * @name stackMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.stackMixin}\n */\ndc.stackMixin = function (_chart) {\n\n    function prepareValues (layer, layerIdx) {\n        var valAccessor = layer.accessor || _chart.valueAccessor();\n        layer.name = String(layer.name || layerIdx);\n        layer.values = layer.group.all().map(function (d, i) {\n            return {\n                x: _chart.keyAccessor()(d, i),\n                y: layer.hidden ? null : valAccessor(d, i),\n                data: d,\n                layer: layer.name,\n                hidden: layer.hidden\n            };\n        });\n\n        layer.values = layer.values.filter(domainFilter());\n        return layer.values;\n    }\n\n    var _stackLayout = d3.layout.stack()\n        .values(prepareValues);\n\n    var _stack = [];\n    var _titles = {};\n\n    var _hidableStacks = false;\n    var _evadeDomainFilter = false;\n\n    function domainFilter () {\n        if (!_chart.x() || _evadeDomainFilter) {\n            return d3.functor(true);\n        }\n        var xDomain = _chart.x().domain();\n        if (_chart.isOrdinal()) {\n            // TODO #416\n            //var domainSet = d3.set(xDomain);\n            return function () {\n                return true; //domainSet.has(p.x);\n            };\n        }\n        if (_chart.elasticX()) {\n            return function () { return true; };\n        }\n        return function (p) {\n            //return true;\n            return p.x >= xDomain[0] && p.x <= xDomain[xDomain.length - 1];\n        };\n    }\n\n    /**\n     * Stack a new crossfilter group onto this chart with an optional custom value accessor. All stacks\n     * in the same chart will share the same key accessor and therefore the same set of keys.\n     *\n     * For example, in a stacked bar chart, the bars of each stack will be positioned using the same set\n     * of keys on the x axis, while stacked vertically. If name is specified then it will be used to\n     * generate the legend label.\n     * @method stack\n     * @memberof dc.stackMixin\n     * @instance\n     * @see {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group-map-reduce crossfilter.group}\n     * @example\n     * // stack group using default accessor\n     * chart.stack(valueSumGroup)\n     * // stack group using custom accessor\n     * .stack(avgByDayGroup, function(d){return d.value.avgByDay;});\n     * @param {crossfilter.group} group\n     * @param {String} [name]\n     * @param {Function} [accessor]\n     * @returns {Array<{group: crossfilter.group, name: String, accessor: Function}>|dc.stackMixin}\n     */\n    _chart.stack = function (group, name, accessor) {\n        if (!arguments.length) {\n            return _stack;\n        }\n\n        if (arguments.length <= 2) {\n            accessor = name;\n        }\n\n        var layer = {group: group};\n        if (typeof name === 'string') {\n            layer.name = name;\n        }\n        if (typeof accessor === 'function') {\n            layer.accessor = accessor;\n        }\n        _stack.push(layer);\n\n        return _chart;\n    };\n\n    dc.override(_chart, 'group', function (g, n, f) {\n        if (!arguments.length) {\n            return _chart._group();\n        }\n        _stack = [];\n        _titles = {};\n        _chart.stack(g, n);\n        if (f) {\n            _chart.valueAccessor(f);\n        }\n        return _chart._group(g, n);\n    });\n\n    /**\n     * Allow named stacks to be hidden or shown by clicking on legend items.\n     * This does not affect the behavior of hideStack or showStack.\n     * @method hidableStacks\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {Boolean} [hidableStacks=false]\n     * @returns {Boolean|dc.stackMixin}\n     */\n    _chart.hidableStacks = function (hidableStacks) {\n        if (!arguments.length) {\n            return _hidableStacks;\n        }\n        _hidableStacks = hidableStacks;\n        return _chart;\n    };\n\n    function findLayerByName (n) {\n        var i = _stack.map(dc.pluck('name')).indexOf(n);\n        return _stack[i];\n    }\n\n    /**\n     * Hide all stacks on the chart with the given name.\n     * The chart must be re-rendered for this change to appear.\n     * @method hideStack\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {String} stackName\n     * @returns {dc.stackMixin}\n     */\n    _chart.hideStack = function (stackName) {\n        var layer = findLayerByName(stackName);\n        if (layer) {\n            layer.hidden = true;\n        }\n        return _chart;\n    };\n\n    /**\n     * Show all stacks on the chart with the given name.\n     * The chart must be re-rendered for this change to appear.\n     * @method showStack\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {String} stackName\n     * @returns {dc.stackMixin}\n     */\n    _chart.showStack = function (stackName) {\n        var layer = findLayerByName(stackName);\n        if (layer) {\n            layer.hidden = false;\n        }\n        return _chart;\n    };\n\n    _chart.getValueAccessorByIndex = function (index) {\n        return _stack[index].accessor || _chart.valueAccessor();\n    };\n\n    _chart.yAxisMin = function () {\n        var min = d3.min(flattenStack(), function (p) {\n            return (p.y < 0) ? (p.y + p.y0) : p.y0;\n        });\n\n        return dc.utils.subtract(min, _chart.yAxisPadding());\n\n    };\n\n    _chart.yAxisMax = function () {\n        var max = d3.max(flattenStack(), function (p) {\n            return (p.y > 0) ? (p.y + p.y0) : p.y0;\n        });\n\n        return dc.utils.add(max, _chart.yAxisPadding());\n    };\n\n    function flattenStack () {\n        var valueses = _chart.data().map(function (layer) { return layer.values; });\n        return Array.prototype.concat.apply([], valueses);\n    }\n\n    _chart.xAxisMin = function () {\n        var min = d3.min(flattenStack(), dc.pluck('x'));\n        return dc.utils.subtract(min, _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n    };\n\n    _chart.xAxisMax = function () {\n        var max = d3.max(flattenStack(), dc.pluck('x'));\n        return dc.utils.add(max, _chart.xAxisPadding(), _chart.xAxisPaddingUnit());\n    };\n\n    /**\n     * Set or get the title function. Chart class will use this function to render svg title (usually interpreted by\n     * browser as tooltips) for each child element in the chart, i.e. a slice in a pie chart or a bubble in a bubble chart.\n     * Almost every chart supports title function however in grid coordinate chart you need to turn off brush in order to\n     * use title otherwise the brush layer will block tooltip trigger.\n     *\n     * If the first argument is a stack name, the title function will get or set the title for that stack. If stackName\n     * is not provided, the first stack is implied.\n     * @method title\n     * @memberof dc.stackMixin\n     * @instance\n     * @example\n     * // set a title function on 'first stack'\n     * chart.title('first stack', function(d) { return d.key + ': ' + d.value; });\n     * // get a title function from 'second stack'\n     * var secondTitleFunction = chart.title('second stack');\n     * @param {String} [stackName]\n     * @param {Function} [titleAccessor]\n     * @returns {String|dc.stackMixin}\n     */\n    dc.override(_chart, 'title', function (stackName, titleAccessor) {\n        if (!stackName) {\n            return _chart._title();\n        }\n\n        if (typeof stackName === 'function') {\n            return _chart._title(stackName);\n        }\n        if (stackName === _chart._groupName && typeof titleAccessor === 'function') {\n            return _chart._title(titleAccessor);\n        }\n\n        if (typeof titleAccessor !== 'function') {\n            return _titles[stackName] || _chart._title();\n        }\n\n        _titles[stackName] = titleAccessor;\n\n        return _chart;\n    });\n\n    /**\n     * Gets or sets the stack layout algorithm, which computes a baseline for each stack and\n     * propagates it to the next.\n     * @method stackLayout\n     * @memberof dc.stackMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Stack-Layout.md d3.layout.stack}\n     * @param {Function} [stack=d3.layout.stack]\n     * @returns {Function|dc.stackMixin}\n     */\n    _chart.stackLayout = function (stack) {\n        if (!arguments.length) {\n            return _stackLayout;\n        }\n        _stackLayout = stack;\n        if (_stackLayout.values() === d3.layout.stack().values()) {\n            _stackLayout.values(prepareValues);\n        }\n        return _chart;\n    };\n\n    /**\n     * Since dc.js 2.0, there has been {@link https://github.com/dc-js/dc.js/issues/949 an issue}\n     * where points are filtered to the current domain. While this is a useful optimization, it is\n     * incorrectly implemented: the next point outside the domain is required in order to draw lines\n     * that are clipped to the bounds, as well as bars that are partly clipped.\n     *\n     * A fix will be included in dc.js 2.1.x, but a workaround is needed for dc.js 2.0 and until\n     * that fix is published, so set this flag to skip any filtering of points.\n     *\n     * Once the bug is fixed, this flag will have no effect, and it will be deprecated.\n     * @method evadeDomainFilter\n     * @memberof dc.stackMixin\n     * @instance\n     * @param {Boolean} [evadeDomainFilter=false]\n     * @returns {Boolean|dc.stackMixin}\n     */\n    _chart.evadeDomainFilter = function (evadeDomainFilter) {\n        if (!arguments.length) {\n            return _evadeDomainFilter;\n        }\n        _evadeDomainFilter = evadeDomainFilter;\n        return _chart;\n    };\n\n    function visability (l) {\n        return !l.hidden;\n    }\n\n    _chart.data(function () {\n        var layers = _stack.filter(visability);\n        return layers.length ? _chart.stackLayout()(layers) : [];\n    });\n\n    _chart._ordinalXDomain = function () {\n        var flat = flattenStack().map(dc.pluck('data'));\n        var ordered = _chart._computeOrderedGroups(flat);\n        return ordered.map(_chart.keyAccessor());\n    };\n\n    _chart.colorAccessor(function (d) {\n        var layer = this.layer || this.name || d.name || d.layer;\n        return layer;\n    });\n\n    _chart.legendables = function () {\n        return _stack.map(function (layer, i) {\n            return {\n                chart: _chart,\n                name: layer.name,\n                hidden: layer.hidden || false,\n                color: _chart.getColor.call(layer, layer.values, i)\n            };\n        });\n    };\n\n    _chart.isLegendableHidden = function (d) {\n        var layer = findLayerByName(d.name);\n        return layer ? layer.hidden : false;\n    };\n\n    _chart.legendToggle = function (d) {\n        if (_hidableStacks) {\n            if (_chart.isLegendableHidden(d)) {\n                _chart.showStack(d.name);\n            } else {\n                _chart.hideStack(d.name);\n            }\n            //_chart.redraw();\n            _chart.renderGroup();\n        }\n    };\n\n    return _chart;\n};\n","/**\n * Cap is a mixin that groups small data elements below a _cap_ into an *others* grouping for both the\n * Row and Pie Charts.\n *\n * The top ordered elements in the group up to the cap amount will be kept in the chart, and the rest\n * will be replaced with an *others* element, with value equal to the sum of the replaced values. The\n * keys of the elements below the cap limit are recorded in order to filter by those keys when the\n * others* element is clicked.\n * @name capMixin\n * @memberof dc\n * @mixin\n * @param {Object} _chart\n * @returns {dc.capMixin}\n */\ndc.capMixin = function (_chart) {\n    var _cap = Infinity, _takeFront = true;\n    var _othersLabel = 'Others';\n\n    // emulate old group.top(N) ordering\n    _chart.ordering(function (kv) {\n        return -kv.value;\n    });\n\n    var _othersGrouper = function (topItems, restItems) {\n        var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\n            restKeys = restItems.map(_chart.keyAccessor());\n        if (restItemsSum > 0) {\n            return topItems.concat([{\n                others: restKeys,\n                key: _chart.othersLabel(),\n                value: restItemsSum\n            }]);\n        }\n        return topItems;\n    };\n\n    _chart.cappedKeyAccessor = function (d, i) {\n        if (d.others) {\n            return d.key;\n        }\n        return _chart.keyAccessor()(d, i);\n    };\n\n    _chart.cappedValueAccessor = function (d, i) {\n        if (d.others) {\n            return d.value;\n        }\n        return _chart.valueAccessor()(d, i);\n    };\n\n    // return N \"top\" groups, where N is the cap, sorted by baseMixin.ordering\n    // whether top means front or back depends on takeFront\n    _chart.data(function (group) {\n        if (_cap === Infinity) {\n            return _chart._computeOrderedGroups(group.all());\n        } else {\n            var items = group.all(), rest;\n            items = _chart._computeOrderedGroups(items); // sort by baseMixin.ordering\n\n            if (_cap) {\n                if (_takeFront) {\n                    rest = items.slice(_cap);\n                    items = items.slice(0, _cap);\n                } else {\n                    var start = Math.max(0, items.length - _cap);\n                    rest = items.slice(0, start);\n                    items = items.slice(start);\n                }\n            }\n\n            if (_othersGrouper) {\n                return _othersGrouper(items, rest);\n            }\n            return items;\n        }\n    });\n\n    /**\n     * Get or set the count of elements to that will be included in the cap. If there is an\n     * {@link dc.capMixin#othersGrouper othersGrouper}, any further elements will be combined in an\n     * extra element with its name determined by {@link dc.capMixin#othersLabel othersLabel}.\n     *\n     * As of dc.js 2.1 and onward, the capped charts use\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_all group.all()}\n     * and {@link dc.baseMixin#ordering baseMixin.ordering()} to determine the order of\n     * elements. Then `cap` and {@link dc.capMixin#takeFront takeFront} determine how many elements\n     * to keep, from which end of the resulting array.\n     *\n     * **Migration note:** Up through dc.js 2.0.*, capping used\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_top group.top(N)},\n     * which selects the largest items according to\n     * {@link https://github.com/crossfilter/crossfilter/wiki/API-Reference#group_order group.order()}.\n     * The chart then sorted the items according to {@link dc.baseMixin#ordering baseMixin.ordering()}.\n     * So the two values essentially had to agree, but if the `group.order()` was incorrect (it's\n     * easy to forget about), the wrong rows or slices would be displayed, in the correct order.\n     *\n     * If your chart previously relied on `group.order()`, use `chart.ordering()` instead. As of\n     * 2.1.5, the ordering defaults to sorting from greatest to least like `group.top(N)` did.\n     *\n     * If you want to cap by one ordering but sort by another, please\n     * [file an issue](https://github.com/dc-js/dc.js/issues/new) - it's still possible but we'll\n     * need to work up an example.\n     * @method cap\n     * @memberof dc.capMixin\n     * @instance\n     * @param {Number} [count=Infinity]\n     * @returns {Number|dc.capMixin}\n     */\n    _chart.cap = function (count) {\n        if (!arguments.length) {\n            return _cap;\n        }\n        _cap = count;\n        return _chart;\n    };\n\n    /**\n     * Get or set the direction of capping. If set, the chart takes the first\n     * {@link dc.capMixin#cap cap} elements from the sorted array of elements; otherwise\n     * it takes the last `cap` elements.\n     * @method takeFront\n     * @memberof dc.capMixin\n     * @instance\n     * @param {Boolean} [takeFront=true]\n     * @returns {Boolean|dc.capMixin}\n     */\n    _chart.takeFront = function (takeFront) {\n        if (!arguments.length) {\n            return _takeFront;\n        }\n        _takeFront = takeFront;\n        return _chart;\n    };\n\n    /**\n     * Get or set the label for *Others* slice when slices cap is specified.\n     * @method othersLabel\n     * @memberof dc.capMixin\n     * @instance\n     * @param {String} [label=\"Others\"]\n     * @returns {String|dc.capMixin}\n     */\n    _chart.othersLabel = function (label) {\n        if (!arguments.length) {\n            return _othersLabel;\n        }\n        _othersLabel = label;\n        return _chart;\n    };\n\n    /**\n     * Get or set the grouper function that will perform the insertion of data for the *Others* slice\n     * if the slices cap is specified. If set to a falsy value, no others will be added.\n     *\n     * The grouper function takes an array of included (\"top\") items, and an array of the rest of\n     * the items. By default the grouper function computes the sum of the rest.\n     * @method othersGrouper\n     * @memberof dc.capMixin\n     * @instance\n     * @example\n     * // Do not show others\n     * chart.othersGrouper(null);\n     * // Default others grouper\n     * chart.othersGrouper(function (topItems, restItems) {\n     *     var restItemsSum = d3.sum(restItems, _chart.valueAccessor()),\n     *         restKeys = restItems.map(_chart.keyAccessor());\n     *     if (restItemsSum > 0) {\n     *         return topItems.concat([{\n     *             others: restKeys,\n     *             key: _chart.othersLabel(),\n     *             value: restItemsSum\n     *         }]);\n     *     }\n     *     return topItems;\n     * });\n     * @param {Function} [grouperFunction]\n     * @returns {Function|dc.capMixin}\n     */\n    _chart.othersGrouper = function (grouperFunction) {\n        if (!arguments.length) {\n            return _othersGrouper;\n        }\n        _othersGrouper = grouperFunction;\n        return _chart;\n    };\n\n    dc.override(_chart, 'onClick', function (d) {\n        if (d.others) {\n            _chart.filter([d.others]);\n        }\n        _chart._onClick(d);\n    });\n\n    return _chart;\n};\n","/**\n * This Mixin provides reusable functionalities for any chart that needs to visualize data using bubbles.\n * @name bubbleMixin\n * @memberof dc\n * @mixin\n * @mixes dc.colorMixin\n * @param {Object} _chart\n * @returns {dc.bubbleMixin}\n */\ndc.bubbleMixin = function (_chart) {\n    var _maxBubbleRelativeSize = 0.3;\n    var _minRadiusWithLabel = 10;\n    var _sortBubbleSize = false;\n    var _elasticRadius = false;\n\n    _chart.BUBBLE_NODE_CLASS = 'node';\n    _chart.BUBBLE_CLASS = 'bubble';\n    _chart.MIN_RADIUS = 10;\n\n    _chart = dc.colorMixin(_chart);\n\n    _chart.renderLabel(true);\n\n    _chart.data(function (group) {\n        var data = group.all();\n        if (_sortBubbleSize) {\n            // sort descending so smaller bubbles are on top\n            var radiusAccessor = _chart.radiusValueAccessor();\n            data.sort(function (a, b) { return d3.descending(radiusAccessor(a), radiusAccessor(b)); });\n        }\n        return data;\n    });\n\n    var _r = d3.scale.linear().domain([0, 100]);\n\n    var _rValueAccessor = function (d) {\n        return d.r;\n    };\n\n    /**\n     * Get or set the bubble radius scale. By default the bubble chart uses\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md#linear d3.scale.linear().domain([0, 100])}\n     * as its radius scale.\n     * @method r\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [bubbleRadiusScale=d3.scale.linear().domain([0, 100])]\n     * @returns {d3.scale|dc.bubbleMixin}\n     */\n    _chart.r = function (bubbleRadiusScale) {\n        if (!arguments.length) {\n            return _r;\n        }\n        _r = bubbleRadiusScale;\n        return _chart;\n    };\n\n    /**\n     * Turn on or off the elastic bubble radius feature, or return the value of the flag. If this\n     * feature is turned on, then bubble radii will be automatically rescaled to fit the chart better.\n     * @method elasticRadius\n     * @memberof dc.bubbleChart\n     * @instance\n     * @param {Boolean} [elasticRadius=false]\n     * @returns {Boolean|dc.bubbleChart}\n     */\n    _chart.elasticRadius = function (elasticRadius) {\n        if (!arguments.length) {\n            return _elasticRadius;\n        }\n        _elasticRadius = elasticRadius;\n        return _chart;\n    };\n\n    _chart.calculateRadiusDomain = function () {\n        if (_elasticRadius) {\n            _chart.r().domain([_chart.rMin(), _chart.rMax()]);\n        }\n    };\n\n    /**\n     * Get or set the radius value accessor function. If set, the radius value accessor function will\n     * be used to retrieve a data value for each bubble. The data retrieved then will be mapped using\n     * the r scale to the actual bubble radius. This allows you to encode a data dimension using bubble\n     * size.\n     * @method radiusValueAccessor\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Function} [radiusValueAccessor]\n     * @returns {Function|dc.bubbleMixin}\n     */\n    _chart.radiusValueAccessor = function (radiusValueAccessor) {\n        if (!arguments.length) {\n            return _rValueAccessor;\n        }\n        _rValueAccessor = radiusValueAccessor;\n        return _chart;\n    };\n\n    _chart.rMin = function () {\n        var min = d3.min(_chart.data(), function (e) {\n            return _chart.radiusValueAccessor()(e);\n        });\n        return min;\n    };\n\n    _chart.rMax = function () {\n        var max = d3.max(_chart.data(), function (e) {\n            return _chart.radiusValueAccessor()(e);\n        });\n        return max;\n    };\n\n    _chart.bubbleR = function (d) {\n        var value = _chart.radiusValueAccessor()(d);\n        var r = _chart.r()(value);\n        if (isNaN(r) || value <= 0) {\n            r = 0;\n        }\n        return r;\n    };\n\n    var labelFunction = function (d) {\n        return _chart.label()(d);\n    };\n\n    var shouldLabel = function (d) {\n        return (_chart.bubbleR(d) > _minRadiusWithLabel);\n    };\n\n    var labelOpacity = function (d) {\n        return shouldLabel(d) ? 1 : 0;\n    };\n\n    var labelPointerEvent = function (d) {\n        return shouldLabel(d) ? 'all' : 'none';\n    };\n\n    _chart._doRenderLabel = function (bubbleGEnter) {\n        if (_chart.renderLabel()) {\n            var label = bubbleGEnter.select('text');\n\n            if (label.empty()) {\n                label = bubbleGEnter.append('text')\n                    .attr('text-anchor', 'middle')\n                    .attr('dy', '.3em')\n                    .on('click', _chart.onClick);\n            }\n\n            label\n                .attr('opacity', 0)\n                .attr('pointer-events', labelPointerEvent)\n                .text(labelFunction);\n            dc.transition(label, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', labelOpacity);\n        }\n    };\n\n    _chart.doUpdateLabels = function (bubbleGEnter) {\n        if (_chart.renderLabel()) {\n            var labels = bubbleGEnter.select('text')\n                .attr('pointer-events', labelPointerEvent)\n                .text(labelFunction);\n            dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('opacity', labelOpacity);\n        }\n    };\n\n    var titleFunction = function (d) {\n        return _chart.title()(d);\n    };\n\n    _chart._doRenderTitles = function (g) {\n        if (_chart.renderTitle()) {\n            var title = g.select('title');\n\n            if (title.empty()) {\n                g.append('title').text(titleFunction);\n            }\n        }\n    };\n\n    _chart.doUpdateTitles = function (g) {\n        if (_chart.renderTitle()) {\n            g.select('title').text(titleFunction);\n        }\n    };\n\n    /**\n     * Turn on or off the bubble sorting feature, or return the value of the flag. If enabled,\n     * bubbles will be sorted by their radius, with smaller bubbles in front.\n     * @method sortBubbleSize\n     * @memberof dc.bubbleChart\n     * @instance\n     * @param {Boolean} [sortBubbleSize=false]\n     * @returns {Boolean|dc.bubbleChart}\n     */\n    _chart.sortBubbleSize = function (sortBubbleSize) {\n        if (!arguments.length) {\n            return _sortBubbleSize;\n        }\n        _sortBubbleSize = sortBubbleSize;\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimum radius. This will be used to initialize the radius scale's range.\n     * @method minRadius\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [radius=10]\n     * @returns {Number|dc.bubbleMixin}\n     */\n    _chart.minRadius = function (radius) {\n        if (!arguments.length) {\n            return _chart.MIN_RADIUS;\n        }\n        _chart.MIN_RADIUS = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimum radius for label rendering. If a bubble's radius is less than this value\n     * then no label will be rendered.\n     * @method minRadiusWithLabel\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [radius=10]\n     * @returns {Number|dc.bubbleMixin}\n     */\n\n    _chart.minRadiusWithLabel = function (radius) {\n        if (!arguments.length) {\n            return _minRadiusWithLabel;\n        }\n        _minRadiusWithLabel = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the maximum relative size of a bubble to the length of x axis. This value is useful\n     * when the difference in radius between bubbles is too great.\n     * @method maxBubbleRelativeSize\n     * @memberof dc.bubbleMixin\n     * @instance\n     * @param {Number} [relativeSize=0.3]\n     * @returns {Number|dc.bubbleMixin}\n     */\n    _chart.maxBubbleRelativeSize = function (relativeSize) {\n        if (!arguments.length) {\n            return _maxBubbleRelativeSize;\n        }\n        _maxBubbleRelativeSize = relativeSize;\n        return _chart;\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.' + _chart.BUBBLE_NODE_CLASS).each(function (d) {\n                if (_chart.isSelectedNode(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.' + _chart.BUBBLE_NODE_CLASS).each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(d.key);\n    };\n\n    _chart.onClick = function (d) {\n        var filter = d.key;\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    return _chart;\n};\n","/**\n * The pie chart implementation is usually used to visualize a small categorical distribution.  The pie\n * chart uses keyAccessor to determine the slices, and valueAccessor to calculate the size of each\n * slice relative to the sum of all values. Slices are ordered by {@link dc.baseMixin#ordering ordering}\n * which defaults to sorting by key.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class pieChart\n * @memberof dc\n * @mixes dc.capMixin\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a pie chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.pieChart('#chart-container1');\n * // create a pie chart under #chart-container2 element using chart group A\n * var chart2 = dc.pieChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.pieChart}\n */\ndc.pieChart = function (parent, chartGroup) {\n    var DEFAULT_MIN_ANGLE_FOR_LABEL = 0.5;\n\n    var _sliceCssClass = 'pie-slice';\n    var _labelCssClass = 'pie-label';\n    var _sliceGroupCssClass = 'pie-slice-group';\n    var _labelGroupCssClass = 'pie-label-group';\n    var _emptyCssClass = 'empty-chart';\n    var _emptyTitle = 'empty';\n\n    var _radius,\n        _givenRadius, // specified radius, if any\n        _innerRadius = 0,\n        _externalRadiusPadding = 0;\n\n    var _g;\n    var _cx;\n    var _cy;\n    var _minAngleForLabel = DEFAULT_MIN_ANGLE_FOR_LABEL;\n    var _externalLabelRadius;\n    var _drawPaths = false;\n    var _chart = dc.capMixin(dc.colorMixin(dc.baseMixin({})));\n\n    _chart.colorAccessor(_chart.cappedKeyAccessor);\n\n    _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + _chart.cappedValueAccessor(d);\n    });\n\n    /**\n     * Get or set the maximum number of slices the pie chart will generate. The top slices are determined by\n     * value from high to low. Other slices exeeding the cap will be rolled up into one single *Others* slice.\n     * @method slicesCap\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cap]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.slicesCap = _chart.cap;\n\n    _chart.label(_chart.cappedKeyAccessor);\n    _chart.renderLabel(true);\n\n    _chart.transitionDuration(350);\n    _chart.transitionDelay(0);\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _g = _chart.svg()\n            .append('g')\n            .attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n\n        _g.append('g').attr('class', _sliceGroupCssClass);\n        _g.append('g').attr('class', _labelGroupCssClass);\n\n        drawChart();\n\n        return _chart;\n    };\n\n    function drawChart () {\n        // set radius from chart size if none given, or if given radius is too large\n        var maxRadius =  d3.min([_chart.width(), _chart.height()]) / 2;\n        _radius = _givenRadius && _givenRadius < maxRadius ? _givenRadius : maxRadius;\n\n        var arc = buildArcs();\n\n        var pie = pieLayout();\n        var pieData;\n        // if we have data...\n        if (d3.sum(_chart.data(), _chart.valueAccessor())) {\n            pieData = pie(_chart.data());\n            _g.classed(_emptyCssClass, false);\n        } else {\n            // otherwise we'd be getting NaNs, so override\n            // note: abuse others for its ignoring the value accessor\n            pieData = pie([{key: _emptyTitle, value: 1, others: [_emptyTitle]}]);\n            _g.classed(_emptyCssClass, true);\n        }\n\n        if (_g) {\n            var slices = _g.select('g.' + _sliceGroupCssClass)\n                .selectAll('g.' + _sliceCssClass)\n                .data(pieData);\n\n            var labels = _g.select('g.' + _labelGroupCssClass)\n                .selectAll('text.' + _labelCssClass)\n                .data(pieData);\n\n            createElements(slices, labels, arc, pieData);\n\n            updateElements(pieData, arc);\n\n            removeElements(slices, labels);\n\n            highlightFilter();\n\n            dc.transition(_g, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', 'translate(' + _chart.cx() + ',' + _chart.cy() + ')');\n        }\n    }\n\n    function createElements (slices, labels, arc, pieData) {\n        var slicesEnter = createSliceNodes(slices);\n\n        createSlicePath(slicesEnter, arc);\n\n        createTitles(slicesEnter);\n\n        createLabels(labels, pieData, arc);\n    }\n\n    function createSliceNodes (slices) {\n        var slicesEnter = slices\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return _sliceCssClass + ' _' + i;\n            });\n        return slicesEnter;\n    }\n\n    function createSlicePath (slicesEnter, arc) {\n        var slicePath = slicesEnter.append('path')\n            .attr('fill', fill)\n            .on('click', onClick)\n            .attr('d', function (d, i) {\n                return safeArc(d, i, arc);\n            });\n\n        var transition = dc.transition(slicePath, _chart.transitionDuration(), _chart.transitionDelay());\n        if (transition.attrTween) {\n            transition.attrTween('d', tweenPie);\n        }\n    }\n\n    function createTitles (slicesEnter) {\n        if (_chart.renderTitle()) {\n            slicesEnter.append('title').text(function (d) {\n                return _chart.title()(d.data);\n            });\n        }\n    }\n\n    _chart._applyLabelText = function (labels) {\n        labels\n            .text(function (d) {\n                var data = d.data;\n                if ((sliceHasNoData(data) || sliceTooSmall(d)) && !isSelectedSlice(d)) {\n                    return '';\n                }\n                return _chart.label()(d.data);\n            });\n    };\n\n    function positionLabels (labels, arc) {\n        _chart._applyLabelText(labels);\n        dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', function (d) {\n                return labelPosition(d, arc);\n            })\n            .attr('text-anchor', 'middle');\n    }\n\n    function highlightSlice (i, whether) {\n        _chart.select('g.pie-slice._' + i)\n            .classed('highlight', whether);\n    }\n\n    function createLabels (labels, pieData, arc) {\n        if (_chart.renderLabel()) {\n            var labelsEnter = labels\n                .enter()\n                .append('text')\n                .attr('class', function (d, i) {\n                    var classes = _sliceCssClass + ' ' + _labelCssClass + ' _' + i;\n                    if (_externalLabelRadius) {\n                        classes += ' external';\n                    }\n                    return classes;\n                })\n                .on('click', onClick)\n                .on('mouseover', function (d, i) {\n                    highlightSlice(i, true);\n                })\n                .on('mouseout', function (d, i) {\n                    highlightSlice(i, false);\n                });\n            positionLabels(labelsEnter, arc);\n            if (_externalLabelRadius && _drawPaths) {\n                updateLabelPaths(pieData, arc);\n            }\n        }\n    }\n\n    function updateLabelPaths (pieData, arc) {\n        var polyline = _g.selectAll('polyline.' + _sliceCssClass)\n                .data(pieData);\n\n        polyline\n                .enter()\n                .append('polyline')\n                .attr('class', function (d, i) {\n                    return 'pie-path _' + i + ' ' + _sliceCssClass;\n                })\n                .on('click', onClick)\n                .on('mouseover', function (d, i) {\n                    highlightSlice(i, true);\n                })\n                .on('mouseout', function (d, i) {\n                    highlightSlice(i, false);\n                });\n\n        polyline.exit().remove();\n        var arc2 = d3.svg.arc()\n                .outerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .innerRadius(_radius - _externalRadiusPadding);\n        var transition = dc.transition(polyline, _chart.transitionDuration(), _chart.transitionDelay());\n        // this is one rare case where d3.selection differs from d3.transition\n        if (transition.attrTween) {\n            transition\n                .attrTween('points', function (d) {\n                    var current = this._current || d;\n                    current = {startAngle: current.startAngle, endAngle: current.endAngle};\n                    var interpolate = d3.interpolate(current, d);\n                    this._current = interpolate(0);\n                    return function (t) {\n                        var d2 = interpolate(t);\n                        return [arc.centroid(d2), arc2.centroid(d2)];\n                    };\n                });\n        } else {\n            transition.attr('points', function (d) {\n                return [arc.centroid(d), arc2.centroid(d)];\n            });\n        }\n        transition.style('visibility', function (d) {\n            return d.endAngle - d.startAngle < 0.0001 ? 'hidden' : 'visible';\n        });\n\n    }\n\n    function updateElements (pieData, arc) {\n        updateSlicePaths(pieData, arc);\n        updateLabels(pieData, arc);\n        updateTitles(pieData);\n    }\n\n    function updateSlicePaths (pieData, arc) {\n        var slicePaths = _g.selectAll('g.' + _sliceCssClass)\n            .data(pieData)\n            .select('path')\n            .attr('d', function (d, i) {\n                return safeArc(d, i, arc);\n            });\n        var transition = dc.transition(slicePaths, _chart.transitionDuration(), _chart.transitionDelay());\n        if (transition.attrTween) {\n            transition.attrTween('d', tweenPie);\n        }\n        transition.attr('fill', fill);\n    }\n\n    function updateLabels (pieData, arc) {\n        if (_chart.renderLabel()) {\n            var labels = _g.selectAll('text.' + _labelCssClass)\n                .data(pieData);\n            positionLabels(labels, arc);\n            if (_externalLabelRadius && _drawPaths) {\n                updateLabelPaths(pieData, arc);\n            }\n        }\n    }\n\n    function updateTitles (pieData) {\n        if (_chart.renderTitle()) {\n            _g.selectAll('g.' + _sliceCssClass)\n                .data(pieData)\n                .select('title')\n                .text(function (d) {\n                    return _chart.title()(d.data);\n                });\n        }\n    }\n\n    function removeElements (slices, labels) {\n        slices.exit().remove();\n        labels.exit().remove();\n    }\n\n    function highlightFilter () {\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.' + _sliceCssClass).each(function (d) {\n                if (isSelectedSlice(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.' + _sliceCssClass).each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    }\n\n    /**\n     * Get or set the external radius padding of the pie chart. This will force the radius of the\n     * pie chart to become smaller or larger depending on the value.\n     * @method externalRadiusPadding\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [externalRadiusPadding=0]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.externalRadiusPadding = function (externalRadiusPadding) {\n        if (!arguments.length) {\n            return _externalRadiusPadding;\n        }\n        _externalRadiusPadding = externalRadiusPadding;\n        return _chart;\n    };\n\n    /**\n     * Get or set the inner radius of the pie chart. If the inner radius is greater than 0px then the\n     * pie chart will be rendered as a doughnut chart.\n     * @method innerRadius\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [innerRadius=0]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.innerRadius = function (innerRadius) {\n        if (!arguments.length) {\n            return _innerRadius;\n        }\n        _innerRadius = innerRadius;\n        return _chart;\n    };\n\n    /**\n     * Get or set the outer radius. If the radius is not set, it will be half of the minimum of the\n     * chart width and height.\n     * @method radius\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [radius]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.radius = function (radius) {\n        if (!arguments.length) {\n            return _givenRadius;\n        }\n        _givenRadius = radius;\n        return _chart;\n    };\n\n    /**\n     * Get or set center x coordinate position. Default is center of svg.\n     * @method cx\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cx]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.cx = function (cx) {\n        if (!arguments.length) {\n            return (_cx ||  _chart.width() / 2);\n        }\n        _cx = cx;\n        return _chart;\n    };\n\n    /**\n     * Get or set center y coordinate position. Default is center of svg.\n     * @method cy\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [cy]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.cy = function (cy) {\n        if (!arguments.length) {\n            return (_cy ||  _chart.height() / 2);\n        }\n        _cy = cy;\n        return _chart;\n    };\n\n    function buildArcs () {\n        return d3.svg.arc()\n            .outerRadius(_radius - _externalRadiusPadding)\n            .innerRadius(_innerRadius);\n    }\n\n    function isSelectedSlice (d) {\n        return _chart.hasFilter(_chart.cappedKeyAccessor(d.data));\n    }\n\n    _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n    };\n\n    /**\n     * Get or set the minimal slice angle for label rendering. Any slice with a smaller angle will not\n     * display a slice label.\n     * @method minAngleForLabel\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [minAngleForLabel=0.5]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.minAngleForLabel = function (minAngleForLabel) {\n        if (!arguments.length) {\n            return _minAngleForLabel;\n        }\n        _minAngleForLabel = minAngleForLabel;\n        return _chart;\n    };\n\n    function pieLayout () {\n        return d3.layout.pie().sort(null).value(_chart.cappedValueAccessor);\n    }\n\n    function sliceTooSmall (d) {\n        var angle = (d.endAngle - d.startAngle);\n        return isNaN(angle) || angle < _minAngleForLabel;\n    }\n\n    function sliceHasNoData (d) {\n        return _chart.cappedValueAccessor(d) === 0;\n    }\n\n    function tweenPie (b) {\n        b.innerRadius = _innerRadius;\n        var current = this._current;\n        if (isOffCanvas(current)) {\n            current = {startAngle: 0, endAngle: 0};\n        } else {\n            // only interpolate startAngle & endAngle, not the whole data object\n            current = {startAngle: current.startAngle, endAngle: current.endAngle};\n        }\n        var i = d3.interpolate(current, b);\n        this._current = i(0);\n        return function (t) {\n            return safeArc(i(t), 0, buildArcs());\n        };\n    }\n\n    function isOffCanvas (current) {\n        return !current || isNaN(current.startAngle) || isNaN(current.endAngle);\n    }\n\n    function fill (d, i) {\n        return _chart.getColor(d.data, i);\n    }\n\n    function onClick (d, i) {\n        if (_g.attr('class') !== _emptyCssClass) {\n            _chart.onClick(d.data, i);\n        }\n    }\n\n    function safeArc (d, i, arc) {\n        var path = arc(d, i);\n        if (path.indexOf('NaN') >= 0) {\n            path = 'M0,0';\n        }\n        return path;\n    }\n\n    /**\n     * Title to use for the only slice when there is no data.\n     * @method emptyTitle\n     * @memberof dc.pieChart\n     * @instance\n     * @param {String} [title]\n     * @returns {String|dc.pieChart}\n     */\n    _chart.emptyTitle = function (title) {\n        if (arguments.length === 0) {\n            return _emptyTitle;\n        }\n        _emptyTitle = title;\n        return _chart;\n    };\n\n    /**\n     * Position slice labels offset from the outer edge of the chart.\n     *\n     * The argument specifies the extra radius to be added for slice labels.\n     * @method externalLabels\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Number} [externalLabelRadius]\n     * @returns {Number|dc.pieChart}\n     */\n    _chart.externalLabels = function (externalLabelRadius) {\n        if (arguments.length === 0) {\n            return _externalLabelRadius;\n        } else if (externalLabelRadius) {\n            _externalLabelRadius = externalLabelRadius;\n        } else {\n            _externalLabelRadius = undefined;\n        }\n\n        return _chart;\n    };\n\n    /**\n     * Get or set whether to draw lines from pie slices to their labels.\n     *\n     * @method drawPaths\n     * @memberof dc.pieChart\n     * @instance\n     * @param {Boolean} [drawPaths]\n     * @returns {Boolean|dc.pieChart}\n     */\n    _chart.drawPaths = function (drawPaths) {\n        if (arguments.length === 0) {\n            return _drawPaths;\n        }\n        _drawPaths = drawPaths;\n        return _chart;\n    };\n\n    function labelPosition (d, arc) {\n        var centroid;\n        if (_externalLabelRadius) {\n            centroid = d3.svg.arc()\n                .outerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .innerRadius(_radius - _externalRadiusPadding + _externalLabelRadius)\n                .centroid(d);\n        } else {\n            centroid = arc.centroid(d);\n        }\n        if (isNaN(centroid[0]) || isNaN(centroid[1])) {\n            return 'translate(0,0)';\n        } else {\n            return 'translate(' + centroid + ')';\n        }\n    }\n\n    _chart.legendables = function () {\n        return _chart.data().map(function (d, i) {\n            var legendable = {name: d.key, data: d.value, others: d.others, chart: _chart};\n            legendable.color = _chart.getColor(d, i);\n            return legendable;\n        });\n    };\n\n    _chart.legendHighlight = function (d) {\n        highlightSliceFromLegendable(d, true);\n    };\n\n    _chart.legendReset = function (d) {\n        highlightSliceFromLegendable(d, false);\n    };\n\n    _chart.legendToggle = function (d) {\n        _chart.onClick({key: d.name, others: d.others});\n    };\n\n    function highlightSliceFromLegendable (legendable, highlighted) {\n        _chart.selectAll('g.pie-slice').each(function (d) {\n            if (legendable.name === d.data.key) {\n                d3.select(this).classed('highlight', highlighted);\n            }\n        });\n    }\n\n    return _chart.anchor(parent, chartGroup);\n};\n","/**\n * Concrete bar chart/histogram implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class barChart\n * @memberof dc\n * @mixes dc.stackMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a bar chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.barChart('#chart-container1');\n * // create a bar chart under #chart-container2 element using chart group A\n * var chart2 = dc.barChart('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.barChart(compositeChart);\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector}\n * specifying a dom block element such as a div; or a dom element or d3 selection.  If the bar\n * chart is a sub-chart in a {@link dc.compositeChart Composite Chart} then pass in the parent\n * composite chart instance instead.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.barChart}\n */\ndc.barChart = function (parent, chartGroup) {\n    var MIN_BAR_WIDTH = 1;\n    var DEFAULT_GAP_BETWEEN_BARS = 2;\n    var LABEL_PADDING = 3;\n\n    var _chart = dc.stackMixin(dc.coordinateGridMixin({}));\n\n    var _gap = DEFAULT_GAP_BETWEEN_BARS;\n    var _centerBar = false;\n    var _alwaysUseRounding = false;\n\n    var _barWidth;\n\n    dc.override(_chart, 'rescale', function () {\n        _chart._rescale();\n        _barWidth = undefined;\n        return _chart;\n    });\n\n    dc.override(_chart, 'render', function () {\n        if (_chart.round() && _centerBar && !_alwaysUseRounding) {\n            dc.logger.warn('By default, brush rounding is disabled if bars are centered. ' +\n                         'See dc.js bar chart API documentation for details.');\n        }\n\n        return _chart._render();\n    });\n\n    _chart.label(function (d) {\n        return dc.utils.printSingleValue(d.y0 + d.y);\n    }, false);\n\n    _chart.plotData = function () {\n        var layers = _chart.chartBodyG().selectAll('g.stack')\n            .data(_chart.data());\n\n        calculateBarWidth();\n\n        layers\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return 'stack ' + '_' + i;\n            });\n\n        var last = layers.size() - 1;\n        layers.each(function (d, i) {\n            var layer = d3.select(this);\n\n            renderBars(layer, i, d);\n\n            if (_chart.renderLabel() && last === i) {\n                renderLabels(layer, i, d);\n            }\n        });\n    };\n\n    function barHeight (d) {\n        return dc.utils.safeNumber(Math.abs(_chart.y()(d.y + d.y0) - _chart.y()(d.y0)));\n    }\n\n    function renderLabels (layer, layerIndex, d) {\n        var labels = layer.selectAll('text.barLabel')\n            .data(d.values, dc.pluck('x'));\n\n        labels.enter()\n            .append('text')\n            .attr('class', 'barLabel')\n            .attr('text-anchor', 'middle');\n\n        if (_chart.isOrdinal()) {\n            labels.on('click', _chart.onClick);\n            labels.attr('cursor', 'pointer');\n        }\n\n        dc.transition(labels, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) {\n                var x = _chart.x()(d.x);\n                if (!_centerBar) {\n                    x += _barWidth / 2;\n                }\n                return dc.utils.safeNumber(x);\n            })\n            .attr('y', function (d) {\n                var y = _chart.y()(d.y + d.y0);\n\n                if (d.y < 0) {\n                    y -= barHeight(d);\n                }\n\n                return dc.utils.safeNumber(y - LABEL_PADDING);\n            })\n            .text(function (d) {\n                return _chart.label()(d);\n            });\n\n        dc.transition(labels.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('height', 0)\n            .remove();\n    }\n\n    function renderBars (layer, layerIndex, d) {\n        var bars = layer.selectAll('rect.bar')\n            .data(d.values, dc.pluck('x'));\n\n        var enter = bars.enter()\n            .append('rect')\n            .attr('class', 'bar')\n            .attr('fill', dc.pluck('data', _chart.getColor))\n            .attr('y', _chart.yAxisHeight())\n            .attr('height', 0);\n\n        if (_chart.renderTitle()) {\n            enter.append('title').text(dc.pluck('data', _chart.title(d.name)));\n        }\n\n        if (_chart.isOrdinal()) {\n            bars.on('click', _chart.onClick);\n        }\n\n        dc.transition(bars, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) {\n                var x = _chart.x()(d.x);\n                if (_centerBar) {\n                    x -= _barWidth / 2;\n                }\n                if (_chart.isOrdinal() && _gap !== undefined) {\n                    x += _gap / 2;\n                }\n                return dc.utils.safeNumber(x);\n            })\n            .attr('y', function (d) {\n                var y = _chart.y()(d.y + d.y0);\n\n                if (d.y < 0) {\n                    y -= barHeight(d);\n                }\n\n                return dc.utils.safeNumber(y);\n            })\n            .attr('width', _barWidth)\n            .attr('height', function (d) {\n                return barHeight(d);\n            })\n            .attr('fill', dc.pluck('data', _chart.getColor))\n            .select('title').text(dc.pluck('data', _chart.title(d.name)));\n\n        dc.transition(bars.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d) { return _chart.x()(d.x); })\n            .attr('width', _barWidth * 0.9)\n            .remove();\n    }\n\n    function calculateBarWidth () {\n        if (_barWidth === undefined) {\n            var numberOfBars = _chart.xUnitCount();\n\n            // please can't we always use rangeBands for bar charts?\n            if (_chart.isOrdinal() && _gap === undefined) {\n                _barWidth = Math.floor(_chart.x().rangeBand());\n            } else if (_gap) {\n                _barWidth = Math.floor((_chart.xAxisLength() - (numberOfBars - 1) * _gap) / numberOfBars);\n            } else {\n                _barWidth = Math.floor(_chart.xAxisLength() / (1 + _chart.barPadding()) / numberOfBars);\n            }\n\n            if (_barWidth === Infinity || isNaN(_barWidth) || _barWidth < MIN_BAR_WIDTH) {\n                _barWidth = MIN_BAR_WIDTH;\n            }\n        }\n    }\n\n    _chart.fadeDeselectedArea = function () {\n        var bars = _chart.chartBodyG().selectAll('rect.bar');\n        var extent = _chart.brush().extent();\n\n        if (_chart.isOrdinal()) {\n            if (_chart.hasFilter()) {\n                bars.classed(dc.constants.SELECTED_CLASS, function (d) {\n                    return _chart.hasFilter(d.x);\n                });\n                bars.classed(dc.constants.DESELECTED_CLASS, function (d) {\n                    return !_chart.hasFilter(d.x);\n                });\n            } else {\n                bars.classed(dc.constants.SELECTED_CLASS, false);\n                bars.classed(dc.constants.DESELECTED_CLASS, false);\n            }\n        } else {\n            if (!_chart.brushIsEmpty(extent)) {\n                var start = extent[0];\n                var end = extent[1];\n\n                bars.classed(dc.constants.DESELECTED_CLASS, function (d) {\n                    return d.x < start || d.x >= end;\n                });\n            } else {\n                bars.classed(dc.constants.DESELECTED_CLASS, false);\n            }\n        }\n    };\n\n    /**\n     * Whether the bar chart will render each bar centered around the data position on the x-axis.\n     * @method centerBar\n     * @memberof dc.barChart\n     * @instance\n     * @param {Boolean} [centerBar=false]\n     * @returns {Boolean|dc.barChart}\n     */\n    _chart.centerBar = function (centerBar) {\n        if (!arguments.length) {\n            return _centerBar;\n        }\n        _centerBar = centerBar;\n        return _chart;\n    };\n\n    dc.override(_chart, 'onClick', function (d) {\n        _chart._onClick(d.data);\n    });\n\n    /**\n     * Get or set the spacing between bars as a fraction of bar size. Valid values are between 0-1.\n     * Setting this value will also remove any previously set {@link dc.barChart#gap gap}. See the\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3 docs}\n     * for a visual description of how the padding is applied.\n     * @method barPadding\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [barPadding=0]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.barPadding = function (barPadding) {\n        if (!arguments.length) {\n            return _chart._rangeBandPadding();\n        }\n        _chart._rangeBandPadding(barPadding);\n        _gap = undefined;\n        return _chart;\n    };\n\n    _chart._useOuterPadding = function () {\n        return _gap === undefined;\n    };\n\n    /**\n     * Get or set the outer padding on an ordinal bar chart. This setting has no effect on non-ordinal charts.\n     * Will pad the width by `padding * barWidth` on each side of the chart.\n     * @method outerPadding\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [padding=0.5]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.outerPadding = _chart._outerRangeBandPadding;\n\n    /**\n     * Manually set fixed gap (in px) between bars instead of relying on the default auto-generated\n     * gap.  By default the bar chart implementation will calculate and set the gap automatically\n     * based on the number of data points and the length of the x axis.\n     * @method gap\n     * @memberof dc.barChart\n     * @instance\n     * @param {Number} [gap=2]\n     * @returns {Number|dc.barChart}\n     */\n    _chart.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _chart;\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _chart.brush().extent();\n        if (_chart.round() && (!_centerBar || _alwaysUseRounding)) {\n            extent[0] = extent.map(_chart.round())[0];\n            extent[1] = extent.map(_chart.round())[1];\n\n            _chart.chartBodyG().select('.brush')\n                .call(_chart.brush().extent(extent));\n        }\n\n        return extent;\n    };\n\n    /**\n     * Set or get whether rounding is enabled when bars are centered. If false, using\n     * rounding with centered bars will result in a warning and rounding will be ignored.  This flag\n     * has no effect if bars are not {@link dc.barChart#centerBar centered}.\n     * When using standard d3.js rounding methods, the brush often doesn't align correctly with\n     * centered bars since the bars are offset.  The rounding function must add an offset to\n     * compensate, such as in the following example.\n     * @method alwaysUseRounding\n     * @memberof dc.barChart\n     * @instance\n     * @example\n     * chart.round(function(n) { return Math.floor(n) + 0.5; });\n     * @param {Boolean} [alwaysUseRounding=false]\n     * @returns {Boolean|dc.barChart}\n     */\n    _chart.alwaysUseRounding = function (alwaysUseRounding) {\n        if (!arguments.length) {\n            return _alwaysUseRounding;\n        }\n        _alwaysUseRounding = alwaysUseRounding;\n        return _chart;\n    };\n\n    function colorFilter (color, inv) {\n        return function () {\n            var item = d3.select(this);\n            var match = item.attr('fill') === color;\n            return inv ? !match : match;\n        };\n    }\n\n    _chart.legendHighlight = function (d) {\n        if (!_chart.isLegendableHidden(d)) {\n            _chart.g().selectAll('rect.bar')\n                .classed('highlight', colorFilter(d.color))\n                .classed('fadeout', colorFilter(d.color, true));\n        }\n    };\n\n    _chart.legendReset = function () {\n        _chart.g().selectAll('rect.bar')\n            .classed('highlight', false)\n            .classed('fadeout', false);\n    };\n\n    dc.override(_chart, 'xAxisMax', function () {\n        var max = this._xAxisMax();\n        if ('resolution' in _chart.xUnits()) {\n            var res = _chart.xUnits().resolution;\n            max += res;\n        }\n        return max;\n    });\n\n    return _chart.anchor(parent, chartGroup);\n};\n","/**\n * Concrete line/area chart implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class lineChart\n * @memberof dc\n * @mixes dc.stackMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a line chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.lineChart('#chart-container1');\n * // create a line chart under #chart-container2 element using chart group A\n * var chart2 = dc.lineChart('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.lineChart(compositeChart);\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector}\n * specifying a dom block element such as a div; or a dom element or d3 selection.  If the line\n * chart is a sub-chart in a {@link dc.compositeChart Composite Chart} then pass in the parent\n * composite chart instance instead.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.lineChart}\n */\ndc.lineChart = function (parent, chartGroup) {\n    var DEFAULT_DOT_RADIUS = 5;\n    var TOOLTIP_G_CLASS = 'dc-tooltip';\n    var DOT_CIRCLE_CLASS = 'dot';\n    var Y_AXIS_REF_LINE_CLASS = 'yRef';\n    var X_AXIS_REF_LINE_CLASS = 'xRef';\n    var DEFAULT_DOT_OPACITY = 1e-6;\n    var LABEL_PADDING = 3;\n\n    var _chart = dc.stackMixin(dc.coordinateGridMixin({}));\n    var _renderArea = false;\n    var _dotRadius = DEFAULT_DOT_RADIUS;\n    var _dataPointRadius = null;\n    var _dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n    var _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n    var _interpolate = 'linear';\n    var _tension = 0.7;\n    var _defined;\n    var _dashStyle;\n    var _xyTipsOn = true;\n\n    _chart.transitionDuration(500);\n    _chart.transitionDelay(0);\n    _chart._rangeBandPadding(1);\n\n    _chart.plotData = function () {\n        var chartBody = _chart.chartBodyG();\n        var layersList = chartBody.select('g.stack-list');\n\n        if (layersList.empty()) {\n            layersList = chartBody.append('g').attr('class', 'stack-list');\n        }\n\n        var layers = layersList.selectAll('g.stack').data(_chart.data());\n\n        var layersEnter = layers\n            .enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return 'stack ' + '_' + i;\n            });\n\n        drawLine(layersEnter, layers);\n\n        drawArea(layersEnter, layers);\n\n        drawDots(chartBody, layers);\n\n        if (_chart.renderLabel()) {\n            drawLabels(layers);\n        }\n    };\n\n    /**\n     * Gets or sets the interpolator to use for lines drawn, by string name, allowing e.g. step\n     * functions, splines, and cubic interpolation.  This is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate} and\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate},\n     * where you can find a complete list of valid arguments.\n     * @method interpolate\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate}\n     * @param  {String} [interpolate='linear']\n     * @returns {String|dc.lineChart}\n     */\n    _chart.interpolate = function (interpolate) {\n        if (!arguments.length) {\n            return _interpolate;\n        }\n        _interpolate = interpolate;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the tension to use for lines drawn, in the range 0 to 1.\n     * This parameter further customizes the interpolation behavior.  It is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_tension d3.svg.line.tension} and\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_tension d3.svg.area.tension}.\n     * @method tension\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_interpolate d3.svg.line.interpolate}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#area_interpolate d3.svg.area.interpolate}\n     * @param  {Number} [tension=0.7]\n     * @returns {Number|dc.lineChart}\n     */\n    _chart.tension = function (tension) {\n        if (!arguments.length) {\n            return _tension;\n        }\n        _tension = tension;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets a function that will determine discontinuities in the line which should be\n     * skipped: the path will be broken into separate subpaths if some points are undefined.\n     * This function is passed to\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_defined d3.svg.line.defined}\n     *\n     * Note: crossfilter will sometimes coerce nulls to 0, so you may need to carefully write\n     * custom reduce functions to get this to work, depending on your data. See\n     * {@link https://github.com/dc-js/dc.js/issues/615#issuecomment-49089248 this GitHub comment}\n     * for more details and an example.\n     * @method defined\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#line_defined d3.svg.line.defined}\n     * @param  {Function} [defined]\n     * @returns {Function|dc.lineChart}\n     */\n    _chart.defined = function (defined) {\n        if (!arguments.length) {\n            return _defined;\n        }\n        _defined = defined;\n        return _chart;\n    };\n\n    /**\n     * Set the line's d3 dashstyle. This value becomes the 'stroke-dasharray' of line. Defaults to empty\n     * array (solid line).\n     * @method dashStyle\n     * @memberof dc.lineChart\n     * @instance\n     * @see {@link https://developer.mozilla.org/en-US/docs/Web/SVG/Attribute/stroke-dasharray stroke-dasharray}\n     * @example\n     * // create a Dash Dot Dot Dot\n     * chart.dashStyle([3,1,1,1]);\n     * @param  {Array<Number>} [dashStyle=[]]\n     * @returns {Array<Number>|dc.lineChart}\n     */\n    _chart.dashStyle = function (dashStyle) {\n        if (!arguments.length) {\n            return _dashStyle;\n        }\n        _dashStyle = dashStyle;\n        return _chart;\n    };\n\n    /**\n     * Get or set render area flag. If the flag is set to true then the chart will render the area\n     * beneath each line and the line chart effectively becomes an area chart.\n     * @method renderArea\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Boolean} [renderArea=false]\n     * @returns {Boolean|dc.lineChart}\n     */\n    _chart.renderArea = function (renderArea) {\n        if (!arguments.length) {\n            return _renderArea;\n        }\n        _renderArea = renderArea;\n        return _chart;\n    };\n\n    function colors (d, i) {\n        return _chart.getColor.call(d, d.values, i);\n    }\n\n    function drawLine (layersEnter, layers) {\n        var line = d3.svg.line()\n            .x(function (d) {\n                return _chart.x()(d.x);\n            })\n            .y(function (d) {\n                return _chart.y()(d.y + d.y0);\n            })\n            .interpolate(_interpolate)\n            .tension(_tension);\n        if (_defined) {\n            line.defined(_defined);\n        }\n\n        var path = layersEnter.append('path')\n            .attr('class', 'line')\n            .attr('stroke', colors);\n        if (_dashStyle) {\n            path.attr('stroke-dasharray', _dashStyle);\n        }\n\n        dc.transition(layers.select('path.line'), _chart.transitionDuration(), _chart.transitionDelay())\n            //.ease('linear')\n            .attr('stroke', colors)\n            .attr('d', function (d) {\n                return safeD(line(d.values));\n            });\n    }\n\n    function drawArea (layersEnter, layers) {\n        if (_renderArea) {\n            var area = d3.svg.area()\n                .x(function (d) {\n                    return _chart.x()(d.x);\n                })\n                .y(function (d) {\n                    return _chart.y()(d.y + d.y0);\n                })\n                .y0(function (d) {\n                    return _chart.y()(d.y0);\n                })\n                .interpolate(_interpolate)\n                .tension(_tension);\n            if (_defined) {\n                area.defined(_defined);\n            }\n\n            layersEnter.append('path')\n                .attr('class', 'area')\n                .attr('fill', colors)\n                .attr('d', function (d) {\n                    return safeD(area(d.values));\n                });\n\n            dc.transition(layers.select('path.area'), _chart.transitionDuration(), _chart.transitionDelay())\n                //.ease('linear')\n                .attr('fill', colors)\n                .attr('d', function (d) {\n                    return safeD(area(d.values));\n                });\n        }\n    }\n\n    function safeD (d) {\n        return (!d || d.indexOf('NaN') >= 0) ? 'M0,0' : d;\n    }\n\n    function drawDots (chartBody, layers) {\n        if (_chart.xyTipsOn() === 'always' || (!_chart.brushOn() && _chart.xyTipsOn())) {\n            var tooltipListClass = TOOLTIP_G_CLASS + '-list';\n            var tooltips = chartBody.select('g.' + tooltipListClass);\n\n            if (tooltips.empty()) {\n                tooltips = chartBody.append('g').attr('class', tooltipListClass);\n            }\n\n            layers.each(function (d, layerIndex) {\n                var points = d.values;\n                if (_defined) {\n                    points = points.filter(_defined);\n                }\n\n                var g = tooltips.select('g.' + TOOLTIP_G_CLASS + '._' + layerIndex);\n                if (g.empty()) {\n                    g = tooltips.append('g').attr('class', TOOLTIP_G_CLASS + ' _' + layerIndex);\n                }\n\n                createRefLines(g);\n\n                var dots = g.selectAll('circle.' + DOT_CIRCLE_CLASS)\n                    .data(points, dc.pluck('x'));\n\n                dots.enter()\n                    .append('circle')\n                    .attr('class', DOT_CIRCLE_CLASS)\n                    .attr('r', getDotRadius())\n                    .style('fill-opacity', _dataPointFillOpacity)\n                    .style('stroke-opacity', _dataPointStrokeOpacity)\n                    .attr('fill', _chart.getColor)\n                    .attr('stroke', _chart.getColor)\n                    .on('mousemove', function () {\n                        var dot = d3.select(this);\n                        showDot(dot);\n                        showRefLines(dot, g);\n                    })\n                    .on('mouseout', function () {\n                        var dot = d3.select(this);\n                        hideDot(dot);\n                        hideRefLines(g);\n                    });\n\n                dots.call(renderTitle, d);\n\n                dc.transition(dots, _chart.transitionDuration())\n                    .attr('cx', function (d) {\n                        return dc.utils.safeNumber(_chart.x()(d.x));\n                    })\n                    .attr('cy', function (d) {\n                        return dc.utils.safeNumber(_chart.y()(d.y + d.y0));\n                    })\n                    .attr('fill', _chart.getColor);\n\n                dots.exit().remove();\n            });\n        }\n    }\n\n    _chart.label(function (d) {\n        return dc.utils.printSingleValue(d.y0 + d.y);\n    }, false);\n\n    function drawLabels (layers) {\n        layers.each(function (d, layerIndex) {\n            var layer = d3.select(this);\n            var labels = layer.selectAll('text.lineLabel')\n                .data(d.values, dc.pluck('x'));\n\n            labels.enter()\n                .append('text')\n                .attr('class', 'lineLabel')\n                .attr('text-anchor', 'middle');\n\n            dc.transition(labels, _chart.transitionDuration())\n                .attr('x', function (d) {\n                    return dc.utils.safeNumber(_chart.x()(d.x));\n                })\n                .attr('y', function (d) {\n                    var y = _chart.y()(d.y + d.y0) - LABEL_PADDING;\n                    return dc.utils.safeNumber(y);\n                })\n                .text(function (d) {\n                    return _chart.label()(d);\n                });\n\n            dc.transition(labels.exit(), _chart.transitionDuration())\n                .attr('height', 0)\n                .remove();\n        });\n    }\n\n    function createRefLines (g) {\n        var yRefLine = g.select('path.' + Y_AXIS_REF_LINE_CLASS).empty() ?\n            g.append('path').attr('class', Y_AXIS_REF_LINE_CLASS) : g.select('path.' + Y_AXIS_REF_LINE_CLASS);\n        yRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n\n        var xRefLine = g.select('path.' + X_AXIS_REF_LINE_CLASS).empty() ?\n            g.append('path').attr('class', X_AXIS_REF_LINE_CLASS) : g.select('path.' + X_AXIS_REF_LINE_CLASS);\n        xRefLine.style('display', 'none').attr('stroke-dasharray', '5,5');\n    }\n\n    function showDot (dot) {\n        dot.style('fill-opacity', 0.8);\n        dot.style('stroke-opacity', 0.8);\n        dot.attr('r', _dotRadius);\n        return dot;\n    }\n\n    function showRefLines (dot, g) {\n        var x = dot.attr('cx');\n        var y = dot.attr('cy');\n        var yAxisX = (_chart._yAxisX() - _chart.margins().left);\n        var yAxisRefPathD = 'M' + yAxisX + ' ' + y + 'L' + (x) + ' ' + (y);\n        var xAxisRefPathD = 'M' + x + ' ' + _chart.yAxisHeight() + 'L' + x + ' ' + y;\n        g.select('path.' + Y_AXIS_REF_LINE_CLASS).style('display', '').attr('d', yAxisRefPathD);\n        g.select('path.' + X_AXIS_REF_LINE_CLASS).style('display', '').attr('d', xAxisRefPathD);\n    }\n\n    function getDotRadius () {\n        return _dataPointRadius || _dotRadius;\n    }\n\n    function hideDot (dot) {\n        dot.style('fill-opacity', _dataPointFillOpacity)\n            .style('stroke-opacity', _dataPointStrokeOpacity)\n            .attr('r', getDotRadius());\n    }\n\n    function hideRefLines (g) {\n        g.select('path.' + Y_AXIS_REF_LINE_CLASS).style('display', 'none');\n        g.select('path.' + X_AXIS_REF_LINE_CLASS).style('display', 'none');\n    }\n\n    function renderTitle (dot, d) {\n        if (_chart.renderTitle()) {\n            dot.select('title').remove();\n            dot.append('title').text(dc.pluck('data', _chart.title(d.name)));\n        }\n    }\n\n    /**\n     * Turn on/off the mouseover behavior of an individual data point which renders a circle and x/y axis\n     * dashed lines back to each respective axis.  This is ignored if the chart\n     * {@link dc.coordinateGridMixin#brushOn brush} is on\n     * @method xyTipsOn\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Boolean} [xyTipsOn=false]\n     * @returns {Boolean|dc.lineChart}\n     */\n    _chart.xyTipsOn = function (xyTipsOn) {\n        if (!arguments.length) {\n            return _xyTipsOn;\n        }\n        _xyTipsOn = xyTipsOn;\n        return _chart;\n    };\n\n    /**\n     * Get or set the radius (in px) for dots displayed on the data points.\n     * @method dotRadius\n     * @memberof dc.lineChart\n     * @instance\n     * @param  {Number} [dotRadius=5]\n     * @returns {Number|dc.lineChart}\n     */\n    _chart.dotRadius = function (dotRadius) {\n        if (!arguments.length) {\n            return _dotRadius;\n        }\n        _dotRadius = dotRadius;\n        return _chart;\n    };\n\n    /**\n     * Always show individual dots for each datapoint.\n     *\n     * If `options` is falsy, it disables data point rendering. If no `options` are provided, the\n     * current `options` values are instead returned.\n     * @method renderDataPoints\n     * @memberof dc.lineChart\n     * @instance\n     * @example\n     * chart.renderDataPoints({radius: 2, fillOpacity: 0.8, strokeOpacity: 0.0})\n     * @param  {{fillOpacity: Number, strokeOpacity: Number, radius: Number}} [options={fillOpacity: 0.8, strokeOpacity: 0.0, radius: 2}]\n     * @returns {{fillOpacity: Number, strokeOpacity: Number, radius: Number}|dc.lineChart}\n     */\n    _chart.renderDataPoints = function (options) {\n        if (!arguments.length) {\n            return {\n                fillOpacity: _dataPointFillOpacity,\n                strokeOpacity: _dataPointStrokeOpacity,\n                radius: _dataPointRadius\n            };\n        } else if (!options) {\n            _dataPointFillOpacity = DEFAULT_DOT_OPACITY;\n            _dataPointStrokeOpacity = DEFAULT_DOT_OPACITY;\n            _dataPointRadius = null;\n        } else {\n            _dataPointFillOpacity = options.fillOpacity || 0.8;\n            _dataPointStrokeOpacity = options.strokeOpacity || 0.0;\n            _dataPointRadius = options.radius || 2;\n        }\n        return _chart;\n    };\n\n    function colorFilter (color, dashstyle, inv) {\n        return function () {\n            var item = d3.select(this);\n            var match = (item.attr('stroke') === color &&\n                item.attr('stroke-dasharray') === ((dashstyle instanceof Array) ?\n                    dashstyle.join(',') : null)) || item.attr('fill') === color;\n            return inv ? !match : match;\n        };\n    }\n\n    _chart.legendHighlight = function (d) {\n        if (!_chart.isLegendableHidden(d)) {\n            _chart.g().selectAll('path.line, path.area')\n                .classed('highlight', colorFilter(d.color, d.dashstyle))\n                .classed('fadeout', colorFilter(d.color, d.dashstyle, true));\n        }\n    };\n\n    _chart.legendReset = function () {\n        _chart.g().selectAll('path.line, path.area')\n            .classed('highlight', false)\n            .classed('fadeout', false);\n    };\n\n    dc.override(_chart, 'legendables', function () {\n        var legendables = _chart._legendables();\n        if (!_dashStyle) {\n            return legendables;\n        }\n        return legendables.map(function (l) {\n            l.dashstyle = _dashStyle;\n            return l;\n        });\n    });\n\n    return _chart.anchor(parent, chartGroup);\n};\n","/**\n * The data count widget is a simple widget designed to display the number of records selected by the\n * current filters out of the total number of records in the data set. Once created the data count widget\n * will automatically update the text content of child elements with the following classes:\n *\n * * `.total-count` - total number of records\n * * `.filter-count` - number of records matched by the current filters\n *\n * Note: this widget works best for the specific case of showing the number of records out of a\n * total. If you want a more general-purpose numeric display, please use the\n * {@link dc.numberDisplay} widget instead.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class dataCount\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * var ndx = crossfilter(data);\n * var all = ndx.groupAll();\n *\n * dc.dataCount('.dc-data-count')\n *     .dimension(ndx)\n *     .group(all);\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataCount}\n */\ndc.dataCount = function (parent, chartGroup) {\n    var _formatNumber = d3.format(',d');\n    var _chart = dc.baseMixin({});\n    var _html = {some: '', all: ''};\n\n    /**\n     * Gets or sets an optional object specifying HTML templates to use depending how many items are\n     * selected. The text `%total-count` will replaced with the total number of records, and the text\n     * `%filter-count` will be replaced with the number of selected records.\n     * - all: HTML template to use if all items are selected\n     * - some: HTML template to use if not all items are selected\n     * @method html\n     * @memberof dc.dataCount\n     * @instance\n     * @example\n     * counter.html({\n     *      some: '%filter-count out of %total-count records selected',\n     *      all: 'All records selected. Click on charts to apply filters'\n     * })\n     * @param {{some:String, all: String}} [options]\n     * @returns {{some:String, all: String}|dc.dataCount}\n     */\n    _chart.html = function (options) {\n        if (!arguments.length) {\n            return _html;\n        }\n        if (options.all) {\n            _html.all = options.all;\n        }\n        if (options.some) {\n            _html.some = options.some;\n        }\n        return _chart;\n    };\n\n    /**\n     * Gets or sets an optional function to format the filter count and total count.\n     * @method formatNumber\n     * @memberof dc.dataCount\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md d3.format}\n     * @example\n     * counter.formatNumber(d3.format('.2g'))\n     * @param {Function} [formatter=d3.format('.2g')]\n     * @returns {Function|dc.dataCount}\n     */\n    _chart.formatNumber = function (formatter) {\n        if (!arguments.length) {\n            return _formatNumber;\n        }\n        _formatNumber = formatter;\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        var tot = _chart.dimension().size(),\n            val = _chart.group().value();\n        var all = _formatNumber(tot);\n        var selected = _formatNumber(val);\n\n        if ((tot === val) && (_html.all !== '')) {\n            _chart.root().html(_html.all.replace('%total-count', all).replace('%filter-count', selected));\n        } else if (_html.some !== '') {\n            _chart.root().html(_html.some.replace('%total-count', all).replace('%filter-count', selected));\n        } else {\n            _chart.selectAll('.total-count').text(all);\n            _chart.selectAll('.filter-count').text(selected);\n        }\n        return _chart;\n    };\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n","/**\n * The data table is a simple widget designed to list crossfilter focused data set (rows being\n * filtered) in a good old tabular fashion.\n *\n * Note: Unlike other charts, the data table (and data grid chart) use the {@link dc.dataTable#group group} attribute as a\n * keying function for {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#nest nesting} the data\n * together in groups.  Do not pass in a crossfilter group as this will not work.\n *\n * Another interesting feature of the data table is that you can pass a crossfilter group to the `dimension`, as\n * long as you specify the {@link dc.dataTable#order order} as `d3.descending`, since the data\n * table will use `dimension.top()` to fetch the data in that case, and the method is equally\n * supported on the crossfilter group as the crossfilter dimension.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.io/dc.js/examples/table-on-aggregated-data.html dataTable on a crossfilter group}\n * ({@link https://github.com/dc-js/dc.js/blob/develop/web/examples/table-on-aggregated-data.html source})\n * @class dataTable\n * @memberof dc\n * @mixes dc.baseMixin\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataTable}\n */\ndc.dataTable = function (parent, chartGroup) {\n    var LABEL_CSS_CLASS = 'dc-table-label';\n    var ROW_CSS_CLASS = 'dc-table-row';\n    var COLUMN_CSS_CLASS = 'dc-table-column';\n    var GROUP_CSS_CLASS = 'dc-table-group';\n    var HEAD_CSS_CLASS = 'dc-table-head';\n\n    var _chart = dc.baseMixin({});\n\n    var _size = 25;\n    var _columns = [];\n    var _sortBy = function (d) {\n        return d;\n    };\n    var _order = d3.ascending;\n    var _beginSlice = 0;\n    var _endSlice;\n    var _showGroups = true;\n\n    _chart._doRender = function () {\n        _chart.selectAll('tbody').remove();\n\n        renderRows(renderGroups());\n\n        return _chart;\n    };\n\n    _chart._doColumnValueFormat = function (v, d) {\n        return ((typeof v === 'function') ?\n                v(d) :                          // v as function\n                ((typeof v === 'string') ?\n                 d[v] :                         // v is field name string\n                 v.format(d)                        // v is Object, use fn (element 2)\n                )\n               );\n    };\n\n    _chart._doColumnHeaderFormat = function (d) {\n        // if 'function', convert to string representation\n        // show a string capitalized\n        // if an object then display its label string as-is.\n        return (typeof d === 'function') ?\n                _chart._doColumnHeaderFnToString(d) :\n                ((typeof d === 'string') ?\n                 _chart._doColumnHeaderCapitalize(d) : String(d.label));\n    };\n\n    _chart._doColumnHeaderCapitalize = function (s) {\n        // capitalize\n        return s.charAt(0).toUpperCase() + s.slice(1);\n    };\n\n    _chart._doColumnHeaderFnToString = function (f) {\n        // columnString(f) {\n        var s = String(f);\n        var i1 = s.indexOf('return ');\n        if (i1 >= 0) {\n            var i2 = s.lastIndexOf(';');\n            if (i2 >= 0) {\n                s = s.substring(i1 + 7, i2);\n                var i3 = s.indexOf('numberFormat');\n                if (i3 >= 0) {\n                    s = s.replace('numberFormat', '');\n                }\n            }\n        }\n        return s;\n    };\n\n    function renderGroups () {\n        // The 'original' example uses all 'functions'.\n        // If all 'functions' are used, then don't remove/add a header, and leave\n        // the html alone. This preserves the functionality of earlier releases.\n        // A 2nd option is a string representing a field in the data.\n        // A third option is to supply an Object such as an array of 'information', and\n        // supply your own _doColumnHeaderFormat and _doColumnValueFormat functions to\n        // create what you need.\n        var bAllFunctions = true;\n        _columns.forEach(function (f) {\n            bAllFunctions = bAllFunctions & (typeof f === 'function');\n        });\n\n        if (!bAllFunctions) {\n            // ensure one thead\n            var thead = _chart.selectAll('thead').data([0]);\n            thead.enter().append('thead');\n            thead.exit().remove();\n\n            // with one tr\n            var headrow = thead.selectAll('tr').data([0]);\n            headrow.enter().append('tr');\n            headrow.exit().remove();\n\n            // with a th for each column\n            var headcols = headrow.selectAll('th')\n                .data(_columns);\n            headcols.enter().append('th');\n            headcols.exit().remove();\n\n            headcols\n                .attr('class', HEAD_CSS_CLASS)\n                    .html(function (d) {\n                        return (_chart._doColumnHeaderFormat(d));\n\n                    });\n        }\n\n        var groups = _chart.root().selectAll('tbody')\n            .data(nestEntries(), function (d) {\n                return _chart.keyAccessor()(d);\n            });\n\n        var rowGroup = groups\n            .enter()\n            .append('tbody');\n\n        if (_showGroups === true) {\n            rowGroup\n                .append('tr')\n                .attr('class', GROUP_CSS_CLASS)\n                    .append('td')\n                    .attr('class', LABEL_CSS_CLASS)\n                    .attr('colspan', _columns.length)\n                    .html(function (d) {\n                        return _chart.keyAccessor()(d);\n                    });\n        }\n\n        groups.exit().remove();\n\n        return rowGroup;\n    }\n\n    function nestEntries () {\n        var entries;\n        if (_order === d3.ascending) {\n            entries = _chart.dimension().bottom(_size);\n        } else {\n            entries = _chart.dimension().top(_size);\n        }\n\n        return d3.nest()\n            .key(_chart.group())\n            .sortKeys(_order)\n            .entries(entries.sort(function (a, b) {\n                return _order(_sortBy(a), _sortBy(b));\n            }).slice(_beginSlice, _endSlice));\n    }\n\n    function renderRows (groups) {\n        var rows = groups.order()\n            .selectAll('tr.' + ROW_CSS_CLASS)\n            .data(function (d) {\n                return d.values;\n            });\n\n        var rowEnter = rows.enter()\n            .append('tr')\n            .attr('class', ROW_CSS_CLASS);\n\n        _columns.forEach(function (v, i) {\n            rowEnter.append('td')\n                .attr('class', COLUMN_CSS_CLASS + ' _' + i)\n                .html(function (d) {\n                    return _chart._doColumnValueFormat(v, d);\n                });\n        });\n\n        rows.exit().remove();\n\n        return rows;\n    }\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set the group function for the data table. The group function takes a data row and\n     * returns the key to specify to {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_nest d3.nest}\n     * to split rows into groups.\n     *\n     * Do not pass in a crossfilter group as this will not work.\n     * @method group\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * // group rows by the value of their field\n     * chart\n     *     .group(function(d) { return d.field; })\n     * @param {Function} groupFunction Function taking a row of data and returning the nest key.\n     * @returns {Function|dc.dataTable}\n     */\n\n    /**\n     * Get or set the table size which determines the number of rows displayed by the widget.\n     * @method size\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number} [size=25]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.size = function (size) {\n        if (!arguments.length) {\n            return _size;\n        }\n        _size = size;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the beginning slice which determines which entries get displayed\n     * by the widget. Useful when implementing pagination.\n     *\n     * Note: the sortBy function will determine how the rows are ordered for pagination purposes.\n\n     * See the {@link http://dc-js.github.io/dc.js/examples/table-pagination.html table pagination example}\n     * to see how to implement the pagination user interface using `beginSlice` and `endSlice`.\n     * @method beginSlice\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number} [beginSlice=0]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.beginSlice = function (beginSlice) {\n        if (!arguments.length) {\n            return _beginSlice;\n        }\n        _beginSlice = beginSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the end slice which determines which entries get displayed by the\n     * widget. Useful when implementing pagination. See {@link dc.dataTable#beginSlice `beginSlice`} for more information.\n     * @method endSlice\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Number|undefined} [endSlice=undefined]\n     * @returns {Number|dc.dataTable}\n     */\n    _chart.endSlice = function (endSlice) {\n        if (!arguments.length) {\n            return _endSlice;\n        }\n        _endSlice = endSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set column functions. The data table widget supports several methods of specifying the\n     * columns to display.\n     *\n     * The original method uses an array of functions to generate dynamic columns. Column functions\n     * are simple javascript functions with only one input argument `d` which represents a row in\n     * the data set. The return value of these functions will be used to generate the content for\n     * each cell. However, this method requires the HTML for the table to have a fixed set of column\n     * headers.\n     *\n     * <pre><code>chart.columns([\n     *     function(d) { return d.date; },\n     *     function(d) { return d.open; },\n     *     function(d) { return d.close; },\n     *     function(d) { return numberFormat(d.close - d.open); },\n     *     function(d) { return d.volume; }\n     * ]);\n     * </code></pre>\n     *\n     * In the second method, you can list the columns to read from the data without specifying it as\n     * a function, except where necessary (ie, computed columns).  Note the data element name is\n     * capitalized when displayed in the table header. You can also mix in functions as necessary,\n     * using the third `{label, format}` form, as shown below.\n     *\n     * <pre><code>chart.columns([\n     *     \"date\",    // d[\"date\"], ie, a field accessor; capitalized automatically\n     *     \"open\",    // ...\n     *     \"close\",   // ...\n     *     {\n     *         label: \"Change\",\n     *         format: function (d) {\n     *             return numberFormat(d.close - d.open);\n     *         }\n     *     },\n     *     \"volume\"   // d[\"volume\"], ie, a field accessor; capitalized automatically\n     * ]);\n     * </code></pre>\n     *\n     * In the third example, we specify all fields using the `{label, format}` method:\n     * <pre><code>chart.columns([\n     *     {\n     *         label: \"Date\",\n     *         format: function (d) { return d.date; }\n     *     },\n     *     {\n     *         label: \"Open\",\n     *         format: function (d) { return numberFormat(d.open); }\n     *     },\n     *     {\n     *         label: \"Close\",\n     *         format: function (d) { return numberFormat(d.close); }\n     *     },\n     *     {\n     *         label: \"Change\",\n     *         format: function (d) { return numberFormat(d.close - d.open); }\n     *     },\n     *     {\n     *         label: \"Volume\",\n     *         format: function (d) { return d.volume; }\n     *     }\n     * ]);\n     * </code></pre>\n     *\n     * You may wish to override the dataTable functions `_doColumnHeaderCapitalize` and\n     * `_doColumnHeaderFnToString`, which are used internally to translate the column information or\n     * function into a displayed header. The first one is used on the \"string\" column specifier; the\n     * second is used to transform a stringified function into something displayable. For the Stock\n     * example, the function for Change becomes the table header **d.close - d.open**.\n     *\n     * Finally, you can even specify a completely different form of column definition. To do this,\n     * override `_chart._doColumnHeaderFormat` and `_chart._doColumnValueFormat` Be aware that\n     * fields without numberFormat specification will be displayed just as they are stored in the\n     * data, unformatted.\n     * @method columns\n     * @memberof dc.dataTable\n     * @instance\n     * @param {Array<Function>} [columns=[]]\n     * @returns {Array<Function>}|dc.dataTable}\n     */\n    _chart.columns = function (columns) {\n        if (!arguments.length) {\n            return _columns;\n        }\n        _columns = columns;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort-by function. This function works as a value accessor at row level and returns a\n     * particular field to be sorted by.\n     * @method sortBy\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * chart.sortBy(function(d) {\n     *     return d.date;\n     * });\n     * @param {Function} [sortBy=identity function]\n     * @returns {Function|dc.dataTable}\n     */\n    _chart.sortBy = function (sortBy) {\n        if (!arguments.length) {\n            return _sortBy;\n        }\n        _sortBy = sortBy;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort order. If the order is `d3.ascending`, the data table will use\n     * `dimension().bottom()` to fetch the data; otherwise it will use `dimension().top()`\n     * @method order\n     * @memberof dc.dataTable\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.order(d3.descending);\n     * @param {Function} [order=d3.ascending]\n     * @returns {Function|dc.dataTable}\n     */\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    /**\n     * Get or set if group rows will be shown. The dataTable {@link dc.dataTable#group group}\n     * function must be specified even if groups are not shown.\n     * @method showGroups\n     * @memberof dc.dataTable\n     * @instance\n     * @example\n     * chart\n     *     .group([value], [name])\n     *     .showGroups(true|false);\n     * @param {Boolean} [showGroups=true]\n     * @returns {Boolean|dc.dataTable}\n     */\n    _chart.showGroups = function (showGroups) {\n        if (!arguments.length) {\n            return _showGroups;\n        }\n        _showGroups = showGroups;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n","/**\n * Data grid is a simple widget designed to list the filtered records, providing\n * a simple way to define how the items are displayed.\n *\n * Note: Unlike other charts, the data grid chart (and data table) use the {@link dc.dataGrid#group group} attribute as a keying function\n * for {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#nest nesting} the data together in groups.\n * Do not pass in a crossfilter group as this will not work.\n *\n * Examples:\n * - {@link http://europarl.me/dc.js/web/ep/index.html List of members of the european parliament}\n * @class dataGrid\n * @memberof dc\n * @mixes dc.baseMixin\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.dataGrid}\n */\ndc.dataGrid = function (parent, chartGroup) {\n    var LABEL_CSS_CLASS = 'dc-grid-label';\n    var ITEM_CSS_CLASS = 'dc-grid-item';\n    var GROUP_CSS_CLASS = 'dc-grid-group';\n    var GRID_CSS_CLASS = 'dc-grid-top';\n\n    var _chart = dc.baseMixin({});\n\n    var _size = 999; // shouldn't be needed, but you might\n    var _html = function (d) { return 'you need to provide an html() handling param:  ' + JSON.stringify(d); };\n    var _sortBy = function (d) {\n        return d;\n    };\n    var _order = d3.ascending;\n    var _beginSlice = 0, _endSlice;\n\n    var _htmlGroup = function (d) {\n        return '<div class=\\'' + GROUP_CSS_CLASS + '\\'><h1 class=\\'' + LABEL_CSS_CLASS + '\\'>' +\n            _chart.keyAccessor()(d) + '</h1></div>';\n    };\n\n    _chart._doRender = function () {\n        _chart.selectAll('div.' + GRID_CSS_CLASS).remove();\n\n        renderItems(renderGroups());\n\n        return _chart;\n    };\n\n    function renderGroups () {\n        var groups = _chart.root().selectAll('div.' + GRID_CSS_CLASS)\n                .data(nestEntries(), function (d) {\n                    return _chart.keyAccessor()(d);\n                });\n\n        var itemGroup = groups\n                .enter()\n                .append('div')\n                .attr('class', GRID_CSS_CLASS);\n\n        if (_htmlGroup) {\n            itemGroup\n                .html(function (d) {\n                    return _htmlGroup(d);\n                });\n        }\n\n        groups.exit().remove();\n        return itemGroup;\n    }\n\n    function nestEntries () {\n        var entries = _chart.dimension().top(_size);\n\n        return d3.nest()\n            .key(_chart.group())\n            .sortKeys(_order)\n            .entries(entries.sort(function (a, b) {\n                return _order(_sortBy(a), _sortBy(b));\n            }).slice(_beginSlice, _endSlice));\n    }\n\n    function renderItems (groups) {\n        var items = groups.order()\n                .selectAll('div.' + ITEM_CSS_CLASS)\n                .data(function (d) {\n                    return d.values;\n                });\n\n        items.enter()\n            .append('div')\n            .attr('class', ITEM_CSS_CLASS)\n            .html(function (d) {\n                return _html(d);\n            });\n\n        items.exit().remove();\n\n        return items;\n    }\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set the group function for the data grid. The group function takes a data row and\n     * returns the key to specify to {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_nest d3.nest}\n     * to split rows into groups.\n     *\n     * Do not pass in a crossfilter group as this will not work.\n     * @method group\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * // group rows by the value of their field\n     * chart\n     *     .group(function(d) { return d.field; })\n     * @param {Function} groupFunction Function taking a row of data and returning the nest key.\n     * @returns {Function|dc.dataTable}\n     */\n\n    /**\n     * Get or set the index of the beginning slice which determines which entries get displayed by the widget.\n     * Useful when implementing pagination.\n     * @method beginSlice\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [beginSlice=0]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.beginSlice = function (beginSlice) {\n        if (!arguments.length) {\n            return _beginSlice;\n        }\n        _beginSlice = beginSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the index of the end slice which determines which entries get displayed by the widget.\n     * Useful when implementing pagination.\n     * @method endSlice\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [endSlice]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.endSlice = function (endSlice) {\n        if (!arguments.length) {\n            return _endSlice;\n        }\n        _endSlice = endSlice;\n        return _chart;\n    };\n\n    /**\n     * Get or set the grid size which determines the number of items displayed by the widget.\n     * @method size\n     * @memberof dc.dataGrid\n     * @instance\n     * @param {Number} [size=999]\n     * @returns {Number|dc.dataGrid}\n     */\n    _chart.size = function (size) {\n        if (!arguments.length) {\n            return _size;\n        }\n        _size = size;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that formats an item. The data grid widget uses a\n     * function to generate dynamic html. Use your favourite templating engine or\n     * generate the string directly.\n     * @method html\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.html(function (d) { return '<div class='item '+data.exampleCategory+''>'+data.exampleString+'</div>';});\n     * @param {Function} [html]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.html = function (html) {\n        if (!arguments.length) {\n            return _html;\n        }\n        _html = html;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that formats a group label.\n     * @method htmlGroup\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.htmlGroup (function (d) { return '<h2>'.d.key . 'with ' . d.values.length .' items</h2>'});\n     * @param {Function} [htmlGroup]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.htmlGroup = function (htmlGroup) {\n        if (!arguments.length) {\n            return _htmlGroup;\n        }\n        _htmlGroup = htmlGroup;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort-by function. This function works as a value accessor at the item\n     * level and returns a particular field to be sorted.\n     * @method sortBy\n     * @memberof dc.dataGrid\n     * @instance\n     * @example\n     * chart.sortBy(function(d) {\n     *     return d.date;\n     * });\n     * @param {Function} [sortByFunction]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.sortBy = function (sortByFunction) {\n        if (!arguments.length) {\n            return _sortBy;\n        }\n        _sortBy = sortByFunction;\n        return _chart;\n    };\n\n    /**\n     * Get or set sort the order function.\n     * @method order\n     * @memberof dc.dataGrid\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.order(d3.descending);\n     * @param {Function} [order=d3.ascending]\n     * @returns {Function|dc.dataGrid}\n     */\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n","/**\n * A concrete implementation of a general purpose bubble chart that allows data visualization using the\n * following dimensions:\n * - x axis position\n * - y axis position\n * - bubble radius\n * - color\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n * @class bubbleChart\n * @memberof dc\n * @mixes dc.bubbleMixin\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a bubble chart under #chart-container1 element using the default global chart group\n * var bubbleChart1 = dc.bubbleChart('#chart-container1');\n * // create a bubble chart under #chart-container2 element using chart group A\n * var bubbleChart2 = dc.bubbleChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.bubbleChart}\n */\ndc.bubbleChart = function (parent, chartGroup) {\n    var _chart = dc.bubbleMixin(dc.coordinateGridMixin({}));\n\n    _chart.transitionDuration(750);\n\n    _chart.transitionDelay(0);\n\n    var bubbleLocator = function (d) {\n        return 'translate(' + (bubbleX(d)) + ',' + (bubbleY(d)) + ')';\n    };\n\n    _chart.plotData = function () {\n        _chart.calculateRadiusDomain();\n        _chart.r().range([_chart.MIN_RADIUS, _chart.xAxisLength() * _chart.maxBubbleRelativeSize()]);\n\n        var data = _chart.data();\n        var bubbleG = _chart.chartBodyG().selectAll('g.' + _chart.BUBBLE_NODE_CLASS)\n                .data(data, function (d) { return d.key; });\n        if (_chart.sortBubbleSize()) {\n            // update dom order based on sort\n            bubbleG.order();\n        }\n\n        renderNodes(bubbleG);\n\n        updateNodes(bubbleG);\n\n        removeNodes(bubbleG);\n\n        _chart.fadeDeselectedArea();\n    };\n\n    function renderNodes (bubbleG) {\n        var bubbleGEnter = bubbleG.enter().append('g');\n\n        bubbleGEnter\n            .attr('class', _chart.BUBBLE_NODE_CLASS)\n            .attr('transform', bubbleLocator)\n            .append('circle').attr('class', function (d, i) {\n                return _chart.BUBBLE_CLASS + ' _' + i;\n            })\n            .on('click', _chart.onClick)\n            .attr('fill', _chart.getColor)\n            .attr('r', 0);\n        dc.transition(bubbleG, _chart.transitionDuration(), _chart.transitionDelay())\n            .select('circle.' + _chart.BUBBLE_CLASS)\n            .attr('r', function (d) {\n                return _chart.bubbleR(d);\n            })\n            .attr('opacity', function (d) {\n                return (_chart.bubbleR(d) > 0) ? 1 : 0;\n            });\n\n        _chart._doRenderLabel(bubbleGEnter);\n\n        _chart._doRenderTitles(bubbleGEnter);\n    }\n\n    function updateNodes (bubbleG) {\n        dc.transition(bubbleG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', bubbleLocator)\n            .select('circle.' + _chart.BUBBLE_CLASS)\n            .attr('fill', _chart.getColor)\n            .attr('r', function (d) {\n                return _chart.bubbleR(d);\n            })\n            .attr('opacity', function (d) {\n                return (_chart.bubbleR(d) > 0) ? 1 : 0;\n            });\n\n        _chart.doUpdateLabels(bubbleG);\n        _chart.doUpdateTitles(bubbleG);\n    }\n\n    function removeNodes (bubbleG) {\n        bubbleG.exit().remove();\n    }\n\n    function bubbleX (d) {\n        var x = _chart.x()(_chart.keyAccessor()(d));\n        if (isNaN(x)) {\n            x = 0;\n        }\n        return x;\n    }\n\n    function bubbleY (d) {\n        var y = _chart.y()(_chart.valueAccessor()(d));\n        if (isNaN(y)) {\n            y = 0;\n        }\n        return y;\n    }\n\n    _chart.renderBrush = function () {\n        // override default x axis brush from parent chart\n    };\n\n    _chart.redrawBrush = function () {\n        // override default x axis brush from parent chart\n        _chart.fadeDeselectedArea();\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n","/**\n * Composite charts are a special kind of chart that render multiple charts on the same Coordinate\n * Grid. You can overlay (compose) different bar/line/area charts in a single composite chart to\n * achieve some quite flexible charting effects.\n * @class compositeChart\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a composite chart under #chart-container1 element using the default global chart group\n * var compositeChart1 = dc.compositeChart('#chart-container1');\n * // create a composite chart under #chart-container2 element using chart group A\n * var compositeChart2 = dc.compositeChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.compositeChart}\n */\ndc.compositeChart = function (parent, chartGroup) {\n\n    var SUB_CHART_CLASS = 'sub';\n    var DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING = 12;\n\n    var _chart = dc.coordinateGridMixin({});\n    var _children = [];\n\n    var _childOptions = {};\n\n    var _shareColors = false,\n        _shareTitle = true,\n        _alignYAxes = false;\n\n    var _rightYAxis = d3.svg.axis(),\n        _rightYAxisLabel = 0,\n        _rightYAxisLabelPadding = DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING,\n        _rightY,\n        _rightAxisGridLines = false;\n\n    _chart._mandatoryAttributes([]);\n    _chart.transitionDuration(500);\n    _chart.transitionDelay(0);\n\n    dc.override(_chart, '_generateG', function () {\n        var g = this.__generateG();\n\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n\n            generateChildG(child, i);\n\n            if (!child.dimension()) {\n                child.dimension(_chart.dimension());\n            }\n            if (!child.group()) {\n                child.group(_chart.group());\n            }\n\n            child.chartGroup(_chart.chartGroup());\n            child.svg(_chart.svg());\n            child.xUnits(_chart.xUnits());\n            child.transitionDuration(_chart.transitionDuration(), _chart.transitionDelay());\n            child.brushOn(_chart.brushOn());\n            child.renderTitle(_chart.renderTitle());\n            child.elasticX(_chart.elasticX());\n        }\n\n        return g;\n    });\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n        var brushIsEmpty = _chart.brushIsEmpty(extent);\n\n        for (var i = 0; i < _children.length; ++i) {\n            _children[i].replaceFilter(brushIsEmpty ? null : extent);\n        }\n    };\n\n    _chart._prepareYAxis = function () {\n        var left = (leftYAxisChildren().length !== 0);\n        var right = (rightYAxisChildren().length !== 0);\n        var ranges = calculateYAxisRanges(left, right);\n\n        if (left) { prepareLeftYAxis(ranges); }\n        if (right) { prepareRightYAxis(ranges); }\n\n        if (leftYAxisChildren().length > 0 && !_rightAxisGridLines) {\n            _chart._renderHorizontalGridLinesForAxis(_chart.g(), _chart.y(), _chart.yAxis());\n        } else if (rightYAxisChildren().length > 0) {\n            _chart._renderHorizontalGridLinesForAxis(_chart.g(), _rightY, _rightYAxis);\n        }\n    };\n\n    _chart.renderYAxis = function () {\n        if (leftYAxisChildren().length !== 0) {\n            _chart.renderYAxisAt('y', _chart.yAxis(), _chart.margins().left);\n            _chart.renderYAxisLabel('y', _chart.yAxisLabel(), -90);\n        }\n\n        if (rightYAxisChildren().length !== 0) {\n            _chart.renderYAxisAt('yr', _chart.rightYAxis(), _chart.width() - _chart.margins().right);\n            _chart.renderYAxisLabel('yr', _chart.rightYAxisLabel(), 90, _chart.width() - _rightYAxisLabelPadding);\n        }\n    };\n\n    function calculateYAxisRanges (left, right) {\n        var lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax;\n        var ranges;\n\n        if (left) {\n            lyAxisMin = yAxisMin();\n            lyAxisMax = yAxisMax();\n        }\n\n        if (right) {\n            ryAxisMin = rightYAxisMin();\n            ryAxisMax = rightYAxisMax();\n        }\n\n        if (_chart.alignYAxes() && left && right) {\n            ranges = alignYAxisRanges(lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax);\n        }\n\n        return ranges || {\n            lyAxisMin: lyAxisMin,\n            lyAxisMax: lyAxisMax,\n            ryAxisMin: ryAxisMin,\n            ryAxisMax: ryAxisMax\n        };\n    }\n\n    function alignYAxisRanges (lyAxisMin, lyAxisMax, ryAxisMin, ryAxisMax) {\n        // since the two series will share a zero, each Y is just a multiple\n        // of the other. and the ratio should be the ratio of the ranges of the\n        // input data, so that they come out the same height. so we just min/max\n\n        // note: both ranges already include zero due to the stack mixin (#667)\n        // if #667 changes, we can reconsider whether we want data height or\n        // height from zero to be equal. and it will be possible for the axes\n        // to be aligned but not visible.\n        var extentRatio = (ryAxisMax - ryAxisMin) / (lyAxisMax - lyAxisMin);\n\n        return {\n            lyAxisMin: Math.min(lyAxisMin, ryAxisMin / extentRatio),\n            lyAxisMax: Math.max(lyAxisMax, ryAxisMax / extentRatio),\n            ryAxisMin: Math.min(ryAxisMin, lyAxisMin * extentRatio),\n            ryAxisMax: Math.max(ryAxisMax, lyAxisMax * extentRatio)\n        };\n    }\n\n    function prepareRightYAxis (ranges) {\n        var needDomain = _chart.rightY() === undefined || _chart.elasticY(),\n            needRange = needDomain || _chart.resizing();\n        if (_chart.rightY() === undefined) {\n            _chart.rightY(d3.scale.linear());\n        }\n        if (needDomain) {\n            _chart.rightY().domain([ranges.ryAxisMin, ranges.ryAxisMax]);\n        }\n        if (needRange) {\n            _chart.rightY().rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _chart.rightY().range([_chart.yAxisHeight(), 0]);\n        _chart.rightYAxis(_chart.rightYAxis().scale(_chart.rightY()));\n\n        _chart.rightYAxis().orient('right');\n    }\n\n    function prepareLeftYAxis (ranges) {\n        var needDomain = _chart.y() === undefined || _chart.elasticY(),\n            needRange = needDomain || _chart.resizing();\n        if (_chart.y() === undefined) {\n            _chart.y(d3.scale.linear());\n        }\n        if (needDomain) {\n            _chart.y().domain([ranges.lyAxisMin, ranges.lyAxisMax]);\n        }\n        if (needRange) {\n            _chart.y().rangeRound([_chart.yAxisHeight(), 0]);\n        }\n\n        _chart.y().range([_chart.yAxisHeight(), 0]);\n        _chart.yAxis(_chart.yAxis().scale(_chart.y()));\n\n        _chart.yAxis().orient('left');\n    }\n\n    function generateChildG (child, i) {\n        child._generateG(_chart.g());\n        child.g().attr('class', SUB_CHART_CLASS + ' _' + i);\n    }\n\n    _chart.plotData = function () {\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n\n            if (!child.g()) {\n                generateChildG(child, i);\n            }\n\n            if (_shareColors) {\n                child.colors(_chart.colors());\n            }\n\n            child.x(_chart.x());\n\n            child.xAxis(_chart.xAxis());\n\n            if (child.useRightYAxis()) {\n                child.y(_chart.rightY());\n                child.yAxis(_chart.rightYAxis());\n            } else {\n                child.y(_chart.y());\n                child.yAxis(_chart.yAxis());\n            }\n\n            child.plotData();\n\n            child._activateRenderlets();\n        }\n    };\n\n    /**\n     * Get or set whether to draw gridlines from the right y axis.  Drawing from the left y axis is the\n     * default behavior. This option is only respected when subcharts with both left and right y-axes\n     * are present.\n     * @method useRightAxisGridLines\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [useRightAxisGridLines=false]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.useRightAxisGridLines = function (useRightAxisGridLines) {\n        if (!arguments) {\n            return _rightAxisGridLines;\n        }\n\n        _rightAxisGridLines = useRightAxisGridLines;\n        return _chart;\n    };\n\n    /**\n     * Get or set chart-specific options for all child charts. This is equivalent to calling\n     * {@link dc.baseMixin#options .options} on each child chart.\n     * @method childOptions\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Object} [childOptions]\n     * @returns {Object|dc.compositeChart}\n     */\n    _chart.childOptions = function (childOptions) {\n        if (!arguments.length) {\n            return _childOptions;\n        }\n        _childOptions = childOptions;\n        _children.forEach(function (child) {\n            child.options(_childOptions);\n        });\n        return _chart;\n    };\n\n    _chart.fadeDeselectedArea = function () {\n        for (var i = 0; i < _children.length; ++i) {\n            var child = _children[i];\n            child.brush(_chart.brush());\n            child.fadeDeselectedArea();\n        }\n    };\n\n    /**\n     * Set or get the right y axis label.\n     * @method rightYAxisLabel\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {String} [rightYAxisLabel]\n     * @param {Number} [padding]\n     * @returns {String|dc.compositeChart}\n     */\n    _chart.rightYAxisLabel = function (rightYAxisLabel, padding) {\n        if (!arguments.length) {\n            return _rightYAxisLabel;\n        }\n        _rightYAxisLabel = rightYAxisLabel;\n        _chart.margins().right -= _rightYAxisLabelPadding;\n        _rightYAxisLabelPadding = (padding === undefined) ? DEFAULT_RIGHT_Y_AXIS_LABEL_PADDING : padding;\n        _chart.margins().right += _rightYAxisLabelPadding;\n        return _chart;\n    };\n\n    /**\n     * Combine the given charts into one single composite coordinate grid chart.\n     * @method compose\n     * @memberof dc.compositeChart\n     * @instance\n     * @example\n     * moveChart.compose([\n     *     // when creating sub-chart you need to pass in the parent chart\n     *     dc.lineChart(moveChart)\n     *         .group(indexAvgByMonthGroup) // if group is missing then parent's group will be used\n     *         .valueAccessor(function (d){return d.value.avg;})\n     *         // most of the normal functions will continue to work in a composed chart\n     *         .renderArea(true)\n     *         .stack(monthlyMoveGroup, function (d){return d.value;})\n     *         .title(function (d){\n     *             var value = d.value.avg?d.value.avg:d.value;\n     *             if(isNaN(value)) value = 0;\n     *             return dateFormat(d.key) + '\\n' + numberFormat(value);\n     *         }),\n     *     dc.barChart(moveChart)\n     *         .group(volumeByMonthGroup)\n     *         .centerBar(true)\n     * ]);\n     * @param {Array<Chart>} [subChartArray]\n     * @returns {dc.compositeChart}\n     */\n    _chart.compose = function (subChartArray) {\n        _children = subChartArray;\n        _children.forEach(function (child) {\n            child.height(_chart.height());\n            child.width(_chart.width());\n            child.margins(_chart.margins());\n\n            if (_shareTitle) {\n                child.title(_chart.title());\n            }\n\n            child.options(_childOptions);\n        });\n        return _chart;\n    };\n\n    /**\n     * Returns the child charts which are composed into the composite chart.\n     * @method children\n     * @memberof dc.compositeChart\n     * @instance\n     * @returns {Array<dc.baseMixin>}\n     */\n    _chart.children = function () {\n        return _children;\n    };\n\n    /**\n     * Get or set color sharing for the chart. If set, the {@link dc.colorMixin#colors .colors()} value from this chart\n     * will be shared with composed children. Additionally if the child chart implements\n     * Stackable and has not set a custom .colorAccessor, then it will generate a color\n     * specific to its order in the composition.\n     * @method shareColors\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [shareColors=false]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.shareColors = function (shareColors) {\n        if (!arguments.length) {\n            return _shareColors;\n        }\n        _shareColors = shareColors;\n        return _chart;\n    };\n\n    /**\n     * Get or set title sharing for the chart. If set, the {@link dc.baseMixin#title .title()} value from\n     * this chart will be shared with composed children.\n     * @method shareTitle\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [shareTitle=true]\n     * @returns {Boolean|dc.compositeChart}\n     */\n    _chart.shareTitle = function (shareTitle) {\n        if (!arguments.length) {\n            return _shareTitle;\n        }\n        _shareTitle = shareTitle;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y scale for the right axis. The right y scale is typically automatically\n     * generated by the chart implementation.\n     * @method rightY\n     * @memberof dc.compositeChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Scales.md d3.scale}\n     * @param {d3.scale} [yScale]\n     * @returns {d3.scale|dc.compositeChart}\n     */\n    _chart.rightY = function (yScale) {\n        if (!arguments.length) {\n            return _rightY;\n        }\n        _rightY = yScale;\n        _chart.rescale();\n        return _chart;\n    };\n\n    /**\n     * Get or set alignment between left and right y axes. A line connecting '0' on both y axis\n     * will be parallel to x axis. This only has effect when {@link #dc.coordinateGridMixin+elasticY elasticY} is true.\n     * @method alignYAxes\n     * @memberof dc.compositeChart\n     * @instance\n     * @param {Boolean} [alignYAxes=false]\n     * @returns {Chart}\n     */\n    _chart.alignYAxes = function (alignYAxes) {\n        if (!arguments.length) {\n            return _alignYAxes;\n        }\n        _alignYAxes = alignYAxes;\n        _chart.rescale();\n        return _chart;\n    };\n\n    function leftYAxisChildren () {\n        return _children.filter(function (child) {\n            return !child.useRightYAxis();\n        });\n    }\n\n    function rightYAxisChildren () {\n        return _children.filter(function (child) {\n            return child.useRightYAxis();\n        });\n    }\n\n    function getYAxisMin (charts) {\n        return charts.map(function (c) {\n            return c.yAxisMin();\n        });\n    }\n\n    delete _chart.yAxisMin;\n    function yAxisMin () {\n        return d3.min(getYAxisMin(leftYAxisChildren()));\n    }\n\n    function rightYAxisMin () {\n        return d3.min(getYAxisMin(rightYAxisChildren()));\n    }\n\n    function getYAxisMax (charts) {\n        return charts.map(function (c) {\n            return c.yAxisMax();\n        });\n    }\n\n    delete _chart.yAxisMax;\n    function yAxisMax () {\n        return dc.utils.add(d3.max(getYAxisMax(leftYAxisChildren())), _chart.yAxisPadding());\n    }\n\n    function rightYAxisMax () {\n        return dc.utils.add(d3.max(getYAxisMax(rightYAxisChildren())), _chart.yAxisPadding());\n    }\n\n    function getAllXAxisMinFromChildCharts () {\n        return _children.map(function (c) {\n            return c.xAxisMin();\n        });\n    }\n\n    dc.override(_chart, 'xAxisMin', function () {\n        return dc.utils.subtract(d3.min(getAllXAxisMinFromChildCharts()), _chart.xAxisPadding());\n    });\n\n    function getAllXAxisMaxFromChildCharts () {\n        return _children.map(function (c) {\n            return c.xAxisMax();\n        });\n    }\n\n    dc.override(_chart, 'xAxisMax', function () {\n        return dc.utils.add(d3.max(getAllXAxisMaxFromChildCharts()), _chart.xAxisPadding());\n    });\n\n    _chart.legendables = function () {\n        return _children.reduce(function (items, child) {\n            if (_shareColors) {\n                child.colors(_chart.colors());\n            }\n            items.push.apply(items, child.legendables());\n            return items;\n        }, []);\n    };\n\n    _chart.legendHighlight = function (d) {\n        for (var j = 0; j < _children.length; ++j) {\n            var child = _children[j];\n            child.legendHighlight(d);\n        }\n    };\n\n    _chart.legendReset = function (d) {\n        for (var j = 0; j < _children.length; ++j) {\n            var child = _children[j];\n            child.legendReset(d);\n        }\n    };\n\n    _chart.legendToggle = function () {\n        console.log('composite should not be getting legendToggle itself');\n    };\n\n    /**\n     * Set or get the right y axis used by the composite chart. This function is most useful when y\n     * axis customization is required. The y axis in dc.js is an instance of a [d3 axis\n     * object](https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis) therefore it supports any valid\n     * d3 axis manipulation.\n     *\n     * **Caution**: The y axis is usually generated internally by dc; resetting it may cause\n     * unexpected results.\n     * @method rightYAxis\n     * @memberof dc.compositeChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize y axis tick format\n     * chart.rightYAxis().tickFormat(function (v) {return v + '%';});\n     * // customize y axis tick values\n     * chart.rightYAxis().tickValues([0, 100, 200, 300]);\n     * @param {d3.svg.axis} [rightYAxis]\n     * @returns {d3.svg.axis|dc.compositeChart}\n     */\n    _chart.rightYAxis = function (rightYAxis) {\n        if (!arguments.length) {\n            return _rightYAxis;\n        }\n        _rightYAxis = rightYAxis;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n","/**\n * A series chart is a chart that shows multiple series of data overlaid on one chart, where the\n * series is specified in the data. It is a specialization of Composite Chart and inherits all\n * composite features other than recomposing the chart.\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/series.html Series Chart}\n * @class seriesChart\n * @memberof dc\n * @mixes dc.compositeChart\n * @example\n * // create a series chart under #chart-container1 element using the default global chart group\n * var seriesChart1 = dc.seriesChart(\"#chart-container1\");\n * // create a series chart under #chart-container2 element using chart group A\n * var seriesChart2 = dc.seriesChart(\"#chart-container2\", \"chartGroupA\");\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.seriesChart}\n */\ndc.seriesChart = function (parent, chartGroup) {\n    var _chart = dc.compositeChart(parent, chartGroup);\n\n    function keySort (a, b) {\n        return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n    }\n\n    var _charts = {};\n    var _chartFunction = dc.lineChart;\n    var _seriesAccessor;\n    var _seriesSort = d3.ascending;\n    var _valueSort = keySort;\n\n    _chart._mandatoryAttributes().push('seriesAccessor', 'chart');\n    _chart.shareColors(true);\n\n    _chart._preprocessData = function () {\n        var keep = [];\n        var childrenChanged;\n        var nester = d3.nest().key(_seriesAccessor);\n        if (_seriesSort) {\n            nester.sortKeys(_seriesSort);\n        }\n        if (_valueSort) {\n            nester.sortValues(_valueSort);\n        }\n        var nesting = nester.entries(_chart.data());\n        var children =\n            nesting.map(function (sub, i) {\n                var subChart = _charts[sub.key] || _chartFunction.call(_chart, _chart, chartGroup, sub.key, i);\n                if (!_charts[sub.key]) {\n                    childrenChanged = true;\n                }\n                _charts[sub.key] = subChart;\n                keep.push(sub.key);\n                return subChart\n                    .dimension(_chart.dimension())\n                    .group({all: d3.functor(sub.values)}, sub.key)\n                    .keyAccessor(_chart.keyAccessor())\n                    .valueAccessor(_chart.valueAccessor())\n                    .brushOn(_chart.brushOn());\n            });\n        // this works around the fact compositeChart doesn't really\n        // have a removal interface\n        Object.keys(_charts)\n            .filter(function (c) {return keep.indexOf(c) === -1;})\n            .forEach(function (c) {\n                clearChart(c);\n                childrenChanged = true;\n            });\n        _chart._compose(children);\n        if (childrenChanged && _chart.legend()) {\n            _chart.legend().render();\n        }\n    };\n\n    function clearChart (c) {\n        if (_charts[c].g()) {\n            _charts[c].g().remove();\n        }\n        delete _charts[c];\n    }\n\n    function resetChildren () {\n        Object.keys(_charts).map(clearChart);\n        _charts = {};\n    }\n\n    /**\n     * Get or set the chart function, which generates the child charts.\n     * @method chart\n     * @memberof dc.seriesChart\n     * @instance\n     * @example\n     * // put interpolation on the line charts used for the series\n     * chart.chart(function(c) { return dc.lineChart(c).interpolate('basis'); })\n     * // do a scatter series chart\n     * chart.chart(dc.scatterPlot)\n     * @param {Function} [chartFunction=dc.lineChart]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.chart = function (chartFunction) {\n        if (!arguments.length) {\n            return _chartFunction;\n        }\n        _chartFunction = chartFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Get or set accessor function for the displayed series. Given a datum, this function\n     * should return the series that datum belongs to.\n     * @method seriesAccessor\n     * @memberof dc.seriesChart\n     * @instance\n     * @example\n     * // simple series accessor\n     * chart.seriesAccessor(function(d) { return \"Expt: \" + d.key[0]; })\n     * @param {Function} [accessor]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.seriesAccessor = function (accessor) {\n        if (!arguments.length) {\n            return _seriesAccessor;\n        }\n        _seriesAccessor = accessor;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * Get or set a function to sort the list of series by, given series values.\n     * @method seriesSort\n     * @memberof dc.seriesChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * chart.seriesSort(d3.descending);\n     * @param {Function} [sortFunction=d3.ascending]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.seriesSort = function (sortFunction) {\n        if (!arguments.length) {\n            return _seriesSort;\n        }\n        _seriesSort = sortFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    /**\n     * Get or set a function to sort each series values by. By default this is the key accessor which,\n     * for example, will ensure a lineChart series connects its points in increasing key/x order,\n     * rather than haphazardly.\n     * @method valueSort\n     * @memberof dc.seriesChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_ascending d3.ascending}\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Arrays.md#d3_descending d3.descending}\n     * @example\n     * // Default value sort\n     * _chart.valueSort(function keySort (a, b) {\n     *     return d3.ascending(_chart.keyAccessor()(a), _chart.keyAccessor()(b));\n     * });\n     * @param {Function} [sortFunction]\n     * @returns {Function|dc.seriesChart}\n     */\n    _chart.valueSort = function (sortFunction) {\n        if (!arguments.length) {\n            return _valueSort;\n        }\n        _valueSort = sortFunction;\n        resetChildren();\n        return _chart;\n    };\n\n    // make compose private\n    _chart._compose = _chart.compose;\n    delete _chart.compose;\n\n    return _chart;\n};\n","/**\n * The geo choropleth chart is designed as an easy way to create a crossfilter driven choropleth map\n * from GeoJson data. This chart implementation was inspired by\n * {@link http://bl.ocks.org/4060606 the great d3 choropleth example}.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/vc/index.html US Venture Capital Landscape 2011}\n * @class geoChoroplethChart\n * @memberof dc\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a choropleth chart under '#us-chart' element using the default global chart group\n * var chart1 = dc.geoChoroplethChart('#us-chart');\n * // create a choropleth chart under '#us-chart2' element using chart group A\n * var chart2 = dc.compositeChart('#us-chart2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.geoChoroplethChart}\n */\ndc.geoChoroplethChart = function (parent, chartGroup) {\n    var _chart = dc.colorMixin(dc.baseMixin({}));\n\n    _chart.colorAccessor(function (d) {\n        return d || 0;\n    });\n\n    var _geoPath = d3.geo.path();\n    var _projectionFlag;\n\n    var _geoJsons = [];\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {\n            var states = _chart.svg().append('g')\n                .attr('class', 'layer' + layerIndex);\n\n            var regionG = states.selectAll('g.' + geoJson(layerIndex).name)\n                .data(geoJson(layerIndex).data)\n                .enter()\n                .append('g')\n                .attr('class', geoJson(layerIndex).name);\n\n            regionG\n                .append('path')\n                .attr('fill', 'white')\n                .attr('d', _geoPath);\n\n            regionG.append('title');\n\n            plotData(layerIndex);\n        }\n        _projectionFlag = false;\n    };\n\n    function plotData (layerIndex) {\n        var data = generateLayeredData();\n\n        if (isDataLayer(layerIndex)) {\n            var regionG = renderRegionG(layerIndex);\n\n            renderPaths(regionG, layerIndex, data);\n\n            renderTitle(regionG, layerIndex, data);\n        }\n    }\n\n    function generateLayeredData () {\n        var data = {};\n        var groupAll = _chart.data();\n        for (var i = 0; i < groupAll.length; ++i) {\n            data[_chart.keyAccessor()(groupAll[i])] = _chart.valueAccessor()(groupAll[i]);\n        }\n        return data;\n    }\n\n    function isDataLayer (layerIndex) {\n        return geoJson(layerIndex).keyAccessor;\n    }\n\n    function renderRegionG (layerIndex) {\n        var regionG = _chart.svg()\n            .selectAll(layerSelector(layerIndex))\n            .classed('selected', function (d) {\n                return isSelected(layerIndex, d);\n            })\n            .classed('deselected', function (d) {\n                return isDeselected(layerIndex, d);\n            })\n            .attr('class', function (d) {\n                var layerNameClass = geoJson(layerIndex).name;\n                var regionClass = dc.utils.nameToId(geoJson(layerIndex).keyAccessor(d));\n                var baseClasses = layerNameClass + ' ' + regionClass;\n                if (isSelected(layerIndex, d)) {\n                    baseClasses += ' selected';\n                }\n                if (isDeselected(layerIndex, d)) {\n                    baseClasses += ' deselected';\n                }\n                return baseClasses;\n            });\n        return regionG;\n    }\n\n    function layerSelector (layerIndex) {\n        return 'g.layer' + layerIndex + ' g.' + geoJson(layerIndex).name;\n    }\n\n    function isSelected (layerIndex, d) {\n        return _chart.hasFilter() && _chart.hasFilter(getKey(layerIndex, d));\n    }\n\n    function isDeselected (layerIndex, d) {\n        return _chart.hasFilter() && !_chart.hasFilter(getKey(layerIndex, d));\n    }\n\n    function getKey (layerIndex, d) {\n        return geoJson(layerIndex).keyAccessor(d);\n    }\n\n    function geoJson (index) {\n        return _geoJsons[index];\n    }\n\n    function renderPaths (regionG, layerIndex, data) {\n        var paths = regionG\n            .select('path')\n            .attr('fill', function () {\n                var currentFill = d3.select(this).attr('fill');\n                if (currentFill) {\n                    return currentFill;\n                }\n                return 'none';\n            })\n            .on('click', function (d) {\n                return _chart.onClick(d, layerIndex);\n            });\n\n        dc.transition(paths, _chart.transitionDuration(), _chart.transitionDelay()).attr('fill', function (d, i) {\n            return _chart.getColor(data[geoJson(layerIndex).keyAccessor(d)], i);\n        });\n    }\n\n    _chart.onClick = function (d, layerIndex) {\n        var selectedRegion = geoJson(layerIndex).keyAccessor(d);\n        dc.events.trigger(function () {\n            _chart.filter(selectedRegion);\n            _chart.redrawGroup();\n        });\n    };\n\n    function renderTitle (regionG, layerIndex, data) {\n        if (_chart.renderTitle()) {\n            regionG.selectAll('title').text(function (d) {\n                var key = getKey(layerIndex, d);\n                var value = data[key];\n                return _chart.title()({key: key, value: value});\n            });\n        }\n    }\n\n    _chart._doRedraw = function () {\n        for (var layerIndex = 0; layerIndex < _geoJsons.length; ++layerIndex) {\n            plotData(layerIndex);\n            if (_projectionFlag) {\n                _chart.svg().selectAll('g.' + geoJson(layerIndex).name + ' path').attr('d', _geoPath);\n            }\n        }\n        _projectionFlag = false;\n    };\n\n    /**\n     * **mandatory**\n     *\n     * Use this function to insert a new GeoJson map layer. This function can be invoked multiple times\n     * if you have multiple GeoJson data layers to render on top of each other. If you overlay multiple\n     * layers with the same name the new overlay will override the existing one.\n     * @method overlayGeoJson\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link http://geojson.org/ GeoJSON}\n     * @see {@link https://github.com/topojson/topojson/wiki TopoJSON}\n     * @see {@link https://github.com/topojson/topojson-1.x-api-reference/blob/master/API-Reference.md#wiki-feature topojson.feature}\n     * @example\n     * // insert a layer for rendering US states\n     * chart.overlayGeoJson(statesJson.features, 'state', function(d) {\n     *      return d.properties.name;\n     * });\n     * @param {geoJson} json - a geojson feed\n     * @param {String} name - name of the layer\n     * @param {Function} keyAccessor - accessor function used to extract 'key' from the GeoJson data. The key extracted by\n     * this function should match the keys returned by the crossfilter groups.\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.overlayGeoJson = function (json, name, keyAccessor) {\n        for (var i = 0; i < _geoJsons.length; ++i) {\n            if (_geoJsons[i].name === name) {\n                _geoJsons[i].data = json;\n                _geoJsons[i].keyAccessor = keyAccessor;\n                return _chart;\n            }\n        }\n        _geoJsons.push({name: name, data: json, keyAccessor: keyAccessor});\n        return _chart;\n    };\n\n    /**\n     * Set custom geo projection function. See the available\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Projections.md d3 geo projection functions}.\n     * @method projection\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Projections.md d3.geo.projection}\n     * @see {@link https://github.com/d3/d3-geo-projection Extended d3.geo.projection}\n     * @param {d3.projection} [projection=d3.geo.albersUsa()]\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.projection = function (projection) {\n        _geoPath.projection(projection);\n        _projectionFlag = true;\n        return _chart;\n    };\n\n    /**\n     * Returns all GeoJson layers currently registered with this chart. The returned array is a\n     * reference to this chart's internal data structure, so any modification to this array will also\n     * modify this chart's internal registration.\n     * @method geoJsons\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @returns {Array<{name:String, data: Object, accessor: Function}>}\n     */\n    _chart.geoJsons = function () {\n        return _geoJsons;\n    };\n\n    /**\n     * Returns the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Paths.md#path d3.geo.path} object used to\n     * render the projection and features.  Can be useful for figuring out the bounding box of the\n     * feature set and thus a way to calculate scale and translation for the projection.\n     * @method geoPath\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Geo-Paths.md#path d3.geo.path}\n     * @returns {d3.geo.path}\n     */\n    _chart.geoPath = function () {\n        return _geoPath;\n    };\n\n    /**\n     * Remove a GeoJson layer from this chart by name\n     * @method removeGeoJson\n     * @memberof dc.geoChoroplethChart\n     * @instance\n     * @param {String} name\n     * @returns {dc.geoChoroplethChart}\n     */\n    _chart.removeGeoJson = function (name) {\n        var geoJsons = [];\n\n        for (var i = 0; i < _geoJsons.length; ++i) {\n            var layer = _geoJsons[i];\n            if (layer.name !== name) {\n                geoJsons.push(layer);\n            }\n        }\n\n        _geoJsons = geoJsons;\n\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n","/**\n * The bubble overlay chart is quite different from the typical bubble chart. With the bubble overlay\n * chart you can arbitrarily place bubbles on an existing svg or bitmap image, thus changing the\n * typical x and y positioning while retaining the capability to visualize data using bubble radius\n * and coloring.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class bubbleOverlay\n * @memberof dc\n * @mixes dc.bubbleMixin\n * @mixes dc.baseMixin\n * @example\n * // create a bubble overlay chart on top of the '#chart-container1 svg' element using the default global chart group\n * var bubbleChart1 = dc.bubbleOverlayChart('#chart-container1').svg(d3.select('#chart-container1 svg'));\n * // create a bubble overlay chart on top of the '#chart-container2 svg' element using chart group A\n * var bubbleChart2 = dc.compositeChart('#chart-container2', 'chartGroupA').svg(d3.select('#chart-container2 svg'));\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.bubbleOverlay}\n */\ndc.bubbleOverlay = function (parent, chartGroup) {\n    var BUBBLE_OVERLAY_CLASS = 'bubble-overlay';\n    var BUBBLE_NODE_CLASS = 'node';\n    var BUBBLE_CLASS = 'bubble';\n\n    /**\n     * **mandatory**\n     *\n     * Set the underlying svg image element. Unlike other dc charts this chart will not generate a svg\n     * element; therefore the bubble overlay chart will not work if this function is not invoked. If the\n     * underlying image is a bitmap, then an empty svg will need to be created on top of the image.\n     * @method svg\n     * @memberof dc.bubbleOverlay\n     * @instance\n     * @example\n     * // set up underlying svg element\n     * chart.svg(d3.select('#chart svg'));\n     * @param {SVGElement|d3.selection} [imageElement]\n     * @returns {dc.bubbleOverlay}\n     */\n    var _chart = dc.bubbleMixin(dc.baseMixin({}));\n    var _g;\n    var _points = [];\n\n    _chart.transitionDuration(750);\n\n    _chart.transitionDelay(0);\n\n    _chart.radiusValueAccessor(function (d) {\n        return d.value;\n    });\n\n    /**\n     * **mandatory**\n     *\n     * Set up a data point on the overlay. The name of a data point should match a specific 'key' among\n     * data groups generated using keyAccessor.  If a match is found (point name <-> data group key)\n     * then a bubble will be generated at the position specified by the function. x and y\n     * value specified here are relative to the underlying svg.\n     * @method point\n     * @memberof dc.bubbleOverlay\n     * @instance\n     * @param {String} name\n     * @param {Number} x\n     * @param {Number} y\n     * @returns {dc.bubbleOverlay}\n     */\n    _chart.point = function (name, x, y) {\n        _points.push({name: name, x: x, y: y});\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        _g = initOverlayG();\n\n        _chart.r().range([_chart.MIN_RADIUS, _chart.width() * _chart.maxBubbleRelativeSize()]);\n\n        initializeBubbles();\n\n        _chart.fadeDeselectedArea();\n\n        return _chart;\n    };\n\n    function initOverlayG () {\n        _g = _chart.select('g.' + BUBBLE_OVERLAY_CLASS);\n        if (_g.empty()) {\n            _g = _chart.svg().append('g').attr('class', BUBBLE_OVERLAY_CLASS);\n        }\n        return _g;\n    }\n\n    function initializeBubbles () {\n        var data = mapData();\n        _chart.calculateRadiusDomain();\n\n        _points.forEach(function (point) {\n            var nodeG = getNodeG(point, data);\n\n            var circle = nodeG.select('circle.' + BUBBLE_CLASS);\n\n            if (circle.empty()) {\n                circle = nodeG.append('circle')\n                    .attr('class', BUBBLE_CLASS)\n                    .attr('r', 0)\n                    .attr('fill', _chart.getColor)\n                    .on('click', _chart.onClick);\n            }\n\n            dc.transition(circle, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('r', function (d) {\n                    return _chart.bubbleR(d);\n                });\n\n            _chart._doRenderLabel(nodeG);\n\n            _chart._doRenderTitles(nodeG);\n        });\n    }\n\n    function mapData () {\n        var data = {};\n        _chart.data().forEach(function (datum) {\n            data[_chart.keyAccessor()(datum)] = datum;\n        });\n        return data;\n    }\n\n    function getNodeG (point, data) {\n        var bubbleNodeClass = BUBBLE_NODE_CLASS + ' ' + dc.utils.nameToId(point.name);\n\n        var nodeG = _g.select('g.' + dc.utils.nameToId(point.name));\n\n        if (nodeG.empty()) {\n            nodeG = _g.append('g')\n                .attr('class', bubbleNodeClass)\n                .attr('transform', 'translate(' + point.x + ',' + point.y + ')');\n        }\n\n        nodeG.datum(data[point.name]);\n\n        return nodeG;\n    }\n\n    _chart._doRedraw = function () {\n        updateBubbles();\n\n        _chart.fadeDeselectedArea();\n\n        return _chart;\n    };\n\n    function updateBubbles () {\n        var data = mapData();\n        _chart.calculateRadiusDomain();\n\n        _points.forEach(function (point) {\n            var nodeG = getNodeG(point, data);\n\n            var circle = nodeG.select('circle.' + BUBBLE_CLASS);\n\n            dc.transition(circle, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('r', function (d) {\n                    return _chart.bubbleR(d);\n                })\n                .attr('fill', _chart.getColor);\n\n            _chart.doUpdateLabels(nodeG);\n\n            _chart.doUpdateTitles(nodeG);\n        });\n    }\n\n    _chart.debug = function (flag) {\n        if (flag) {\n            var debugG = _chart.select('g.' + dc.constants.DEBUG_GROUP_CLASS);\n\n            if (debugG.empty()) {\n                debugG = _chart.svg()\n                    .append('g')\n                    .attr('class', dc.constants.DEBUG_GROUP_CLASS);\n            }\n\n            var debugText = debugG.append('text')\n                .attr('x', 10)\n                .attr('y', 20);\n\n            debugG\n                .append('rect')\n                .attr('width', _chart.width())\n                .attr('height', _chart.height())\n                .on('mousemove', function () {\n                    var position = d3.mouse(debugG.node());\n                    var msg = position[0] + ', ' + position[1];\n                    debugText.text(msg);\n                });\n        } else {\n            _chart.selectAll('.debug').remove();\n        }\n\n        return _chart;\n    };\n\n    _chart.anchor(parent, chartGroup);\n\n    return _chart;\n};\n","/**\n * Concrete row chart implementation.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * @class rowChart\n * @memberof dc\n * @mixes dc.capMixin\n * @mixes dc.marginMixin\n * @mixes dc.colorMixin\n * @mixes dc.baseMixin\n * @example\n * // create a row chart under #chart-container1 element using the default global chart group\n * var chart1 = dc.rowChart('#chart-container1');\n * // create a row chart under #chart-container2 element using chart group A\n * var chart2 = dc.rowChart('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.rowChart}\n */\ndc.rowChart = function (parent, chartGroup) {\n\n    var _g;\n\n    var _labelOffsetX = 10;\n    var _labelOffsetY = 15;\n    var _hasLabelOffsetY = false;\n    var _dyOffset = '0.35em';  // this helps center labels https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#svg_text\n    var _titleLabelOffsetX = 2;\n\n    var _gap = 5;\n\n    var _fixedBarHeight = false;\n    var _rowCssClass = 'row';\n    var _titleRowCssClass = 'titlerow';\n    var _renderTitleLabel = false;\n\n    var _chart = dc.capMixin(dc.marginMixin(dc.colorMixin(dc.baseMixin({}))));\n\n    var _x;\n\n    var _elasticX;\n\n    var _xAxis = d3.svg.axis().orient('bottom');\n\n    var _rowData;\n\n    _chart.rowsCap = _chart.cap;\n\n    function calculateAxisScale () {\n        if (!_x || _elasticX) {\n            var extent = d3.extent(_rowData, _chart.cappedValueAccessor);\n            if (extent[0] > 0) {\n                extent[0] = 0;\n            }\n            if (extent[1] < 0) {\n                extent[1] = 0;\n            }\n            _x = d3.scale.linear().domain(extent)\n                .range([0, _chart.effectiveWidth()]);\n        }\n        _xAxis.scale(_x);\n    }\n\n    function drawAxis () {\n        var axisG = _g.select('g.axis');\n\n        calculateAxisScale();\n\n        if (axisG.empty()) {\n            axisG = _g.append('g').attr('class', 'axis');\n        }\n        axisG.attr('transform', 'translate(0, ' + _chart.effectiveHeight() + ')');\n\n        dc.transition(axisG, _chart.transitionDuration(), _chart.transitionDelay())\n            .call(_xAxis);\n    }\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _g = _chart.svg()\n            .append('g')\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n\n        drawChart();\n\n        return _chart;\n    };\n\n    _chart.title(function (d) {\n        return _chart.cappedKeyAccessor(d) + ': ' + _chart.cappedValueAccessor(d);\n    });\n\n    _chart.label(_chart.cappedKeyAccessor);\n\n    /**\n     * Gets or sets the x scale. The x scale can be any d3\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale}.\n     * @method x\n     * @memberof dc.rowChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Quantitative-Scales.md quantitive scale}\n     * @param {d3.scale} [scale]\n     * @returns {d3.scale|dc.rowChart}\n     */\n    _chart.x = function (scale) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = scale;\n        return _chart;\n    };\n\n    function drawGridLines () {\n        _g.selectAll('g.tick')\n            .select('line.grid-line')\n            .remove();\n\n        _g.selectAll('g.tick')\n            .append('line')\n            .attr('class', 'grid-line')\n            .attr('x1', 0)\n            .attr('y1', 0)\n            .attr('x2', 0)\n            .attr('y2', function () {\n                return -_chart.effectiveHeight();\n            });\n    }\n\n    function drawChart () {\n        _rowData = _chart.data();\n\n        drawAxis();\n        drawGridLines();\n\n        var rows = _g.selectAll('g.' + _rowCssClass)\n            .data(_rowData);\n\n        createElements(rows);\n        removeElements(rows);\n        updateElements(rows);\n    }\n\n    function createElements (rows) {\n        var rowEnter = rows.enter()\n            .append('g')\n            .attr('class', function (d, i) {\n                return _rowCssClass + ' _' + i;\n            });\n\n        rowEnter.append('rect').attr('width', 0);\n\n        createLabels(rowEnter);\n    }\n\n    function removeElements (rows) {\n        rows.exit().remove();\n    }\n\n    function rootValue () {\n        var root = _x(0);\n        return (root === -Infinity || root !== root) ? _x(1) : root;\n    }\n\n    function updateElements (rows) {\n        var n = _rowData.length;\n\n        var height;\n        if (!_fixedBarHeight) {\n            height = (_chart.effectiveHeight() - (n + 1) * _gap) / n;\n        } else {\n            height = _fixedBarHeight;\n        }\n\n        // vertically align label in center unless they override the value via property setter\n        if (!_hasLabelOffsetY) {\n            _labelOffsetY = height / 2;\n        }\n\n        var rect = rows.attr('transform', function (d, i) {\n                return 'translate(0,' + ((i + 1) * _gap + i * height) + ')';\n            }).select('rect')\n            .attr('height', height)\n            .attr('fill', _chart.getColor)\n            .on('click', onClick)\n            .classed('deselected', function (d) {\n                return (_chart.hasFilter()) ? !isSelectedRow(d) : false;\n            })\n            .classed('selected', function (d) {\n                return (_chart.hasFilter()) ? isSelectedRow(d) : false;\n            });\n\n        dc.transition(rect, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('width', function (d) {\n                return Math.abs(rootValue() - _x(_chart.valueAccessor()(d)));\n            })\n            .attr('transform', translateX);\n\n        createTitles(rows);\n        updateLabels(rows);\n    }\n\n    function createTitles (rows) {\n        if (_chart.renderTitle()) {\n            rows.select('title').remove();\n            rows.append('title').text(_chart.title());\n        }\n    }\n\n    function createLabels (rowEnter) {\n        if (_chart.renderLabel()) {\n            rowEnter.append('text')\n                .on('click', onClick);\n        }\n        if (_chart.renderTitleLabel()) {\n            rowEnter.append('text')\n                .attr('class', _titleRowCssClass)\n                .on('click', onClick);\n        }\n    }\n\n    function updateLabels (rows) {\n        if (_chart.renderLabel()) {\n            var lab = rows.select('text')\n                .attr('x', _labelOffsetX)\n                .attr('y', _labelOffsetY)\n                .attr('dy', _dyOffset)\n                .on('click', onClick)\n                .attr('class', function (d, i) {\n                    return _rowCssClass + ' _' + i;\n                })\n                .text(function (d) {\n                    return _chart.label()(d);\n                });\n            dc.transition(lab, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', translateX);\n        }\n        if (_chart.renderTitleLabel()) {\n            var titlelab = rows.select('.' + _titleRowCssClass)\n                    .attr('x', _chart.effectiveWidth() - _titleLabelOffsetX)\n                    .attr('y', _labelOffsetY)\n                    .attr('dy', _dyOffset)\n                    .attr('text-anchor', 'end')\n                    .on('click', onClick)\n                    .attr('class', function (d, i) {\n                        return _titleRowCssClass + ' _' + i ;\n                    })\n                    .text(function (d) {\n                        return _chart.title()(d);\n                    });\n            dc.transition(titlelab, _chart.transitionDuration(), _chart.transitionDelay())\n                .attr('transform', translateX);\n        }\n    }\n\n    /**\n     * Turn on/off Title label rendering (values) using SVG style of text-anchor 'end'.\n     * @method renderTitleLabel\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Boolean} [renderTitleLabel=false]\n     * @returns {Boolean|dc.rowChart}\n     */\n    _chart.renderTitleLabel = function (renderTitleLabel) {\n        if (!arguments.length) {\n            return _renderTitleLabel;\n        }\n        _renderTitleLabel = renderTitleLabel;\n        return _chart;\n    };\n\n    function onClick (d) {\n        _chart.onClick(d);\n    }\n\n    function translateX (d) {\n        var x = _x(_chart.cappedValueAccessor(d)),\n            x0 = rootValue(),\n            s = x > x0 ? x0 : x;\n        return 'translate(' + s + ',0)';\n    }\n\n    _chart._doRedraw = function () {\n        drawChart();\n        return _chart;\n    };\n\n    /**\n     * Get the x axis for the row chart instance.  Note: not settable for row charts.\n     * See the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3 axis object}\n     * documention for more information.\n     * @method xAxis\n     * @memberof dc.rowChart\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Axes.md#axis d3.svg.axis}\n     * @example\n     * // customize x axis tick format\n     * chart.xAxis().tickFormat(function (v) {return v + '%';});\n     * // customize x axis tick values\n     * chart.xAxis().tickValues([0, 100, 200, 300]);\n     * @returns {d3.svg.axis}\n     */\n    _chart.xAxis = function () {\n        return _xAxis;\n    };\n\n    /**\n     * Get or set the fixed bar height. Default is [false] which will auto-scale bars.\n     * For example, if you want to fix the height for a specific number of bars (useful in TopN charts)\n     * you could fix height as follows (where count = total number of bars in your TopN and gap is\n     * your vertical gap space).\n     * @method fixedBarHeight\n     * @memberof dc.rowChart\n     * @instance\n     * @example\n     * chart.fixedBarHeight( chartheight - (count + 1) * gap / count);\n     * @param {Boolean|Number} [fixedBarHeight=false]\n     * @returns {Boolean|Number|dc.rowChart}\n     */\n    _chart.fixedBarHeight = function (fixedBarHeight) {\n        if (!arguments.length) {\n            return _fixedBarHeight;\n        }\n        _fixedBarHeight = fixedBarHeight;\n        return _chart;\n    };\n\n    /**\n     * Get or set the vertical gap space between rows on a particular row chart instance.\n     * @method gap\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [gap=5]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _chart;\n    };\n\n    /**\n     * Get or set the elasticity on x axis. If this attribute is set to true, then the x axis will rescle to auto-fit the\n     * data range when filtered.\n     * @method elasticX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Boolean} [elasticX]\n     * @returns {Boolean|dc.rowChart}\n     */\n    _chart.elasticX = function (elasticX) {\n        if (!arguments.length) {\n            return _elasticX;\n        }\n        _elasticX = elasticX;\n        return _chart;\n    };\n\n    /**\n     * Get or set the x offset (horizontal space to the top left corner of a row) for labels on a particular row chart.\n     * @method labelOffsetX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [labelOffsetX=10]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.labelOffsetX = function (labelOffsetX) {\n        if (!arguments.length) {\n            return _labelOffsetX;\n        }\n        _labelOffsetX = labelOffsetX;\n        return _chart;\n    };\n\n    /**\n     * Get or set the y offset (vertical space to the top left corner of a row) for labels on a particular row chart.\n     * @method labelOffsetY\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [labelOffsety=15]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.labelOffsetY = function (labelOffsety) {\n        if (!arguments.length) {\n            return _labelOffsetY;\n        }\n        _labelOffsetY = labelOffsety;\n        _hasLabelOffsetY = true;\n        return _chart;\n    };\n\n    /**\n     * Get of set the x offset (horizontal space between right edge of row and right edge or text.\n     * @method titleLabelOffsetX\n     * @memberof dc.rowChart\n     * @instance\n     * @param {Number} [titleLabelOffsetX=2]\n     * @returns {Number|dc.rowChart}\n     */\n    _chart.titleLabelOffsetX = function (titleLabelOffsetX) {\n        if (!arguments.length) {\n            return _titleLabelOffsetX;\n        }\n        _titleLabelOffsetX = titleLabelOffsetX;\n        return _chart;\n    };\n\n    function isSelectedRow (d) {\n        return _chart.hasFilter(_chart.cappedKeyAccessor(d));\n    }\n\n    return _chart.anchor(parent, chartGroup);\n};\n","/**\n * Legend is a attachable widget that can be added to other dc charts to render horizontal legend\n * labels.\n *\n * Examples:\n * - {@link http://dc-js.github.com/dc.js/ Nasdaq 100 Index}\n * - {@link http://dc-js.github.com/dc.js/crime/index.html Canadian City Crime Stats}\n * @class legend\n * @memberof dc\n * @example\n * chart.legend(dc.legend().x(400).y(10).itemHeight(13).gap(5))\n * @returns {dc.legend}\n */\ndc.legend = function () {\n    var LABEL_GAP = 2;\n\n    var _legend = {},\n        _parent,\n        _x = 0,\n        _y = 0,\n        _itemHeight = 12,\n        _gap = 5,\n        _horizontal = false,\n        _legendWidth = 560,\n        _itemWidth = 70,\n        _autoItemWidth = false,\n        _legendText = dc.pluck('name'),\n        _maxItems;\n\n    var _g;\n\n    _legend.parent = function (p) {\n        if (!arguments.length) {\n            return _parent;\n        }\n        _parent = p;\n        return _legend;\n    };\n\n    _legend.render = function () {\n        _parent.svg().select('g.dc-legend').remove();\n        _g = _parent.svg().append('g')\n            .attr('class', 'dc-legend')\n            .attr('transform', 'translate(' + _x + ',' + _y + ')');\n        var legendables = _parent.legendables();\n\n        if (_maxItems !== undefined) {\n            legendables = legendables.slice(0, _maxItems);\n        }\n\n        var itemEnter = _g.selectAll('g.dc-legend-item')\n            .data(legendables)\n            .enter()\n            .append('g')\n            .attr('class', 'dc-legend-item')\n            .on('mouseover', function (d) {\n                _parent.legendHighlight(d);\n            })\n            .on('mouseout', function (d) {\n                _parent.legendReset(d);\n            })\n            .on('click', function (d) {\n                d.chart.legendToggle(d);\n            });\n\n        _g.selectAll('g.dc-legend-item')\n            .classed('fadeout', function (d) {\n                return d.chart.isLegendableHidden(d);\n            });\n\n        if (legendables.some(dc.pluck('dashstyle'))) {\n            itemEnter\n                .append('line')\n                .attr('x1', 0)\n                .attr('y1', _itemHeight / 2)\n                .attr('x2', _itemHeight)\n                .attr('y2', _itemHeight / 2)\n                .attr('stroke-width', 2)\n                .attr('stroke-dasharray', dc.pluck('dashstyle'))\n                .attr('stroke', dc.pluck('color'));\n        } else {\n            itemEnter\n                .append('rect')\n                .attr('width', _itemHeight)\n                .attr('height', _itemHeight)\n                .attr('fill', function (d) {return d ? d.color : 'blue';});\n        }\n\n        itemEnter.append('text')\n                .text(_legendText)\n                .attr('x', _itemHeight + LABEL_GAP)\n                .attr('y', function () {\n                    return _itemHeight / 2 + (this.clientHeight ? this.clientHeight : 13) / 2 - 2;\n                });\n\n        var _cumulativeLegendTextWidth = 0;\n        var row = 0;\n        itemEnter.attr('transform', function (d, i) {\n            if (_horizontal) {\n                var itemWidth   = _autoItemWidth === true ? this.getBBox().width + _gap : _itemWidth;\n                if ((_cumulativeLegendTextWidth + itemWidth) > _legendWidth && _cumulativeLegendTextWidth > 0) {\n                    ++row;\n                    _cumulativeLegendTextWidth = 0;\n                }\n                var translateBy = 'translate(' + _cumulativeLegendTextWidth + ',' + row * legendItemHeight() + ')';\n                _cumulativeLegendTextWidth += itemWidth;\n                return translateBy;\n            } else {\n                return 'translate(0,' + i * legendItemHeight() + ')';\n            }\n        });\n    };\n\n    function legendItemHeight () {\n        return _gap + _itemHeight;\n    }\n\n    /**\n     * Set or get x coordinate for legend widget.\n     * @method x\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [x=0]\n     * @returns {Number|dc.legend}\n     */\n    _legend.x = function (x) {\n        if (!arguments.length) {\n            return _x;\n        }\n        _x = x;\n        return _legend;\n    };\n\n    /**\n     * Set or get y coordinate for legend widget.\n     * @method y\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [y=0]\n     * @returns {Number|dc.legend}\n     */\n    _legend.y = function (y) {\n        if (!arguments.length) {\n            return _y;\n        }\n        _y = y;\n        return _legend;\n    };\n\n    /**\n     * Set or get gap between legend items.\n     * @method gap\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [gap=5]\n     * @returns {Number|dc.legend}\n     */\n    _legend.gap = function (gap) {\n        if (!arguments.length) {\n            return _gap;\n        }\n        _gap = gap;\n        return _legend;\n    };\n\n    /**\n     * Set or get legend item height.\n     * @method itemHeight\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [itemHeight=12]\n     * @returns {Number|dc.legend}\n     */\n    _legend.itemHeight = function (itemHeight) {\n        if (!arguments.length) {\n            return _itemHeight;\n        }\n        _itemHeight = itemHeight;\n        return _legend;\n    };\n\n    /**\n     * Position legend horizontally instead of vertically.\n     * @method horizontal\n     * @memberof dc.legend\n     * @instance\n     * @param  {Boolean} [horizontal=false]\n     * @returns {Boolean|dc.legend}\n     */\n    _legend.horizontal = function (horizontal) {\n        if (!arguments.length) {\n            return _horizontal;\n        }\n        _horizontal = horizontal;\n        return _legend;\n    };\n\n    /**\n     * Maximum width for horizontal legend.\n     * @method legendWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [legendWidth=500]\n     * @returns {Number|dc.legend}\n     */\n    _legend.legendWidth = function (legendWidth) {\n        if (!arguments.length) {\n            return _legendWidth;\n        }\n        _legendWidth = legendWidth;\n        return _legend;\n    };\n\n    /**\n     * Legend item width for horizontal legend.\n     * @method itemWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [itemWidth=70]\n     * @returns {Number|dc.legend}\n     */\n    _legend.itemWidth = function (itemWidth) {\n        if (!arguments.length) {\n            return _itemWidth;\n        }\n        _itemWidth = itemWidth;\n        return _legend;\n    };\n\n    /**\n     * Turn automatic width for legend items on or off. If true, {@link dc.legend#itemWidth itemWidth} is ignored.\n     * This setting takes into account the {@link dc.legend#gap gap}.\n     * @method autoItemWidth\n     * @memberof dc.legend\n     * @instance\n     * @param  {Boolean} [autoItemWidth=false]\n     * @returns {Boolean|dc.legend}\n     */\n    _legend.autoItemWidth = function (autoItemWidth) {\n        if (!arguments.length) {\n            return _autoItemWidth;\n        }\n        _autoItemWidth = autoItemWidth;\n        return _legend;\n    };\n\n    /**\n     * Set or get the legend text function. The legend widget uses this function to render the legend\n     * text for each item. If no function is specified the legend widget will display the names\n     * associated with each group.\n     * @method legendText\n     * @memberof dc.legend\n     * @instance\n     * @param  {Function} [legendText]\n     * @returns {Function|dc.legend}\n     * @example\n     * // default legendText\n     * legend.legendText(dc.pluck('name'))\n     *\n     * // create numbered legend items\n     * chart.legend(dc.legend().legendText(function(d, i) { return i + '. ' + d.name; }))\n     *\n     * // create legend displaying group counts\n     * chart.legend(dc.legend().legendText(function(d) { return d.name + ': ' d.data; }))\n     **/\n    _legend.legendText = function (legendText) {\n        if (!arguments.length) {\n            return _legendText;\n        }\n        _legendText = legendText;\n        return _legend;\n    };\n\n    /**\n     * Maximum number of legend items to display\n     * @method maxItems\n     * @memberof dc.legend\n     * @instance\n     * @param  {Number} [maxItems]\n     * @return {dc.legend}\n     */\n    _legend.maxItems = function (maxItems) {\n        if (!arguments.length) {\n            return _maxItems;\n        }\n        _maxItems = dc.utils.isNumber(maxItems) ? maxItems : undefined;\n        return _legend;\n    };\n\n    return _legend;\n};\n","/**\n * A scatter plot chart\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/scatter.html Scatter Chart}\n * - {@link http://dc-js.github.io/dc.js/examples/multi-scatter.html Multi-Scatter Chart}\n * @class scatterPlot\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a scatter plot under #chart-container1 element using the default global chart group\n * var chart1 = dc.scatterPlot('#chart-container1');\n * // create a scatter plot under #chart-container2 element using chart group A\n * var chart2 = dc.scatterPlot('#chart-container2', 'chartGroupA');\n * // create a sub-chart under a composite parent chart\n * var chart3 = dc.scatterPlot(compositeChart);\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.scatterPlot}\n */\ndc.scatterPlot = function (parent, chartGroup) {\n    var _chart = dc.coordinateGridMixin({});\n    var _symbol = d3.svg.symbol();\n\n    var _existenceAccessor = function (d) { return d.value; };\n\n    var originalKeyAccessor = _chart.keyAccessor();\n    _chart.keyAccessor(function (d) { return originalKeyAccessor(d)[0]; });\n    _chart.valueAccessor(function (d) { return originalKeyAccessor(d)[1]; });\n    _chart.colorAccessor(function () { return _chart._groupName; });\n\n    _chart.title(function (d) {\n        // this basically just counteracts the setting of its own key/value accessors\n        // see https://github.com/dc-js/dc.js/issues/702\n        return _chart.keyAccessor()(d) + ',' + _chart.valueAccessor()(d) + ': ' +\n            _chart.existenceAccessor()(d);\n    });\n\n    var _locator = function (d) {\n        return 'translate(' + _chart.x()(_chart.keyAccessor()(d)) + ',' +\n                              _chart.y()(_chart.valueAccessor()(d)) + ')';\n    };\n\n    var _highlightedSize = 7;\n    var _symbolSize = 5;\n    var _excludedSize = 3;\n    var _excludedColor = null;\n    var _excludedOpacity = 1.0;\n    var _emptySize = 0;\n    var _emptyOpacity = 0;\n    var _nonemptyOpacity = 1;\n    var _emptyColor = null;\n    var _filtered = [];\n\n    function elementSize (d, i) {\n        if (!_existenceAccessor(d)) {\n            return Math.pow(_emptySize, 2);\n        } else if (_filtered[i]) {\n            return Math.pow(_symbolSize, 2);\n        } else {\n            return Math.pow(_excludedSize, 2);\n        }\n    }\n    _symbol.size(elementSize);\n\n    dc.override(_chart, '_filter', function (filter) {\n        if (!arguments.length) {\n            return _chart.__filter();\n        }\n\n        return _chart.__filter(dc.filters.RangedTwoDimensionalFilter(filter));\n    });\n\n    _chart.plotData = function () {\n        var symbols = _chart.chartBodyG().selectAll('path.symbol')\n            .data(_chart.data());\n\n        symbols\n            .enter()\n        .append('path')\n            .attr('class', 'symbol')\n            .attr('opacity', 0)\n            .attr('fill', _chart.getColor)\n            .attr('transform', _locator);\n\n        symbols.call(renderTitles, _chart.data());\n\n        symbols.each(function (d, i) {\n            _filtered[i] = !_chart.filter() || _chart.filter().isFiltered([d.key[0], d.key[1]]);\n        });\n\n        dc.transition(symbols, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('opacity', function (d, i) {\n                if (!_existenceAccessor(d)) {\n                    return _emptyOpacity;\n                } else if (_filtered[i]) {\n                    return _nonemptyOpacity;\n                } else {\n                    return _chart.excludedOpacity();\n                }\n            })\n            .attr('fill', function (d, i) {\n                if (_emptyColor && !_existenceAccessor(d)) {\n                    return _emptyColor;\n                } else if (_chart.excludedColor() && !_filtered[i]) {\n                    return _chart.excludedColor();\n                } else {\n                    return _chart.getColor(d);\n                }\n            })\n            .attr('transform', _locator)\n            .attr('d', _symbol);\n\n        dc.transition(symbols.exit(), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('opacity', 0).remove();\n    };\n\n    function renderTitles (symbol, d) {\n        if (_chart.renderTitle()) {\n            symbol.selectAll('title').remove();\n            symbol.append('title').text(function (d) {\n                return _chart.title()(d);\n            });\n        }\n    }\n\n    /**\n     * Get or set the existence accessor.  If a point exists, it is drawn with\n     * {@link dc.scatterPlot#symbolSize symbolSize} radius and\n     * opacity 1; if it does not exist, it is drawn with\n     * {@link dc.scatterPlot#emptySize emptySize} radius and opacity 0. By default,\n     * the existence accessor checks if the reduced value is truthy.\n     * @method existenceAccessor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link dc.scatterPlot#symbolSize symbolSize}\n     * @see {@link dc.scatterPlot#emptySize emptySize}\n     * @example\n     * // default accessor\n     * chart.existenceAccessor(function (d) { return d.value; });\n     * @param {Function} [accessor]\n     * @returns {Function|dc.scatterPlot}\n     */\n    _chart.existenceAccessor = function (accessor) {\n        if (!arguments.length) {\n            return _existenceAccessor;\n        }\n        _existenceAccessor = accessor;\n        return this;\n    };\n\n    /**\n     * Get or set the symbol type used for each point. By default the symbol is a circle.\n     * Type can be a constant or an accessor.\n     * @method symbol\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_type d3.svg.symbol.type}\n     * @example\n     * // Circle type\n     * chart.symbol('circle');\n     * // Square type\n     * chart.symbol('square');\n     * @param {String|Function} [type='circle']\n     * @returns {String|Function|dc.scatterPlot}\n     */\n    _chart.symbol = function (type) {\n        if (!arguments.length) {\n            return _symbol.type();\n        }\n        _symbol.type(type);\n        return _chart;\n    };\n\n    /**\n     * Get or set the symbol generator. By default `dc.scatterPlot` will use\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol d3.svg.symbol()}\n     * to generate symbols. `dc.scatterPlot` will set the\n     * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size size accessor}\n     * on the symbol generator.\n     * @method customSymbol\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol d3.svg.symbol}\n     * @see {@link https://stackoverflow.com/questions/25332120/create-additional-d3-js-symbols Create additional D3.js symbols}\n     * @param {String|Function} [customSymbol=d3.svg.symbol()]\n     * @returns {String|Function|dc.scatterPlot}\n     */\n    _chart.customSymbol = function (customSymbol) {\n        if (!arguments.length) {\n            return _symbol;\n        }\n        _symbol = customSymbol;\n        _symbol.size(elementSize);\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for symbols.\n     * @method symbolSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [symbolSize=3]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.symbolSize = function (symbolSize) {\n        if (!arguments.length) {\n            return _symbolSize;\n        }\n        _symbolSize = symbolSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for highlighted symbols.\n     * @method highlightedSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [highlightedSize=5]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.highlightedSize = function (highlightedSize) {\n        if (!arguments.length) {\n            return _highlightedSize;\n        }\n        _highlightedSize = highlightedSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get size for symbols excluded from this chart's filter. If null, no\n     * special size is applied for symbols based on their filter status.\n     * @method excludedSize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [excludedSize=null]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedSize = function (excludedSize) {\n        if (!arguments.length) {\n            return _excludedSize;\n        }\n        _excludedSize = excludedSize;\n        return _chart;\n    };\n\n    /**\n     * Set or get color for symbols excluded from this chart's filter. If null, no\n     * special color is applied for symbols based on their filter status.\n     * @method excludedColor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [excludedColor=null]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedColor = function (excludedColor) {\n        if (!arguments.length) {\n            return _excludedColor;\n        }\n        _excludedColor = excludedColor;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols excluded from this chart's filter.\n     * @method excludedOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [excludedOpacity=1.0]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.excludedOpacity = function (excludedOpacity) {\n        if (!arguments.length) {\n            return _excludedOpacity;\n        }\n        _excludedOpacity = excludedOpacity;\n        return _chart;\n    };\n\n    /**\n     * Set or get radius for symbols when the group is empty.\n     * @method emptySize\n     * @memberof dc.scatterPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/SVG-Shapes.md#symbol_size d3.svg.symbol.size}\n     * @param {Number} [emptySize=0]\n     * @returns {Number|dc.scatterPlot}\n     */\n    _chart.hiddenSize = _chart.emptySize = function (emptySize) {\n        if (!arguments.length) {\n            return _emptySize;\n        }\n        _emptySize = emptySize;\n        return _chart;\n    };\n\n    /**\n     * Set or get color for symbols when the group is empty. If null, just use the\n     * {@link dc.colorMixin#colors colorMixin.colors} color scale zero value.\n     * @name emptyColor\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {String} [emptyColor=null]\n     * @return {String}\n     * @return {dc.scatterPlot}/\n     */\n    _chart.emptyColor = function (emptyColor) {\n        if (!arguments.length) {\n            return _emptyColor;\n        }\n        _emptyColor = emptyColor;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols when the group is empty.\n     * @name emptyOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [emptyOpacity=0]\n     * @return {Number}\n     * @return {dc.scatterPlot}\n     */\n    _chart.emptyOpacity = function (emptyOpacity) {\n        if (!arguments.length) {\n            return _emptyOpacity;\n        }\n        _emptyOpacity = emptyOpacity;\n        return _chart;\n    };\n\n    /**\n     * Set or get opacity for symbols when the group is not empty.\n     * @name nonemptyOpacity\n     * @memberof dc.scatterPlot\n     * @instance\n     * @param {Number} [nonemptyOpacity=1]\n     * @return {Number}\n     * @return {dc.scatterPlot}\n     */\n    _chart.nonemptyOpacity = function (nonemptyOpacity) {\n        if (!arguments.length) {\n            return _emptyOpacity;\n        }\n        _nonemptyOpacity = nonemptyOpacity;\n        return _chart;\n    };\n\n    _chart.legendables = function () {\n        return [{chart: _chart, name: _chart._groupName, color: _chart.getColor()}];\n    };\n\n    _chart.legendHighlight = function (d) {\n        resizeSymbolsWhere(function (symbol) {\n            return symbol.attr('fill') === d.color;\n        }, _highlightedSize);\n        _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return d3.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', true);\n    };\n\n    _chart.legendReset = function (d) {\n        resizeSymbolsWhere(function (symbol) {\n            return symbol.attr('fill') === d.color;\n        }, _symbolSize);\n        _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return d3.select(this).attr('fill') !== d.color;\n        }).classed('fadeout', false);\n    };\n\n    function resizeSymbolsWhere (condition, size) {\n        var symbols = _chart.chartBodyG().selectAll('.chart-body path.symbol').filter(function () {\n            return condition(d3.select(this));\n        });\n        var oldSize = _symbol.size();\n        _symbol.size(Math.pow(size, 2));\n        dc.transition(symbols, _chart.transitionDuration(), _chart.transitionDelay()).attr('d', _symbol);\n        _symbol.size(oldSize);\n    }\n\n    _chart.setHandlePaths = function () {\n        // no handle paths for poly-brushes\n    };\n\n    _chart.extendBrush = function () {\n        var extent = _chart.brush().extent();\n        if (_chart.round()) {\n            extent[0] = extent[0].map(_chart.round());\n            extent[1] = extent[1].map(_chart.round());\n\n            _chart.g().select('.brush')\n                .call(_chart.brush().extent(extent));\n        }\n        return extent;\n    };\n\n    _chart.brushIsEmpty = function (extent) {\n        return _chart.brush().empty() || !extent || extent[0][0] >= extent[1][0] || extent[0][1] >= extent[1][1];\n    };\n\n    _chart._brushing = function () {\n        var extent = _chart.extendBrush();\n\n        _chart.redrawBrush(_chart.g());\n\n        if (_chart.brushIsEmpty(extent)) {\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.redrawGroup();\n            });\n\n        } else {\n            var ranged2DFilter = dc.filters.RangedTwoDimensionalFilter(extent);\n            dc.events.trigger(function () {\n                _chart.filter(null);\n                _chart.filter(ranged2DFilter);\n                _chart.redrawGroup();\n            }, dc.constants.EVENT_DELAY);\n\n        }\n    };\n\n    _chart.setBrushY = function (gBrush) {\n        gBrush.call(_chart.brush().y(_chart.y()));\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n","/**\n * A display of a single numeric value.\n * Unlike other charts, you do not need to set a dimension. Instead a group object must be provided and\n * a valueAccessor that returns a single value.\n * @class numberDisplay\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * // create a number display under #chart-container1 element using the default global chart group\n * var display1 = dc.numberDisplay('#chart-container1');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.numberDisplay}\n */\ndc.numberDisplay = function (parent, chartGroup) {\n    var SPAN_CLASS = 'number-display';\n    var _formatNumber = d3.format('.2s');\n    var _chart = dc.baseMixin({});\n    var _html = {one: '', some: '', none: ''};\n    var _lastValue;\n\n    // dimension not required\n    _chart._mandatoryAttributes(['group']);\n\n    // default to ordering by value, to emulate old group.top(1) behavior when multiple groups\n    _chart.ordering(function (kv) { return kv.value; });\n\n    /**\n     * Gets or sets an optional object specifying HTML templates to use depending on the number\n     * displayed.  The text `%number` will be replaced with the current value.\n     * - one: HTML template to use if the number is 1\n     * - zero: HTML template to use if the number is 0\n     * - some: HTML template to use otherwise\n     * @method html\n     * @memberof dc.numberDisplay\n     * @instance\n     * @example\n     * numberWidget.html({\n     *      one:'%number record',\n     *      some:'%number records',\n     *      none:'no records'})\n     * @param {{one:String, some:String, none:String}} [html={one: '', some: '', none: ''}]\n     * @returns {{one:String, some:String, none:String}|dc.numberDisplay}\n     */\n    _chart.html = function (html) {\n        if (!arguments.length) {\n            return _html;\n        }\n        if (html.none) {\n            _html.none = html.none;//if none available\n        } else if (html.one) {\n            _html.none = html.one;//if none not available use one\n        } else if (html.some) {\n            _html.none = html.some;//if none and one not available use some\n        }\n        if (html.one) {\n            _html.one = html.one;//if one available\n        } else if (html.some) {\n            _html.one = html.some;//if one not available use some\n        }\n        if (html.some) {\n            _html.some = html.some;//if some available\n        } else if (html.one) {\n            _html.some = html.one;//if some not available use one\n        }\n        return _chart;\n    };\n\n    /**\n     * Calculate and return the underlying value of the display.\n     * @method value\n     * @memberof dc.numberDisplay\n     * @instance\n     * @returns {Number}\n     */\n    _chart.value = function () {\n        return _chart.data();\n    };\n\n    function maxBin (all) {\n        if (!all.length) {\n            return null;\n        }\n        var sorted = _chart._computeOrderedGroups(all);\n        return sorted[sorted.length - 1];\n    }\n    _chart.data(function (group) {\n        var valObj = group.value ? group.value() : maxBin(group.all());\n        return _chart.valueAccessor()(valObj);\n    });\n\n    _chart.transitionDuration(250); // good default\n    _chart.transitionDelay(0);\n\n    _chart._doRender = function () {\n        var newValue = _chart.value(),\n            span = _chart.selectAll('.' + SPAN_CLASS);\n\n        if (span.empty()) {\n            span = span.data([0])\n                .enter()\n                .append('span')\n                .attr('class', SPAN_CLASS);\n        }\n\n        span.transition()\n            .duration(_chart.transitionDuration())\n            .delay(_chart.transitionDelay())\n            .ease('quad-out-in')\n            .tween('text', function () {\n                // [XA] don't try and interpolate from Infinity, else this breaks.\n                var interpStart = isFinite(_lastValue) ? _lastValue : 0;\n                var interp = d3.interpolateNumber(interpStart || 0, newValue);\n                _lastValue = newValue;\n                return function (t) {\n                    var html = null, num = _chart.formatNumber()(interp(t));\n                    if (newValue === 0 && (_html.none !== '')) {\n                        html = _html.none;\n                    } else if (newValue === 1 && (_html.one !== '')) {\n                        html = _html.one;\n                    } else if (_html.some !== '') {\n                        html = _html.some;\n                    }\n                    this.innerHTML = html ? html.replace('%number', num) : num;\n                };\n            });\n    };\n\n    _chart._doRedraw = function () {\n        return _chart._doRender();\n    };\n\n    /**\n     * Get or set a function to format the value for the display.\n     * @method formatNumber\n     * @memberof dc.numberDisplay\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Formatting.md d3.format}\n     * @param {Function} [formatter=d3.format('.2s')]\n     * @returns {Function|dc.numberDisplay}\n     */\n    _chart.formatNumber = function (formatter) {\n        if (!arguments.length) {\n            return _formatNumber;\n        }\n        _formatNumber = formatter;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n","/**\n * A heat map is matrix that represents the values of two dimensions of data using colors.\n * @class heatMap\n * @memberof dc\n * @mixes dc.colorMixin\n * @mixes dc.marginMixin\n * @mixes dc.baseMixin\n * @example\n * // create a heat map under #chart-container1 element using the default global chart group\n * var heatMap1 = dc.heatMap('#chart-container1');\n * // create a heat map under #chart-container2 element using chart group A\n * var heatMap2 = dc.heatMap('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.heatMap}\n */\ndc.heatMap = function (parent, chartGroup) {\n\n    var DEFAULT_BORDER_RADIUS = 6.75;\n\n    var _chartBody;\n\n    var _cols;\n    var _rows;\n    var _colOrdering = d3.ascending;\n    var _rowOrdering = d3.ascending;\n    var _colScale = d3.scale.ordinal();\n    var _rowScale = d3.scale.ordinal();\n\n    var _xBorderRadius = DEFAULT_BORDER_RADIUS;\n    var _yBorderRadius = DEFAULT_BORDER_RADIUS;\n\n    var _chart = dc.colorMixin(dc.marginMixin(dc.baseMixin({})));\n    _chart._mandatoryAttributes(['group']);\n    _chart.title(_chart.colorAccessor());\n\n    var _colsLabel = function (d) {\n        return d;\n    };\n    var _rowsLabel = function (d) {\n        return d;\n    };\n\n    /**\n     * Set or get the column label function. The chart class uses this function to render\n     * column labels on the X axis. It is passed the column name.\n     * @method colsLabel\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // the default label function just returns the name\n     * chart.colsLabel(function(d) { return d; });\n     * @param  {Function} [labelFunction=function(d) { return d; }]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.colsLabel = function (labelFunction) {\n        if (!arguments.length) {\n            return _colsLabel;\n        }\n        _colsLabel = labelFunction;\n        return _chart;\n    };\n\n    /**\n     * Set or get the row label function. The chart class uses this function to render\n     * row labels on the Y axis. It is passed the row name.\n     * @method rowsLabel\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // the default label function just returns the name\n     * chart.rowsLabel(function(d) { return d; });\n     * @param  {Function} [labelFunction=function(d) { return d; }]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.rowsLabel = function (labelFunction) {\n        if (!arguments.length) {\n            return _rowsLabel;\n        }\n        _rowsLabel = labelFunction;\n        return _chart;\n    };\n\n    var _xAxisOnClick = function (d) { filterAxis(0, d); };\n    var _yAxisOnClick = function (d) { filterAxis(1, d); };\n    var _boxOnClick = function (d) {\n        var filter = d.key;\n        dc.events.trigger(function () {\n            _chart.filter(filter);\n            _chart.redrawGroup();\n        });\n    };\n\n    function filterAxis (axis, value) {\n        var cellsOnAxis = _chart.selectAll('.box-group').filter(function (d) {\n            return d.key[axis] === value;\n        });\n        var unfilteredCellsOnAxis = cellsOnAxis.filter(function (d) {\n            return !_chart.hasFilter(d.key);\n        });\n        dc.events.trigger(function () {\n            var selection = unfilteredCellsOnAxis.empty() ? cellsOnAxis : unfilteredCellsOnAxis;\n            var filters = selection.data().map(function (kv) {\n                return dc.filters.TwoDimensionalFilter(kv.key);\n            });\n            _chart._filter([filters]);\n            _chart.redrawGroup();\n        });\n    }\n\n    dc.override(_chart, 'filter', function (filter) {\n        if (!arguments.length) {\n            return _chart._filter();\n        }\n\n        return _chart._filter(dc.filters.TwoDimensionalFilter(filter));\n    });\n\n    /**\n     * Gets or sets the values used to create the rows of the heatmap, as an array. By default, all\n     * the values will be fetched from the data using the value accessor.\n     * @method rows\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Array<String|Number>} [rows]\n     * @returns {Array<String|Number>|dc.heatMap}\n     */\n\n    _chart.rows = function (rows) {\n        if (!arguments.length) {\n            return _rows;\n        }\n        _rows = rows;\n        return _chart;\n    };\n\n    /**\n     #### .rowOrdering([orderFunction])\n     Get or set an accessor to order the rows.  Default is d3.ascending.\n     */\n    _chart.rowOrdering = function (_) {\n        if (!arguments.length) {\n            return _rowOrdering;\n        }\n        _rowOrdering = _;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the keys used to create the columns of the heatmap, as an array. By default, all\n     * the values will be fetched from the data using the key accessor.\n     * @method cols\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Array<String|Number>} [cols]\n     * @returns {Array<String|Number>|dc.heatMap}\n     */\n    _chart.cols = function (cols) {\n        if (!arguments.length) {\n            return _cols;\n        }\n        _cols = cols;\n        return _chart;\n    };\n\n    /**\n     #### .colOrdering([orderFunction])\n     Get or set an accessor to order the cols.  Default is ascending.\n     */\n    _chart.colOrdering = function (_) {\n        if (!arguments.length) {\n            return _colOrdering;\n        }\n        _colOrdering = _;\n        return _chart;\n    };\n\n    _chart._doRender = function () {\n        _chart.resetSvg();\n\n        _chartBody = _chart.svg()\n            .append('g')\n            .attr('class', 'heatmap')\n            .attr('transform', 'translate(' + _chart.margins().left + ',' + _chart.margins().top + ')');\n\n        return _chart._doRedraw();\n    };\n\n    _chart._doRedraw = function () {\n        var data = _chart.data(),\n            rows = _chart.rows() || data.map(_chart.valueAccessor()),\n            cols = _chart.cols() || data.map(_chart.keyAccessor());\n        if (_rowOrdering) {\n            rows = rows.sort(_rowOrdering);\n        }\n        if (_colOrdering) {\n            cols = cols.sort(_colOrdering);\n        }\n        rows = _rowScale.domain(rows);\n        cols = _colScale.domain(cols);\n\n        var rowCount = rows.domain().length,\n            colCount = cols.domain().length,\n            boxWidth = Math.floor(_chart.effectiveWidth() / colCount),\n            boxHeight = Math.floor(_chart.effectiveHeight() / rowCount);\n\n        cols.rangeRoundBands([0, _chart.effectiveWidth()]);\n        rows.rangeRoundBands([_chart.effectiveHeight(), 0]);\n\n        var boxes = _chartBody.selectAll('g.box-group').data(_chart.data(), function (d, i) {\n            return _chart.keyAccessor()(d, i) + '\\0' + _chart.valueAccessor()(d, i);\n        });\n        var gEnter = boxes.enter().append('g')\n            .attr('class', 'box-group');\n\n        gEnter.append('rect')\n            .attr('class', 'heat-box')\n            .attr('fill', 'white')\n            .on('click', _chart.boxOnClick());\n\n        if (_chart.renderTitle()) {\n            gEnter.append('title');\n            boxes.select('title').text(_chart.title());\n        }\n\n        dc.transition(boxes.select('rect'), _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('x', function (d, i) { return cols(_chart.keyAccessor()(d, i)); })\n            .attr('y', function (d, i) { return rows(_chart.valueAccessor()(d, i)); })\n            .attr('rx', _xBorderRadius)\n            .attr('ry', _yBorderRadius)\n            .attr('fill', _chart.getColor)\n            .attr('width', boxWidth)\n            .attr('height', boxHeight);\n\n        boxes.exit().remove();\n\n        var gCols = _chartBody.select('g.cols');\n        if (gCols.empty()) {\n            gCols = _chartBody.append('g').attr('class', 'cols axis');\n        }\n        var gColsText = gCols.selectAll('text').data(cols.domain());\n        gColsText.enter().append('text')\n              .attr('x', function (d) { return cols(d) + boxWidth / 2; })\n              .style('text-anchor', 'middle')\n              .attr('y', _chart.effectiveHeight())\n              .attr('dy', 12)\n              .on('click', _chart.xAxisOnClick())\n              .text(_chart.colsLabel());\n        dc.transition(gColsText, _chart.transitionDuration(), _chart.transitionDelay())\n               .text(_chart.colsLabel())\n               .attr('x', function (d) { return cols(d) + boxWidth / 2; })\n               .attr('y', _chart.effectiveHeight());\n        gColsText.exit().remove();\n        var gRows = _chartBody.select('g.rows');\n        if (gRows.empty()) {\n            gRows = _chartBody.append('g').attr('class', 'rows axis');\n        }\n        var gRowsText = gRows.selectAll('text').data(rows.domain());\n        gRowsText.enter().append('text')\n              .attr('dy', 6)\n              .style('text-anchor', 'end')\n              .attr('x', 0)\n              .attr('dx', -2)\n              .on('click', _chart.yAxisOnClick())\n              .text(_chart.rowsLabel());\n        dc.transition(gRowsText, _chart.transitionDuration(), _chart.transitionDelay())\n              .text(_chart.rowsLabel())\n              .attr('y', function (d) { return rows(d) + boxHeight / 2; });\n        gRowsText.exit().remove();\n\n        if (_chart.hasFilter()) {\n            _chart.selectAll('g.box-group').each(function (d) {\n                if (_chart.isSelectedNode(d)) {\n                    _chart.highlightSelected(this);\n                } else {\n                    _chart.fadeDeselected(this);\n                }\n            });\n        } else {\n            _chart.selectAll('g.box-group').each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when an individual cell is clicked in the heatmap.\n     * By default, filtering of the cell will be toggled.\n     * @method boxOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @example\n     * // default box on click handler\n     * chart.boxOnClick(function (d) {\n     *     var filter = d.key;\n     *     dc.events.trigger(function () {\n     *         _chart.filter(filter);\n     *         _chart.redrawGroup();\n     *     });\n     * });\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.boxOnClick = function (handler) {\n        if (!arguments.length) {\n            return _boxOnClick;\n        }\n        _boxOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when a column tick is clicked in the x axis.\n     * By default, if any cells in the column are unselected, the whole column will be selected,\n     * otherwise the whole column will be unselected.\n     * @method xAxisOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.xAxisOnClick = function (handler) {\n        if (!arguments.length) {\n            return _xAxisOnClick;\n        }\n        _xAxisOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the handler that fires when a row tick is clicked in the y axis.\n     * By default, if any cells in the row are unselected, the whole row will be selected,\n     * otherwise the whole row will be unselected.\n     * @method yAxisOnClick\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Function} [handler]\n     * @returns {Function|dc.heatMap}\n     */\n    _chart.yAxisOnClick = function (handler) {\n        if (!arguments.length) {\n            return _yAxisOnClick;\n        }\n        _yAxisOnClick = handler;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the X border radius.  Set to 0 to get full rectangles.\n     * @method xBorderRadius\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Number} [xBorderRadius=6.75]\n     * @returns {Number|dc.heatMap}\n     */\n    _chart.xBorderRadius = function (xBorderRadius) {\n        if (!arguments.length) {\n            return _xBorderRadius;\n        }\n        _xBorderRadius = xBorderRadius;\n        return _chart;\n    };\n\n    /**\n     * Gets or sets the Y border radius.  Set to 0 to get full rectangles.\n     * @method yBorderRadius\n     * @memberof dc.heatMap\n     * @instance\n     * @param  {Number} [yBorderRadius=6.75]\n     * @returns {Number|dc.heatMap}\n     */\n    _chart.yBorderRadius = function (yBorderRadius) {\n        if (!arguments.length) {\n            return _yBorderRadius;\n        }\n        _yBorderRadius = yBorderRadius;\n        return _chart;\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(d.key);\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n","// https://github.com/d3/d3-plugins/blob/master/box/box.js\n// * Original source March 22, 2013\n// * Enhancements integrated on May 13, 2018 for dc.js library only\n\n// https://github.com/d3/d3-plugins/blob/master/LICENSE\n// Copyright (c) 2012-2015, Michael Bostock\n// All rights reserved.\n\n// Redistribution and use in source and binary forms, with or without\n// modification, are permitted provided that the following conditions are met:\n//\n// * Redistributions of source code must retain the above copyright notice, this\n//   list of conditions and the following disclaimer.\n//\n// * Redistributions in binary form must reproduce the above copyright notice,\n//   this list of conditions and the following disclaimer in the documentation\n//   and/or other materials provided with the distribution.\n//\n// * The name Michael Bostock may not be used to endorse or promote products\n//   derived from this software without specific prior written permission.\n//\n// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\n// AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\n// IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\n// DISCLAIMED. IN NO EVENT SHALL MICHAEL BOSTOCK BE LIABLE FOR ANY DIRECT,\n// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING,\n// BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY\n// OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING\n// NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,\n// EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n(function () {\n\n    // Inspired by http://informationandvisualization.de/blog/box-plot\n    d3.box = function () {\n        var width = 1,\n            height = 1,\n            duration = 0,\n            delay = 0,\n            domain = null,\n            value = Number,\n            whiskers = boxWhiskers,\n            quartiles = boxQuartiles,\n            tickFormat = null,\n\n            // Enhanced attributes\n            renderDataPoints = false,\n            dataRadius = 3,\n            dataOpacity = 0.3,\n            dataWidthPortion = 0.8,\n            renderTitle = false,\n            showOutliers = true,\n            boldOutlier = false;\n\n        // For each small multiple…\n        function box (g) {\n            /* jshint -W074 */\n            g.each(function (d, i) {\n                d = d.map(value).sort(d3.ascending);\n                var g = d3.select(this),\n                    n = d.length,\n                    min,\n                    max;\n\n                // Leave if there are no items.\n                if (n === 0) {return;}\n\n                // Compute quartiles. Must return exactly 3 elements.\n                var quartileData = d.quartiles = quartiles(d);\n\n                // Compute whiskers. Must return exactly 2 elements, or null.\n                var whiskerIndices = whiskers && whiskers.call(this, d, i),\n                    whiskerData = whiskerIndices && whiskerIndices.map(function (i) { return d[i]; });\n\n                // Compute outliers. If no whiskers are specified, all data are 'outliers'.\n                // We compute the outliers as indices, so that we can join across transitions!\n                var outlierIndices = whiskerIndices ?\n                    d3.range(0, whiskerIndices[0]).concat(d3.range(whiskerIndices[1] + 1, n)) : d3.range(n);\n\n                // Determine the maximum value based on if outliers are shown\n                if (showOutliers) {\n                    min = d[0];\n                    max = d[n - 1];\n                } else {\n                    min = d[whiskerIndices[0]];\n                    max = d[whiskerIndices[1]];\n                }\n                var pointIndices = d3.range(whiskerIndices[0], whiskerIndices[1] + 1);\n\n                // Compute the new x-scale.\n                var x1 = d3.scale.linear()\n                    .domain(domain && domain.call(this, d, i) || [min, max])\n                    .range([height, 0]);\n\n                // Retrieve the old x-scale, if this is an update.\n                var x0 = this.__chart__ || d3.scale.linear()\n                    .domain([0, Infinity])\n                    .range(x1.range());\n\n                // Stash the new scale.\n                this.__chart__ = x1;\n\n                // Note: the box, median, and box tick elements are fixed in number,\n                // so we only have to handle enter and update. In contrast, the outliers\n                // and other elements are variable, so we need to exit them! Variable\n                // elements also fade in and out.\n\n                // Update center line: the vertical line spanning the whiskers.\n                var center = g.selectAll('line.center')\n                    .data(whiskerData ? [whiskerData] : []);\n\n                center.enter().insert('line', 'rect')\n                    .attr('class', 'center')\n                    .attr('x1', width / 2)\n                    .attr('y1', function (d) { return x0(d[0]); })\n                    .attr('x2', width / 2)\n                    .attr('y2', function (d) { return x0(d[1]); })\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); });\n\n                center.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1)\n                    .attr('x1', width / 2)\n                    .attr('x2', width / 2)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); });\n\n                center.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .style('opacity', 1e-6)\n                    .attr('y1', function (d) { return x1(d[0]); })\n                    .attr('y2', function (d) { return x1(d[1]); })\n                    .remove();\n\n                // Update innerquartile box.\n                var box = g.selectAll('rect.box')\n                    .data([quartileData]);\n\n                box.enter().append('rect')\n                    .attr('class', 'box')\n                    .attr('x', 0)\n                    .attr('y', function (d) { return x0(d[2]); })\n                    .attr('width', width)\n                    .attr('height', function (d) { return x0(d[0]) - x0(d[2]); })\n                    .style('fill-opacity', (renderDataPoints) ? 0.1 : 1)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', function (d) { return x1(d[2]); })\n                    .attr('height', function (d) { return x1(d[0]) - x1(d[2]); });\n\n                box.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('width', width)\n                    .attr('y', function (d) { return x1(d[2]); })\n                    .attr('height', function (d) { return x1(d[0]) - x1(d[2]); });\n\n                // Update median line.\n                var medianLine = g.selectAll('line.median')\n                    .data([quartileData[1]]);\n\n                medianLine.enter().append('line')\n                    .attr('class', 'median')\n                    .attr('x1', 0)\n                    .attr('y1', x0)\n                    .attr('x2', width)\n                    .attr('y2', x0)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1);\n\n                medianLine.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('x1', 0)\n                    .attr('x2', width)\n                    .attr('y1', x1)\n                    .attr('y2', x1);\n\n                // Update whiskers.\n                var whisker = g.selectAll('line.whisker')\n                    .data(whiskerData || []);\n\n                whisker.enter().insert('line', 'circle, text')\n                    .attr('class', 'whisker')\n                    .attr('x1', 0)\n                    .attr('y1', x0)\n                    .attr('x2', width)\n                    .attr('y2', x0)\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1);\n\n                whisker.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('x1', 0)\n                    .attr('x2', width)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1);\n\n                whisker.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y1', x1)\n                    .attr('y2', x1)\n                    .style('opacity', 1e-6)\n                    .remove();\n\n                // Update outliers.\n                if (showOutliers) {\n                    var outlierClass = boldOutlier ? 'outlierBold' : 'outlier';\n                    var outlierSize = boldOutlier ? 3 : 5;\n                    var outlierX = boldOutlier ?\n                        function () { return Math.floor(Math.random() *\n                            (width * dataWidthPortion) +\n                            1 + ((width - (width * dataWidthPortion)) / 2)); } :\n                        function () { return width / 2; };\n\n                    var outlier = g.selectAll('circle.' + outlierClass)\n                        .data(outlierIndices, Number);\n\n                    outlier.enter().insert('circle', 'text')\n                        .attr('class', outlierClass)\n                        .attr('r', outlierSize)\n                        .attr('cx', outlierX)\n                        .attr('cy', function (i) { return x0(d[i]); })\n                        .style('opacity', 1e-6)\n                        .transition()\n                        .duration(duration)\n                        .delay(delay)\n                        .attr('cy', function (i) { return x1(d[i]); })\n                        .style('opacity', 0.6);\n\n                    if (renderTitle) {\n                        outlier.selectAll('title').remove();\n                        outlier.append('title').text(function (i) {return d[i]; });\n                    }\n\n                    outlier.transition()\n                        .duration(duration)\n                        .delay(delay)\n                        .attr('cx', outlierX)\n                        .attr('cy', function (i) { return x1(d[i]); })\n                        .style('opacity', 0.6);\n\n                    outlier.exit().transition()\n                        .duration(duration)\n                        .delay(delay)\n                        .attr('cy', 0) //function (i) { return x1(d[i]); })\n                        .style('opacity', 1e-6)\n                        .remove();\n                }\n\n                // Update Values\n                if (renderDataPoints) {\n                    var point = g.selectAll('circle.data')\n                        .data(pointIndices);\n\n                    point.enter().insert('circle', 'text')\n                        .attr('class', 'data')\n                        .attr('r', dataRadius)\n                        .attr('cx', function () { return Math.floor(Math.random() *\n                            (width * dataWidthPortion) +\n                            1 + ((width - (width * dataWidthPortion)) / 2)); })\n                        .attr('cy', function (i) { return x0(d[i]); })\n                        .style('opacity', 1e-6)\n                        .transition()\n                        .duration(duration)\n                        .delay(delay)\n                        .attr('cy', function (i) { return x1(d[i]); })\n                        .style('opacity', dataOpacity);\n\n                    if (renderTitle) {\n                        point.selectAll('title').remove();\n                        point.append('title').text(function (i) { return d[i]; });\n                    }\n\n                    point.transition()\n                        .duration(duration)\n                        .delay(delay)\n                        .attr('cx', function () { return Math.floor(Math.random() *\n                            (width * dataWidthPortion) +\n                            1 + ((width - (width * dataWidthPortion)) / 2)); })\n                        .attr('cy', function (i) { return x1(d[i]); })\n                        .style('opacity', dataOpacity);\n\n                    point.exit().transition()\n                        .duration(duration)\n                        .delay(delay)\n                        .attr('cy', 0)\n                        .style('opacity', 1e-6)\n                        .remove();\n                }\n\n                // Compute the tick format.\n                var format = tickFormat || x1.tickFormat(8);\n\n                // Update box ticks.\n                var boxTick = g.selectAll('text.box')\n                    .data(quartileData);\n\n                boxTick.enter().append('text')\n                    .attr('class', 'box')\n                    .attr('dy', '.3em')\n                    .attr('dx', function (d, i) { return i & 1 ? 6 : -6; })\n                    .attr('x', function (d, i) { return i & 1 ? width : 0; })\n                    .attr('y', x0)\n                    .attr('text-anchor', function (d, i) { return i & 1 ? 'start' : 'end'; })\n                    .text(format)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1);\n\n                boxTick.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .text(format)\n                    .attr('x', function (d, i) { return i & 1 ? width : 0; })\n                    .attr('y', x1);\n\n                // Update whisker ticks. These are handled separately from the box\n                // ticks because they may or may not exist, and we want don't want\n                // to join box ticks pre-transition with whisker ticks post-.\n                var whiskerTick = g.selectAll('text.whisker')\n                    .data(whiskerData || []);\n\n                whiskerTick.enter().append('text')\n                    .attr('class', 'whisker')\n                    .attr('dy', '.3em')\n                    .attr('dx', 6)\n                    .attr('x', width)\n                    .attr('y', x0)\n                    .text(format)\n                    .style('opacity', 1e-6)\n                    .transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1)\n                    .style('opacity', 1);\n\n                whiskerTick.transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .text(format)\n                    .attr('x', width)\n                    .attr('y', x1)\n                    .style('opacity', 1);\n\n                whiskerTick.exit().transition()\n                    .duration(duration)\n                    .delay(delay)\n                    .attr('y', x1)\n                    .style('opacity', 1e-6)\n                    .remove();\n\n                // Remove temporary quartiles element from within data array.\n                delete d.quartiles;\n            });\n            /* jshint +W074 */\n            d3.timer.flush();\n        }\n\n        box.width = function (x) {\n            if (!arguments.length) {\n                return width;\n            }\n            width = x;\n            return box;\n        };\n\n        box.height = function (x) {\n            if (!arguments.length) {\n                return height;\n            }\n            height = x;\n            return box;\n        };\n\n        box.tickFormat = function (x) {\n            if (!arguments.length) {\n                return tickFormat;\n            }\n            tickFormat = x;\n            return box;\n        };\n\n        box.showOutliers = function (x) {\n            if (!arguments.length) {\n                return showOutliers;\n            }\n            showOutliers = x;\n            return box;\n        };\n\n        box.boldOutlier = function (x) {\n            if (!arguments.length) {\n                return boldOutlier;\n            }\n            boldOutlier = x;\n            return box;\n        };\n\n        box.renderDataPoints = function (x) {\n            if (!arguments.length) {\n                return renderDataPoints;\n            }\n            renderDataPoints = x;\n            return box;\n        };\n\n        box.renderTitle = function (x) {\n            if (!arguments.length) {\n                return renderTitle;\n            }\n            renderTitle = x;\n            return box;\n        };\n\n        box.dataOpacity = function (x) {\n            if (!arguments.length) {\n                return dataOpacity;\n            }\n            dataOpacity = x;\n            return box;\n        };\n\n        box.dataWidthPortion = function (x) {\n            if (!arguments.length) {\n                return dataWidthPortion;\n            }\n            dataWidthPortion = x;\n            return box;\n        };\n\n        box.duration = function (x) {\n            if (!arguments.length) {\n                return duration;\n            }\n            duration = x;\n            return box;\n        };\n\n        box.domain = function (x) {\n            if (!arguments.length) {\n                return domain;\n            }\n            domain = x === null ? x : d3.functor(x);\n            return box;\n        };\n\n        box.value = function (x) {\n            if (!arguments.length) {\n                return value;\n            }\n            value = x;\n            return box;\n        };\n\n        box.whiskers = function (x) {\n            if (!arguments.length) {\n                return whiskers;\n            }\n            whiskers = x;\n            return box;\n        };\n\n        box.quartiles = function (x) {\n            if (!arguments.length) {\n                return quartiles;\n            }\n            quartiles = x;\n            return box;\n        };\n\n        return box;\n    };\n\n    function boxWhiskers (d) {\n        return [0, d.length - 1];\n    }\n\n    function boxQuartiles (d) {\n        return [\n            d3.quantile(d, 0.25),\n            d3.quantile(d, 0.5),\n            d3.quantile(d, 0.75)\n        ];\n    }\n\n})();\n\n","\n/**\n * A box plot is a chart that depicts numerical data via their quartile ranges.\n *\n * Examples:\n * - {@link http://dc-js.github.io/dc.js/examples/box-plot-time.html Box plot time example}\n * - {@link http://dc-js.github.io/dc.js/examples/box-plot.html Box plot example}\n * @class boxPlot\n * @memberof dc\n * @mixes dc.coordinateGridMixin\n * @example\n * // create a box plot under #chart-container1 element using the default global chart group\n * var boxPlot1 = dc.boxPlot('#chart-container1');\n * // create a box plot under #chart-container2 element using chart group A\n * var boxPlot2 = dc.boxPlot('#chart-container2', 'chartGroupA');\n * @param {String|node|d3.selection} parent - Any valid\n * {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Selections.md#selecting-elements d3 single selector} specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this chart instance should be placed in.\n * Interaction with a chart will only trigger events and redraws within the chart's group.\n * @returns {dc.boxPlot}\n */\ndc.boxPlot = function (parent, chartGroup) {\n    var _chart = dc.coordinateGridMixin({});\n\n    // Returns a function to compute the interquartile range.\n    function DEFAULT_WHISKERS_IQR (k) {\n        return function (d) {\n            var q1 = d.quartiles[0],\n                q3 = d.quartiles[2],\n                iqr = (q3 - q1) * k,\n                i = -1,\n                j = d.length;\n            do { ++i; } while (d[i] < q1 - iqr);\n            do { --j; } while (d[j] > q3 + iqr);\n            return [i, j];\n        };\n    }\n\n    var _whiskerIqrFactor = 1.5;\n    var _whiskersIqr = DEFAULT_WHISKERS_IQR;\n    var _whiskers = _whiskersIqr(_whiskerIqrFactor);\n\n    var _box = d3.box();\n    var _tickFormat = null;\n    var _renderDataPoints = false;\n    var _dataOpacity = 0.3;\n    var _dataWidthPortion = 0.8;\n    var _showOutliers = true;\n    var _boldOutlier = false;\n\n    // Used in yAxisMin and yAxisMax to add padding in pixel coordinates\n    // so the min and max data points/whiskers are within the chart\n    var _yRangePadding = 8;\n\n    var _boxWidth = function (innerChartWidth, xUnits) {\n        if (_chart.isOrdinal()) {\n            return _chart.x().rangeBand();\n        } else {\n            return innerChartWidth / (1 + _chart.boxPadding()) / xUnits;\n        }\n    };\n\n    // default to ordinal\n    _chart.x(d3.scale.ordinal());\n    _chart.xUnits(dc.units.ordinal);\n\n    // valueAccessor should return an array of values that can be coerced into numbers\n    // or if data is overloaded for a static array of arrays, it should be `Number`.\n    // Empty arrays are not included.\n    _chart.data(function (group) {\n        return group.all().map(function (d) {\n            d.map = function (accessor) { return accessor.call(d, d); };\n            return d;\n        }).filter(function (d) {\n            var values = _chart.valueAccessor()(d);\n            return values.length !== 0;\n        });\n    });\n\n    /**\n     * Get or set the spacing between boxes as a fraction of box size. Valid values are within 0-1.\n     * See the {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3 docs}\n     * for a visual description of how the padding is applied.\n     * @method boxPadding\n     * @memberof dc.boxPlot\n     * @instance\n     * @see {@link https://github.com/d3/d3-3.x-api-reference/blob/master/Ordinal-Scales.md#ordinal_rangeBands d3.scale.ordinal.rangeBands}\n     * @param {Number} [padding=0.8]\n     * @returns {Number|dc.boxPlot}\n     */\n    _chart.boxPadding = _chart._rangeBandPadding;\n    _chart.boxPadding(0.8);\n\n    /**\n     * Get or set the outer padding on an ordinal box chart. This setting has no effect on non-ordinal charts\n     * or on charts with a custom {@link dc.boxPlot#boxWidth .boxWidth}. Will pad the width by\n     * `padding * barWidth` on each side of the chart.\n     * @method outerPadding\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Number} [padding=0.5]\n     * @returns {Number|dc.boxPlot}\n     */\n    _chart.outerPadding = _chart._outerRangeBandPadding;\n    _chart.outerPadding(0.5);\n\n    /**\n     * Get or set the numerical width of the boxplot box. The width may also be a function taking as\n     * parameters the chart width excluding the right and left margins, as well as the number of x\n     * units.\n     * @example\n     * // Using numerical parameter\n     * chart.boxWidth(10);\n     * // Using function\n     * chart.boxWidth((innerChartWidth, xUnits) { ... });\n     * @method boxWidth\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Number|Function} [boxWidth=0.5]\n     * @returns {Number|Function|dc.boxPlot}\n     */\n    _chart.boxWidth = function (boxWidth) {\n        if (!arguments.length) {\n            return _boxWidth;\n        }\n        _boxWidth = d3.functor(boxWidth);\n        return _chart;\n    };\n\n    var boxTransform = function (d, i) {\n        var xOffset = _chart.x()(_chart.keyAccessor()(d, i));\n        return 'translate(' + xOffset + ', 0)';\n    };\n\n    _chart._preprocessData = function () {\n        if (_chart.elasticX()) {\n            _chart.x().domain([]);\n        }\n    };\n\n    _chart.plotData = function () {\n        var _calculatedBoxWidth = _boxWidth(_chart.effectiveWidth(), _chart.xUnitCount());\n\n        _box.whiskers(_whiskers)\n            .width(_calculatedBoxWidth)\n            .height(_chart.effectiveHeight())\n            .value(_chart.valueAccessor())\n            .domain(_chart.y().domain())\n            .duration(_chart.transitionDuration())\n            .tickFormat(_tickFormat)\n            .renderDataPoints(_renderDataPoints)\n            .dataOpacity(_dataOpacity)\n            .dataWidthPortion(_dataWidthPortion)\n            .renderTitle(_chart.renderTitle())\n            .showOutliers(_showOutliers)\n            .boldOutlier(_boldOutlier);\n\n        var boxesG = _chart.chartBodyG().selectAll('g.box').data(_chart.data(), _chart.keyAccessor());\n\n        renderBoxes(boxesG);\n        updateBoxes(boxesG);\n        removeBoxes(boxesG);\n\n        _chart.fadeDeselectedArea();\n    };\n\n    function renderBoxes (boxesG) {\n        var boxesGEnter = boxesG.enter().append('g');\n\n        boxesGEnter\n            .attr('class', 'box')\n            .attr('transform', boxTransform)\n            .call(_box)\n            .on('click', function (d) {\n                _chart.filter(_chart.keyAccessor()(d));\n                _chart.redrawGroup();\n            });\n    }\n\n    function updateBoxes (boxesG) {\n        dc.transition(boxesG, _chart.transitionDuration(), _chart.transitionDelay())\n            .attr('transform', boxTransform)\n            .call(_box)\n            .each(function (d) {\n                var color = _chart.getColor(d, 0);\n                d3.select(this).select('rect.box').attr('fill', color);\n                d3.select(this).selectAll('circle.data').attr('fill', color);\n            });\n    }\n\n    function removeBoxes (boxesG) {\n        boxesG.exit().remove().call(_box);\n    }\n\n    function minDataValue () {\n        return d3.min(_chart.data(), function (e) {\n            return d3.min(_chart.valueAccessor()(e));\n        });\n    }\n\n    function maxDataValue () {\n        return d3.max(_chart.data(), function (e) {\n            return d3.max(_chart.valueAccessor()(e));\n        });\n    }\n\n    function yAxisRangeRatio () {\n        return ((maxDataValue() - minDataValue()) / _chart.effectiveHeight());\n    }\n\n    _chart.fadeDeselectedArea = function (brushSelection) {\n        if (_chart.hasFilter()) {\n            if (_chart.isOrdinal()) {\n                _chart.g().selectAll('g.box').each(function (d) {\n                    if (_chart.isSelectedNode(d)) {\n                        _chart.highlightSelected(this);\n                    } else {\n                        _chart.fadeDeselected(this);\n                    }\n                });\n            } else {\n                if (!(_chart.brushOn() || _chart.parentBrushOn())) {\n                    return;\n                }\n                var start = brushSelection[0];\n                var end = brushSelection[1];\n                var keyAccessor = _chart.keyAccessor();\n                _chart.g().selectAll('g.box').each(function (d) {\n                    var key = keyAccessor(d);\n                    if (key < start || key >= end) {\n                        _chart.fadeDeselected(this);\n                    } else {\n                        _chart.highlightSelected(this);\n                    }\n                });\n            }\n        } else {\n            _chart.g().selectAll('g.box').each(function () {\n                _chart.resetHighlight(this);\n            });\n        }\n    };\n\n    _chart.isSelectedNode = function (d) {\n        return _chart.hasFilter(_chart.keyAccessor()(d));\n    };\n\n    _chart.yAxisMin = function () {\n        var padding = _yRangePadding * yAxisRangeRatio();\n        return dc.utils.subtract(minDataValue() - padding, _chart.yAxisPadding());\n    };\n\n    _chart.yAxisMax = function () {\n        var padding = _yRangePadding * yAxisRangeRatio();\n        return dc.utils.add(maxDataValue() + padding, _chart.yAxisPadding());\n    };\n\n    /**\n     * Get or set the numerical format of the boxplot median, whiskers and quartile labels. Defaults\n     * to integer formatting.\n     * @example\n     * // format ticks to 2 decimal places\n     * chart.tickFormat(d3.format('.2f'));\n     * @method tickFormat\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Function} [tickFormat]\n     * @returns {Number|Function|dc.boxPlot}\n     */\n    _chart.tickFormat = function (tickFormat) {\n        if (!arguments.length) {\n            return _tickFormat;\n        }\n        _tickFormat = tickFormat;\n        return _chart;\n    };\n\n    /**\n     * Get or set the amount of padding to add, in pixel coordinates, to the top and\n     * bottom of the chart to accommodate box/whisker labels.\n     * @example\n     * // allow more space for a bigger whisker font\n     * chart.yRangePadding(12);\n     * @method yRangePadding\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Function} [yRangePadding = 8]\n     * @returns {Number|Function|dc.boxPlot}\n     */\n    _chart.yRangePadding = function (yRangePadding) {\n        if (!arguments.length) {\n            return _yRangePadding;\n        }\n        _yRangePadding = yRangePadding;\n        return _chart;\n    };\n\n    /**\n     * Get or set whether individual data points will be rendered.\n     * @example\n     * // Enable rendering of individual data points\n     * chart.renderDataPoints(true);\n     * @method renderDataPoints\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Boolean} [show=false]\n     * @returns {Boolean|dc.boxPlot}\n     */\n    _chart.renderDataPoints = function (show) {\n        if (!arguments.length) {\n            return _renderDataPoints;\n        }\n        _renderDataPoints = show;\n        return _chart;\n    };\n\n    /**\n     * Get or set the opacity when rendering data.\n     * @example\n     * // If individual data points are rendered increase the opacity.\n     * chart.dataOpacity(0.7);\n     * @method dataOpacity\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Number} [opacity=0.3]\n     * @returns {Number|dc.boxPlot}\n     */\n    _chart.dataOpacity = function (opacity) {\n        if (!arguments.length) {\n            return _dataOpacity;\n        }\n        _dataOpacity = opacity;\n        return _chart;\n    };\n\n    /**\n     * Get or set the portion of the width of the box to show data points.\n     * @example\n     * // If individual data points are rendered increase the data box.\n     * chart.dataWidthPortion(0.9);\n     * @method dataWidthPortion\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Number} [percentage=0.8]\n     * @returns {Number|dc.boxPlot}\n     */\n    _chart.dataWidthPortion = function (percentage) {\n        if (!arguments.length) {\n            return _dataWidthPortion;\n        }\n        _dataWidthPortion = percentage;\n        return _chart;\n    };\n\n    /**\n     * Get or set whether outliers will be rendered.\n     * @example\n     * // Disable rendering of outliers\n     * chart.showOutliers(false);\n     * @method showOutliers\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Boolean} [show=true]\n     * @returns {Boolean|dc.boxPlot}\n     */\n    _chart.showOutliers = function (show) {\n        if (!arguments.length) {\n            return _showOutliers;\n        }\n        _showOutliers = show;\n        return _chart;\n    };\n\n    /**\n     * Get or set whether outliers will be drawn bold.\n     * @example\n     * // If outliers are rendered display as bold\n     * chart.boldOutlier(true);\n     * @method boldOutlier\n     * @memberof dc.boxPlot\n     * @instance\n     * @param {Boolean} [show=false]\n     * @returns {Boolean|dc.boxPlot}\n     */\n    _chart.boldOutlier = function (show) {\n        if (!arguments.length) {\n            return _boldOutlier;\n        }\n        _boldOutlier = show;\n        return _chart;\n    };\n\n    return _chart.anchor(parent, chartGroup);\n};\n\n","/**\n * The select menu is a simple widget designed to filter a dimension by selecting an option from\n * an HTML `<select/>` menu. The menu can be optionally turned into a multiselect.\n * @class selectMenu\n * @memberof dc\n * @mixes dc.baseMixin\n * @example\n * // create a select menu under #select-container using the default global chart group\n * var select = dc.selectMenu('#select-container')\n *                .dimension(states)\n *                .group(stateGroup);\n * // the option text can be set via the title() function\n * // by default the option text is '`key`: `value`'\n * select.title(function (d){\n *     return 'STATE: ' + d.key;\n * })\n * @param {String|node|d3.selection|dc.compositeChart} parent - Any valid\n * [d3 single selector](https://github.com/mbostock/d3/wiki/Selections#selecting-elements) specifying\n * a dom block element such as a div; or a dom element or d3 selection.\n * @param {String} [chartGroup] - The name of the chart group this widget should be placed in.\n * Interaction with the widget will only trigger events and redraws within its group.\n * @returns {selectMenu}\n **/\ndc.selectMenu = function (parent, chartGroup) {\n    var SELECT_CSS_CLASS = 'dc-select-menu';\n    var OPTION_CSS_CLASS = 'dc-select-option';\n\n    var _chart = dc.baseMixin({});\n\n    var _select;\n    var _promptText = 'Select all';\n    var _multiple = false;\n    var _promptValue = null;\n    var _numberVisible = null;\n    var _order = function (a, b) {\n        return _chart.keyAccessor()(a) > _chart.keyAccessor()(b) ?\n             1 : _chart.keyAccessor()(b) > _chart.keyAccessor()(a) ?\n            -1 : 0;\n    };\n\n    var _filterDisplayed = function (d) {\n        return _chart.valueAccessor()(d) > 0;\n    };\n\n    _chart.data(function (group) {\n        return group.all().filter(_filterDisplayed);\n    });\n\n    _chart._doRender = function () {\n        _chart.select('select').remove();\n        _select = _chart.root().append('select')\n                        .classed(SELECT_CSS_CLASS, true);\n        _select.append('option').text(_promptText).attr('value', '');\n\n        _chart._doRedraw();\n        return _chart;\n    };\n    // Fixing IE 11 crash when redrawing the chart\n    // see here for list of IE user Agents :\n    // http://www.useragentstring.com/pages/useragentstring.php?name=Internet+Explorer\n    var ua = window.navigator.userAgent;\n    // test for IE 11 but not a lower version (which contains MSIE in UA)\n    if (ua.indexOf('Trident/') > 0 && ua.indexOf('MSIE') === -1) {\n        _chart.redraw = _chart.render;\n    }\n\n    _chart._doRedraw = function () {\n        setAttributes();\n        renderOptions();\n        // select the option(s) corresponding to current filter(s)\n        if (_chart.hasFilter() && _multiple) {\n            _select.selectAll('option')\n                .property('selected', function (d) {\n                    return typeof d !== 'undefined' && _chart.filters().indexOf(String(_chart.keyAccessor()(d))) >= 0;\n                });\n        } else if (_chart.hasFilter()) {\n            _select.property('value', _chart.filter());\n        } else {\n            _select.property('value', '');\n        }\n        return _chart;\n    };\n\n    function renderOptions () {\n        var options = _select.selectAll('option.' + OPTION_CSS_CLASS)\n          .data(_chart.data(), function (d) { return _chart.keyAccessor()(d); });\n\n        options.enter()\n              .append('option')\n              .classed(OPTION_CSS_CLASS, true)\n              .attr('value', function (d) { return _chart.keyAccessor()(d); });\n\n        options.text(_chart.title());\n        options.exit().remove();\n        _select.selectAll('option.' + OPTION_CSS_CLASS).sort(_order);\n\n        _select.on('change', onChange);\n        return options;\n    }\n\n    function onChange (d, i) {\n        var values;\n        var target = d3.event.target;\n        if (target.selectedOptions) {\n            var selectedOptions = Array.prototype.slice.call(target.selectedOptions);\n            values = selectedOptions.map(function (d) {\n                return d.value;\n            });\n        } else { // IE and other browsers do not support selectedOptions\n            // adapted from this polyfill: https://gist.github.com/brettz9/4212217\n            var options = [].slice.call(d3.event.target.options);\n            values = options.filter(function (option) {\n                return option.selected;\n            }).map(function (option) {\n                return option.value;\n            });\n        }\n        // console.log(values);\n        // check if only prompt option is selected\n        if (values.length === 1 && values[0] === '') {\n            values = _promptValue || null;\n        } else if (!_multiple && values.length === 1) {\n            values = values[0];\n        }\n        _chart.onChange(values);\n    }\n\n    _chart.onChange = function (val) {\n        if (val && _multiple) {\n            _chart.replaceFilter([val]);\n        } else if (val) {\n            _chart.replaceFilter(val);\n        } else {\n            _chart.filterAll();\n        }\n        dc.events.trigger(function () {\n            _chart.redrawGroup();\n        });\n    };\n\n    function setAttributes () {\n        if (_multiple) {\n            _select.attr('multiple', true);\n        } else {\n            _select.attr('multiple', null);\n        }\n        if (_numberVisible !== null) {\n            _select.attr('size', _numberVisible);\n        } else {\n            _select.attr('size', null);\n        }\n    }\n\n    /**\n     * Get or set the function that controls the ordering of option tags in the\n     * select menu. By default options are ordered by the group key in ascending\n     * order.\n     * @name order\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {Function} [order]\n     * @example\n     * // order by the group's value\n     * chart.order(function (a,b) {\n     *     return a.value > b.value ? 1 : b.value > a.value ? -1 : 0;\n     * });\n     **/\n    _chart.order = function (order) {\n        if (!arguments.length) {\n            return _order;\n        }\n        _order = order;\n        return _chart;\n    };\n\n    /**\n     * Get or set the text displayed in the options used to prompt selection.\n     * @name promptText\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {String} [promptText='Select all']\n     * @example\n     * chart.promptText('All states');\n     **/\n    _chart.promptText = function (_) {\n        if (!arguments.length) {\n            return _promptText;\n        }\n        _promptText = _;\n        return _chart;\n    };\n\n    /**\n     * Get or set the function that filters option tags prior to display. By default options\n     * with a value of < 1 are not displayed.\n     * @name filterDisplayed\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {function} [filterDisplayed]\n     * @example\n     * // display all options override the `filterDisplayed` function:\n     * chart.filterDisplayed(function () {\n     *     return true;\n     * });\n     **/\n    _chart.filterDisplayed = function (filterDisplayed) {\n        if (!arguments.length) {\n            return _filterDisplayed;\n        }\n        _filterDisplayed = filterDisplayed;\n        return _chart;\n    };\n\n    /**\n     * Controls the type of select menu. Setting it to true converts the underlying\n     * HTML tag into a multiple select.\n     * @name multiple\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {boolean} [multiple=false]\n     * @example\n     * chart.multiple(true);\n     **/\n    _chart.multiple = function (multiple) {\n        if (!arguments.length) {\n            return _multiple;\n        }\n        _multiple = multiple;\n\n        return _chart;\n    };\n\n    /**\n     * Controls the default value to be used for\n     * [dimension.filter](https://github.com/crossfilter/crossfilter/wiki/API-Reference#dimension_filter)\n     * when only the prompt value is selected. If `null` (the default), no filtering will occur when\n     * just the prompt is selected.\n     * @name promptValue\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {?*} [promptValue=null]\n     **/\n    _chart.promptValue = function (promptValue) {\n        if (!arguments.length) {\n            return _promptValue;\n        }\n        _promptValue = promptValue;\n\n        return _chart;\n    };\n\n    /**\n     * Controls the number of items to show in the select menu, when `.multiple()` is true. This\n     * controls the [`size` attribute](https://developer.mozilla.org/en-US/docs/Web/HTML/Element/select#Attributes) of\n     * the `select` element. If `null` (the default), uses the browser's default height.\n     * @name numberItems\n     * @memberof dc.selectMenu\n     * @instance\n     * @param {?number} [numberVisible=null]\n     * @example\n     * chart.numberVisible(10);\n     **/\n    _chart.numberVisible = function (numberVisible) {\n        if (!arguments.length) {\n            return _numberVisible;\n        }\n        _numberVisible = numberVisible;\n\n        return _chart;\n    };\n\n    _chart.size = dc.logger.deprecate(_chart.numberVisible, 'selectMenu.size is ambiguous - use numberVisible instead');\n\n    return _chart.anchor(parent, chartGroup);\n};\n","// Renamed functions\n\ndc.abstractBubbleChart = dc.bubbleMixin;\ndc.baseChart = dc.baseMixin;\ndc.capped = dc.capMixin;\ndc.colorChart = dc.colorMixin;\ndc.coordinateGridChart = dc.coordinateGridMixin;\ndc.marginable = dc.marginMixin;\ndc.stackableChart = dc.stackMixin;\n\n// Expose d3 and crossfilter, so that clients in browserify\n// case can obtain them if they need them.\ndc.d3 = d3;\ndc.crossfilter = crossfilter;\n\nreturn dc;}\n    if(typeof define === \"function\" && define.amd) {\n        define([\"d3\", \"crossfilter2\"], _dc);\n    } else if(typeof module === \"object\" && module.exports) {\n        var _d3 = require('d3');\n        var _crossfilter = require('crossfilter2');\n        // When using npm + browserify, 'crossfilter' is a function,\n        // since package.json specifies index.js as main function, and it\n        // does special handling. When using bower + browserify,\n        // there's no main in bower.json (in fact, there's no bower.json),\n        // so we need to fix it.\n        if (typeof _crossfilter !== \"function\") {\n            _crossfilter = _crossfilter.crossfilter;\n        }\n        module.exports = _dc(_d3, _crossfilter);\n    } else {\n        this.dc = _dc(d3, crossfilter);\n    }\n}\n)();\n"],"mappings":"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GAAG6B,UAAU;QACxB,OAAOppB,MAAM;MACjB;;MAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIA,MAAM,CAACqpB,QAAQ,GAAG,UAAUA,QAAQ,EAAE;QAClC,IAAG,CAAE7uB,SAAS,CAAC1D,MAAM,EAAE;UACnB,OAAO0wB,SAAS;QACpB;QACAA,SAAS,GAAG6B,QAAQ;QACpB,OAAOrpB,MAAM;MACjB;;MAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIA,MAAM,CAACspB,OAAO,GAAG,UAAUA,OAAO,EAAE;QAChC,IAAG,CAAE9uB,SAAS,CAAC1D,MAAM,EAAE;UACnB,OAAOqwB,QAAQ;QACnB;QACAA,QAAQ,GAAGmC,OAAO;QAClB,OAAOtpB,MAAM;MACjB;;MAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIA,MAAM,CAACupB,MAAM,GAAG,UAAUA,MAAM,EAAE;QAC9B,IAAG,CAAE/uB,SAAS,CAAC1D,MAAM,EAAE;UACnB,OAAOswB,OAAO;QAClB;QACAA,OAAO,GAAGmC,MAAM;QAChB,OAAOvpB,MAAM;MACjB;;MAEA;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;MACIA,MAAM,CAACkpB,KAAK,GAAG,UAAUA,KAAK,EAAE;QAC5B,IAAG,CAAE1uB,SAAS,CAAC1D,MAAM,EAAE;UACnB,OAAOuwB,MAAM;QACjB;Q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"},"metadata":{},"sourceType":"script","externalDependencies":[]}