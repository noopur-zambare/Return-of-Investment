{"ast":null,"code":"import identity from './identity';\nfunction bisect_by(f) {\n  // Locate the insertion point for x in a to maintain sorted order. The\n  // arguments lo and hi may be used to specify a subset of the array which\n  // should be considered; by default the entire array is used. If x is already\n  // present in a, the insertion point will be before (to the left of) any\n  // existing entries. The return value is suitable for use as the first\n  // argument to `array.splice` assuming that a is already sorted.\n  //\n  // The returned insertion point i partitions the array a into two halves so\n  // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\n  // a[i:hi] for the right side.\n  function bisectLeft(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (f(a[mid]) < x) lo = mid + 1;else hi = mid;\n    }\n    return lo;\n  }\n\n  // Similar to bisectLeft, but returns an insertion point which comes after (to\n  // the right of) any existing entries of x in a.\n  //\n  // The returned insertion point i partitions the array into two halves so that\n  // all v <= x for v in a[lo:i] for the left side and all v > x for v in\n  // a[i:hi] for the right side.\n  function bisectRight(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (x < f(a[mid])) hi = mid;else lo = mid + 1;\n    }\n    return lo;\n  }\n  bisectRight.right = bisectRight;\n  bisectRight.left = bisectLeft;\n  return bisectRight;\n}\nconst bisect = bisect_by(identity);\nbisect.by = bisect_by; // assign the raw function to the export as well\n\nexport default bisect;","map":{"version":3,"names":["identity","bisect_by","f","bisectLeft","a","x","lo","hi","mid","bisectRight","right","left","bisect","by"],"sources":["/Users/noopurnishikantzambare/Downloads/ROI Website/client/node_modules/crossfilter2/src/bisect.js"],"sourcesContent":["import identity from './identity';\n\nfunction bisect_by(f) {\n\n  // Locate the insertion point for x in a to maintain sorted order. The\n  // arguments lo and hi may be used to specify a subset of the array which\n  // should be considered; by default the entire array is used. If x is already\n  // present in a, the insertion point will be before (to the left of) any\n  // existing entries. The return value is suitable for use as the first\n  // argument to `array.splice` assuming that a is already sorted.\n  //\n  // The returned insertion point i partitions the array a into two halves so\n  // that all v < x for v in a[lo:i] for the left side and all v >= x for v in\n  // a[i:hi] for the right side.\n  function bisectLeft(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (f(a[mid]) < x) lo = mid + 1;\n      else hi = mid;\n    }\n    return lo;\n  }\n\n  // Similar to bisectLeft, but returns an insertion point which comes after (to\n  // the right of) any existing entries of x in a.\n  //\n  // The returned insertion point i partitions the array into two halves so that\n  // all v <= x for v in a[lo:i] for the left side and all v > x for v in\n  // a[i:hi] for the right side.\n  function bisectRight(a, x, lo, hi) {\n    while (lo < hi) {\n      var mid = lo + hi >>> 1;\n      if (x < f(a[mid])) hi = mid;\n      else lo = mid + 1;\n    }\n    return lo;\n  }\n\n  bisectRight.right = bisectRight;\n  bisectRight.left = bisectLeft;\n  return bisectRight;\n}\n\nconst bisect = bisect_by(identity);\nbisect.by = bisect_by; // assign the raw function to the export as well\n\nexport default bisect;\n\n"],"mappings":"AAAA,OAAOA,QAAQ,MAAM,YAAY;AAEjC,SAASC,SAASA,CAACC,CAAC,EAAE;EAEpB;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA,SAASC,UAAUA,CAACC,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAE;IAChC,OAAOD,EAAE,GAAGC,EAAE,EAAE;MACd,IAAIC,GAAG,GAAGF,EAAE,GAAGC,EAAE,KAAK,CAAC;MACvB,IAAIL,CAAC,CAACE,CAAC,CAACI,GAAG,CAAC,CAAC,GAAGH,CAAC,EAAEC,EAAE,GAAGE,GAAG,GAAG,CAAC,CAAC,KAC3BD,EAAE,GAAGC,GAAG;IACf;IACA,OAAOF,EAAE;EACX;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA,SAASG,WAAWA,CAACL,CAAC,EAAEC,CAAC,EAAEC,EAAE,EAAEC,EAAE,EAAE;IACjC,OAAOD,EAAE,GAAGC,EAAE,EAAE;MACd,IAAIC,GAAG,GAAGF,EAAE,GAAGC,EAAE,KAAK,CAAC;MACvB,IAAIF,CAAC,GAAGH,CAAC,CAACE,CAAC,CAACI,GAAG,CAAC,CAAC,EAAED,EAAE,GAAGC,GAAG,CAAC,KACvBF,EAAE,GAAGE,GAAG,GAAG,CAAC;IACnB;IACA,OAAOF,EAAE;EACX;EAEAG,WAAW,CAACC,KAAK,GAAGD,WAAW;EAC/BA,WAAW,CAACE,IAAI,GAAGR,UAAU;EAC7B,OAAOM,WAAW;AACpB;AAEA,MAAMG,MAAM,GAAGX,SAAS,CAACD,QAAQ,CAAC;AAClCY,MAAM,CAACC,EAAE,GAAGZ,SAAS,CAAC,CAAC;;AAEvB,eAAeW,MAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}