{"ast":null,"code":"var _jsxFileName = \"/Users/noopurnishikantzambare/Downloads/ROI Website/client/src/components/Results.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Results = () => {\n  _s();\n  const [dataSets, setDataSets] = useState([]);\n  const chartRef = useRef(null);\n  const handleClick = async () => {\n    try {\n      const response = await axios.get('/api/get_data');\n      const responseData = response.data;\n\n      // Check if the response data is an array of arrays\n      if (Array.isArray(responseData) && responseData.length > 0) {\n        // Update the data sets\n        setDataSets(responseData);\n\n        // Redraw the chart\n        chartRef.current.chartInstance.update();\n      } else {\n        console.log('Invalid data format');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n  const chartOptions = {\n    // Chart options here\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"grid-dropdown\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleClick,\n      children: \"Load Data\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), dataSets && dataSets.length > 0 ? /*#__PURE__*/_jsxDEV(Line, {\n      ref: chartRef,\n      data: {\n        datasets: dataSets.map((dataSet, index) => ({\n          label: `Data Set ${index + 1}`,\n          data: dataSet\n        }))\n      },\n      options: chartOptions\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No data available\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(Results, \"+5yGgUioAaQJErEuHsAKvmICJi8=\");\n_c = Results;\nexport default Results;\nvar _c;\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"names":["React","useState","useRef","axios","Line","jsxDEV","_jsxDEV","Results","_s","dataSets","setDataSets","chartRef","handleClick","response","get","responseData","data","Array","isArray","length","current","chartInstance","update","console","log","error","chartOptions","className","children","onClick","fileName","_jsxFileName","lineNumber","columnNumber","ref","datasets","map","dataSet","index","label","options","_c","$RefreshReg$"],"sources":["/Users/noopurnishikantzambare/Downloads/ROI Website/client/src/components/Results.js"],"sourcesContent":["import React, { useState, useRef } from 'react';\nimport axios from 'axios';\nimport { Line } from 'react-chartjs-2';\n\nconst Results = () => {\n  const [dataSets, setDataSets] = useState([]);\n  const chartRef = useRef(null);\n\n  const handleClick = async () => {\n    try {\n      const response = await axios.get('/api/get_data');\n      const responseData = response.data;\n\n      // Check if the response data is an array of arrays\n      if (Array.isArray(responseData) && responseData.length > 0) {\n        // Update the data sets\n        setDataSets(responseData);\n\n        // Redraw the chart\n        chartRef.current.chartInstance.update();\n      } else {\n        console.log('Invalid data format');\n      }\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  const chartOptions = {\n    // Chart options here\n  };\n\n  return (\n    <div className=\"grid-dropdown\">\n      <button onClick={handleClick}>Load Data</button>\n      {dataSets && dataSets.length > 0 ? (\n        <Line\n          ref={chartRef}\n          data={{\n            datasets: dataSets.map((dataSet, index) => ({\n              label: `Data Set ${index + 1}`,\n              data: dataSet,\n            })),\n          }}\n          options={chartOptions}\n        />\n      ) : (\n        <p>No data available</p>\n      )}\n    </div>\n  );\n};\n\nexport default Results;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,QAAQ,OAAO;AAC/C,OAAOC,KAAK,MAAM,OAAO;AACzB,SAASC,IAAI,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEvC,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACpB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAMU,QAAQ,GAAGT,MAAM,CAAC,IAAI,CAAC;EAE7B,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAAY;IAC9B,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMV,KAAK,CAACW,GAAG,CAAC,eAAe,CAAC;MACjD,MAAMC,YAAY,GAAGF,QAAQ,CAACG,IAAI;;MAElC;MACA,IAAIC,KAAK,CAACC,OAAO,CAACH,YAAY,CAAC,IAAIA,YAAY,CAACI,MAAM,GAAG,CAAC,EAAE;QAC1D;QACAT,WAAW,CAACK,YAAY,CAAC;;QAEzB;QACAJ,QAAQ,CAACS,OAAO,CAACC,aAAa,CAACC,MAAM,CAAC,CAAC;MACzC,CAAC,MAAM;QACLC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;MACpC;IACF,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdF,OAAO,CAACC,GAAG,CAACC,KAAK,CAAC;IACpB;EACF,CAAC;EAED,MAAMC,YAAY,GAAG;IACnB;EAAA,CACD;EAED,oBACEpB,OAAA;IAAKqB,SAAS,EAAC,eAAe;IAAAC,QAAA,gBAC5BtB,OAAA;MAAQuB,OAAO,EAAEjB,WAAY;MAAAgB,QAAA,EAAC;IAAS;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,EAC/CxB,QAAQ,IAAIA,QAAQ,CAACU,MAAM,GAAG,CAAC,gBAC9Bb,OAAA,CAACF,IAAI;MACH8B,GAAG,EAAEvB,QAAS;MACdK,IAAI,EAAE;QACJmB,QAAQ,EAAE1B,QAAQ,CAAC2B,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,MAAM;UAC1CC,KAAK,EAAG,YAAWD,KAAK,GAAG,CAAE,EAAC;UAC9BtB,IAAI,EAAEqB;QACR,CAAC,CAAC;MACJ,CAAE;MACFG,OAAO,EAAEd;IAAa;MAAAI,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvB,CAAC,gBAEF3B,OAAA;MAAAsB,QAAA,EAAG;IAAiB;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CACxB;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAACzB,EAAA,CA/CID,OAAO;AAAAkC,EAAA,GAAPlC,OAAO;AAiDb,eAAeA,OAAO;AAAC,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}