{"ast":null,"code":"var _jsxFileName = \"/Users/noopurnishikantzambare/Downloads/ROI Website/client/src/components/ChartComponent.js\",\n  _s = $RefreshSig$();\nimport Papa from 'papaparse';\nimport { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { saveAs } from 'file-saver';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Home() {\n  _s();\n  const [chartData, setChartData] = useState({\n    datasets: []\n  });\n  const [chartOptions, setChartOptions] = useState({});\n  const [labelCountData, setLabelCountData] = useState([]);\n  const [clickedLabelIndex, setClickedLabelIndex] = useState(null);\n  const [showDoubleBarGraph, setShowDoubleBarGraph] = useState(true);\n  const [trimmedData, setTrimmedData] = useState(null);\n  useEffect(() => {\n    Papa.parse('/static/data.csv', {\n      download: true,\n      header: true,\n      dynamicTyping: true,\n      delimiter: \"\",\n      complete: result => {\n        const labelCounts = {};\n        result.data.forEach(item => {\n          const label = item['req1Product'];\n          if (label) {\n            if (labelCounts[label]) {\n              labelCounts[label] += 1;\n            } else {\n              labelCounts[label] = 1;\n            }\n          }\n        });\n        setChartData({\n          labels: Object.keys(labelCounts),\n          datasets: [{\n            label: \"Count\",\n            data: Object.values(labelCounts),\n            borderColor: \"white\",\n            backgroundColor: \"#defde0\"\n          }]\n        });\n        setChartOptions({\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            title: {\n              display: true,\n              text: \"Count of req1Product Values\",\n              color: 'white'\n            }\n          },\n          scales: {\n            x: {\n              ticks: {\n                color: 'white'\n              }\n            },\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: \"Count\",\n                color: 'white'\n              },\n              ticks: {\n                color: 'white'\n              }\n            }\n          }\n        });\n      }\n    });\n  }, []);\n  const handleColumnClick = async (event, activeElements) => {\n    if (activeElements.length > 0) {\n      const labelIndex = activeElements[0].index;\n      setClickedLabelIndex(labelIndex); // Update clicked label index\n\n      const clickedLabel = chartData.labels[labelIndex];\n      if (showDoubleBarGraph) {\n        // Create a new chart for the label count from the 'prediction' column\n        const predictionLabelCounts = {};\n        await new Promise((resolve, reject) => {\n          Papa.parse('/static/data.csv', {\n            download: true,\n            header: true,\n            dynamicTyping: true,\n            delimiter: \"\",\n            complete: result => {\n              result.data.forEach(item => {\n                const prediction = item['prediction'];\n                const label = item['req1Product'];\n                if (label === clickedLabel && prediction !== undefined) {\n                  if (predictionLabelCounts[prediction]) {\n                    predictionLabelCounts[prediction] += 1;\n                  } else {\n                    predictionLabelCounts[prediction] = 1;\n                  }\n                }\n              });\n              const labelCountChartData = {\n                labels: Object.keys(predictionLabelCounts),\n                datasets: [{\n                  label: \"Count\",\n                  data: Object.values(predictionLabelCounts),\n                  borderColor: \"white\",\n                  backgroundColor: [\"#ff4040\", \"#B6E4EB\"]\n                }]\n              };\n              const labelCountChartOptions = {\n                responsive: true,\n                plugins: {\n                  legend: {\n                    position: 'top'\n                  },\n                  title: {\n                    display: true,\n                    text: `Label Count for ${clickedLabel}`,\n                    color: 'white'\n                  }\n                },\n                scales: {\n                  x: {\n                    ticks: {\n                      color: 'white'\n                    }\n                  },\n                  y: {\n                    beginAtZero: true,\n                    title: {\n                      display: true,\n                      text: \"Count\",\n                      color: 'white'\n                    },\n                    ticks: {\n                      color: 'white'\n                    }\n                  }\n                }\n              };\n              setLabelCountData(prevData => {\n                const newData = [...prevData];\n                newData[labelIndex] = {\n                  chartData: labelCountChartData,\n                  chartOptions: labelCountChartOptions\n                };\n                return newData;\n              });\n              resolve();\n            },\n            error: error => {\n              reject(error);\n            }\n          });\n        });\n      } else {\n        // Create a new chart for the count of each value of req2Product in the clicked column\n        const req2ProductCounts = {};\n        await new Promise((resolve, reject) => {\n          Papa.parse('/static/data.csv', {\n            download: true,\n            header: true,\n            dynamicTyping: true,\n            delimiter: \"\",\n            complete: result => {\n              result.data.forEach(item => {\n                const req2Product = item['req2Product'];\n                const label = item['req1Product'];\n                if (label === clickedLabel && req2Product) {\n                  if (req2ProductCounts[req2Product]) {\n                    req2ProductCounts[req2Product] += 1;\n                  } else {\n                    req2ProductCounts[req2Product] = 1;\n                  }\n                }\n              });\n              const req2ProductChartData = {\n                labels: Object.keys(req2ProductCounts),\n                datasets: [{\n                  label: \"Count\",\n                  data: Object.values(req2ProductCounts),\n                  borderColor: \"white\",\n                  backgroundColor: [\"#ff4040\", \"#B6E4EB\", \"#ffc500\"]\n                }]\n              };\n              const req2ProductChartOptions = {\n                responsive: true,\n                plugins: {\n                  legend: {\n                    position: 'top'\n                  },\n                  title: {\n                    display: true,\n                    text: `Req2Product Count for ${clickedLabel}`,\n                    color: 'white'\n                  }\n                },\n                scales: {\n                  x: {\n                    ticks: {\n                      color: 'white'\n                    }\n                  },\n                  y: {\n                    beginAtZero: true,\n                    title: {\n                      display: true,\n                      text: \"Count\",\n                      color: 'white'\n                    },\n                    ticks: {\n                      color: 'white'\n                    }\n                  }\n                }\n              };\n              setLabelCountData(prevData => {\n                const newData = [...prevData];\n                newData[labelIndex] = {\n                  chartData: req2ProductChartData,\n                  chartOptions: req2ProductChartOptions\n                };\n                return newData;\n              });\n              resolve();\n            },\n            error: error => {\n              reject(error);\n            }\n          });\n        });\n      }\n    }\n  };\n  const handleCountButtonClick = () => {\n    setShowDoubleBarGraph(!showDoubleBarGraph);\n  };\n  const handleTrimButtonClick = () => {\n    if (clickedLabelIndex !== null) {\n      const clickedLabel = chartData.labels[clickedLabelIndex];\n      const trimmedData = [];\n      Papa.parse('/static/data.csv', {\n        download: true,\n        header: true,\n        delimiter: \"\",\n        complete: result => {\n          result.data.forEach(item => {\n            const label = item['req1Product'];\n            if (label === clickedLabel) {\n              trimmedData.push(item);\n            }\n          });\n          const csv = Papa.unparse(trimmedData);\n          const csvData = new Blob([csv], {\n            type: 'text/csv'\n          });\n          const csvUrl = URL.createObjectURL(csvData);\n          const link = document.createElement('a');\n          link.href = csvUrl;\n          link.setAttribute('download', 'trimmed_data.csv');\n          link.click();\n        }\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Analysis\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 297,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"import-boxes\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 298,\n      columnNumber: 7\n    }, this), chartData ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"graph-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Bar, {\n          options: {\n            onClick: handleColumnClick,\n            ...chartOptions\n          },\n          data: chartData\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 302,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleCountButtonClick,\n          children: showDoubleBarGraph ? \"Interdependency among other products\" : \"Individual Feature Count\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 303,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: handleTrimButtonClick,\n          children: \"Trim Data\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 306,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 301,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: labelCountData.length > 0 && labelCountData[clickedLabelIndex] && /*#__PURE__*/_jsxDEV(\"div\", {\n          children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n            children: showDoubleBarGraph ? `Label Count for ${chartData.labels[clickedLabelIndex]}` : `Req2Product Count for ${chartData.labels[clickedLabelIndex]}`\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 313,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Bar, {\n            options: labelCountData[clickedLabelIndex].chartOptions,\n            data: labelCountData[clickedLabelIndex].chartData\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 312,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 310,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 300,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 327,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"style\", {\n      children: `\n        .graph-container {\n          width: 600px;\n          height: 400px;\n          margin: 0 auto;\n        }\n      `\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 296,\n    columnNumber: 5\n  }, this);\n}\n_s(Home, \"xiPc2Ekq5wP9hNpKPaqLQ21cVhU=\");\n_c = Home;\nexport default Home;\nvar _c;\n$RefreshReg$(_c, \"Home\");","map":{"version":3,"names":["Papa","useEffect","useState","Bar","saveAs","jsxDEV","_jsxDEV","Home","_s","chartData","setChartData","datasets","chartOptions","setChartOptions","labelCountData","setLabelCountData","clickedLabelIndex","setClickedLabelIndex","showDoubleBarGraph","setShowDoubleBarGraph","trimmedData","setTrimmedData","parse","download","header","dynamicTyping","delimiter","complete","result","labelCounts","data","forEach","item","label","labels","Object","keys","values","borderColor","backgroundColor","responsive","plugins","legend","position","title","display","text","color","scales","x","ticks","y","beginAtZero","handleColumnClick","event","activeElements","length","labelIndex","index","clickedLabel","predictionLabelCounts","Promise","resolve","reject","prediction","undefined","labelCountChartData","labelCountChartOptions","prevData","newData","error","req2ProductCounts","req2Product","req2ProductChartData","req2ProductChartOptions","handleCountButtonClick","handleTrimButtonClick","push","csv","unparse","csvData","Blob","type","csvUrl","URL","createObjectURL","link","document","createElement","href","setAttribute","click","children","fileName","_jsxFileName","lineNumber","columnNumber","className","options","onClick","_c","$RefreshReg$"],"sources":["/Users/noopurnishikantzambare/Downloads/ROI Website/client/src/components/ChartComponent.js"],"sourcesContent":["import Papa from 'papaparse';\nimport { useEffect, useState } from 'react';\nimport { Bar } from 'react-chartjs-2';\nimport { saveAs } from 'file-saver';\n\nfunction Home() {\n  const [chartData, setChartData] = useState({\n    datasets: []\n  });\n  const [chartOptions, setChartOptions] = useState({});\n  const [labelCountData, setLabelCountData] = useState([]);\n  const [clickedLabelIndex, setClickedLabelIndex] = useState(null);\n  const [showDoubleBarGraph, setShowDoubleBarGraph] = useState(true);\n  const [trimmedData, setTrimmedData] = useState(null);\n\n  useEffect(() => {\n    Papa.parse('/static/data.csv', {\n      download: true,\n      header: true,\n      dynamicTyping: true,\n      delimiter: \"\",\n      complete: (result) => {\n        const labelCounts = {};\n\n        result.data.forEach((item) => {\n          const label = item['req1Product'];\n\n          if (label) {\n            if (labelCounts[label]) {\n              labelCounts[label] += 1;\n            } else {\n              labelCounts[label] = 1;\n            }\n          }\n        });\n\n        setChartData({\n          labels: Object.keys(labelCounts),\n          datasets: [\n            {\n              label: \"Count\",\n              data: Object.values(labelCounts),\n              borderColor: \"white\",\n              backgroundColor: \"#defde0\"\n            }\n          ]\n        });\n\n        setChartOptions({\n          responsive: true,\n          plugins: {\n            legend: {\n              position: 'top'\n            },\n            title: {\n              display: true,\n              text: \"Count of req1Product Values\",\n              color: 'white'\n            }\n          },\n          scales: {\n            x: {\n              ticks: {\n                color: 'white'\n              }\n            },\n            y: {\n              beginAtZero: true,\n              title: {\n                display: true,\n                text: \"Count\",\n                color: 'white'\n              },\n              ticks: {\n                color: 'white'\n              }\n            }\n          }\n        });\n      }\n    });\n  }, []);\n\n  const handleColumnClick = async (event, activeElements) => {\n    if (activeElements.length > 0) {\n      const labelIndex = activeElements[0].index;\n      setClickedLabelIndex(labelIndex); // Update clicked label index\n\n      const clickedLabel = chartData.labels[labelIndex];\n\n      if (showDoubleBarGraph) {\n        // Create a new chart for the label count from the 'prediction' column\n        const predictionLabelCounts = {};\n        await new Promise((resolve, reject) => {\n          Papa.parse('/static/data.csv', {\n            download: true,\n            header: true,\n            dynamicTyping: true,\n            delimiter: \"\",\n            complete: (result) => {\n              result.data.forEach((item) => {\n                const prediction = item['prediction'];\n                const label = item['req1Product'];\n\n                if (label === clickedLabel && prediction !== undefined) {\n                  if (predictionLabelCounts[prediction]) {\n                    predictionLabelCounts[prediction] += 1;\n                  } else {\n                    predictionLabelCounts[prediction] = 1;\n                  }\n                }\n              });\n\n              const labelCountChartData = {\n                labels: Object.keys(predictionLabelCounts),\n                datasets: [\n                  {\n                    label: \"Count\",\n                    data: Object.values(predictionLabelCounts),\n                    borderColor: \"white\",\n                    backgroundColor: [\"#ff4040\", \"#B6E4EB\"]\n                  }\n                ]\n              };\n\n              const labelCountChartOptions = {\n                responsive: true,\n                plugins: {\n                  legend: {\n                    position: 'top'\n                  },\n                  title: {\n                    display: true,\n                    text: `Label Count for ${clickedLabel}`,\n                    color: 'white'\n                  }\n                },\n                scales: {\n                  x: {\n                    ticks: {\n                      color: 'white'\n                    }\n                  },\n                  y: {\n                    beginAtZero: true,\n                    title: {\n                      display: true,\n                      text: \"Count\",\n                      color: 'white'\n                    },\n                    ticks: {\n                      color: 'white'\n                    }\n                  }\n                }\n              };\n\n              setLabelCountData((prevData) => {\n                const newData = [...prevData];\n                newData[labelIndex] = {\n                  chartData: labelCountChartData,\n                  chartOptions: labelCountChartOptions\n                };\n                return newData;\n              });\n\n              resolve();\n            },\n            error: (error) => {\n              reject(error);\n            }\n          });\n        });\n      } else {\n        // Create a new chart for the count of each value of req2Product in the clicked column\n        const req2ProductCounts = {};\n        await new Promise((resolve, reject) => {\n          Papa.parse('/static/data.csv', {\n            download: true,\n            header: true,\n            dynamicTyping: true,\n            delimiter: \"\",\n            complete: (result) => {\n              result.data.forEach((item) => {\n                const req2Product = item['req2Product'];\n                const label = item['req1Product'];\n\n                if (label === clickedLabel && req2Product) {\n                  if (req2ProductCounts[req2Product]) {\n                    req2ProductCounts[req2Product] += 1;\n                  } else {\n                    req2ProductCounts[req2Product] = 1;\n                  }\n                }\n              });\n\n              const req2ProductChartData = {\n                labels: Object.keys(req2ProductCounts),\n                datasets: [\n                  {\n                    label: \"Count\",\n                    data: Object.values(req2ProductCounts),\n                    borderColor: \"white\",\n                    backgroundColor: [\"#ff4040\", \"#B6E4EB\", \"#ffc500\"]\n                  }\n                ]\n              };\n\n              const req2ProductChartOptions = {\n                responsive: true,\n                plugins: {\n                  legend: {\n                    position: 'top'\n                  },\n                  title: {\n                    display: true,\n                    text: `Req2Product Count for ${clickedLabel}`,\n                    color: 'white'\n                  }\n                },\n                scales: {\n                  x: {\n                    ticks: {\n                      color: 'white'\n                    }\n                  },\n                  y: {\n                    beginAtZero: true,\n                    title: {\n                      display: true,\n                      text: \"Count\",\n                      color: 'white'\n                    },\n                    ticks: {\n                      color: 'white'\n                    }\n                  }\n                }\n              };\n\n              setLabelCountData((prevData) => {\n                const newData = [...prevData];\n                newData[labelIndex] = {\n                  chartData: req2ProductChartData,\n                  chartOptions: req2ProductChartOptions\n                };\n                return newData;\n              });\n\n              resolve();\n            },\n            error: (error) => {\n              reject(error);\n            }\n          });\n        });\n      }\n    }\n  };\n\n  const handleCountButtonClick = () => {\n    setShowDoubleBarGraph(!showDoubleBarGraph);\n  };\n\n  const handleTrimButtonClick = () => {\n    if (clickedLabelIndex !== null) {\n      const clickedLabel = chartData.labels[clickedLabelIndex];\n      const trimmedData = [];\n\n      Papa.parse('/static/data.csv', {\n        download: true,\n        header: true,\n        delimiter: \"\",\n        complete: (result) => {\n          result.data.forEach((item) => {\n            const label = item['req1Product'];\n\n            if (label === clickedLabel) {\n              trimmedData.push(item);\n            }\n          });\n\n          const csv = Papa.unparse(trimmedData);\n          const csvData = new Blob([csv], { type: 'text/csv' });\n          const csvUrl = URL.createObjectURL(csvData);\n          const link = document.createElement('a');\n          link.href = csvUrl;\n          link.setAttribute('download', 'trimmed_data.csv');\n          link.click();\n        }\n      });\n    }\n  };\n\n  return (\n    <div>\n      <h4>Analysis</h4>\n      <div className=\"import-boxes\"></div>\n      {chartData ? (\n        <div className=\"graph-container\">\n          <div>\n            <Bar options={{ onClick: handleColumnClick, ...chartOptions }} data={chartData} />\n            <button onClick={handleCountButtonClick}>\n              {showDoubleBarGraph ? \"Interdependency among other products\" : \"Individual Feature Count\"}\n            </button>\n            <button onClick={handleTrimButtonClick}>\n              Trim Data\n            </button>\n          </div>\n          <div>\n            {labelCountData.length > 0 && labelCountData[clickedLabelIndex] && (\n              <div>\n                <h4>\n                  {showDoubleBarGraph\n                    ? `Label Count for ${chartData.labels[clickedLabelIndex]}`\n                    : `Req2Product Count for ${chartData.labels[clickedLabelIndex]}`}\n                </h4>\n                <Bar\n                  options={labelCountData[clickedLabelIndex].chartOptions}\n                  data={labelCountData[clickedLabelIndex].chartData}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      ) : (\n        <div>Loading...</div>\n      )}\n      <style>{`\n        .graph-container {\n          width: 600px;\n          height: 400px;\n          margin: 0 auto;\n        }\n      `}</style>\n    </div>\n  );\n}\n\nexport default Home;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}